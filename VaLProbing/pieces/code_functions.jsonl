{"function_name": "execute_queries", "function_define": "    pool = dummy.Pool(body.threads)\n    for query in out:\n    for item in query['results']:", "piece": "for query in out:"}
{"function_name": "test_timeout", "function_define": "    with open(self.FIFO, 'w') as f:\n    f.write('Hello universe!')\n    f.flush()", "piece": "f.write('Hello universe!')"}
{"function_name": "test_eof", "function_define": "    with open(self.FIFO, 'w') as f:\n    f.write('Hello universe!')\n    thread.start()", "piece": "f.write('Hello universe!')"}
{"function_name": "search_thread", "function_define": "    for t in forum['threads']:\n    if str(t['_id']) == id_thread:\n    for f in forum['forums']:", "piece": "if str(t['_id']) == id_thread:"}
{"function_name": "__init__", "function_define": "    self.model_name = model_name\n    self.__name__ = model_name\n    self._model = None", "piece": "self.__name__ = model_name"}
{"function_name": "__call__", "function_define": "    model = eval(self.model_name)\n    model.load_network()\n    model.download_network()", "piece": "model.load_network()"}
{"function_name": "new_game", "function_define": "    map_width = screen_width - 25\n    map_height = screen_height - 2\n    if USE_TEST_ROOM:", "piece": "map_height = screen_height - 2"}
{"function_name": "make_attributes", "function_define": "    da.attrs['name'] = 'eddymoc'\n    da.attrs['units'] = 'kg s-1'\n    da.attrs['expid'] = expid", "piece": "da.attrs['units'] = 'kg s-1'"}
{"function_name": "make_yearly_avg", "function_define": "    da = atmos.yearly_avg(ds[var])\n    if model.expid in ['piControl']:\n    da = da.mean(dim='year')", "piece": "if model.expid in ['piControl']:"}
{"function_name": "read_files", "function_define": "    print(model.filenames)\n    if model.filenames:\n    if len(model.filenames) > 1:", "piece": "if model.filenames:"}
{"function_name": "_thread_wrapper", "function_define": "    while not self.stopped.is_set():\n    item = self.queue.get_nowait()\n    except Empty:", "piece": "item = self.queue.get_nowait()"}
{"function_name": "pre_process", "function_define": "    print('analyze images')\n    if 'jpg' in Files:\n    height, width, chan = img.shape", "piece": "if 'jpg' in Files:"}
{"function_name": "rotation", "function_define": "    D = root[:, 2].cuda()\n    batch_size = root.shape[0]\n    v_t[:, 2, :] = D.cuda()", "piece": "batch_size = root.shape[0]"}
{"function_name": "parse_date_str", "function_define": "    date as a string.\n    initial_value = dt\n    if len(year_results) == 1:", "piece": "initial_value = dt"}
{"function_name": "read_json", "function_define": "    file = open(file_path, 'r')\n    data = json.load(file)\n    file.close()", "piece": "data = json.load(file)"}
{"function_name": "gen_image_params", "function_define": "    if classes:\n    for tag in classes:\n    run_list.append(tag)", "piece": "for tag in classes:"}
{"function_name": "batch_process", "function_define": "    df = pd.DataFrame()\n    for params in image_params:\n    for key in annotations:", "piece": "for params in image_params:"}
{"function_name": "update_status", "function_define": "    start_status = self.cal_status\n    end_status = self.cal_status\n    self.just_calibrated = False", "piece": "end_status = self.cal_status"}
{"function_name": "handle_cam_odom", "function_define": "    new_rpy = sanity_clip(new_rpy)\n    if self.idx == 0:\n    self.block_idx += 1", "piece": "if self.idx == 0:"}
{"function_name": "get_subtypes", "function_define": "    subtypes = []\n    for subtype in Subtype:\n    subtypes.append(subtype.value)", "piece": "for subtype in Subtype:"}
{"function_name": "get_best_anime", "function_define": "    Keyword arguments:\n    endpoint = 'top/anime'\n    if subtype is not None:", "piece": "endpoint = 'top/anime'"}
{"function_name": "alternating_sums", "function_define": "    even, odd = ([], [])\n    for i in range(len(a)):\n    if i % 2 == 0:", "piece": "for i in range(len(a)):"}
{"function_name": "_get_error_name", "function_define": "    if sqlstate in _namemap:\n    parts[-1] = 'Error'\n    parts.append('Error')", "piece": "parts[-1] = 'Error'"}
{"function_name": "_add_class", "function_define": "    if sqlstate:\n    sqlstate = ''\n    txt += 'pass'", "piece": "sqlstate = ''"}
{"function_name": "get_feats", "function_define": "    feats = []\n    res = requests.get(link)\n    res.raise_for_status()", "piece": "res = requests.get(link)"}
{"function_name": "precipitation", "function_define": "    session = Session(engine)\n    max_date = max_date[0][0]\n    all_precipitations = []", "piece": "max_date = max_date[0][0]"}
{"function_name": "stations", "function_define": "    session = Session(engine)\n    all_stations = []\n    station_dict = {}", "piece": "all_stations = []"}
{"function_name": "calc_start_temps", "function_define": "    session = Session(engine)\n    all_start_calc_temps = []\n    for result in start_temps:", "piece": "all_start_calc_temps = []"}
{"function_name": "check_path", "function_define": "    paths = glob.glob(path)\n    if len(paths) == 0:\n    if len(paths) > 1:", "piece": "if len(paths) == 0:"}
{"function_name": "summary_report", "function_define": "    status = None\n    with open(summary_file) as fh:\n    summary = csv.DictReader(fh)", "piece": "with open(summary_file) as fh:"}
{"function_name": "drc_report", "function_define": "    last_drc = None\n    drc_count = 0\n    with open(drc_file) as drc:", "piece": "drc_count = 0"}
{"function_name": "sigmaClip", "function_define": "    no more outliers found.\n    most arrays found in practice.\n    Optional Inputs:", "piece": "most arrays found in practice."}
{"function_name": "robustMean", "function_define": "    of outliers.\n    num = len(ySorted)\n    lwr = int(percent / 100.0 * num)", "piece": "num = len(ySorted)"}
{"function_name": "robustStd", "function_define": "    Taken from\n    num = len(ySorted)\n    lwr = int(percent / 100.0 * num)", "piece": "num = len(ySorted)"}
{"function_name": "subprocess_func", "function_define": "    if signum == signal.SIGXCPU:\n    raise CpuTimeoutException\n    elif signum == signal.SIGALRM:", "piece": "raise CpuTimeoutException"}
{"function_name": "forward_batch", "function_define": "    self.model.eval()\n    avg_embeds = []\n    for i in range(chunks):", "piece": "avg_embeds = []"}
{"function_name": "forward_two", "function_define": "    self.model.eval()\n    encoded_dict.to(device)\n    with torch.no_grad():", "piece": "encoded_dict.to(device)"}
{"function_name": "evaluate", "function_define": "    self.log(output.metrics)\n    self.save_state()\n    tune.report(**output.metrics)", "piece": "self.save_state()"}
{"function_name": "extract_leaves", "function_define": "    starting material\n    if children:\n    for child in children:", "piece": "if children:"}
{"function_name": "is_solved", "function_define": "    is in stock.\n    elif children:\n    for child in children:", "piece": "elif children:"}
{"function_name": "route_ranks", "function_define": "    ranks = [1]\n    ranks.append(ranks[idx - 1])\n    ranks.append(ranks[idx - 1] + 1)", "piece": "ranks.append(ranks[idx - 1])"}
{"function_name": "traverse", "function_define": "    if children:\n    for child in children:\n    traverse(child, leaves)", "piece": "for child in children:"}
{"function_name": "numberOfWays", "function_define": "    kMod = int(1000000000.0) + 7\n    for j in range(i):\n    dp[i] += dp[j] * dp[i - 1 - j]", "piece": "for j in range(i):"}
{"function_name": "_single_result", "function_define": "    new_results = {}\n    assert len(value) == 1\n    new_results[key] = value[0]", "piece": "assert len(value) == 1"}
{"function_name": "_by_fields", "function_define": "    if not values:\n    tuples = []\n    tuples.append((field, value))", "piece": "tuples = []"}
{"function_name": "pixel_shift_3d", "function_define": "    shifted_list = []\n    ch_img = np_img[ch, :, :]\n    shifted_list.append(img)", "piece": "ch_img = np_img[ch, :, :]"}
{"function_name": "convert_16_to_8", "function_define": "    info = np.iinfo(np_img.dtype)\n    data = 255 * data\n    img8 = data.astype(np.uint8)", "piece": "data = 255 * data"}
{"function_name": "check_input", "function_define": "    fs = df.file_name.tolist()\n    cs = df.ch_order.tolist()\n    print(fs, cs, shs)", "piece": "cs = df.ch_order.tolist()"}
{"function_name": "process_images", "function_define": "    print(df)\n    fs = df.file_name.tolist()\n    for i in range(len(fs)):", "piece": "fs = df.file_name.tolist()"}
{"function_name": "_buffer_proxy", "function_define": "    is_buffer = True\n    except AttributeError:\n    is_buffer = False", "piece": "except AttributeError:"}
{"function_name": "_read_knet_hdr", "function_define": "    hdrdict = {'knet': {}}\n    dt = flds[2] + ' ' + flds[3]\n    dt -= 9 * 3600.0", "piece": "dt = flds[2] + ' ' + flds[3]"}
{"function_name": "_generate_result", "function_define": "    w = quality_width\n    h = quality_height\n    logger = self.logger", "piece": "h = quality_height"}
{"function_name": "binary_search", "function_define": "    if nmin == nmax:\n    for _ in range(c):\n    io.sendline(str(nmin))", "piece": "for _ in range(c):"}
{"function_name": "populate", "function_define": "    Trails = Query()\n    rowNum = 1\n    showResult(rowNum, result)", "piece": "rowNum = 1"}
{"function_name": "IntTo8Bytes", "function_define": "    VectorBytes = bytearray(8)\n    valor_temp = valor\n    Terminar = False", "piece": "valor_temp = valor"}
{"function_name": "IntToHexa", "function_define": "    if valor == 0:\n    elif valor == 0:\n    elif valor == 1:", "piece": "elif valor == 0:"}
{"function_name": "siguiente", "function_define": "    if turno != 0:\n    self.COM.write(byte)\n    self.COM.write(byte)", "piece": "self.COM.write(byte)"}
{"function_name": "anterior", "function_define": "    turno = self.getTurno()\n    if turno != 0:\n    PantallaPrincipal.remover(turno)", "piece": "if turno != 0:"}
{"function_name": "__gfMult", "function_define": "    if argX == 0 or argY == 0:\n    byteValu = 0\n    byteValu = self.__GFLOG[argX]", "piece": "byteValu = 0"}
{"function_name": "__gfDivi", "function_define": "    if argY == 0:\n    raise ZeroDivisionError()\n    if argX == 0:", "piece": "raise ZeroDivisionError()"}
{"function_name": "RSEncode", "function_define": "    outBuffer = [0] * outBuffer\n    mesgChar = argMesg[mesgPos]\n    mesgChar = outBuffer[mesgPos]", "piece": "mesgChar = argMesg[mesgPos]"}
{"function_name": "_rsSyndPoly", "function_define": "    polyValu = [0] * errSize\n    for errPos in range(0, errSize):\n    byteValu = self.__GFEXP[errPos]", "piece": "for errPos in range(0, errSize):"}
{"function_name": "_rsForney", "function_define": "    polyValu = list(polySynd)\n    termX = self.__GFEXP[termX]\n    termY ^= polyValu[posJ + 1]", "piece": "termX = self.__GFEXP[termX]"}
{"function_name": "_rsFindErr", "function_define": "    errPoly = [1]\n    tempPoly = [1]\n    tempPoly.append(0)", "piece": "tempPoly = [1]"}
{"function_name": "_rsCorrect", "function_define": "    polyLoci = [1]\n    errTerm = self.__GFEXP[errTerm]\n    errEval.reverse()", "piece": "errTerm = self.__GFEXP[errTerm]"}
{"function_name": "RSDecode", "function_define": "    codeBuffer = list(argCode)\n    eraseCount = []\n    if codeBuffer[codePos] < 0:", "piece": "eraseCount = []"}
{"function_name": "shiftGrid", "function_define": "    m, n = (len(grid), len(grid[0]))\n    k %= m * n\n    ans = []", "piece": "k %= m * n"}
{"function_name": "get_boundaries", "function_define": "    src_gray = cv.blur(src, (3, 3))\n    threshold = 100\n    leftmost = src.shape[1]", "piece": "threshold = 100"}
{"function_name": "shrink_and_crop", "function_define": "    im = Image.open(name)\n    if debug >= 2:\n    print(im, cropbox)", "piece": "if debug >= 2:"}
{"function_name": "send_message", "function_define": "    logger.debug('task started')\n    start_time = time.time()\n    email.send()", "piece": "start_time = time.time()"}
{"function_name": "set_param_mask", "function_define": "    model = meta['model']\n    except TypeError:\n    model = None", "piece": "except TypeError:"}
{"function_name": "rank_channels", "function_define": "    num_filters = param.size(0)\n    num_channels = param.size(1)\n    if k == 0:", "piece": "num_channels = param.size(1)"}
{"function_name": "rank_blocks", "function_define": "    view1 = param.view(*view_dims)\n    block_mags = block_mags.view(-1)\n    if k == 0:", "piece": "block_mags = block_mags.view(-1)"}
{"function_name": "write2db", "function_define": "    skip (bool, default=False):\n    filename of the db\n    channel_sum = np.zeros(3)", "piece": "filename of the db"}
{"function_name": "create_model", "function_define": "    inshape = 12\n    outshape = 1\n    min_hlayers = 3", "piece": "outshape = 1"}
{"function_name": "myFuncWarmUp", "function_define": "    batchSize = 100\n    durationSum = 0.0\n    runNum = 13", "piece": "durationSum = 0.0"}
{"function_name": "myFuncParallel", "function_define": "    batchSize = 100\n    durationSum = 0.0\n    runNum = 10", "piece": "durationSum = 0.0"}
{"function_name": "difference", "function_define": "    d = day.value - self.value\n    if d > 3:\n    elif d < -3:", "piece": "if d > 3:"}
{"function_name": "fibonacci", "function_define": "    first = 0\n    second = 1\n    if n == 1:", "piece": "second = 1"}
{"function_name": "sum_series", "function_define": "    first = first\n    second = second\n    if n == 1:", "piece": "second = second"}
{"function_name": "user_details", "function_define": "    yield total[i:i + chunk_size]\n    ret = list()\n    for chunk in chunks():", "piece": "ret = list()"}
{"function_name": "_process_message", "function_define": "    if not self.alive:\n    if not func:\n    ret = func(msg)", "piece": "if not func:"}
{"function_name": "train_base_model", "function_define": "    model.opt = opt\n    for epoch in range(num_epochs):\n    for valid_iter in valid_iters:", "piece": "for epoch in range(num_epochs):"}
{"function_name": "eval_adversarial", "function_define": "    iterators = []\n    if n_renames == 0:\n    if n_renames > 0:", "piece": "if n_renames == 0:"}
{"function_name": "parseTable", "function_define": "    self.table = {}\n    self.categories = []\n    for label, multiplier in table:", "piece": "self.categories = []"}
{"function_name": "extractList", "function_define": "    values = label.split(separator)\n    values = list(map(int, values))\n    values = list(range(*values))", "piece": "values = list(map(int, values))"}
{"function_name": "extractRangeList", "function_define": "    values = label.split(separator)\n    values = list(map(int, values))\n    values = list(range(*values))", "piece": "values = list(map(int, values))"}
{"function_name": "build_assets", "function_define": "    if type is None:\n    except TypeError:\n    typestr = 'raw/binary'", "piece": "except TypeError:"}
{"function_name": "test_3d_solid", "function_define": "    self.assertFalse(a.is_indexed())\n    b = primitives.circle3d_solid(5)\n    self.assertFalse(b.is_indexed())", "piece": "b = primitives.circle3d_solid(5)"}
{"function_name": "test_2d_solid", "function_define": "    self.assertFalse(a.is_indexed())\n    b = primitives.circle2d_solid(5)\n    self.assertFalse(b.is_indexed())", "piece": "b = primitives.circle2d_solid(5)"}
{"function_name": "breed_childern", "function_define": "    self.mutation(first_child)\n    self.mutation(second_child)\n    self.pool[-1] = self.parents[0]", "piece": "self.mutation(second_child)"}
{"function_name": "canonicalHeaders", "function_define": "    with the following changes made:\n    specified, removed.\n    if ignore is None:", "piece": "specified, removed."}
{"function_name": "cum_return", "function_define": "    sum_rewards = 0\n    sum_abs_rewards = 0\n    x = traj.permute(0, 3, 1, 2)", "piece": "sum_abs_rewards = 0"}
{"function_name": "motionqc_plot", "function_define": "    import pylab as pl\n    outlier = None\n    if outlier_stdthresh:", "piece": "outlier = None"}
{"function_name": "aperture_contour", "function_define": "    Contribution from <NAME>.\n    Parameters\n    aperture : np.2darray, optional", "piece": "Parameters"}
{"function_name": "pixel_by_pixel", "function_define": "    Contribution from Oliver Hall.\n    Parameters\n    colrange : np.array, optional", "piece": "Parameters"}
{"function_name": "tess_the_movie", "function_define": "    Parameters\n    Attributes\n    movie_url : str", "piece": "Attributes"}
{"function_name": "test_small", "function_define": "    Test Description:\n    Small daos_perf test\n    Use cases:", "piece": "Small daos_perf test"}
{"function_name": "create_app", "function_define": "    app = Flask(__name__)\n    db.init_app(app)\n    migrate.init_app(app, db)", "piece": "db.init_app(app)"}
{"function_name": "connect_file", "function_define": "    if outputs:\n    shadingengine_node = outputs[-1]\n    file_attribute = 'outAlpha'", "piece": "shadingengine_node = outputs[-1]"}
{"function_name": "encrypt_and_hash", "function_define": "    assert self.k\n    data = _to_bytes(data)\n    self.mix_hash(enc)", "piece": "data = _to_bytes(data)"}
{"function_name": "decrypt_and_hash", "function_define": "    assert self.k\n    assert data\n    self.mix_hash(data)", "piece": "assert data"}
{"function_name": "solution", "function_define": "    for a in range(-999, 1000):\n    for b in range(-999, 1000):\n    ct, n = (0, 0)", "piece": "for b in range(-999, 1000):"}
{"function_name": "configure", "function_define": "    rc = MatWrap._rc_defaults.copy()\n    if latex_pkgs is not None:\n    for pkg in reversed(latex_pkgs):", "piece": "if latex_pkgs is not None:"}
{"function_name": "__exit__", "function_define": "    if exc_type is not None:\n    if self.title is not None:\n    self.ax.set_title(self.title)", "piece": "if self.title is not None:"}
{"function_name": "_attach_v2_specs", "function_define": "    is_compiling_for_v2 = False\n    for frame in inspect.stack():\n    is_compiling_for_v2 = True", "piece": "for frame in inspect.stack():"}
{"function_name": "serialize", "function_define": "    serialize message into buffer\n    except struct.error as se:\n    except TypeError as te:", "piece": "except struct.error as se:"}
{"function_name": "deserialize", "function_define": "    if self.rgb is None:\n    self.rgb = sensor.msg.RGB()\n    start = end", "piece": "self.rgb = sensor.msg.RGB()"}
{"function_name": "test_set_seed", "function_define": "    rngkey = jax.random.PRNGKey(0)\n    set_seed(10)\n    a = func()", "piece": "set_seed(10)"}
{"function_name": "from_json", "function_define": "    with open(path, 'r') as f:\n    s = f.read()\n    d = json.loads(s)", "piece": "s = f.read()"}
{"function_name": "preprocess", "function_define": "    res = []\n    for x in X:\n    res.append(x_norm.tolist())", "piece": "for x in X:"}
{"function_name": "iter_segments", "function_define": "    with tiledb.open(uri) as a:\n    if not max_threads:\n    chunks = query[idx]['data']", "piece": "if not max_threads:"}
{"function_name": "FEN_to_board", "function_define": "    Returns:\n    temp_board = []\n    args = fen.split(' ')", "piece": "temp_board = []"}
{"function_name": "load_app", "function_define": "    for route in app.router.routes:\n    if 'static' in route.name:\n    continue", "piece": "if 'static' in route.name:"}
{"function_name": "transform", "function_define": "    if not sp.issparse(c):\n    c = np.array(c, copy=True)\n    c = c.toarray().ravel()", "piece": "c = np.array(c, copy=True)"}
{"function_name": "subsetsWithDup", "function_define": "    res.append(path[:])\n    continue\n    path.append(nums[i])", "piece": "continue"}
{"function_name": "backtrack", "function_define": "    res.append(path[:])\n    continue\n    path.append(nums[i])", "piece": "continue"}
{"function_name": "downgrade", "function_define": "    op.drop_table('materials')\n    op.drop_table('orders')\n    op.drop_table('tattoos')", "piece": "op.drop_table('orders')"}
{"function_name": "assign_defaults", "function_define": "    for key in keys:\n    if key not in info:\n    info[key] = default", "piece": "if key not in info:"}
{"function_name": "yes_or_no", "function_define": "    opts = ('yes', 'no')\n    answer = ask(query)\n    while answer != opts[0]:", "piece": "answer = ask(query)"}
{"function_name": "apt_select", "function_define": "    parser = get_args()\n    args = parser.parse_args()\n    flag_number = args.top_number[0]", "piece": "args = parser.parse_args()"}
{"function_name": "iterate_single", "function_define": "    d = X.shape[1]\n    XTy = (X.T @ y).reshape(-1, 1)\n    SA = self._get_sketch(X, seed)", "piece": "XTy = (X.T @ y).reshape(-1, 1)"}
{"function_name": "iterate_multiple", "function_define": "    d = X.shape[1]\n    XTy = (X.T @ y).reshape(-1, 1)\n    for it in range(iterations):", "piece": "XTy = (X.T @ y).reshape(-1, 1)"}
{"function_name": "_get_sketch", "function_define": "    if self.rp_mode == 'Gaussian':\n    elif self.rp_mode == 'SJLT':\n    raise NotImplementedError", "piece": "elif self.rp_mode == 'SJLT':"}
{"function_name": "fit_classical", "function_define": "    d = X.shape[1]\n    data = np.c_[X, y]\n    S_data = self._get_sketch(data)", "piece": "data = np.c_[X, y]"}
{"function_name": "create_holes", "function_define": "    Each entry will have:\n    containing -\n    holes_list = []", "piece": "containing -"}
{"function_name": "create_golfers", "function_define": "    Each line of input contains:\n    golfer_name, golfer_birthdate\n    containing -", "piece": "golfer_name, golfer_birthdate"}
{"function_name": "create_rounds", "function_define": "    rounds_list = []\n    round_id = 1\n    for tourn in tournament_list:", "piece": "round_id = 1"}
{"function_name": "_rev_get", "function_define": "    assert price_decline <= 1\n    cu_rev_max = cu_price * cu\n    su_rev_max = su_price * su", "piece": "cu_rev_max = cu_price * cu"}
{"function_name": "markdown_report", "function_define": "    fi = j.core.text.format_item\n    nr = self.nrnodes\n    wo = self.months_left", "piece": "nr = self.nrnodes"}
{"function_name": "graph_tft", "function_define": "    if cumul:\n    names.append('cumul')\n    start = self.month_start", "piece": "names.append('cumul')"}
{"function_name": "_tft_usd", "function_define": "    res = []\n    if single:\n    nrnodes = self.nrnodes", "piece": "if single:"}
{"function_name": "_values_usd_get", "function_define": "    if not names:\n    if cumul:\n    res = []", "piece": "if cumul:"}
{"function_name": "graph_usd", "function_define": "    fig = go.FigureWidget()\n    if single:\n    nrnodes = 1", "piece": "if single:"}
{"function_name": "graph_usd_png", "function_define": "    title = f'income_per_node'\n    path2 = f'{path}/{title2}.png'\n    for name in names:", "piece": "path2 = f'{path}/{title2}.png'"}
{"function_name": "cnt2Time", "function_define": "    receive int\n    labels = []\n    s, ms = divmod(s, 1000)", "piece": "labels = []"}
{"function_name": "initSubtitle", "function_define": "    self.subtitle.clear()\n    for t in self.autoSub:\n    start, end = t", "piece": "for t in self.autoSub:"}
{"function_name": "set_verified", "function_define": "    stored_entry = stored.key.get()\n    self.assertTrue(stored_entry)\n    if not stored_entry.is_verified:", "piece": "self.assertTrue(stored_entry)"}
{"function_name": "handle_frequency", "function_define": "    if type == 'lowPass':\n    frequency.lowPass = value\n    elif type == 'highPass':", "piece": "frequency.lowPass = value"}
{"function_name": "make_screen", "function_define": "    if screen_type == 'cartesian':\n    elif screen_type == 'polar':\n    assert False, 'unexpected type'", "piece": "elif screen_type == 'polar':"}
{"function_name": "load_axml_doc", "function_define": "    parse_adm_elements(adm, element)\n    if lookup_references:\n    adm.lazy_lookup_references()", "piece": "if lookup_references:"}
{"function_name": "adm_to_xml", "function_define": "    afx = E.audioFormatExtended()\n    for element in elements:\n    to_xml(afx, element)", "piece": "for element in elements:"}
{"function_name": "get_handlers", "function_define": "    found = self.enum[value]\n    except KeyError:\n    kwargs[self.arg_name] = found", "piece": "except KeyError:"}
{"function_name": "dump_bound", "function_define": "    if screen_edge_lock is not None:\n    if bound.max is not None:\n    if bound.min is not None:", "piece": "if bound.max is not None:"}
{"function_name": "scalar_summary", "function_define": "    Parameters\n    tag : str\n    The key of the summary.", "piece": "tag : str"}
{"function_name": "image_summary", "function_define": "    Parameters\n    tag : str\n    The key of the summary.", "piece": "tag : str"}
{"function_name": "load_driver", "function_define": "    driver.get(f'{URL}')\n    print('teardown driver')\n    driver.close()", "piece": "print('teardown driver')"}
{"function_name": "get_data", "function_define": "    data = {}\n    requests = outputs.get(eid, [])\n    mydata = {}", "piece": "requests = outputs.get(eid, [])"}
{"function_name": "Train_SVC", "function_define": "    print('Start Training')\n    encodings = []\n    names = []", "piece": "encodings = []"}
{"function_name": "prepare_data", "function_define": "    mask[100, 100] = 1\n    np.save(MASK1, mask)\n    mask[100, 100:102] = 1", "piece": "np.save(MASK1, mask)"}
{"function_name": "validate", "function_define": "    if not self.still_open():\n    num_correct = 0\n    if not Database.assignments:", "piece": "num_correct = 0"}
{"function_name": "no_section", "function_define": "    arr = torch.zeros((1000, 1000))\n    for i in range(N):\n    for t in range(10):", "piece": "for i in range(N):"}
{"function_name": "section_silent", "function_define": "    arr = torch.zeros((1000, 1000))\n    for i in range(N):\n    for t in range(10):", "piece": "for i in range(N):"}
{"function_name": "make_ttest", "function_define": "    masker.fit()\n    t, prob = ttest_rel(a, b)\n    tt = masker.inverse_transform(t)", "piece": "t, prob = ttest_rel(a, b)"}
{"function_name": "SizePond", "function_define": "    while h < D:\n    H[0].CalcPcWt()\n    H[0].CalcOsmoticProperties()", "piece": "H[0].CalcPcWt()"}
{"function_name": "run_training", "function_define": "    os.mkdir(FLAGS.checkpoints_dir)\n    with tf.Session() as sess:\n    sess.run(init_op)", "piece": "with tf.Session() as sess:"}
{"function_name": "gen_poem", "function_define": "    batch_size = 1\n    with tf.Session() as sess:\n    sess.run(init_op)", "piece": "with tf.Session() as sess:"}
{"function_name": "print_values", "function_define": "    for i in range(g.width):\n    for j in range(g.height):\n    v = V.get((i, j), 0)", "piece": "for j in range(g.height):"}
{"function_name": "print_policy", "function_define": "    for i in range(g.width):\n    for j in range(g.height):\n    a = P.get((i, j), ' ')", "piece": "for j in range(g.height):"}
{"function_name": "max_dict", "function_define": "    max_key = None\n    max_val = float('-inf')\n    for k, v in d.items():", "piece": "max_val = float('-inf')"}
{"function_name": "_fit_continuous", "function_define": "    params = {}\n    params = self.numeric_params\n    model.train(values)", "piece": "params = self.numeric_params"}
{"function_name": "save_checkpoint", "function_define": "    torch.save(state, filename)\n    if is_best:\n    if backup_filename is not None:", "piece": "if is_best:"}
{"function_name": "timed_generator", "function_define": "    start = time.time()\n    for g in gen:\n    end = time.time()", "piece": "for g in gen:"}
{"function_name": "accuracy", "function_define": "    maxk = max(topk)\n    batch_size = target.size(0)\n    pred = pred.t()", "piece": "batch_size = target.size(0)"}
{"function_name": "__enter__", "function_define": "    self._interrupted = False\n    self.released = False\n    self.release()", "piece": "self.released = False"}
{"function_name": "master_handler", "function_define": "    self.release()\n    self._interrupted = True\n    print(f'Received SIGTERM')", "piece": "self._interrupted = True"}
{"function_name": "make_usr_list", "function_define": "    Input: a 3 digit number\n    Output: a list\n    return_list = []", "piece": "Output: a list"}
{"function_name": "execute_snmp", "function_define": "    r = self.get_inv_from_version()\n    if sensors:\n    r[0]['sensors'] = sensors", "piece": "if sensors:"}
{"function_name": "strip_prefix", "function_define": "    for k, v in data.items():\n    if prefix in k:\n    d[nk] = v", "piece": "if prefix in k:"}
{"function_name": "_mc_to_mfc", "function_define": "    mfcs = self._meta.modelforms\n    for mfc in mfcs:\n    if mfc._meta.model == mc:", "piece": "for mfc in mfcs:"}
{"function_name": "_post_clean", "function_define": "    opts = self._meta\n    mfcs = opts.modelforms\n    for mfc in mfcs:", "piece": "mfcs = opts.modelforms"}
{"function_name": "_update_errors", "function_define": "    opts = self._meta\n    error_dict = errors.error_dict\n    elif field in self.fields:", "piece": "error_dict = errors.error_dict"}
{"function_name": "_save_m2m", "function_define": "    mc = type(instance)\n    mfc = self._mc_to_mfc(mc)\n    exclude = mfc._meta.exclude", "piece": "mfc = self._mc_to_mfc(mc)"}
{"function_name": "make_dataset", "function_define": "    dataset.\n    n = int(len(dataset) / 4)\n    if train:", "piece": "n = int(len(dataset) / 4)"}
{"function_name": "_init_with_mpi", "function_define": "    self._mpi_comm = MPI.COMM_WORLD\n    self._mpi_comm.Barrier()\n    nccl_id = None", "piece": "self._mpi_comm.Barrier()"}
{"function_name": "_assign_arrays", "function_define": "    matrix.data = arrays[0]\n    matrix.row = arrays[1]\n    matrix.col = arrays[2]", "piece": "matrix.row = arrays[1]"}
{"function_name": "test_settings", "function_define": "    from qtpy import QtCore\n    settings = QtCore.QSettings()\n    test = NastranGUI()", "piece": "settings = QtCore.QSettings()"}
{"function_name": "test_aero", "function_define": "    test = NastranGUI()\n    coord = out_data['Global XYZ']\n    coord.is_visible = False", "piece": "coord = out_data['Global XYZ']"}
{"function_name": "test_gui_bar_t1", "function_define": "    test = NastranGUI()\n    str(test.geometry_properties)\n    T1z.line_width = 4", "piece": "str(test.geometry_properties)"}
{"function_name": "save_plot", "function_define": "    figure = plt.figure()\n    axis = figure.add_subplot(111)\n    if equal is True:", "piece": "axis = figure.add_subplot(111)"}
{"function_name": "_read_block_into", "function_define": "    MAGIC = 16\n    HEADER_LENGTH = 16\n    MAGIC_OFFSET = 0", "piece": "HEADER_LENGTH = 16"}
{"function_name": "_test_dataloader", "function_define": "    batch_size = 4\n    num_workers = 4\n    datamodule.setup('fit')", "piece": "num_workers = 4"}
{"function_name": "tearDown", "function_define": "    Clean up.\n    if ray.is_initialized():\n    ray.shutdown()", "piece": "if ray.is_initialized():"}
{"function_name": "some_view", "function_define": "    buffer = io.BytesIO()\n    p = canvas.Canvas(buffer)\n    for time in times:", "piece": "p = canvas.Canvas(buffer)"}
{"function_name": "link_callback", "function_define": "    resources\n    result = finders.find(uri)\n    if result:", "piece": "result = finders.find(uri)"}
{"function_name": "render_pdf_view", "function_define": "    context = {'cols': cols}\n    html = template.render(context)\n    if pisa_status.err:", "piece": "html = template.render(context)"}
{"function_name": "test_parse_bytes", "function_define": "    out = self.Outputter()\n    parser.Parse(data, True)\n    operations = out.out", "piece": "parser.Parse(data, True)"}
{"function_name": "test_parse_file", "function_define": "    out = self.Outputter()\n    file = BytesIO(data)\n    parser.ParseFile(file)", "piece": "file = BytesIO(data)"}
{"function_name": "test_parse_again", "function_define": "    parser = expat.ParserCreate()\n    file = BytesIO(data)\n    parser.ParseFile(file)", "piece": "file = BytesIO(data)"}
{"function_name": "test_illegal", "function_define": "    self.fail()\n    except TypeError as e:\n    self.fail()", "piece": "except TypeError as e:"}
{"function_name": "test_issue9402", "function_define": "    class ExternalOutputter:\n    self.parser = parser\n    self.parser_result = None", "piece": "self.parser = parser"}
{"function_name": "test_exception", "function_define": "    parser = expat.ParserCreate()\n    self.fail()\n    except RuntimeError as e:", "piece": "self.fail()"}
{"function_name": "test_wrong_size", "function_define": "    parser = expat.ParserCreate()\n    parser.buffer_text = 1\n    parser.buffer_size = -1", "piece": "parser.buffer_text = 1"}
{"function_name": "test_expaterror", "function_define": "    xml = b'<'\n    parser = expat.ParserCreate()\n    parser.Parse(xml, True)", "piece": "parser = expat.ParserCreate()"}
{"function_name": "pairing_with", "function_define": "    structure, in that structure.\n    atoms = self.atoms()\n    other_atoms = structure.atoms()", "piece": "atoms = self.atoms()"}
{"function_name": "create_grid", "function_define": "    dimension_values = []\n    for dimension in range(3):\n    values = [0]", "piece": "for dimension in range(3):"}
{"function_name": "check_ids", "function_define": "    unique_ids = set(ids)\n    if len(ids) != len(unique_ids):\n    except AttributeError:", "piece": "if len(ids) != len(unique_ids):"}
{"function_name": "atoms_in_sphere", "function_define": "    search all atoms.\n    for x in x_range:\n    for y in y_range:", "piece": "for x in x_range:"}
{"function_name": "nearby_hets", "function_define": "    returned.\n    structures = set()\n    for atom in atoms:", "piece": "structures = set()"}
{"function_name": "nearby_chains", "function_define": "    returned.\n    chains = set()\n    for atom in atoms:", "piece": "chains = set()"}
{"function_name": "translate", "function_define": "    single vector.\n    vector = dx\n    except TypeError:", "piece": "vector = dx"}
{"function_name": "previous", "function_define": "    if previous is None:\n    if self._previous:\n    self._previous._next = None", "piece": "if self._previous:"}
{"function_name": "rotate_atoms", "function_define": "    except ValueError:\n    axis = np.asarray(axis)\n    a = np.cos(angle / 2)", "piece": "axis = np.asarray(axis)"}
{"function_name": "do_touch_file", "function_define": "    for f in file_names:\n    if not os.path.exists(f):\n    open(f, 'w')", "piece": "if not os.path.exists(f):"}
{"function_name": "iterator", "function_define": "    params_per_job = []\n    if flatten_input:\n    if not len(input_params):", "piece": "if flatten_input:"}
{"function_name": "mousePressed", "function_define": "    global dice_no, score, count\n    if mouseButton == LEFT:\n    score = 0", "piece": "if mouseButton == LEFT:"}
{"function_name": "pendulum", "function_define": "    locals().update(default())\n    env = 'Pendulum-v0'\n    max_length = 200", "piece": "env = 'Pendulum-v0'"}
{"function_name": "humanoid", "function_define": "    locals().update(default())\n    env = 'Humanoid-v1'\n    max_length = 1000", "piece": "env = 'Humanoid-v1'"}
{"function_name": "_make_layer", "function_define": "    layers = []\n    for _ in range(0, layer_num):\n    layers.append(DenseMutMulNet())", "piece": "for _ in range(0, layer_num):"}
{"function_name": "bytes_to_int", "function_define": "    if hasattr(int, 'from_bytes'):\n    result = 0\n    for b in bytes_value:", "piece": "result = 0"}
{"function_name": "encrypt_by_pow", "function_define": "    if len(data) > length:\n    raise ValueError()\n    ct_int = CRSA.bytes_to_int(data)", "piece": "raise ValueError()"}
{"function_name": "try_chunk", "function_define": "    chunks = []\n    while data:\n    data = data[chunk_len:]", "piece": "while data:"}
{"function_name": "gradient_descent", "function_define": "    theta_local = np.copy(theta)\n    m = m_x.shape[0]\n    for i in range(num_iterations):", "piece": "m = m_x.shape[0]"}
{"function_name": "bootstrapFabric", "function_define": "    readHostsFromEC2()\n    updateHadoopSiteValues()\n    env.user = SSH_USER", "piece": "updateHadoopSiteValues()"}
{"function_name": "bootstrap", "function_define": "    installDependencies()\n    setupEnvironment()\n    setupHosts()", "piece": "setupEnvironment()"}
{"function_name": "bootstrapZK", "function_define": "    install_ZK()\n    config_ZK()\n    startZKserver()", "piece": "config_ZK()"}
{"function_name": "config_ZK", "function_define": "    with cd(ZOOKEEPER_DATA_DIR):\n    if env.host == NAMENODE_HOST:\n    run('echo 1 >> myid')", "piece": "if env.host == NAMENODE_HOST:"}
{"function_name": "setupHosts", "function_define": "    execute(updateHosts, privateIps)\n    run('rm -f privateIps')\n    run('touch privateIps')", "piece": "run('rm -f privateIps')"}
{"function_name": "setupEnvironment", "function_define": "    with settings(warn_only=True):\n    op = 'cp'\n    if ENVIRONMENT_FILE_CLEAN:", "piece": "op = 'cp'"}
{"function_name": "updateHosts", "function_define": "    with settings(warn_only=True):\n    sudo('touch %s' % HOSTS_FILE)\n    lineNumber = int(lineNumber)", "piece": "sudo('touch %s' % HOSTS_FILE)"}
{"function_name": "readHostsFromEC2", "function_define": "    import boto.ec2\n    RESOURCEMANAGER_HOST = None\n    NAMENODE_HOST = None", "piece": "RESOURCEMANAGER_HOST = None"}
{"function_name": "dumb_round", "function_define": "    s = str(num)\n    if '.' not in s:\n    if s.endswith('.0'):", "piece": "if '.' not in s:"}
{"function_name": "project_tsne", "function_define": "    c_mse = nn.MSELoss()\n    Project_DNN.train()\n    dataset_num = len(dataset)", "piece": "Project_DNN.train()"}
{"function_name": "test_activity", "function_define": "    self.login('hamlet')\n    query = '/json/messages/flags'\n    last_visit = timezone_now()", "piece": "query = '/json/messages/flags'"}
{"function_name": "view_draw", "function_define": "    self.__draw_pixels(context)\n    self.__pause_rendering()\n    logger.debug('Updating view')", "piece": "self.__pause_rendering()"}
{"function_name": "__stop_rendering", "function_define": "    logger.debug('Abort rendering')\n    if self.__render_thread:\n    self.__render_thread.join()", "piece": "if self.__render_thread:"}
{"function_name": "updateData", "function_define": "    if self.train:\n    if self.inplace:\n    self.numOfProps += 1", "piece": "if self.inplace:"}
{"function_name": "initiate_all", "function_define": "    check_kubectl_installation()\n    check_wsk_installation()\n    check_helm_installation()", "piece": "check_wsk_installation()"}
{"function_name": "imodpoly", "function_define": "    Parameters\n    data : array-like, shape (N,)\n    poly_order : int, optional", "piece": "data : array-like, shape (N,)"}
{"function_name": "_huber_loss", "function_define": "    Parameters\n    The residual array.\n    threshold : float, optional", "piece": "The residual array."}
{"function_name": "_indec_loss", "function_define": "    Parameters\n    The residual array.\n    threshold : float, optional", "piece": "The residual array."}
{"function_name": "penalized_poly", "function_define": "    Parameters\n    data : array-like, shape (N,)\n    poly_order : int, optional", "piece": "data : array-like, shape (N,)"}
{"function_name": "_tukey_square", "function_define": "    Parameters\n    The residual array of the fit.\n    scale : float, optional", "piece": "The residual array of the fit."}
{"function_name": "_loess_solver", "function_define": "    Parameters\n    AT : numpy.ndarray, shape (M, N)\n    The transposed `A` matrix.", "piece": "AT : numpy.ndarray, shape (M, N)"}
{"function_name": "_fill_skips", "function_define": "    Parameters\n    x : numpy.ndarray\n    The array of x-values.", "piece": "x : numpy.ndarray"}
{"function_name": "_determine_fits", "function_define": "    Parameters\n    x : numpy.ndarray, shape (N,)\n    The array of x-values.", "piece": "x : numpy.ndarray, shape (N,)"}
{"function_name": "quant_reg", "function_define": "    Parameters\n    data : array-like, shape (N,)\n    poly_order : int, optional", "piece": "data : array-like, shape (N,)"}
{"function_name": "goldindec", "function_define": "    Parameters\n    data : array-like, shape (N,)\n    poly_order : int, optional", "piece": "data : array-like, shape (N,)"}
{"function_name": "getBound", "function_define": "    xMin = len(img[0])\n    xMax = 0\n    yMin = len(img)", "piece": "xMax = 0"}
{"function_name": "headFromDir", "function_define": "    if not os.path.exists(outDir):\n    os.mkdir(outDir)\n    count = 0", "piece": "os.mkdir(outDir)"}
{"function_name": "getService", "function_define": "    if versionSpec is None:\n    spec = SpecifierSet(versionSpec)\n    if len(matches) == 0:", "piece": "spec = SpecifierSet(versionSpec)"}
{"function_name": "addService", "function_define": "    Returns True on success.\n    verbose = self.dba.isVerbose()\n    name = service.name", "piece": "verbose = self.dba.isVerbose()"}
{"function_name": "removeService", "function_define": "    Remove a specific service.\n    verbose = self.dba.isVerbose()\n    for s in shutdown:", "piece": "verbose = self.dba.isVerbose()"}
{"function_name": "addXformObject", "function_define": "    Returns True on success.\n    verbose = self.dba.isVerbose()\n    name = newObj.name", "piece": "verbose = self.dba.isVerbose()"}
{"function_name": "query_via_erp", "function_define": "    ERP\u534f\u8bae\u67e5\u8be2\u63a5\u53e3\n    parsed_retrieve_args = {}\n    if not md_type:", "piece": "parsed_retrieve_args = {}"}
{"function_name": "map_download_qlr", "function_define": "    j_map = json.loads(mapJson)\n    j_layers = j_map['layers']\n    for j_layer in j_layers:", "piece": "j_layers = j_map['layers']"}
{"function_name": "get_context_data", "function_define": "    mapid = self.kwargs.get('mapid')\n    request = self.request\n    if request.method == 'POST':", "piece": "request = self.request"}
{"function_name": "parseItemMsg", "function_define": "    isTranSuccess = True\n    SuccessCode = 0\n    newPrice = 0", "piece": "SuccessCode = 0"}
{"function_name": "mainMenu", "function_define": "    UtilGp.sleep(2)\n    UtilGp.clear()\n    from frmPageHome import Home", "piece": "UtilGp.clear()"}
{"function_name": "startApp", "function_define": "    UtilGp.clear()\n    from dBase import ndb\n    ndb.loadItemCard()", "piece": "from dBase import ndb"}
{"function_name": "centerText", "function_define": "    text = str(text)\n    l = len(text)\n    sp = (79 - len(text)) // 2", "piece": "l = len(text)"}
{"function_name": "creditLine", "function_define": "    from dBase import ndb\n    vCard = ndb.logInCard\n    UtilGp.linePrint()", "piece": "vCard = ndb.logInCard"}
{"function_name": "printCaptionData", "function_define": "    sp1 = colonAt - 2\n    sp2 = 80 - colonAt - 4\n    UtilGp.linePrint('*')", "piece": "sp2 = 80 - colonAt - 4"}
{"function_name": "aes_encrypt", "function_define": "    iv = os.urandom(16)\n    digest.update(key.encode())\n    key_digest = digest.finalize()", "piece": "digest.update(key.encode())"}
{"function_name": "test_append", "function_define": "    c.reset()\n    assert len(c) == 0\n    assert len(c) == 2", "piece": "assert len(c) == 0"}
{"function_name": "test_reader", "function_define": "    c.reset()\n    assert len(c) == 0\n    with CollectionReader(p) as r:", "piece": "assert len(c) == 0"}
{"function_name": "load_providers", "function_define": "    providers = json.load(fp)\n    for provider in providers:\n    clazz_name = str(clazz_name)", "piece": "for provider in providers:"}
{"function_name": "resolve_path", "function_define": "    coros = []\n    coros.append(coro)\n    path = None", "piece": "coros.append(coro)"}
{"function_name": "cancel_request", "function_define": "    if c == self.channel_name:\n    task['task'].cancel()\n    except Exception:", "piece": "task['task'].cancel()"}
{"function_name": "remove_task", "function_define": "    if task_id:\n    if c == channel_name:\n    if cmd_id:", "piece": "if c == channel_name:"}
{"function_name": "finish_tasks", "function_define": "    user = self.scope['user']\n    pending_tasks = []\n    user_have_tasks = False", "piece": "pending_tasks = []"}
{"function_name": "printUsage", "function_define": "    print('')\n    print('Options:')\n    print('')", "piece": "print('Options:')"}
{"function_name": "listDevices", "function_define": "    state = 'ON'\n    state = 'OFF'\n    state = 'DIMMED'", "piece": "state = 'OFF'"}
{"function_name": "doMethod", "function_define": "    if methodId == TELLSTICK_TURNON:\n    method = 'on'\n    method = 'off'", "piece": "method = 'on'"}
{"function_name": "requestToken", "function_define": "    global config\n    resp = conn.getresponse().read()\n    saveConfig()", "piece": "resp = conn.getresponse().read()"}
{"function_name": "getAccessToken", "function_define": "    global config\n    resp = conn.getresponse()\n    if resp.status != 200:", "piece": "resp = conn.getresponse()"}
{"function_name": "authenticate", "function_define": "    for opt, arg in opts:\n    if opt in '--authenticate':\n    getAccessToken()", "piece": "if opt in '--authenticate':"}
{"function_name": "do_setup", "function_define": "    if not self.config.gateway_vip:\n    if not self.config.gateway_mga:\n    if not self.config.gateway_mgb:", "piece": "if not self.config.gateway_mga:"}
{"function_name": "extend_volume", "function_define": "    Arguments:\n    v = self.vmem_vip\n    except Exception:", "piece": "v = self.vmem_vip"}
{"function_name": "_create_lun", "function_define": "    Arguments:\n    lun_type = '0'\n    v = self.vmem_vip", "piece": "lun_type = '0'"}
{"function_name": "_delete_lun", "function_define": "    Arguments:\n    v = self.vmem_vip\n    except ViolinBackendErrNotFound:", "piece": "v = self.vmem_vip"}
{"function_name": "_send_cmd", "function_define": "    request timeout is hit.\n    conditions).\n    Arguments:", "piece": "conditions)."}
{"function_name": "_get_igroup", "function_define": "    Arguments:\n    Returns:\n    initiators)", "piece": "Returns:"}
{"function_name": "free_lun_id_str", "function_define": "    Arguments:\n    value = int(value_str)\n    self.lun_id_list[value] = 0", "piece": "value = int(value_str)"}
{"function_name": "label_tweet", "function_define": "    if label_result is None:\n    db.session.add(label)\n    db.session.commit()", "piece": "db.session.add(label)"}
{"function_name": "store_tweet", "function_define": "    data = request.json\n    id = data['id']\n    text = data['text']", "piece": "id = data['id']"}
{"function_name": "conv_model", "function_define": "    Y4 = layers.flatten(Y3)\n    Ylogits = layers.linear(Y5d, 10)\n    predict = tf.nn.softmax(Ylogits)", "piece": "Ylogits = layers.linear(Y5d, 10)"}
{"function_name": "_posts2panel", "function_define": "    Parameters\n    pointA : numpy.array\n    pointB : numpy.array", "piece": "pointA : numpy.array"}
{"function_name": "reload_once", "function_define": "    try_counter = 0\n    imp.reload(module)\n    except OSError as e:", "piece": "imp.reload(module)"}
{"function_name": "factorial", "function_define": "    fact = 1\n    for i in range(1, numero + 1):\n    fact *= i", "piece": "for i in range(1, numero + 1):"}
{"function_name": "check_query", "function_define": "    hge_ctx.tests_passed = True\n    headers = {}\n    if 'headers' in conf:", "piece": "headers = {}"}
{"function_name": "check_query_f", "function_define": "    print('Test file: ' + f)\n    print('transport=' + transport)\n    with open(f, 'r+') as c:", "piece": "print('transport=' + transport)"}
{"function_name": "stringify_keys", "function_define": "    if not isinstance(d, dict):\n    if isinstance(k, str):\n    except Exception:", "piece": "if isinstance(k, str):"}
{"function_name": "create_index", "function_define": "    with open(file_path) as file:\n    header = next(csv_file)\n    bulk_data = []", "piece": "header = next(csv_file)"}
{"function_name": "init_tables", "function_define": "    if self.isSQL():\n    self.connection.commit()\n    cursor.close()", "piece": "self.connection.commit()"}
{"function_name": "is_number", "function_define": "    float(s)\n    except ValueError:\n    import unicodedata", "piece": "except ValueError:"}
{"function_name": "SparseVector", "function_define": "    out = []\n    eta_1 = havoc(2 / epsilon)\n    T_threshold = T + eta_1", "piece": "eta_1 = havoc(2 / epsilon)"}
{"function_name": "process_event", "function_define": "    message_to_write = self.value\n    self.value = ''\n    self.reset()", "piece": "self.value = ''"}
{"function_name": "get_features", "function_define": "    added_or_removed = '2'\n    if line['action'] == 'removed':\n    added_or_removed = '1'", "piece": "if line['action'] == 'removed':"}
{"function_name": "make_digits", "function_define": "    Returns discrete digits dataset.\n    Parameters\n    noise_level : float", "piece": "Parameters"}
{"function_name": "maths_subscript", "function_define": "    actions.insert('_{}')\n    actions.key('left')\n    if text:", "piece": "actions.key('left')"}
{"function_name": "create_pipeline", "function_define": "    data_types = get_data_types(df)\n    for c in numericals_int:\n    print(stages)", "piece": "for c in numericals_int:"}
{"function_name": "run_model", "function_define": "    df = get_data(False)\n    clr_model.setMaxIter(num_it)\n    if num_pca > 0:", "piece": "clr_model.setMaxIter(num_it)"}
{"function_name": "add_meta_data", "function_define": "    s3_name = s3_name[2:]\n    AUROC = log['AUROC']\n    AUPR = log['AUPR']", "piece": "AUROC = log['AUROC']"}
{"function_name": "get_local_count", "function_define": "    if IF_gpu:\n    if not IF_ret_gpu:\n    count_map = count_map.cpu()", "piece": "if not IF_ret_gpu:"}
{"function_name": "Count2Class", "function_define": "    cls_num = len(label_indice) + 1\n    if IF_gpu:\n    for i in range(cls_num - 1):", "piece": "if IF_gpu:"}
{"function_name": "Class2Count", "function_define": "    label2count = [0.0]\n    tmp_count = label_indice[i]\n    label2count.append(tmp_count)", "piece": "tmp_count = label_indice[i]"}
{"function_name": "tmp_path_fixture", "function_define": "    self.migrations_dir.mkdir()\n    finally:\n    sys.path.pop(0)", "piece": "finally:"}
{"function_name": "extract_digraph", "function_define": "    ModelSpec.\n    connxns = {}\n    nodes = {}", "piece": "connxns = {}"}
{"function_name": "display_raster", "function_define": "    h = self.history\n    ts = sortedDictKeys(h)\n    if new_figure:", "piece": "ts = sortedDictKeys(h)"}
{"function_name": "transmit", "function_define": "    syslog_msg = syslog_msg + b'\\n'\n    if self.text_mode:\n    self.stream.write(syslog_msg)", "piece": "if self.text_mode:"}
{"function_name": "handle_args", "function_define": "    have_model_xml = False\n    have_model_bin = False\n    for an_arg in argv:", "piece": "have_model_bin = False"}
{"function_name": "print_arg_vals", "function_define": "    print('')\n    print('')\n    print('program arguments:')", "piece": "print('')"}
{"function_name": "print_usage", "function_define": "    print('\\nusage: ')\n    print('')\n    print('options:')", "piece": "print('')"}
{"function_name": "on_event", "function_define": "    user_id = event.object.peer_id\n    text = event.object.text\n    if state is not None:", "piece": "text = event.object.text"}
{"function_name": "send_step", "function_define": "    if 'text' in step:\n    if 'image' in step:\n    image = handler(text, context)", "piece": "if 'image' in step:"}
{"function_name": "to_alipay_dict", "function_define": "    params = dict()\n    if self.buyer:\n    params['buyer'] = self.buyer", "piece": "if self.buyer:"}
{"function_name": "from_alipay_dict", "function_define": "    if not d:\n    if 'buyer' in d:\n    o.buyer = d['buyer']", "piece": "if 'buyer' in d:"}
{"function_name": "test_fingerprint", "function_define": "    numSets = 10\n    cash.faucet(cost)\n    expectedAffiliateFees *= 0.8", "piece": "cash.faucet(cost)"}
{"function_name": "add_files", "function_define": "    for f in files:\n    fn = os.path.join(root, f)\n    zipf.write(fn, arcname)", "piece": "fn = os.path.join(root, f)"}
{"function_name": "webgl_build", "function_define": "    Creates a WebGL build\n    import json\n    from functools import reduce", "piece": "import json"}
{"function_name": "build_sha256", "function_define": "    m = hashlib.sha256()\n    with open(path, 'rb') as f:\n    m.update(f.read())", "piece": "with open(path, 'rb') as f:"}
{"function_name": "build_pip", "function_define": "    import shutil\n    if os.path.isdir('dist'):\n    shutil.rmtree('dist')", "piece": "if os.path.isdir('dist'):"}
{"function_name": "archive_push", "function_define": "    zipf.close()\n    build_log_push(build_info)\n    print('Build successful')", "piece": "build_log_push(build_info)"}
{"function_name": "ci_build", "function_define": "    import fcntl\n    procs = []\n    p = ci_build_arch(arch, branch)", "piece": "procs = []"}
{"function_name": "ci_build_arch", "function_define": "    import subprocess\n    import boto3\n    import ai2thor.downloader", "piece": "import boto3"}
{"function_name": "poll_ci_build", "function_define": "    import ai2thor.downloader\n    import time\n    for i in range(60):", "piece": "import time"}
{"function_name": "interact", "function_define": "    import ai2thor.controller\n    if local_build:\n    if editor_mode:", "piece": "if local_build:"}
{"function_name": "benchmark", "function_define": "    import ai2thor.controller\n    import random\n    import time", "piece": "import random"}
{"function_name": "webgl_deploy", "function_define": "    bucket_name = 'ai2-thor-webgl'\n    s3 = boto3.resource('s3')\n    if verbose:", "piece": "s3 = boto3.resource('s3')"}
{"function_name": "test_routine", "function_define": "    average_frame_time = 0\n    for i in range(n):\n    start = time.time()", "piece": "for i in range(n):"}
{"function_name": "walk_recursive", "function_define": "    f_path = join(path, file_name)\n    if isfile(f_path):\n    elif isdir(f_path):", "piece": "if isfile(f_path):"}
{"function_name": "upload_file", "function_define": "    if verbose:\n    print(\"'{}'\".format(key))\n    with open(f_path, 'rb') as f:", "piece": "print(\"'{}'\".format(key))"}
{"function_name": "perform_destroy", "function_define": "    data = self.request.data['data']\n    user = self.request.user\n    nodes = []", "piece": "user = self.request.user"}
{"function_name": "draw_board", "function_define": "    for c in range(COLUMN_COUNT):\n    for r in range(ROW_COUNT):\n    for c in range(COLUMN_COUNT):", "piece": "for r in range(ROW_COUNT):"}
{"function_name": "corrupt_data", "function_define": "    num_examples = len(data)\n    for e in corrupt_elements:\n    correct_label = data[e][-1]", "piece": "for e in corrupt_elements:"}
{"function_name": "read_attributes", "function_define": "    Read in the attributes\n    attributes = {}\n    in_attr, out_attr = ([], [])", "piece": "attributes = {}"}
{"function_name": "to_encode", "function_define": "    to encode\n    values = self.attributes[attr]\n    if len(values) > 1:", "piece": "values = self.attributes[attr]"}
{"function_name": "read_data", "function_define": "    data = []\n    with open(data_path, 'r') as f:\n    for line in f:", "piece": "with open(data_path, 'r') as f:"}
{"function_name": "cluster_tSNE", "function_define": "    self.load_data()\n    tsne = TSNE(n_components=2)\n    self.df['comp-1'] = X_2d[:, 0]", "piece": "tsne = TSNE(n_components=2)"}
{"function_name": "cluster_PCA_tSNE", "function_define": "    self.load_data()\n    pca = PCA(n_components=50)\n    self.df['comp-1'] = X_2d[:, 0]", "piece": "pca = PCA(n_components=50)"}
{"function_name": "plot_imgs", "function_define": "    fig, ax = plt.subplots()\n    plt.figure(figsize=(16, 10))\n    for im in self.df['im_names']:", "piece": "plt.figure(figsize=(16, 10))"}
{"function_name": "crear_dni", "function_define": "    valor = False\n    while valor == False:\n    valor = True", "piece": "while valor == False:"}
{"function_name": "leer_archivo", "function_define": "    f = open('Pacientes.txt', 'r')\n    paciente = f.read()\n    f.close()", "piece": "paciente = f.read()"}
{"function_name": "buscar_dni", "function_define": "    lista_pacientes = lista()\n    paciente = lista_pacientes[i]\n    buscar = paciente.find(dni)", "piece": "paciente = lista_pacientes[i]"}
{"function_name": "modificar_lista", "function_define": "    valor = modificar_paciente(dni)\n    if valor == -1:\n    lista_original = lista()", "piece": "if valor == -1:"}
{"function_name": "run_epoch", "function_define": "    batch_losses = []\n    batch_counts = []\n    batch_metrics = []", "piece": "batch_counts = []"}
{"function_name": "_save_model", "function_define": "    if self.checkpoint is None:\n    if self.epoch > 0:\n    self.history.append(save_state)", "piece": "if self.epoch > 0:"}
{"function_name": "startRecData", "function_define": "    global grabar\n    grabar = True\n    print('Start recording data')", "piece": "grabar = True"}
{"function_name": "onOpenFile", "function_define": "    if path:\n    self.stop()\n    conf.CAM_ID = path", "piece": "self.stop()"}
{"function_name": "onOpenURL", "function_define": "    self.stop()\n    conf.CAM_ID = url\n    self.start()", "piece": "conf.CAM_ID = url"}
{"function_name": "onCamera", "function_define": "    self.stop()\n    conf.CAM_ID = camId\n    self.start()", "piece": "conf.CAM_ID = camId"}
{"function_name": "addAction", "function_define": "    action = qt.QAction(name, self)\n    action.setShortcut(shortcut)\n    action.triggered.connect(cb)", "piece": "action.setShortcut(shortcut)"}
{"function_name": "construct", "function_define": "    self.init_camera()\n    self.init_axes()\n    self.init_paraboloid()", "piece": "self.init_axes()"}
{"function_name": "init_axes", "function_define": "    self.axes = self.get_axes()\n    self.axes.x_axis.set_color(BLUE)\n    self.axes.z_axis.set_color(RED)", "piece": "self.axes.x_axis.set_color(BLUE)"}
{"function_name": "_parseArgs", "function_define": "    options = {}\n    options[kSimDirFlag] = ''\n    options[kSimTypeFlag] = '.amc'", "piece": "options[kSimDirFlag] = ''"}
{"function_name": "legal_moves", "function_define": "    for c in range(3):\n    for r in range(3):\n    if self.state[r][c] is None:", "piece": "for r in range(3):"}
{"function_name": "heuristic", "function_define": "    if sign == -1:\n    player = not self.player\n    player = self.player", "piece": "player = not self.player"}
{"function_name": "test_user_login", "function_define": "    with self.app as c:\n    assert session['id'] == 1\n    with self.app as c:", "piece": "assert session['id'] == 1"}
{"function_name": "check_errors", "function_define": "    error = self._error\n    if error is None:\n    elif exception is None:", "piece": "if error is None:"}
{"function_name": "critical", "function_define": "    self._handler(f'[error] {msg}')\n    self._error = code\n    raise SystemExit(code)", "piece": "self._error = code"}
{"function_name": "bfs_traversal", "function_define": "    result = ''\n    stack.push(root)\n    while not stack.is_empty():", "piece": "stack.push(root)"}
{"function_name": "get_key_control", "function_define": "    Returns:\n    from pyglet.window import key\n    global KEY_INPUT", "piece": "from pyglet.window import key"}
{"function_name": "save_config", "function_define": "    config: Configuration object.\n    Returns:\n    Configuration object.", "piece": "Returns:"}
{"function_name": "load_config", "function_define": "    Returns:\n    Configuration object.\n    raise IOError(message)", "piece": "Configuration object."}
{"function_name": "__setattr__", "function_define": "    if not self._mutable:\n    raise RuntimeError(message)\n    if key.startswith('__'):", "piece": "raise RuntimeError(message)"}
{"function_name": "setup_logging", "function_define": "    logger = logging.getLogger()\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)", "piece": "handler.setFormatter(formatter)"}
{"function_name": "filelist", "function_define": "    path = Path(path)\n    if include_subfolders:\n    if exclude:", "piece": "if include_subfolders:"}
{"function_name": "Foo__init__", "function_define": "    self.field1 = field1\n    self.field2 = field2\n    self.field3 = field3", "piece": "self.field2 = field2"}
{"function_name": "Foo__setstate__", "function_define": "    state.setdefault('field1', None)\n    state.setdefault('field2', None)\n    state.setdefault('field3', None)", "piece": "state.setdefault('field2', None)"}
{"function_name": "Foo2__init__", "function_define": "    self.field1 = field1\n    self.field2 = field2\n    self.field3 = field3", "piece": "self.field2 = field2"}
{"function_name": "Foo2__setstate__", "function_define": "    state.setdefault('field1', None)\n    state.setdefault('field2', None)\n    state.setdefault('field3', None)", "piece": "state.setdefault('field2', None)"}
{"function_name": "readFromJson", "function_define": "    if kwargs:\n    json_obj = json\n    if is_text:", "piece": "json_obj = json"}
{"function_name": "__repr__", "function_define": "    padding = ' ' * 4\n    if self.field1 is not None:\n    if self.field2 is not None:", "piece": "if self.field1 is not None:"}
{"function_name": "options_test", "function_define": "    testopts = Options()\n    print(testopts.get('job_name'))\n    print(testopts.get('cmdopts'))", "piece": "print(testopts.get('job_name'))"}
{"function_name": "_init_logging", "function_define": "    rather than using self.get()!\n    if self.options.silent:\n    stdout_level = logging.CRITICAL", "piece": "if self.options.silent:"}
{"function_name": "commandline", "function_define": "    if self.job_name:\n    if self.job_name in local_args:\n    local_args.remove(self.job_name)", "piece": "if self.job_name in local_args:"}
{"function_name": "load_defaults", "function_define": "    default_ini = filetemp.read()\n    filetemp.close()\n    except IOError:", "piece": "filetemp.close()"}
{"function_name": "load_job_type", "function_define": "    job_type_ini = filetemp.read()\n    filetemp.close()\n    except IOError:", "piece": "filetemp.close()"}
{"function_name": "create_token", "function_define": "    if user is None:\n    raise RuntimeError\n    raise RuntimeError", "piece": "raise RuntimeError"}
{"function_name": "load_data", "function_define": "    fileHandler.close()\n    for line in listOfLines:\n    words = line.split()", "piece": "for line in listOfLines:"}
{"function_name": "body_to_lists", "function_define": "    print('organizing date details')\n    days = list()\n    day_titles = list()", "piece": "days = list()"}
{"function_name": "test_smolyak", "function_define": "    import numpy\n    a = [0.5, 0.1]\n    b = [2, 3]", "piece": "a = [0.5, 0.1]"}
{"function_name": "test_smolyak_2", "function_define": "    import numpy\n    values = f(sg.grid)\n    import time", "piece": "values = f(sg.grid)"}
{"function_name": "_test_all", "function_define": "    ur = pyru.ur\n    bads = []\n    for expr in test_all:", "piece": "bads = []"}
{"function_name": "test_all", "function_define": "    goods = []\n    bads = []\n    fails = []", "piece": "bads = []"}
{"function_name": "test_roundtrip", "function_define": "    roundtrip = []\n    paramparser = pyru.ParamParser()\n    unit = paramparser(ir)", "piece": "paramparser = pyru.ParamParser()"}
{"function_name": "quick_instance", "function_define": "    Current connection.\n    The os tag. Default : 'debian'.\n    Default : None.", "piece": "The os tag. Default : 'debian'."}
{"function_name": "myreducer", "function_define": "    result = set()\n    for c in contribs:\n    result |= c", "piece": "for c in contribs:"}
{"function_name": "add_document", "function_define": "    for word in document:\n    for i in range(1, len(word)):\n    prefix = word[:i]", "piece": "for i in range(1, len(word)):"}
{"function_name": "Calibration", "function_define": "    mdb.models[name].Calibration\n    Parameters\n    A Calibration object.", "piece": "Parameters"}
{"function_name": "is_video_file", "function_define": "    if in_file.suffix == '.avi':\n    elif in_file.suffix == '.mp4':\n    elif in_file.suffix == '.mkv':", "piece": "elif in_file.suffix == '.mp4':"}
{"function_name": "rename_video", "function_define": "    counter = 0\n    for x in sub_dir.iterdir():\n    counter = counter + 1", "piece": "for x in sub_dir.iterdir():"}
{"function_name": "createOptimizer", "function_define": "    lr = 0.1\n    dcy = lr / self.num_epochs\n    if opt == 'adam':", "piece": "dcy = lr / self.num_epochs"}
{"function_name": "createModel", "function_define": "    model = Sequential()\n    model.add(Dropout(0.2))\n    model.add(Dropout(0.3))", "piece": "model.add(Dropout(0.2))"}
{"function_name": "trainModel", "function_define": "    self.trained_model = model\n    ax[0].grid()\n    ax[1].grid()", "piece": "ax[0].grid()"}
{"function_name": "fillMenuBar", "function_define": "    self.menuFile.add_separator()\n    self.menuFile.add_separator()\n    self.menuFile.add_separator()", "piece": "self.menuFile.add_separator()"}
{"function_name": "downloadData", "function_define": "    nodes = self.selected_nodes\n    self.browseFiles()\n    except AttributeError as ae:", "piece": "self.browseFiles()"}
{"function_name": "connectionDialog", "function_define": "    self.tree.destroy()\n    self.vsb.destroy()\n    print(\"can't destroy\")", "piece": "self.vsb.destroy()"}
{"function_name": "addToTreeAndDict", "function_define": "    node_collection = {}\n    for day in days:\n    node_collection[str(day)] = day", "piece": "for day in days:"}
{"function_name": "walk_hierarchy", "function_define": "    depth = current_depth\n    if child.getName() == 'DN':\n    if i < 1:", "piece": "if child.getName() == 'DN':"}
{"function_name": "buildHierarchy", "function_define": "    this_depth = depth - 1\n    current_children = []\n    for child in children:", "piece": "current_children = []"}
{"function_name": "buildLevels", "function_define": "    this_depth = max_depth - 1\n    child_length = parent_length\n    path_to_child = ''", "piece": "child_length = parent_length"}
{"function_name": "create_stack", "function_define": "    blocks = []\n    block = blocks[-1]\n    print(f'     | -- {block}')", "piece": "block = blocks[-1]"}
{"function_name": "loop_lifting", "function_define": "    Loop lifting transformation.\n    blocks = func_ir.blocks.copy()\n    loops = []", "piece": "blocks = func_ir.blocks.copy()"}
{"function_name": "with_lifting", "function_define": "    from numba import postproc\n    myflags = flags.copy()\n    if objectmode:", "piece": "myflags = flags.copy()"}
{"function_name": "find_setupwiths", "function_define": "    for blk in blocks.values():\n    yield (ew.begin, ew.end)\n    for a, b in known_ranges:", "piece": "yield (ew.begin, ew.end)"}
{"function_name": "same_exit_point", "function_define": "    outedges = set()\n    for k in loop.exits:\n    if not succs:", "piece": "for k in loop.exits:"}
{"function_name": "replace_target", "function_define": "    if isinstance(term, ir.Branch):\n    elif isinstance(term, ir.Jump):\n    assert not term.get_targets()", "piece": "elif isinstance(term, ir.Jump):"}
{"function_name": "get_ctxmgr_obj", "function_define": "    as a call.\n    var_ref = dfn.func\n    extra = None", "piece": "var_ref = dfn.func"}
{"function_name": "modified_environ", "function_define": "    env = os.environ\n    update = update or {}\n    remove = remove or []", "piece": "update = update or {}"}
{"function_name": "create_dataset", "function_define": "    dataset = load_saved_dataset()\n    if not dataset.empty:\n    for team in teams:", "piece": "if not dataset.empty:"}
{"function_name": "solve_bellman", "function_define": "    v = sol.v[t]\n    c = sol.c[t]\n    for ip in prange(par.Np):", "piece": "c = sol.c[t]"}
{"function_name": "test__next__", "function_define": "    working_dir = setup_env\n    elements = iter(t_releaselogit)\n    assert next(elements)", "piece": "elements = iter(t_releaselogit)"}
{"function_name": "subsample_rois", "function_define": "    fg_num_rois = fg_inds.numel()\n    fg_inds = fg_inds[rand_num]\n    bg_inds = []", "piece": "fg_inds = fg_inds[rand_num]"}
{"function_name": "sample_bg_inds", "function_define": "    bg_inds = hard_bg_inds[rand_idx]\n    bg_inds = easy_bg_inds[rand_idx]\n    raise NotImplementedError", "piece": "bg_inds = easy_bg_inds[rand_idx]"}
{"function_name": "add_to_open", "function_define": "    if self.strategy == 'breadth':\n    elif self.strategy == 'depth':\n    self.open_nodes[:0] = lnewnodes", "piece": "elif self.strategy == 'depth':"}
{"function_name": "onPageContent", "function_define": "    if page._leftColumn:\n    text += ['      </td>']\n    if page._main:", "piece": "text += ['      </td>']"}
{"function_name": "position", "function_define": "    if not self.is_playing:\n    if not self.current:\n    if self.paused:", "piece": "if not self.current:"}
{"function_name": "my_function", "function_define": "    run_name = '_low'\n    all_weather_stations = False\n    same_weather_yr = True", "piece": "all_weather_stations = False"}
{"function_name": "run_command", "function_define": "    if log_output:\n    return_code = res.returncode\n    return_code = 1", "piece": "return_code = res.returncode"}
{"function_name": "add_time_to_db", "function_define": "    job = fetch_job_from_db(job_id)\n    if time_type == 'start':\n    job.start_time = formatted_time", "piece": "if time_type == 'start':"}
{"function_name": "mutate_status", "function_define": "    execution without errors\n    job = fetch_job_from_db(job_id)\n    if stage == 'start':", "piece": "job = fetch_job_from_db(job_id)"}
{"function_name": "install0", "function_define": "    install_deps()\n    install_guac_server()\n    install_guac_client()", "piece": "install_guac_server()"}
{"function_name": "install_deps", "function_define": "    sudo('mkdir -p ~/Downloads')\n    with cd('Downloads'):\n    if not exists(libjpeg):", "piece": "with cd('Downloads'):"}
{"function_name": "cmake_args", "function_define": "    options = []\n    if '+mpi' in self.spec:\n    if '+lapacke' in self.spec:", "piece": "if '+mpi' in self.spec:"}
{"function_name": "_extract_costs", "function_define": "    ret_map = OrderedDict()\n    sub_costs = OrderedDict()\n    for k, val in vars.items():", "piece": "sub_costs = OrderedDict()"}
{"function_name": "mask_in_EgoGrid", "function_define": "    indices = np.where(mask_unk)\n    ego_x = ego_xy[0][indices]\n    ego_y = ego_xy[1][indices]", "piece": "ego_x = ego_xy[0][indices]"}
{"function_name": "test_markdown", "function_define": "    actual = api.to_markdown()\n    actual_output.write(actual)\n    assert actual == expected", "piece": "actual_output.write(actual)"}
{"function_name": "serialize_numpy", "function_define": "    length = len(_x)\n    length = len(_x)\n    length = len(self.packets)", "piece": "length = len(_x)"}
{"function_name": "run_asserts", "function_define": "    assert len(left) < len(res) + 1\n    assert result.name is None\n    if sort:", "piece": "assert result.name is None"}
{"function_name": "slice_expand", "function_define": "    Converts slice to indices.\n    Outputs:\n    begin = []", "piece": "Outputs:"}
{"function_name": "slice2indices", "function_define": "    Converts slice to indices.\n    Outputs:\n    Tensor, the shape is (n, 1).", "piece": "Outputs:"}
{"function_name": "test_pipeline", "function_define": "    message = 'foo'\n    response = self.request(message)\n    source = self.source(response)", "piece": "response = self.request(message)"}
{"function_name": "save_resp_json", "function_define": "    file = ''\n    for k in resp['soap:Body']:\n    writefile = open(file, 'w')", "piece": "for k in resp['soap:Body']:"}
{"function_name": "get_json_file", "function_define": "    Returns a dict\"\"\"\n    openfile = open(filestring, 'r')\n    except FileNotFoundError:", "piece": "openfile = open(filestring, 'r')"}
{"function_name": "get_tank_list", "function_define": "    returnlist = []\n    for k in listfromjson:\n    if k['iTankID']:", "piece": "for k in listfromjson:"}
{"function_name": "get_tankinv_list", "function_define": "    returnlist = []\n    for k in tanklistfromjson:\n    if k['iTankID']:", "piece": "for k in tanklistfromjson:"}
{"function_name": "ncbigene_make", "function_define": "    chunks = []\n    print(i, len(idset))\n    data['id'] = (','.join(idset),)", "piece": "print(i, len(idset))"}
{"function_name": "test_create", "function_define": "    r = milkman.deliver(Root)\n    self.assertTrue(bool(r.id))\n    assert r.name is not None", "piece": "self.assertTrue(bool(r.id))"}
{"function_name": "socketRecv", "function_define": "    while True:\n    print(data)\n    time.sleep(0.1)", "piece": "print(data)"}
{"function_name": "inputJob", "function_define": "    while True:\n    data = input()\n    s.send(bytes(data, 'utf-8'))", "piece": "data = input()"}
{"function_name": "commmandline", "function_define": "    print('Connecting for ' + datas)\n    client_data = datas\n    data = client_data.split('@')", "piece": "client_data = datas"}
{"function_name": "_test_connected", "function_define": "    assert len(unpacked_) == 150\n    self.connected = True\n    self.connected = False", "piece": "self.connected = True"}
{"function_name": "get_when_visible", "function_define": "    driver (base.CustomDriver)\n    locator (tuple)\n    Returns:", "piece": "locator (tuple)"}
{"function_name": "get_folder", "function_define": "    svg = self.document.getroot()\n    export_file = svg.attrib[att]\n    except KeyError:", "piece": "export_file = svg.attrib[att]"}
{"function_name": "getDocumentScale", "function_define": "    documentscale = 1\n    if viewboxstr:\n    p = param.match(svgwidth)", "piece": "if viewboxstr:"}
{"function_name": "set_texture", "function_define": "    self.texture = texture\n    if texture:\n    self.modified_vertices = True", "piece": "if texture:"}
{"function_name": "update_vertices", "function_define": "    if total_vertices >= 2:\n    vertex_index = 0\n    vertex_index += 1", "piece": "vertex_index = 0"}
{"function_name": "transferVertices", "function_define": "    if self.modified_vertices:\n    vertex_index = 0\n    vertex_index += 1", "piece": "vertex_index = 0"}
{"function_name": "begin_geometry", "function_define": "    self.vertex_index = 0\n    if self.texture != None:\n    if self.texture != None:", "piece": "if self.texture != None:"}
{"function_name": "check_for_update", "function_define": "    state = False\n    state = True\n    if self.pause:", "piece": "state = True"}
{"function_name": "end_motion_trail", "function_define": "    self.active = False\n    self.reset_motion_trail()\n    self.playing = False", "piece": "self.reset_motion_trail()"}
{"function_name": "set_fade", "function_define": "    if self.pause == False:\n    self.fade_color_scale = 1.0\n    if time == 0.0:", "piece": "self.fade_color_scale = 1.0"}
{"function_name": "get_score", "function_define": "    print('Fitting model')\n    print(params)\n    model.fit(train, train_y)", "piece": "print(params)"}
{"function_name": "getSecurities", "function_define": "    resp = requests.get(url)\n    secs = {}\n    sec = {}", "piece": "secs = {}"}
{"function_name": "get_yf_data", "function_define": "    yahoo_response = df.to_dict()\n    ticker_data = {}\n    candles = []", "piece": "ticker_data = {}"}
{"function_name": "save_data", "function_define": "    if source == 'YAHOO':\n    elif source == 'TD_AMERITRADE':\n    load_prices_from_tda(securities)", "piece": "elif source == 'TD_AMERITRADE':"}
{"function_name": "create_slug", "function_define": "    if '.' in model_class:\n    model_name = model_class\n    from django.db import models", "piece": "model_name = model_class"}
{"function_name": "make_model_dto", "function_define": "    print dto.title\n    dto.more = 11\n    print dto.more", "piece": "dto.more = 11"}
{"function_name": "get_object_dto", "function_define": "    data = {}\n    serializer.start_serialization()\n    if field.serialize:", "piece": "serializer.start_serialization()"}
{"function_name": "generate_rnn", "function_define": "    chaotic data.\n    N: number of hidden units\n    Returns:", "piece": "N: number of hidden units"}
{"function_name": "generate_data", "function_define": "    rnn: the rnn\n    E: total number of examples\n    Returns:", "piece": "E: total number of examples"}
{"function_name": "normalize_rates", "function_define": "    for e in range(E):\n    r_sxt = data_e[e]\n    for i in range(S):", "piece": "r_sxt = data_e[e]"}
{"function_name": "spikify_data", "function_define": "    Returns:\n    E = len(data_e)\n    spikes_e = []", "piece": "E = len(data_e)"}
{"function_name": "gaussify_data", "function_define": "    Returns:\n    E = len(data_e)\n    mfr = max_firing_rate", "piece": "E = len(data_e)"}
{"function_name": "set_todo", "function_define": "    if 'current_user' not in g:\n    authorize_request()\n    view_args = request.view_args", "piece": "authorize_request()"}
{"function_name": "set_item", "function_define": "    if not hasattr(request, 'todo'):\n    set_todo()\n    view_args = request.view_args", "piece": "set_todo()"}
{"function_name": "imgTransform", "function_define": "    img_correct = ImgCorrect(img)\n    img_correct.img_lines()\n    print('\u77eb\u6b63\u5931\u8d25:' + image_file)", "piece": "img_correct.img_lines()"}
{"function_name": "search_lines", "function_define": "    lines = self.lines[:, 0, :]\n    number_inexistence_k = 0\n    sum_positive_k45 = 0", "piece": "number_inexistence_k = 0"}
{"function_name": "rotate_image", "function_define": "    if -45 <= degree <= 0:\n    degree = degree\n    if -90 <= degree < -45:", "piece": "degree = degree"}
{"function_name": "CheckFeasibility", "function_define": "    check = True\n    for i in range(2):\n    check = False", "piece": "for i in range(2):"}
{"function_name": "TakesProjection", "function_define": "    pd = proj_dir\n    od = 1 - pd\n    check = True", "piece": "od = 1 - pd"}
{"function_name": "item_in_feed", "function_define": "    items = CHANNEL.findall('item')\n    for item in items:\n    link = item.find('link').text", "piece": "for item in items:"}
{"function_name": "add_entry", "function_define": "    ti.text = title\n    l = ET.SubElement(item, 'link')\n    l.text = link", "piece": "l = ET.SubElement(item, 'link')"}
{"function_name": "repeat_roll", "function_define": "    torch.arange(shape[dim])\n    repeat_dims = list(shape)[:dim]\n    n = prod(interleave_dims)", "piece": "repeat_dims = list(shape)[:dim]"}
{"function_name": "unravel_index", "function_define": "    out = []\n    for dim in reversed(shape):\n    out.append(index % dim)", "piece": "for dim in reversed(shape):"}
{"function_name": "reindex_tensor", "function_define": "    with many dimensions.\n    b = reindex(a)\n    print(b)", "piece": "b = reindex(a)"}
{"function_name": "get_options", "function_define": "    setinclude = False\n    if java_executable == None:\n    java_executable = 'java'", "piece": "if java_executable == None:"}
{"function_name": "execute_test", "function_define": "    retvalue = -1\n    envvars = os.environ.copy()\n    if platform.system() == 'Linux':", "piece": "envvars = os.environ.copy()"}
{"function_name": "evaluate_expr", "function_define": "    recurse = evaluate_expr\n    result = identity\n    assert len(expression.args) == 1", "piece": "result = identity"}
{"function_name": "write_prg", "function_define": "    if lowhigh == 0:\n    a = bytearray(2)\n    a[0] = 0", "piece": "a = bytearray(2)"}
{"function_name": "mongo_connect", "function_define": "    host = '127.0.0.1'\n    client = MongoClient(host=host)\n    db = client.test_database", "piece": "client = MongoClient(host=host)"}
{"function_name": "handle_noargs", "function_define": "    from bananas import admin\n    django_admin.autodiscover()\n    meta = model._meta", "piece": "django_admin.autodiscover()"}
{"function_name": "threhold_seg", "function_define": "    inp_ = np.copy(inp)\n    inp_[inp_ > 0.5] = 1.0\n    inp_[inp_ <= 0.5] = 0.0", "piece": "inp_[inp_ > 0.5] = 1.0"}
{"function_name": "unset_env", "function_define": "    for k in env_to_unset:\n    if k not in env:\n    continue", "piece": "if k not in env:"}
{"function_name": "meta_predicate", "function_define": "    ignore = []\n    if self._killed:\n    ignore.append('pause-kill')", "piece": "if self._killed:"}
{"function_name": "update_exports", "function_define": "    if server_has_feature('nbfs'):\n    nbfsd_pid = get_nbfsd_pid()\n    if nbfsd_pid is None:", "piece": "nbfsd_pid = get_nbfsd_pid()"}
{"function_name": "STDerror", "function_define": "    x = [m * t + b for t in time]\n    mt = np.mean(time)\n    num_slope = 0", "piece": "mt = np.mean(time)"}
{"function_name": "plot_all", "function_define": "    plt.style.use('seaborn-dark')\n    df = simulation.results\n    df = theory.results", "piece": "df = simulation.results"}
{"function_name": "do_simulation", "function_define": "    means.append(p[0])\n    stdvs.append(p[1])\n    shrps.append(p[2])", "piece": "stdvs.append(p[1])"}
{"function_name": "do_theory", "function_define": "    z = {**x, **y}\n    max_sharpe_port = pd.Series(z)\n    z_vo = {**x_vo, **y_vo}", "piece": "max_sharpe_port = pd.Series(z)"}
{"function_name": "setZeroes", "function_define": "    rows = [0] * len(matrix)\n    cols = [0] * len(matrix[0])\n    for i, row in enumerate(matrix):", "piece": "cols = [0] * len(matrix[0])"}
{"function_name": "read_temp_c", "function_define": "    self.CS(False)\n    fault = self.spi.read(1)[0]\n    self.CS(True)", "piece": "fault = self.spi.read(1)[0]"}
{"function_name": "_read_register", "function_define": "    self.CS(False)\n    self.spi.write(bytes([address]))\n    value = self.spi.read(1)[0]", "piece": "self.spi.write(bytes([address]))"}
{"function_name": "on_message", "function_define": "    slots = intent_json['slots']\n    for slot in slots:\n    slot_name = slot['slotName']", "piece": "for slot in slots:"}
{"function_name": "run_server", "function_define": "    server.start()\n    except KeyboardInterrupt:\n    server.stop()", "piece": "except KeyboardInterrupt:"}
{"function_name": "incrementmonth", "function_define": "    oy = orig[0]\n    om = orig[1]\n    nm = om + inc", "piece": "om = orig[1]"}
{"function_name": "goldmonth", "function_define": "    m = str(month[1])\n    if len(m) == 1:\n    m = '0' + m", "piece": "if len(m) == 1:"}
{"function_name": "getmysqldata", "function_define": "    import os\n    import mysql.connector\n    output = ''", "piece": "import mysql.connector"}
{"function_name": "cmd_vel_clb", "function_define": "    Get velocity value from topic\n    goal_vel_msg = data\n    current_mode = RemoteMode.vel", "piece": "goal_vel_msg = data"}
{"function_name": "drive_vel_clb", "function_define": "    Get drive value from topic\n    drive_msg = data\n    current_mode = RemoteMode.drive", "piece": "drive_msg = data"}
{"function_name": "current_pose_clb", "function_define": "    Get current pose from topic\n    global current_course\n    current_course = yaw", "piece": "global current_course"}
{"function_name": "velocity_clb", "function_define": "    Get current velocity from FCU\n    rot = current_course\n    current_velocity = data", "piece": "rot = current_course"}
{"function_name": "cfg_callback", "function_define": "    print('config')\n    kP = float(config['kP'])\n    kI = float(config['kI'])", "piece": "kP = float(config['kP'])"}
{"function_name": "set_rc_remote", "function_define": "    motor_val = 0.0\n    if mode == RemoteMode.pwm:\n    pwm_output_msg = pwm_msg", "piece": "if mode == RemoteMode.pwm:"}
{"function_name": "get_car_params", "function_define": "    Get car params data\n    data = CarParams()\n    data.motor_run = motor_run", "piece": "data = CarParams()"}
{"function_name": "video_attack", "function_define": "    print(Style.RESET_ALL)\n    if len(proxies) == 0:\n    for k in range(5):", "piece": "if len(proxies) == 0:"}
{"function_name": "profile_attack", "function_define": "    print(Style.RESET_ALL)\n    if len(proxies) == 0:\n    for k in range(5):", "piece": "if len(proxies) == 0:"}
{"function_name": "plot_nb_dists", "function_define": "    tree = KDTree(X, leaf_size=2)\n    max_nn = max(nearest_neighbor)\n    plt.figure()", "piece": "max_nn = max(nearest_neighbor)"}
{"function_name": "plot_cluster", "function_define": "    plt.figure()\n    if background:\n    xmin_wgs = 12.208", "piece": "if background:"}
{"function_name": "export_to_shp", "function_define": "    data = np.array(data)\n    gdf['label'] = labels\n    print('done')", "piece": "gdf['label'] = labels"}
{"function_name": "_init_counter", "function_define": "    if 'seed' in kwarg.keys():\n    np.random.seed(kwarg['seed'])\n    self.tr_batch_counter = 0", "piece": "np.random.seed(kwarg['seed'])"}
{"function_name": "tr_get_batch", "function_define": "    batch_size = self.tr_batch_num\n    self.tr_batch_counter = 0\n    batch = self.tr[target_index]", "piece": "self.tr_batch_counter = 0"}
{"function_name": "te_get_batch", "function_define": "    batch_size = self.te_batch_num\n    self.te_batch_counter = 0\n    batch = self.te[target_index]", "piece": "self.te_batch_counter = 0"}
{"function_name": "setup_train_op", "function_define": "    kwarg['l2_norm'] = None\n    kwarg['keep_norm_loss'] = True\n    kwarg['clip_gvs'] = True", "piece": "kwarg['keep_norm_loss'] = True"}
{"function_name": "_zip_run", "function_define": "    Description\n    Parameters\n    feed_dict, dict", "piece": "Parameters"}
{"function_name": "decode_line", "function_define": "    i, _ = line.split(' | ', 2)\n    key = {}\n    reverse_key = {}", "piece": "key = {}"}
{"function_name": "lambda_handler", "function_define": "    session = boto3.Session()\n    CLIENT_NAME = 'kinesis'\n    CLIENT_NAME = 'sns'", "piece": "CLIENT_NAME = 'kinesis'"}
{"function_name": "infinite_loop", "function_define": "    for w in words:\n    if len(w) > 4:\n    words.insert(0, w)", "piece": "if len(w) > 4:"}
{"function_name": "process_kinesis", "function_define": "    flp = open(file_list_path, 'r')\n    for line in flp:\n    fp = open(file_path, 'r')", "piece": "for line in flp:"}
{"function_name": "connectAP", "function_define": "    import network\n    if not wlan.isconnected():\n    wlan.active(True)", "piece": "if not wlan.isconnected():"}
{"function_name": "check_step", "function_define": "    check_step: check the input step\n    init_step : int\n    end_step : int", "piece": "init_step : int"}
{"function_name": "check_center_inp", "function_define": "    center_dic: dictionary\n    Returns:\n    new_center_dic: dictionary", "piece": "Returns:"}
{"function_name": "check_rdf_inp", "function_define": "    rdf_dic: dictionary\n    Returns:\n    rdf_dic: dictionary", "piece": "Returns:"}
{"function_name": "check_rmsd_inp", "function_define": "    rmsd_dic: dictionary\n    Returns:\n    rmsd_dic: dictionary", "piece": "Returns:"}
{"function_name": "assign_to_grid", "function_define": "    if self.grid or self.layouts:\n    self.grid = grid\n    self.assign_possible_layouts()", "piece": "self.grid = grid"}
{"function_name": "get_one_hot", "function_define": "    cls_id_map = dict()\n    for lid in classe_list:\n    for k in range(len(y_target)):", "piece": "for lid in classe_list:"}
{"function_name": "from_file", "function_define": "    if path.endswith('.json'):\n    with open(path, 'r') as f:\n    elif path.endswith('.npy'):", "piece": "with open(path, 'r') as f:"}
{"function_name": "selectAllFromCon", "function_define": "    sql += ' {}'.format(sortType)\n    if sqlStartIndex is not None:\n    if sqlNumber is not None:", "piece": "if sqlStartIndex is not None:"}
{"function_name": "_extract_text", "function_define": "    script.decompose()\n    print('\\t* extracting text')\n    print('\\t\\t- [done]')", "piece": "print('\\t* extracting text')"}
{"function_name": "_extract_metas", "function_define": "    metas = soup.find_all('meta')\n    meta_content = []\n    for meta in metas:", "piece": "meta_content = []"}
{"function_name": "extract_features", "function_define": "    labels = []\n    f = open(data_saved_file, 'r')\n    data = json.load(f)", "piece": "f = open(data_saved_file, 'r')"}
{"function_name": "_clear_caches", "function_define": "    importlib.invalidate_caches()\n    sys.path_importer_cache.clear()\n    for name in self.import_graph:", "piece": "sys.path_importer_cache.clear()"}
{"function_name": "handle_import", "function_define": "    root = name.split('.')[0]\n    self.create_edge(root)\n    except ImportError:", "piece": "self.create_edge(root)"}
{"function_name": "__iter__", "function_define": "    item = self.start\n    while item < self.stop:\n    item = item + 1", "piece": "while item < self.stop:"}
{"function_name": "mkgetter", "function_define": "    if caster is None:\n    val = x._obj[fname]\n    except gdb.MemoryError:", "piece": "val = x._obj[fname]"}
{"function_name": "nll_loss", "function_define": "    batch_size = zs[0].shape[0]\n    for z in zs:\n    nll = nll - log_det", "piece": "for z in zs:"}
{"function_name": "case_3_7", "function_define": "    emailt = '<EMAIL>'\n    passw = '<PASSWORD>'\n    time.sleep(3)", "piece": "passw = '<PASSWORD>'"}
{"function_name": "run_racon", "function_define": "    if minimap_opts is None:\n    minimap_opts = '-t 1 -x map-ont'\n    print('>to_polish', file=f)", "piece": "minimap_opts = '-t 1 -x map-ont'"}
{"function_name": "dep_parse", "function_define": "    time.sleep(3)\n    if self.dom == 'uk':\n    time.sleep(1)", "piece": "if self.dom == 'uk':"}
{"function_name": "load_vocab", "function_define": "    tokens = reader.readlines()\n    token = token.rstrip('\\n')\n    vocab[token] = index", "piece": "token = token.rstrip('\\n')"}
{"function_name": "_learnStep", "function_define": "    self.switchMutations()\n    ES._learnStep(self)\n    self.switchMutations()", "piece": "ES._learnStep(self)"}
{"function_name": "fetch_friends", "function_define": "    complete_data = []\n    with self.db.cursor() as cursor:\n    data = cursor.fetchall()", "piece": "with self.db.cursor() as cursor:"}
{"function_name": "check_db", "function_define": "    error_users = set()\n    if not users:\n    with self.db.cursor() as cursor:", "piece": "if not users:"}
{"function_name": "visit_Call", "function_define": "    Visitor of a function call node\n    if isinstance(value, int):\n    elif isinstance(value, str):", "piece": "if isinstance(value, int):"}
{"function_name": "main_setup", "function_define": "    global request_fn\n    global problem_hp\n    problem_hp.get_hparams(hparams)", "piece": "global problem_hp"}
{"function_name": "predict_once", "function_define": "    global request_fn\n    global problem_hp\n    outputs, = outputs", "piece": "global problem_hp"}
{"function_name": "get_sentence", "function_define": "    z = predict_once(i)\n    if '.' in z:\n    z = z.split('.')[0]", "piece": "if '.' in z:"}
{"function_name": "test_asn_leu", "function_define": "    l_ca = topology.Atom(label='CA')\n    l_cb = topology.Atom(label='C')\n    l_cg = topology.Atom(label='C')", "piece": "l_cb = topology.Atom(label='C')"}
{"function_name": "register", "function_define": "    user = None\n    if user_id:\n    if request.method == 'POST':", "piece": "if user_id:"}
{"function_name": "u_change", "function_define": "    user = None\n    if user_id:\n    if request.method == 'POST':", "piece": "if user_id:"}
{"function_name": "passwordchange", "function_define": "    user = None\n    if user_id:\n    if request.method == 'POST':", "piece": "if user_id:"}
{"function_name": "get_config", "function_define": "    if 'config' not in _cached:\n    config = json.load(conf_file)\n    except ValueError as e:", "piece": "config = json.load(conf_file)"}
{"function_name": "build_html", "function_define": "    from flask_frozen import Freezer\n    from app import views\n    views.app.testing = True", "piece": "from app import views"}
{"function_name": "apply_filters", "function_define": "    from app import static\n    for filter_func in filters:\n    sources = filter_func(sources)", "piece": "for filter_func in filters:"}
{"function_name": "save_sources", "function_define": "    from hashlib import sha1\n    shutil.rmtree(full_prefix)\n    except FileNotFoundError:", "piece": "shutil.rmtree(full_prefix)"}
{"function_name": "template_inject", "function_define": "    import re\n    tags = ''\n    for filename in filenames:", "piece": "tags = ''"}
{"function_name": "copy_static", "function_define": "    if os.path.exists(dest):\n    shutil.rmtree(dest)\n    shutil.copytree(src, dest)", "piece": "shutil.rmtree(dest)"}
{"function_name": "build_static", "function_define": "    conf = get_config()['static']\n    if what in ('all', 'css'):\n    build_static_thing('css', conf)", "piece": "if what in ('all', 'css'):"}
{"function_name": "build_csv", "function_define": "    shutil.copy(src, dest)\n    shutil.copy(src, dest)\n    shutil.copy(src, dest)", "piece": "shutil.copy(src, dest)"}
{"function_name": "partition", "function_define": "    pivot = array[head]\n    i = head + 1\n    for j in range(head + 1, tail):", "piece": "i = head + 1"}
{"function_name": "bbox_iou_numpy", "function_define": "    iw = np.maximum(iw, 0)\n    ih = np.maximum(ih, 0)\n    intersection = iw * ih", "piece": "ih = np.maximum(ih, 0)"}
{"function_name": "reachable", "function_define": "    rset = set()\n    rset.add(w)\n    for ngh in G[w]:", "piece": "rset.add(w)"}
{"function_name": "order_by", "function_define": "    template = None\n    if self.nulls_last:\n    elif self.nulls_first:", "piece": "if self.nulls_last:"}
{"function_name": "shoulder_press", "function_define": "    gifs = [g1]\n    cap1 = cv2.VideoCapture(g1)\n    while True:", "piece": "cap1 = cv2.VideoCapture(g1)"}
{"function_name": "lateral_raise", "function_define": "    gif = [g1]\n    cap1 = cv2.VideoCapture(g1)\n    while True:", "piece": "cap1 = cv2.VideoCapture(g1)"}
{"function_name": "workout_menu", "function_define": "    while True:\n    event, values = window.read()\n    if event == sg.WIN_CLOSED:", "piece": "event, values = window.read()"}
{"function_name": "main_menu", "function_define": "    while True:\n    event, values = window.read()\n    window.close()", "piece": "event, values = window.read()"}
{"function_name": "SimulateCombat", "function_define": "    attacker_wins_count = 0\n    defender_wins_count = 0\n    one_and_one_count = 0", "piece": "defender_wins_count = 0"}
{"function_name": "rollAttacks", "function_define": "    self.rolls = []\n    for i in range(0, self.numDice):\n    self.rolls.append(rollD6())", "piece": "for i in range(0, self.numDice):"}
{"function_name": "rollDefense", "function_define": "    self.rolls = []\n    for i in range(0, self.numDice):\n    self.rolls.append(rollD6())", "piece": "for i in range(0, self.numDice):"}
{"function_name": "create_instance", "function_define": "    global validate_existing\n    global server_set\n    global cloud_info", "piece": "global server_set"}
{"function_name": "unit_tests", "function_define": "    s3p.print_images_list(conn)\n    s3p.print_server_list(conn)\n    node_id = '21-11'", "piece": "s3p.print_server_list(conn)"}
{"function_name": "maybe_reexec_pex", "function_define": "    found on said path.\n    against these interpreters.\n    target = None", "piece": "against these interpreters."}
{"function_name": "get_busy", "function_define": "    items = []\n    keys = []\n    for calendar in calendars:", "piece": "keys = []"}
{"function_name": "list_calendars", "function_define": "    result = []\n    for cal in calendar_list:\n    kind = cal['kind']", "piece": "for cal in calendar_list:"}
{"function_name": "cal_sort_key", "function_define": "    if cal['selected']:\n    selected_key = ' '\n    selected_key = 'X'", "piece": "selected_key = ' '"}
{"function_name": "set_up_stack", "function_define": "    self.rds_stack = RDSFactory()\n    for key in self.parameters:\n    self.input_wiring[key] = key", "piece": "for key in self.parameters:"}
{"function_name": "__load_defaults", "function_define": "    cfg = yaml.load(file)\n    if not cfg:\n    cfg = {}", "piece": "if not cfg:"}
{"function_name": "__load_token", "function_define": "    self.Token = file.read()\n    if self.Token:\n    token = input()", "piece": "if self.Token:"}
{"function_name": "__load_opus", "function_define": "    Loading voice codec.\n    if not discord.opus.is_loaded():\n    if discord.opus.is_loaded():", "piece": "if not discord.opus.is_loaded():"}
{"function_name": "__load_blocks", "function_define": "    self.Player = Player(self)\n    self.Connect = Connect(self)\n    self.Command = Command(self)", "piece": "self.Connect = Connect(self)"}
{"function_name": "stem_text", "function_define": "    porter_stemmer = PorterStemmer()\n    tokens = text.split()\n    stem_text = []", "piece": "tokens = text.split()"}
{"function_name": "contains", "function_define": "    Parameters\n    Point to check for.\n    if isinstance(other, tuple):", "piece": "Point to check for."}
{"function_name": "intersection", "function_define": "    Parameters\n    default : any, optional\n    an intersection.", "piece": "default : any, optional"}
{"function_name": "is_out_of_image", "function_define": "    Parameters\n    Image dimensions to use.\n    fully : bool, optional", "piece": "Image dimensions to use."}
{"function_name": "draw_on_image", "function_define": "    Parameters\n    image : (H,W,3) ndarray\n    alpha : float, optional", "piece": "image : (H,W,3) ndarray"}
{"function_name": "almost_equals", "function_define": "    This is the same as\n    Parameters\n    max_distance : number, optional", "piece": "Parameters"}
{"function_name": "from_point_soup", "function_define": "    This is the inverse of\n    Parameters\n    Bounding box around the points.", "piece": "Parameters"}
{"function_name": "from_xyxy_array", "function_define": "    This is the inverse of\n    Parameters\n    coordinates.", "piece": "Parameters"}
{"function_name": "to_xyxy_array", "function_define": "    This is the inverse of\n    Parameters\n    dtype : numpy.dtype, optional", "piece": "Parameters"}
{"function_name": "_separate_state", "function_define": "    model_state = {}\n    optimizer_state = {}\n    replay_buffer_state = {}", "piece": "optimizer_state = {}"}
{"function_name": "_load_one", "function_define": "    if not including_optimizer:\n    if not including_replay_buffer:\n    if strict:", "piece": "if not including_replay_buffer:"}
{"function_name": "determine_depth", "function_define": "    if chrom not in chrom_id:\n    if chrom.startswith('chr'):\n    chrom_id = chrom", "piece": "if chrom.startswith('chr'):"}
{"function_name": "findLeftPostion", "function_define": "    r = len(nums) - 1\n    while l <= r:\n    m = (l + r) // 2", "piece": "while l <= r:"}
{"function_name": "test_mem_map", "function_define": "    test_data = game.Game()\n    test_list = [1, 2]\n    test_data.set_mem_map(test_list)", "piece": "test_list = [1, 2]"}
{"function_name": "train_epoch", "function_define": "    train_loss_cur_epoch = 0.0\n    loss = self.train_step()\n    if i == idx_check_point:", "piece": "loss = self.train_step()"}
{"function_name": "load_module", "function_define": "    if not path.exists(module_dir):\n    if defines is not None:\n    if torch.cuda.is_available():", "piece": "if defines is not None:"}
{"function_name": "collect_scenes", "function_define": "    train_scenes = []\n    for c in self.cam_ids:\n    scale = None", "piece": "for c in self.cam_ids:"}
{"function_name": "get_scene_imgs", "function_define": "    if self.get_depth:\n    if self.get_pose:\n    if self.from_speed:", "piece": "if self.get_pose:"}
{"function_name": "test_add_vertex", "function_define": "    self.graph.add_vertex('A')\n    self.graph.add_vertex('B')\n    self.graph.add_vertex('C')", "piece": "self.graph.add_vertex('B')"}
{"function_name": "test_get_max", "function_define": "    self.heap.insert(-7)\n    self.heap.insert(7)\n    self.heap.insert(5)", "piece": "self.heap.insert(7)"}
{"function_name": "test_extract_min", "function_define": "    self.heap.insert(4)\n    self.heap.insert(5)\n    self.heap.insert(7)", "piece": "self.heap.insert(5)"}
{"function_name": "test_get_min", "function_define": "    self.heap.insert(4)\n    self.heap.insert(7)\n    self.heap.insert(2)", "piece": "self.heap.insert(7)"}
{"function_name": "test_iterator", "function_define": "    letters = []\n    for node in self.tree:\n    letters.append(node)", "piece": "for node in self.tree:"}
{"function_name": "test_height", "function_define": "    self.tree.insert('C')\n    self.tree.insert('D')\n    self.tree.insert('A')", "piece": "self.tree.insert('D')"}
{"function_name": "test_length", "function_define": "    self.tree.insert('C')\n    self.tree.insert('D')\n    self.tree.insert('A')", "piece": "self.tree.insert('D')"}
{"function_name": "test_contains", "function_define": "    self.tree.insert('C')\n    self.tree.insert('D')\n    self.tree.insert('A')", "piece": "self.tree.insert('D')"}
{"function_name": "test_search", "function_define": "    self.my_list.append(4)\n    self.my_list.append(3)\n    self.my_list.append(-17)", "piece": "self.my_list.append(3)"}
{"function_name": "test_remove", "function_define": "    self.my_list.append(4)\n    self.my_list.append(3)\n    self.my_list.append(7)", "piece": "self.my_list.append(3)"}
{"function_name": "test_in_order", "function_define": "    self.tree.insert('F')\n    self.tree.insert('G')\n    self.tree.insert('B')", "piece": "self.tree.insert('G')"}
{"function_name": "test_pre_order", "function_define": "    self.tree.insert('F')\n    self.tree.insert('G')\n    self.tree.insert('B')", "piece": "self.tree.insert('G')"}
{"function_name": "test_post_order", "function_define": "    self.tree.insert('F')\n    self.tree.insert('G')\n    self.tree.insert('B')", "piece": "self.tree.insert('G')"}
{"function_name": "test_push", "function_define": "    self.stack.push('!')\n    self.stack.push('world')\n    self.stack.push('Hello')", "piece": "self.stack.push('world')"}
{"function_name": "test_pop", "function_define": "    self.stack.push('!')\n    self.stack.push('world')\n    self.stack.push('Hello')", "piece": "self.stack.push('world')"}
{"function_name": "test_peek", "function_define": "    self.stack.push('!')\n    self.stack.push('world')\n    self.stack.push('Hello')", "piece": "self.stack.push('world')"}
{"function_name": "test_get_length", "function_define": "    self.stack.push('Hello world!')\n    self.stack.push('Hello world!')\n    self.stack.pop()", "piece": "self.stack.push('Hello world!')"}
{"function_name": "test_prepend", "function_define": "    self.my_list.prepend(4)\n    self.my_list.prepend(3)\n    self.my_list.prepend(7)", "piece": "self.my_list.prepend(3)"}
{"function_name": "test_array", "function_define": "    self.my_list.append(4)\n    self.my_list.append(3)\n    self.my_list.append(7)", "piece": "self.my_list.append(3)"}
{"function_name": "test_reverse", "function_define": "    self.my_list.append(4)\n    self.my_list.append(3)\n    self.my_list.append(7)", "piece": "self.my_list.append(3)"}
{"function_name": "test_bubble_sort", "function_define": "    sorting.bubble_sort(self.list_a)\n    sorting.bubble_sort(self.list_b)\n    sorting.bubble_sort(self.list_c)", "piece": "sorting.bubble_sort(self.list_b)"}
{"function_name": "test_quick_sort", "function_define": "    sorting.quick_sort(self.list_a)\n    sorting.quick_sort(self.list_b)\n    sorting.quick_sort(self.list_c)", "piece": "sorting.quick_sort(self.list_b)"}
{"function_name": "test_merge_sort", "function_define": "    sorting.merge_sort(self.list_a)\n    sorting.merge_sort(self.list_b)\n    sorting.merge_sort(self.list_c)", "piece": "sorting.merge_sort(self.list_b)"}
{"function_name": "test_heap_sort", "function_define": "    sorting.heap_sort(self.list_a)\n    sorting.heap_sort(self.list_b)\n    sorting.heap_sort(self.list_c)", "piece": "sorting.heap_sort(self.list_b)"}
{"function_name": "begin_play", "function_define": "    ue.log('begin object loader')\n    self.objects = []\n    ue.log('------------------')", "piece": "self.objects = []"}
{"function_name": "saveAllObjects", "function_define": "    res = []\n    for obj in self.objects:\n    f.write(json.dumps(res))", "piece": "for obj in self.objects:"}
{"function_name": "text_to_int", "function_define": "    int_sequence = []\n    for c in text:\n    if c == ' ':", "piece": "for c in text:"}
{"function_name": "int_to_text", "function_define": "    string = []\n    for i in labels:\n    string.append(self.index_map[i])", "piece": "for i in labels:"}
{"function_name": "get_dists", "function_define": "    Parameters\n    args (Namespace): cmd_args\n    if args.patches:", "piece": "args (Namespace): cmd_args"}
{"function_name": "test_moa_params", "function_define": "    new_moa = moa.MOA(params=params)\n    assert new_moa.alpha == 1.0\n    assert new_moa.rho == 2.0", "piece": "assert new_moa.alpha == 1.0"}
{"function_name": "test_moa_compile", "function_define": "    new_moa = moa.MOA()\n    new_moa.compile(search_space)\n    new_moa = moa.MOA()", "piece": "new_moa.compile(search_space)"}
{"function_name": "test_moa_update", "function_define": "    new_moa = moa.MOA()\n    new_moa.compile(search_space)\n    new_moa.update(search_space)", "piece": "new_moa.compile(search_space)"}
{"function_name": "assertXmlNode", "function_define": "    if 'tag' in kwargs:\n    tag = kwargs.get('tag')\n    self.assertEqual(node.tag, tag)", "piece": "tag = kwargs.get('tag')"}
{"function_name": "output_segment", "function_define": "    out = []\n    out.append('S')\n    out.append(sname)", "piece": "out.append('S')"}
{"function_name": "output_header", "function_define": "    out = []\n    out.append('H')\n    out.append('VN:Z:2.0')", "piece": "out.append('H')"}
{"function_name": "compute_rlen", "function_define": "    rlen = 0\n    for oplen, opcode in cigar:\n    rlen += oplen", "piece": "for oplen, opcode in cigar:"}
{"function_name": "compute_qstart", "function_define": "    qstart = 0\n    for oplen, opcode in cigar:\n    if opcode in ['S', 'H']:", "piece": "for oplen, opcode in cigar:"}
{"function_name": "compute_qlen", "function_define": "    qlen = 0\n    started = False\n    for oplen, opcode in cigar:", "piece": "started = False"}
{"function_name": "add_fragment", "function_define": "    out = []\n    out.append('F')\n    out.append(rname)", "piece": "out.append('F')"}
{"function_name": "unit_to_dtype", "function_define": "    dtype('int32')\n    dtype('float64')\n    dtype('float64')", "piece": "dtype('float64')"}
{"function_name": "dshape_to_numpy", "function_define": "    dtype('int32')\n    dtype('float32')\n    if isinstance(ds, str):", "piece": "dtype('float32')"}
{"function_name": "dshape_to_pandas", "function_define": "    if isinstance(ds, str):\n    ds = dshape(ds)\n    ds = ds[0]", "piece": "ds = dshape(ds)"}
{"function_name": "send_log", "function_define": "    self._send_critical()\n    self._send_exception()\n    self._send_error()", "piece": "self._send_exception()"}
{"function_name": "favorites", "function_define": "    result = []\n    favorites = []\n    if verb is None:", "piece": "favorites = []"}
{"function_name": "recalibrate", "function_define": "    result = {}\n    if verb == 'execute':\n    result['status'] = 'cached'", "piece": "if verb == 'execute':"}
{"function_name": "apconfig", "function_define": "    result = {}\n    if verb is None:\n    result = get_apconfig()", "piece": "if verb is None:"}
{"function_name": "get_catalog", "function_define": "    if not beta:\n    entries = []\n    for b in latest_build.all():", "piece": "entries = []"}
{"function_name": "download", "function_define": "    if not build.active:\n    abort(403)\n    abort(400)", "piece": "abort(403)"}
{"function_name": "Export_Database", "function_define": "    StartTime = time.time()\n    Index = Scrape_Index()\n    ws = wb.active", "piece": "Index = Scrape_Index()"}
{"function_name": "test_compile", "function_define": "    df = pd.DataFrame(data=cols)\n    assert not schema.is_built()\n    schema.build(input=df)", "piece": "assert not schema.is_built()"}
{"function_name": "test_compile_one", "function_define": "    assert not schema.is_built()\n    schema.build(input=arr)\n    components = schema.components", "piece": "schema.build(input=arr)"}
{"function_name": "test_all_nan", "function_define": "    df = pd.DataFrame(data=cols)\n    schema.build(input=df)\n    except ValueError:", "piece": "schema.build(input=df)"}
{"function_name": "get_sha256sum", "function_define": "    h = hashlib.sha256()\n    while True:\n    chunk = file.read(h.block_size)", "piece": "while True:"}
{"function_name": "setup_class", "function_define": "    self.lib_m = 'm'\n    if sys.platform == 'win32':\n    import distutils.ccompiler", "piece": "if sys.platform == 'win32':"}
{"function_name": "teardown_class", "function_define": "    if udir.isdir():\n    udir.remove(ignore_errors=True)\n    udir.ensure(dir=1)", "piece": "udir.remove(ignore_errors=True)"}
{"function_name": "test_modulename", "function_define": "    ffi = FFI()\n    assert lib.test1foo(143) == 80.0\n    suffix = _get_so_suffixes()[0]", "piece": "assert lib.test1foo(143) == 80.0"}
{"function_name": "_git_version", "function_define": "    curdir = os.getcwd()\n    filedir, _ = op.split(__file__)\n    os.chdir(filedir)", "piece": "filedir, _ = op.split(__file__)"}
{"function_name": "mergeKLists", "function_define": "    if len(lists) == 1:\n    start = 0\n    end = len(lists) - 1", "piece": "start = 0"}
{"function_name": "merge2Lists", "function_define": "    if head1 == None:\n    if head2 == None:\n    dummy = ListNode(0)", "piece": "if head2 == None:"}
{"function_name": "load_sample", "function_define": "    if split == 'training':\n    offset = 1\n    frames = []", "piece": "offset = 1"}
{"function_name": "get_vid_names", "function_define": "    with open(split_file, 'r') as f:\n    data = json.load(f)\n    vid_names = []", "piece": "data = json.load(f)"}
{"function_name": "__getitem__", "function_define": "    index (int): Index\n    Returns:\n    vid = self.vid_names[index]", "piece": "Returns:"}
{"function_name": "find_peaks", "function_define": "    if widths is None:\n    widths = np.arange(1, 60)\n    if x is not None:", "piece": "widths = np.arange(1, 60)"}
{"function_name": "get_window", "function_define": "    mask_1 = a < x\n    mask_2 = x < b\n    x = x[mask]", "piece": "mask_2 = x < b"}
{"function_name": "spike_fixer", "function_define": "    Parameters\n    array : 1D iterable.\n    threshold : integer.", "piece": "array : 1D iterable."}
{"function_name": "spike_fixer_", "function_define": "    Parameters\n    array : 1D iterable.\n    threshold : integer.", "piece": "array : 1D iterable."}
{"function_name": "delta_nm2eV", "function_define": "    Parameters\n    if isinstance(delta_nm, list):\n    delta_nm = np.asarray(delta_nm)", "piece": "if isinstance(delta_nm, list):"}
{"function_name": "get_value", "function_define": "    value = None\n    for line in file:\n    if str2search in line:", "piece": "for line in file:"}
{"function_name": "get_filenames", "function_define": "    Parameters\n    Return a numpy array.\n    os.chdir(loc)", "piece": "Return a numpy array."}
{"function_name": "get_files_by_id", "function_define": "    Parameters\n    date : string.\n    new_list = []", "piece": "date : string."}
{"function_name": "spectrum_plot", "function_define": "    Parameters\n    if pix2 is not None:\n    y = data[pix1, Lmin[0]:Lmax[0]]", "piece": "if pix2 is not None:"}
{"function_name": "plot_with_fit", "function_define": "    Parameters\n    x, y : data to be plotted\n    key   : name of the fit function", "piece": "x, y : data to be plotted"}
{"function_name": "draw_H_bar", "function_define": "    Parameters\n    be added instead.\n    if value is not None:", "piece": "be added instead."}
{"function_name": "analyse_spectra", "function_define": "    plt.yscale(yscale)\n    ax = plt.gca()\n    ax.set_xticks(peaks_shifted)", "piece": "ax = plt.gca()"}
{"function_name": "normalize", "function_define": "    time = time[:-3]\n    items = time.split('x')\n    acq_time = float(items[1])", "piece": "items = time.split('x')"}
{"function_name": "second_axis", "function_define": "    Parameters\n    which : 'x', 'y', or 'both'\n    if which == 'x':", "piece": "which : 'x', 'y', or 'both'"}
{"function_name": "get_parameters", "function_define": "    temperature : in kelvin\n    laser_wavelength : in nanometer\n    power : in micro watt", "piece": "laser_wavelength : in nanometer"}
{"function_name": "make_DataFrame", "function_define": "    in the filename is primordial.\n    temperature : in kelvin\n    laser_wavelength : in nanometer", "piece": "temperature : in kelvin"}
{"function_name": "df_from_files", "function_define": "    Parameters\n    fmt : format of the data file.\n    Return a pandas dataframe.", "piece": "fmt : format of the data file."}
{"function_name": "df_from_bsweep", "function_define": "    Parameters\n    folder: complete path to folder.\n    elif bvalues is not None:", "piece": "folder: complete path to folder."}
{"function_name": "df_from_sweep", "function_define": "    Parameters\n    folder: complete path to folder.\n    file: name of the file.", "piece": "folder: complete path to folder."}
{"function_name": "df_extract", "function_define": "    Parameters\n    df : dataframe\n    new_df = df.copy(deep=True)", "piece": "df : dataframe"}
{"function_name": "df_savetxt", "function_define": "    Parameters\n    df : dataframe\n    columns : list, sequence.", "piece": "df : dataframe"}
{"function_name": "get_popt", "function_define": "    Parameters\n    result_fit : ``ModelResult``\n    prefix : str", "piece": "result_fit : ``ModelResult``"}
{"function_name": "get_param_value", "function_define": "    values = []\n    stderrs = []\n    for result in list_of_results:", "piece": "stderrs = []"}
{"function_name": "lmfit_get_values", "function_define": "    values = []\n    for param in parameters:\n    values.append(val)", "piece": "for param in parameters:"}
{"function_name": "lmfit_savetxt", "function_define": "    Parameters\n    list_of_variable : list\n    List of the variable values.", "piece": "list_of_variable : list"}
{"function_name": "make_label", "function_define": "    values = np.append(values, FWHM)\n    FWHM = abs(popt[0])\n    values = np.append(values, FWHM)", "piece": "FWHM = abs(popt[0])"}
{"function_name": "devices_info", "function_define": "    use_time = ''\n    temp_uuid = str(uuid.uuid1())\n    if use_type == 1:", "piece": "temp_uuid = str(uuid.uuid1())"}
{"function_name": "get_devices", "function_define": "    now_time = int(time.time())\n    for stf_ret in stf_rets:\n    if stf_ret.module_type == 3:", "piece": "for stf_ret in stf_rets:"}
{"function_name": "stf_token", "function_define": "    name = request.args.get('name')\n    ret = requests.get(url)\n    ret = json.loads(ret.content)", "piece": "ret = requests.get(url)"}
{"function_name": "gather_products", "function_define": "    products = []\n    for info in db:\n    if pp is None:", "piece": "for info in db:"}
{"function_name": "get_contest_list", "function_define": "    ret = []\n    if data['status'] == 'OK':\n    for c in data['result']:", "piece": "if data['status'] == 'OK':"}
{"function_name": "generate_config", "function_define": "    totalrows = 0\n    os.makedirs(out_directory)\n    for row in csv_reader:", "piece": "os.makedirs(out_directory)"}
{"function_name": "open_file", "function_define": "    if value >= 0:\n    names = []\n    if group:", "piece": "names = []"}
{"function_name": "create_group", "function_define": "    repeat = False\n    if value == '':\n    repeat = True", "piece": "if value == '':"}
{"function_name": "select_group", "function_define": "    if value >= 0:\n    if replace:\n    Favs.add_group(group_name)", "piece": "if replace:"}
{"function_name": "group_answer", "function_define": "    if value >= 0:\n    if value == 0:\n    self.add(self.name)", "piece": "if value == 0:"}
{"function_name": "file_answer", "function_define": "    if value >= 0:\n    view = self.window.active_view()\n    if view != None:", "piece": "view = self.window.active_view()"}
{"function_name": "on_post_save", "function_define": "    if Refresh.on:\n    path = view.file_name()\n    if path != None:", "piece": "path = view.file_name()"}
{"function_name": "update_epoc", "function_define": "    tot_td_err = 0\n    num_steps = 0\n    curbatch_size = maxi - i", "piece": "num_steps = 0"}
{"function_name": "drop_table", "function_define": "    drop table\n    if self.show:\n    self.cur.execute(sql)", "piece": "if self.show:"}
{"function_name": "create_table", "function_define": "    create table\n    if self.show:\n    self.cur.execute(sql)", "piece": "if self.show:"}
{"function_name": "fetchall", "function_define": "    if self.show:\n    self.cur.execute(sql)\n    rows = self.cur.fetchall()", "piece": "self.cur.execute(sql)"}
{"function_name": "fetchmany", "function_define": "    if self.show:\n    self.cur.execute(sql)\n    rows = self.cur.fetchmany(size)", "piece": "self.cur.execute(sql)"}
{"function_name": "fetchone", "function_define": "    if self.show:\n    self.cur.execute(sql)\n    rows = self.cur.fetchone()", "piece": "self.cur.execute(sql)"}
{"function_name": "apply_functions", "function_define": "    result = variable\n    for func in functions:\n    if result is None:", "piece": "for func in functions:"}
{"function_name": "generate", "function_define": "    variables_dictionary = {}\n    for i in range(100):\n    if result:", "piece": "for i in range(100):"}
{"function_name": "get_script", "function_define": "    set_template = '\"{0}\" = %s'\n    set_query = []\n    cell_values = []", "piece": "set_query = []"}
{"function_name": "split_group", "function_define": "    categories = []\n    groups = {}\n    print('Groups: ')", "piece": "groups = {}"}
{"function_name": "plot_subgraph", "function_define": "    ax.set_title(title)\n    ax.plot(x, y, label=l)\n    ax.set_xlabel('imgsize')", "piece": "ax.plot(x, y, label=l)"}
{"function_name": "plot_group", "function_define": "    category = ''\n    items = []\n    print('Categories: ')", "piece": "items = []"}
{"function_name": "score_graphs", "function_define": "    if matched:\n    trigger_idn_num += 1\n    if matched[0][-1] == event_type:", "piece": "trigger_idn_num += 1"}
{"function_name": "gen_batch", "function_define": "    for chosen in sample:\n    ind = tuple(coocs[chosen])\n    l_vecs.append(l_embed[ind[0]])", "piece": "ind = tuple(coocs[chosen])"}
{"function_name": "input_message", "function_define": "    if message.author.bot:\n    print('\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u3089\u308c\u307e\u3057\u305f')\n    print('\u30b5\u30fc\u30d0', message.guild.name)", "piece": "print('\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9001\u3089\u308c\u307e\u3057\u305f')"}
{"function_name": "_get_attr", "function_define": "    import os\n    output = stream.read().strip()\n    attrs = {}", "piece": "output = stream.read().strip()"}
{"function_name": "delete_objects", "function_define": "    for obj_tuple in obj_list:\n    obj, lib, obj_type = obj_tuple\n    if verbose:", "piece": "obj, lib, obj_type = obj_tuple"}
{"function_name": "filter_joblogs", "function_define": "    msgid = record['MESSAGE_ID']\n    msgtext = record['MESSAGE_TEXT']\n    if msgid is None:", "piece": "msgtext = record['MESSAGE_TEXT']"}
{"function_name": "_restore_objs", "function_define": "    obj_list = self.back_up_obj_list\n    if not len(obj_list) > 0:\n    print('done.')", "piece": "if not len(obj_list) > 0:"}
{"function_name": "test_bert_adam", "function_define": "    opt1 = PyBERTAdam\n    opt2 = optimizer.BERTAdam\n    shape = (3, 4, 5)", "piece": "opt2 = optimizer.BERTAdam"}
{"function_name": "create_state", "function_define": "    Parameters\n    weight : NDArray\n    The weight data", "piece": "weight : NDArray"}
{"function_name": "recipients", "function_define": "    to = self._recipients['To']\n    cc = self._recipients['Cc']\n    bcc = self._recipients['Bcc']", "piece": "cc = self._recipients['Cc']"}
{"function_name": "getoptlist", "function_define": "    optlist = []\n    for k, v in self.pairs:\n    if k == p:", "piece": "for k, v in self.pairs:"}
{"function_name": "load_labels", "function_define": "    my_labels = []\n    for l in input_file:\n    my_labels.append(l.strip())", "piece": "for l in input_file:"}
{"function_name": "issue_queries", "function_define": "    global BATCH_SIZE\n    if VERBOSITY_LEVEL:\n    tick('Q', len(query_samples))", "piece": "if VERBOSITY_LEVEL:"}
{"function_name": "send_direct_item", "function_define": "    text = options.get('text', '')\n    if item_type == 'link':\n    data['link_text'] = text", "piece": "if item_type == 'link':"}
{"function_name": "get_assay_list", "function_define": "    print('-loading assay list')\n    assay_list = []\n    for line in inf:", "piece": "assay_list = []"}
{"function_name": "get_labels", "function_define": "    print('-loading htsfp labels')\n    st = time.time()\n    print(cols)", "piece": "st = time.time()"}
{"function_name": "get_xNA_counts", "function_define": "    skip = False\n    if A_count < folds:\n    skip = True", "piece": "if A_count < folds:"}
{"function_name": "get_sparse_fp", "function_define": "    print('loading FP df...')\n    if name == 'cesfp':\n    cooM = sparse.load_npz(path)", "piece": "if name == 'cesfp':"}
{"function_name": "load_cmpd_list", "function_define": "    cmpdls = []\n    with open(path, 'r') as inf:\n    for line in inf:", "piece": "with open(path, 'r') as inf:"}
{"function_name": "test_delete_user", "function_define": "    self.new_user.save_user()\n    test_user.save_user()\n    self.new_user.delete_user()", "piece": "test_user.save_user()"}
{"function_name": "split_hash", "function_define": "    a = string[0:8]\n    b = string[8:16]\n    c = string[16:24]", "piece": "b = string[8:16]"}
{"function_name": "class_contents", "function_define": "    labels = labels.reshape(-1)\n    labels = labels & 65535\n    lbl_count[class_] += count", "piece": "labels = labels & 65535"}
{"function_name": "get_worker_pools", "function_define": "    Get all worker pools\n    deserialized response\n    if raw=true", "piece": "deserialized response"}
{"function_name": "get_worker_pool", "function_define": "    Get properties of a worker pool.\n    deserialized response\n    if raw=true", "piece": "deserialized response"}
{"function_name": "normalizer", "function_define": "    if norm == 'l2':\n    elif norm == 'l1':\n    elif norm == 'max':", "piece": "elif norm == 'l1':"}
{"function_name": "standard_scaler", "function_define": "    if with_mean:\n    if with_std:\n    x /= v ** 0.5", "piece": "if with_std:"}
{"function_name": "new_relations", "function_define": "    wp_in_fs.save()\n    print('\u0437\u0430\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u0448\u043b\u0430')\n    old_work_program.delete()", "piece": "print('\u0437\u0430\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u0448\u043b\u0430')"}
{"function_name": "clone_programm", "function_define": "    disp_clone_list = []\n    eva_clone_list = []\n    for disp in discipline:", "piece": "eva_clone_list = []"}
{"function_name": "_update_set", "function_define": "    myset = set(s)\n    for node in myset:\n    if node.hasexpired():", "piece": "for node in myset:"}
{"function_name": "get_all_rgw", "function_define": "    if conn_set is None:\n    if update:\n    self._update_set(conn_set)", "piece": "if update:"}
{"function_name": "post_processing", "function_define": "    if self.loose_packet == 0:\n    elif self.loose_packet > 0:\n    self.loose_packet -= 1", "piece": "elif self.loose_packet > 0:"}
{"function_name": "_set_cookie", "function_define": "    global DP_CONN_cookie\n    DP_CONN_cookie += 1\n    DP_CONN_cookie = 1", "piece": "DP_CONN_cookie += 1"}
{"function_name": "__get_node", "function_define": "    node = self.doc\n    for p in path.split('/'):\n    ok = False", "piece": "for p in path.split('/'):"}
{"function_name": "get_attribute", "function_define": "    if x == None:\n    if x == None:\n    x = defValue", "piece": "if x == None:"}
{"function_name": "parse_book", "function_define": "    data: Phone book object\n    Returns:\n    book = dict()", "piece": "Returns:"}
{"function_name": "get_urls", "function_define": "    file_paths = dict()\n    name = os.path.split(fp)[1]\n    if name not in file_paths:", "piece": "name = os.path.split(fp)[1]"}
{"function_name": "process_new", "function_define": "    Returns:\n    continue\n    if rig == 'gras':", "piece": "continue"}
{"function_name": "change_db", "function_define": "    connection.database = new_db\n    except My.Error as err:\n    L.fatal(msg)", "piece": "except My.Error as err:"}
{"function_name": "call_main", "function_define": "    if loglevel:\n    logger.setLevel(loglevel)\n    seq = parser.parse(f.read())", "piece": "logger.setLevel(loglevel)"}
{"function_name": "item_content", "function_define": "    output = item.detail\n    if item.status:\n    if item.comment:", "piece": "if item.status:"}
{"function_name": "stanhope", "function_define": "    customers = mdb.load_customers()\n    mdb.time_filter(epoch)\n    mdb.join_records(join)", "piece": "mdb.time_filter(epoch)"}
{"function_name": "prettyprint", "function_define": "    jtext = None\n    jtext = json.loads(text_or_json)\n    jtext = text_or_json", "piece": "jtext = json.loads(text_or_json)"}
{"function_name": "quickshort", "function_define": "    if start < end:\n    quickshort(a, start, pindex - 1)\n    quickshort(a, pindex + 1, end)", "piece": "quickshort(a, start, pindex - 1)"}
{"function_name": "get_all_fighters", "function_define": "    a directory already\n    https of fighters saved\n    https from", "piece": "https of fighters saved"}
{"function_name": "fights_to_Json", "function_define": "    them by event into a dictionary.\n    fight_json = {}\n    tracker_dict = {}", "piece": "fight_json = {}"}
{"function_name": "thread_func", "function_define": "    except Exception as e:\n    print(traceback.format_exc())\n    print('Moving to next link\\n\\n')", "piece": "print(traceback.format_exc())"}
{"function_name": "torsion_finder", "function_define": "    Returns k2, k1\n    eig = curve.eigenvalues(l)\n    if not eig:", "piece": "eig = curve.eigenvalues(l)"}
{"function_name": "api_upload", "function_define": "    if not os.path.exists(file_dir):\n    os.makedirs(file_dir)\n    print(choose_ckpt)", "piece": "os.makedirs(file_dir)"}
{"function_name": "img_preprocess", "function_define": "    img /= 255.0\n    if img.ndimension() == 3:\n    img = img.unsqueeze(0)", "piece": "if img.ndimension() == 3:"}
{"function_name": "xywh2abcd", "function_define": "    output = np.zeros((4, 2))\n    output[0][0] = x_min\n    output[0][1] = y_min", "piece": "output[0][0] = x_min"}
{"function_name": "torch_thread", "function_define": "    print('Intializing Network...')\n    device = select_device()\n    half = device.type != 'cpu'", "piece": "device = select_device()"}
{"function_name": "set_speed", "function_define": "    self._speed = abs(value)\n    if value < 0:\n    self.angle += math.pi", "piece": "if value < 0:"}
{"function_name": "find_root", "function_define": "    if root is None:\n    root = os.getcwd()\n    while True:", "piece": "root = os.getcwd()"}
{"function_name": "lock_stage", "function_define": "    from dvc.stage import Stage\n    stage = Stage.load(self, target)\n    stage.dump()", "piece": "stage = Stage.load(self, target)"}
{"function_name": "_unprotect_file", "function_define": "    import stat\n    import uuid\n    from dvc.system import System", "piece": "import uuid"}
{"function_name": "_unprotect_dir", "function_define": "    for f in files:\n    path = os.path.join(root, f)\n    self._unprotect_file(path)", "piece": "path = os.path.join(root, f)"}
{"function_name": "unprotect", "function_define": "    if not os.path.exists(path):\n    if os.path.isdir(path):\n    self._unprotect_dir(path)", "piece": "if os.path.isdir(path):"}
{"function_name": "_reproduce_stage", "function_define": "    stage = stages[node]\n    if stage.locked:\n    if not stage:", "piece": "if stage.locked:"}
{"function_name": "reproduce", "function_define": "    from dvc.stage import Stage\n    raise ValueError()\n    if not interactive:", "piece": "raise ValueError()"}
{"function_name": "_reproduce", "function_define": "    import networkx as nx\n    from dvc.stage import Stage\n    stage = Stage.load(self, target)", "piece": "from dvc.stage import Stage"}
{"function_name": "checkout", "function_define": "    if target and (not recursive):\n    stages = all_stages\n    with self.state:", "piece": "stages = all_stages"}
{"function_name": "_collect", "function_define": "    import networkx as nx\n    from dvc.stage import Stage\n    stage = Stage.load(self, target)", "piece": "from dvc.stage import Stage"}
{"function_name": "_used_cache", "function_define": "    cache = {}\n    cache['local'] = []\n    cache['s3'] = []", "piece": "cache['local'] = []"}
{"function_name": "_local_status", "function_define": "    status = {}\n    if target:\n    stages = self.active_stages()", "piece": "if target:"}
{"function_name": "_cloud_status", "function_define": "    import dvc.remote.base as cloud\n    ret = {}\n    name = info['name']", "piece": "ret = {}"}
{"function_name": "_read_metric_xsv", "function_define": "    import csv\n    col, row = xsv_path.split(',')\n    row = int(row)", "piece": "col, row = xsv_path.split(',')"}
{"function_name": "_read_metric", "function_define": "    ret = None\n    if not os.path.exists(path):\n    with open(path, 'r') as fd:", "piece": "if not os.path.exists(path):"}
{"function_name": "metrics_show", "function_define": "    res = {}\n    astages = self.active_stages()\n    if path:", "piece": "astages = self.active_stages()"}
{"function_name": "_metrics_modify", "function_define": "    if not out:\n    raise DvcException(msg)\n    if out.scheme != 'local':", "piece": "raise DvcException(msg)"}
{"function_name": "save_wave_file", "function_define": "    wf = wave.open(filename, 'wb')\n    wf.setnchannels(1)\n    wf.setsampwidth(2)", "piece": "wf.setnchannels(1)"}
{"function_name": "get_coords", "function_define": "    minx = gt[0]\n    resx = gt[1]\n    maxy = gt[3]", "piece": "resx = gt[1]"}
{"function_name": "regrid_data", "function_define": "    if lat[0] > lat[-1]:\n    lat = lat[::-1]\n    var = var[:, :, ::-1, :]", "piece": "lat = lat[::-1]"}
{"function_name": "get_lat_bounds", "function_define": "    if array1d[0] < 0:\n    extra_val = array1d[0] - div\n    extra_val = array1d[-1] - div", "piece": "extra_val = array1d[0] - div"}
{"function_name": "manifest_to_json", "function_define": "    output_json = {}\n    for child in children:\n    for keys in child['Keys']:", "piece": "for child in children:"}
{"function_name": "cross_validates", "function_define": "    scores = []\n    for i in range(itterations):\n    scores.append(scores_)", "piece": "for i in range(itterations):"}
{"function_name": "cross_validate", "function_define": "    np.random.shuffle(models)\n    kf = KFold(n_splits=n_splits)\n    scores = []", "piece": "kf = KFold(n_splits=n_splits)"}
{"function_name": "plot_validate", "function_define": "    np.random.shuffle(models)\n    kf = KFold(n_splits=n_splits)\n    model_test = clone(model)", "piece": "kf = KFold(n_splits=n_splits)"}
{"function_name": "block_around", "function_define": "    if self.y + 1 > 9:\n    if self.y - 1 < 0:\n    if self.x + 1 > 9:", "piece": "if self.y - 1 < 0:"}
{"function_name": "has_permission", "function_define": "    if self.y + 1 > 9:\n    if self.y - 1 < 0:\n    if self.x + 1 > 9:", "piece": "if self.y - 1 < 0:"}
{"function_name": "start_solve", "function_define": "    self.fringe = []\n    self.closed = []\n    node = maze.nodes[me.x, me.y]", "piece": "self.closed = []"}
{"function_name": "set_gotos", "function_define": "    parent = node.parent\n    while parent:\n    if parent.x - 1 == node.x:", "piece": "while parent:"}
{"function_name": "lowest_node", "function_define": "    lowest = self.fringe[0]\n    lowest_index = 0\n    if lowest.f > self.fringe[i].f:", "piece": "lowest_index = 0"}
{"function_name": "sliding_window", "function_define": "    sizes = chromosom_sizes(genom)\n    tx = tabix.open(tabix_file)\n    for chromosom in sizes:", "piece": "tx = tabix.open(tabix_file)"}
{"function_name": "write_to_video", "function_define": "    Parameters:\n    for frame in frames_list:\n    out.release()", "piece": "for frame in frames_list:"}
{"function_name": "_get_bbox_pts", "function_define": "    width = x2 - x1\n    height = y2 - y1\n    max_size = max(width, height)", "piece": "height = y2 - y1"}
{"function_name": "info2csv", "function_define": "    Write df into a csv.\n    Parameters:\n    df.to_csv(csv_path, index=False)", "piece": "Parameters:"}
{"function_name": "_smooth_labels", "function_define": "    if len(df) == 0:\n    df['smoothed_decision'] = []\n    df['smoothed_label'] = []", "piece": "df['smoothed_decision'] = []"}
{"function_name": "markRead", "function_define": "    if self.isRead == 0:\n    self.isRead = 1\n    myFont = QtGui.QFont()", "piece": "self.isRead = 1"}
{"function_name": "pull_item", "function_define": "    path_id = self.path_ids[index]\n    if self.img_transform:\n    image = image[:, :, (2, 1, 0)]", "piece": "if self.img_transform:"}
{"function_name": "check_box_offset", "function_define": "    shape (tuple[int]): image shape.\n    Returns:\n    if None == offset:", "piece": "Returns:"}
{"function_name": "get_bounding_box", "function_define": "    Returns:\n    if 2 == len(mask.shape):\n    elif 3 == len(mask.shape):", "piece": "if 2 == len(mask.shape):"}
{"function_name": "do_cli_task", "function_define": "    table_data = [header]\n    with Session() as session:\n    except NoResultFound:", "piece": "with Session() as session:"}
{"function_name": "do_cli_summary", "function_define": "    table_data = [header]\n    with Session() as session:\n    if ok is None:", "piece": "with Session() as session:"}
{"function_name": "set_secret", "function_define": "    if not self.docker_images:\n    if error_if_exists:\n    except docker.errors.NotFound:", "piece": "if error_if_exists:"}
{"function_name": "uninstall", "function_define": "    self._uninstall(self.version)\n    if self.data_folder is not None:\n    shutil.rmtree(self.data_folder)", "piece": "if self.data_folder is not None:"}
{"function_name": "ResNet50", "function_define": "    Parameters\n    pretrained : boolean\n    end_with : str", "piece": "pretrained : boolean"}
{"function_name": "restore_params", "function_define": "    import h5py\n    except Exception:\n    f.close()", "piece": "except Exception:"}
{"function_name": "make_layer", "function_define": "    layer_list = []\n    if len(block_name) == 2:\n    stage = int(block_name[0])", "piece": "if len(block_name) == 2:"}
{"function_name": "objective", "function_define": "    base_model.eval()\n    with torch.no_grad():\n    if return_thresh:", "piece": "with torch.no_grad():"}
{"function_name": "_make_dataset", "function_define": "    if not os.path.exists(setting):\n    clips = []\n    with open(setting) as split_f:", "piece": "clips = []"}
{"function_name": "_TSN_RGB", "function_define": "    cv2 = try_import_cv2()\n    if is_color:\n    cv_read_flag = cv2.IMREAD_COLOR", "piece": "if is_color:"}
{"function_name": "process_message", "function_define": "    data = json.loads(m.get_body())\n    except ValueError:\n    LOGGER.exception(message)", "piece": "except ValueError:"}
{"function_name": "get_opt_degree", "function_define": "    min_dist = 1000000000.0\n    min_degree = [0, 0, 0]\n    BposW = []", "piece": "min_degree = [0, 0, 0]"}
{"function_name": "get_context", "function_define": "    grouped = defaultdict(list)\n    for version in os_info:\n    grouped[os_type].append(version)", "piece": "for version in os_info:"}
{"function_name": "test_node_field", "function_define": "    node = t.Node()\n    item = node.items.add()\n    item.field.name = 'tratan'", "piece": "item = node.items.add()"}
{"function_name": "test_link", "function_define": "    node = t.Node()\n    link_item = node.items.add()\n    link_item.link.name = 'swaying'", "piece": "link_item = node.items.add()"}
{"function_name": "_test_run_driver", "function_define": "    log.debug('Entry points:')\n    log.debug(('tmp dir', tmp_dir))\n    started_at = time.time()", "piece": "log.debug(('tmp dir', tmp_dir))"}
{"function_name": "test_vector2", "function_define": "    v = Vector2d(1, 2)\n    v.normalize()\n    v.set(4, 5)", "piece": "v.normalize()"}
{"function_name": "test_max", "function_define": "    vec1 = Vector2d(0.1, 0.2)\n    vec2 = Vector2d(0.3, 0.5)\n    vec3 = Vector2d(0.4, 0.2)", "piece": "vec2 = Vector2d(0.3, 0.5)"}
{"function_name": "test_min", "function_define": "    vec1 = Vector2d(0.3, 0.5)\n    vec2 = Vector2d(0.1, 0.2)\n    vec3 = Vector2d(0.05, 0.1)", "piece": "vec2 = Vector2d(0.1, 0.2)"}
{"function_name": "test_correct", "function_define": "    vec1 = Vector2d(0, float('nan'))\n    vec3 = Vector2d(10, -2)\n    vec1.correct()", "piece": "vec3 = Vector2d(10, -2)"}
{"function_name": "test_add", "function_define": "    vec1 = Vector2d(0.1, 0.2)\n    vec2 = Vector2d(1.1, 2.2)\n    vec3 = vec1", "piece": "vec2 = Vector2d(1.1, 2.2)"}
{"function_name": "test_sub", "function_define": "    vec1 = Vector2d(0.1, 0.2)\n    vec2 = Vector2d(1.1, 2.2)\n    vec3 = vec2", "piece": "vec2 = Vector2d(1.1, 2.2)"}
{"function_name": "test_multiply", "function_define": "    v = Vector2d(0.1, -4.2)\n    vec2 = v * 2.0\n    vec2 *= 4.0", "piece": "vec2 = v * 2.0"}
{"function_name": "test_nan", "function_define": "    nanVec = Vector2d.NAN\n    nanVec.correct()\n    nanVecF = Vector2f.NAN", "piece": "nanVec.correct()"}
{"function_name": "write_table", "function_define": "    table: DataFrame\n    label: string\n    filename = f'tables/{label}.tex'", "piece": "label: string"}
{"function_name": "write_pmf", "function_define": "    pmf: Pmf\n    label: string\n    df = pd.DataFrame()", "piece": "label: string"}
{"function_name": "underride", "function_define": "    d: dictionary\n    for key, val in options.items():\n    d.setdefault(key, val)", "piece": "for key, val in options.items():"}
{"function_name": "decorate", "function_define": "    decorate(title='Title',\n    xlabel='x',\n    ylabel='y')", "piece": "xlabel='x',"}
{"function_name": "make_die", "function_define": "    sides: int\n    returns: Pmf\n    die = Pmf(1 / sides, outcomes)", "piece": "returns: Pmf"}
{"function_name": "add_dist_seq", "function_define": "    seq: sequence of Pmf objects\n    returns: Pmf\n    total = seq[0]", "piece": "returns: Pmf"}
{"function_name": "summarize", "function_define": "    posterior: Pmf\n    prob: probability in the CI\n    print(mean, ci)", "piece": "prob: probability in the CI"}
{"function_name": "outer_product", "function_define": "    First Series goes down the rows;\n    second goes across the columns.\n    s1: Series", "piece": "second goes across the columns."}
{"function_name": "make_uniform", "function_define": "    qs: quantities\n    options: passed to Pmf\n    returns: Pmf", "piece": "options: passed to Pmf"}
{"function_name": "make_joint", "function_define": "    second goes down the rows.\n    s1: Series\n    s2: Series", "piece": "s1: Series"}
{"function_name": "make_mesh", "function_define": "    Y contains the row labels\n    x = joint.columns\n    y = joint.index", "piece": "x = joint.columns"}
{"function_name": "plot_contour", "function_define": "    low = joint.to_numpy().min()\n    high = joint.to_numpy().max()\n    levels = levels[1:]", "piece": "high = joint.to_numpy().max()"}
{"function_name": "make_binomial", "function_define": "    n: number of trials\n    p: probability of success\n    ks = np.arange(n + 1)", "piece": "p: probability of success"}
{"function_name": "make_gamma_dist", "function_define": "    alpha: shape parameter\n    beta: scale parameter\n    returns: gamma object", "piece": "beta: scale parameter"}
{"function_name": "make_poisson_pmf", "function_define": "    lam: event rate\n    qs: sequence of values for `k`\n    returns: Pmf", "piece": "qs: sequence of values for `k`"}
{"function_name": "pmf_from_dist", "function_define": "    dist: SciPy distribution object\n    qs: quantities\n    returns: Pmf", "piece": "qs: quantities"}
{"function_name": "kde_from_sample", "function_define": "    sample: sequence of values\n    returns: normalized Pmf\n    kde = gaussian_kde(sample)", "piece": "returns: normalized Pmf"}
{"function_name": "kde_from_pmf", "function_define": "    pmf: Pmf object\n    n: number of points\n    returns: Pmf object", "piece": "n: number of points"}
{"function_name": "make_lowess", "function_define": "    series: pd.Series\n    returns: pd.Series\n    endog = series.values", "piece": "returns: pd.Series"}
{"function_name": "joint_plot", "function_define": "    options: passed to JointGrid\n    x = joint.columns.name\n    x = 'x' if x is None else x", "piece": "x = joint.columns.name"}
{"function_name": "interface_lookup", "function_define": "    json = r.json()\n    if json['count'] == 1:\n    instance = json['results'][0]", "piece": "if json['count'] == 1:"}
{"function_name": "ipaddress_lookup", "function_define": "    json = r.json()\n    if json['count'] == 1:\n    instance = json['results'][0]", "piece": "if json['count'] == 1:"}
{"function_name": "ipaddress_add", "function_define": "    data = {}\n    data['address'] = address\n    data['interface'] = interface_id", "piece": "data['address'] = address"}
{"function_name": "device_lookup", "function_define": "    json = r.json()\n    if json['count'] == 1:\n    instance = json['results'][0]", "piece": "if json['count'] == 1:"}
{"function_name": "vm_lookup", "function_define": "    json = r.json()\n    if json['count'] == 1:\n    instance = json['results'][0]", "piece": "if json['count'] == 1:"}
{"function_name": "expand_file", "function_define": "    referenced file.\n    output_lines = []\n    f = open(base_file, 'r')", "piece": "output_lines = []"}
{"function_name": "handle_request", "function_define": "    power_on_desired_state = False\n    power_on_desired_state = True\n    logger = logging.getLogger()", "piece": "power_on_desired_state = True"}
{"function_name": "_dbProgress", "function_define": "    if not self._win:\n    if not self.mw.inMainThread():\n    self.inDB = True", "piece": "if not self.mw.inMainThread():"}
{"function_name": "_maybeShow", "function_define": "    if not self._levels:\n    if self._shown:\n    self.update(maybeShow=False)", "piece": "if self._shown:"}
{"function_name": "_showWin", "function_define": "    self._shown = time.time()\n    self._win.show()\n    self._setBusy()", "piece": "self._win.show()"}
{"function_name": "_closeWin", "function_define": "    if self._shown:\n    while True:\n    elap = time.time() - self._shown", "piece": "while True:"}
{"function_name": "keyPressEvent", "function_define": "    if evt.key() == Qt.Key_Escape:\n    evt.ignore()\n    self.ankiCancel = True", "piece": "evt.ignore()"}
{"function_name": "test_time_vector", "function_define": "    time = self.data['Time']\n    for t in time:\n    assert t > 0", "piece": "for t in time:"}
{"function_name": "warp_bands", "function_define": "    directory = dirname(imgPath)\n    for i in range(0, N_shm + 1, 2):\n    for dm in diffusionMeasures:", "piece": "for i in range(0, N_shm + 1, 2):"}
{"function_name": "dti_stat", "function_define": "    maskData = []\n    for maskPath in masks:\n    for dm in diffusionMeasures:", "piece": "for maskPath in masks:"}
{"function_name": "rish_stat", "function_define": "    for i in range(0, N_shm + 1, 2):\n    imgData = []\n    for imgPath in imgs:", "piece": "imgData = []"}
{"function_name": "template_masking", "function_define": "    ref = load(refMaskPath)\n    target = load(targetMaskPath)\n    for dm in diffusionMeasures:", "piece": "target = load(targetMaskPath)"}
{"function_name": "stat_calc", "function_define": "    ref = applymask(ref, mask)\n    target = applymask(target, mask)\n    delta = ref - target", "piece": "target = applymask(target, mask)"}
{"function_name": "difference_calc", "function_define": "    if traveling heads:\n    for each subject:\n    delta= ref- target", "piece": "for each subject:"}
{"function_name": "GetZones", "function_define": "    p = json.loads(r.text)\n    if p['result'] != []:\n    zone_dict = {}", "piece": "if p['result'] != []:"}
{"function_name": "karatsuba", "function_define": "    if x < 10 and y < 10:\n    res = x * y\n    digits_x = digits_amount(x)", "piece": "res = x * y"}
{"function_name": "on_mqtt_publish", "function_define": "    mid = arg1 or arg2\n    pb.update(mid)\n    if last_mid and last_mid == mid:", "piece": "pb.update(mid)"}
{"function_name": "_get_action", "function_define": "    with tf.device(self.device):\n    if self.is_continuous:\n    mu = output", "piece": "if self.is_continuous:"}
{"function_name": "_draw_play", "function_define": "    song_start_time = song.start\n    total_time = song.duration\n    sections = 12", "piece": "total_time = song.duration"}
{"function_name": "get_letter_score", "function_define": "    letter_score = defaultdict(int)\n    for word in word_list:\n    for letter in word:", "piece": "for word in word_list:"}
{"function_name": "test_init", "function_define": "    elements = ['A', 'B', 'C', 'D']\n    s = Set(elements)\n    assert s.ht.length() == 4", "piece": "s = Set(elements)"}
{"function_name": "test_union", "function_define": "    s1 = Set(['A', 'B', 'C', 'D'])\n    s2 = Set(['E', 'F', 'G', 'H'])\n    s3 = s1.union(s2)", "piece": "s2 = Set(['E', 'F', 'G', 'H'])"}
{"function_name": "test_difference", "function_define": "    s1 = Set(['A', 'B', 'C', 'D'])\n    s2 = Set(['C', 'D', 'G', 'H'])\n    s3 = s1.difference(s2)", "piece": "s2 = Set(['C', 'D', 'G', 'H'])"}
{"function_name": "test_is_subset", "function_define": "    s1 = Set(['A', 'B', 'C', 'D'])\n    s2 = Set(['C', 'D'])\n    s3 = Set(['A', 'B'])", "piece": "s2 = Set(['C', 'D'])"}
{"function_name": "time_compute", "function_define": "    start_time = time.time()\n    tmp = fun(*args, **kwargs)\n    end_time = time.time()", "piece": "tmp = fun(*args, **kwargs)"}
{"function_name": "time_avg_compute", "function_define": "    times = []\n    tmp = None\n    for _ in range(20):", "piece": "tmp = None"}
{"function_name": "read_size", "function_define": "    Size = {}\n    for line in file_size:\n    Line = line.strip().split()", "piece": "for line in file_size:"}
{"function_name": "read_huiwen", "function_define": "    Huiwen = {}\n    for line in file_huiwen:\n    Line = line.strip().split()", "piece": "for line in file_huiwen:"}
{"function_name": "argparser", "function_define": "    args = parser.parse_args()\n    if not args.dd:\n    if not args.cmap:", "piece": "if not args.dd:"}
{"function_name": "xml_to_csv", "function_define": "    xml_list = []\n    tree = ET.parse(xml_file)\n    root = tree.getroot()", "piece": "tree = ET.parse(xml_file)"}
{"function_name": "test_records_get", "function_define": "    assert resp.status_code == 401\n    assert resp.status_code == 401\n    role = Role.query.all()[0]", "piece": "assert resp.status_code == 401"}
{"function_name": "create_connector", "function_define": "    if connector_exists():\n    if res.status_code == 200:\n    print('Cannot create connector')", "piece": "if res.status_code == 200:"}
{"function_name": "decompress", "function_define": "    string = ''\n    number_stack = []\n    replace_index_stack = []", "piece": "number_stack = []"}
{"function_name": "timeConversion", "function_define": "    ar = s.split(':')\n    tail = ar[-1][-2:].lower()\n    addition_hours = 0", "piece": "tail = ar[-1][-2:].lower()"}
{"function_name": "torch_cat", "function_define": "    qinputs = []\n    for t in inputs:\n    qinputs = inputs", "piece": "for t in inputs:"}
{"function_name": "torch_mean", "function_define": "    input = module_tensor_op(input)\n    if dim is None:\n    x = raw_torch_op['mean'](input)", "piece": "if dim is None:"}
{"function_name": "replace_op", "function_define": "    raw_op = getattr(torch, op_name)\n    raw_torch_op[op_name] = raw_op\n    for op_name in func_op_sopprted:", "piece": "raw_torch_op[op_name] = raw_op"}
{"function_name": "switch_layers", "function_define": "    for key in module_dict:\n    if not quant_op:\n    global module_tensor_op", "piece": "if not quant_op:"}
{"function_name": "merge_batchnorm", "function_define": "    with torch.no_grad():\n    for layer_idx in graph:\n    if bottoms[layer_idx] is None:", "piece": "for layer_idx in graph:"}
{"function_name": "find_prev_bn", "function_define": "    type_tmp = {}\n    targ_without_bn = {}\n    for ii in range(len(bot)):", "piece": "targ_without_bn = {}"}
{"function_name": "set_quant_minmax", "function_define": "    QuantAdd->'QuantConv'\n    BatchNorm->ReLU->\n    QuantAdd->", "piece": "BatchNorm->ReLU->"}
{"function_name": "get_quant_module", "function_define": "    if type(layer) == str:\n    quant_op = []\n    for op_name in quant_op:", "piece": "quant_op = []"}
{"function_name": "UpdateInterval", "function_define": "    w = float(self.Size[0])\n    if range > 0 and w > 0:\n    self.UpdateLabelFormat()", "piece": "if range > 0 and w > 0:"}
{"function_name": "OnToggleClipMode", "function_define": "    if self.clipmode == 'clip':\n    self.clipmode = 'rescale'\n    self.clipmode = 'clip'", "piece": "self.clipmode = 'rescale'"}
{"function_name": "OnRightDown", "function_define": "    popupMenu = wx.Menu()\n    popupMenu.SetTitle('Colorbar')\n    if self.clipmode == 'clip':", "piece": "popupMenu.SetTitle('Colorbar')"}
{"function_name": "readData", "function_define": "    time resolved\n    rootdir = Path(readFromPath)\n    Information[idx] = {}", "piece": "rootdir = Path(readFromPath)"}
{"function_name": "readLastTimeZero", "function_define": "    if empty: return -1\n    if os.path.isfile(filename):\n    fileHandle = open(filename, 'r')", "piece": "if os.path.isfile(filename):"}
{"function_name": "findNormValue", "function_define": "    for key, value in data.items():\n    frame = normHysteresis[key]\n    for i in range(0, firstmax + 1):", "piece": "frame = normHysteresis[key]"}
{"function_name": "ask_folder", "function_define": "    global path, videonames\n    videonames = []\n    file_path.set(videonames)", "piece": "videonames = []"}
{"function_name": "set_step", "function_define": "    global step\n    step = step_entry.get()\n    step = int(step)", "piece": "step = step_entry.get()"}
{"function_name": "meta_test", "function_define": "    acc_list = []\n    inp = inp.cuda()\n    acc_list.append(acc)", "piece": "inp = inp.cuda()"}
{"function_name": "get_package_info", "function_define": "    client_version = __version__\n    ua_string = []\n    ua_string.append(val)", "piece": "ua_string = []"}
{"function_name": "verify_signature", "function_define": "    if sys.version_info[0] == 2:\n    result = 0\n    result |= x ^ y", "piece": "result = 0"}
{"function_name": "bind_route", "function_define": "    if request.method == 'GET':\n    bc = base_checks()\n    if bc is not True:", "piece": "bc = base_checks()"}
{"function_name": "interactive", "function_define": "    bc = base_checks()\n    if bc is not True:\n    if 'payload' in request.form:", "piece": "if bc is not True:"}
{"function_name": "wait_until", "function_define": "    start = time.time()\n    while True:\n    retval = predicate()", "piece": "while True:"}
{"function_name": "_shut_down", "function_define": "    global _shutting_down\n    for t in threads:\n    t.join(10)", "piece": "for t in threads:"}
{"function_name": "bind_tcp_socket", "function_define": "    host, port = address\n    if os.name != 'nt':\n    sock.bind(sock_addr)", "piece": "if os.name != 'nt':"}
{"function_name": "make_docs", "function_define": "    tutorial.\n    if not args and (not kwargs):\n    if not args:", "piece": "if not args and (not kwargs):"}
{"function_name": "make_matcher", "function_define": "    Matcher(Request())\n    Matcher(Request({}, {\"_id\": 1}))\n    if args[1:] or kwargs:", "piece": "Matcher(Request({}, {\"_id\": 1}))"}
{"function_name": "docs_repr", "function_define": "    sio = StringIO()\n    if doc_idx > 0:\n    sio.write(u', ')", "piece": "if doc_idx > 0:"}
{"function_name": "seq_match", "function_define": "    len_seq1 = len(seq1)\n    if len_seq1 < len(seq0):\n    seq1_idx = 0", "piece": "if len_seq1 < len(seq0):"}
{"function_name": "get_result", "function_define": "    t.join(timeout)\n    if t.is_alive():\n    if error:", "piece": "if t.is_alive():"}
{"function_name": "set_result", "function_define": "    if self._event.is_set():\n    self._result = result\n    self._event.set()", "piece": "self._result = result"}
{"function_name": "_matches_docs", "function_define": "    doc, = docs\n    other_doc, = other_docs\n    items = list(doc.items())", "piece": "other_doc, = other_docs"}
{"function_name": "_match_map", "function_define": "    for key, val in doc.items():\n    if val is absent:\n    if key in other_doc:", "piece": "if val is absent:"}
{"function_name": "_replies", "function_define": "    if not reply.docs:\n    reply.docs = [{'ok': 1}]\n    if len(reply.docs) > 1:", "piece": "reply.docs = [{'ok': 1}]"}
{"function_name": "receives", "function_define": "    end = time.time() + timeout\n    while not self._stopped:\n    except Empty:", "piece": "while not self._stopped:"}
{"function_name": "autoresponds", "function_define": "    Remove an autoresponder like:\n    matches:\n    True if you handled the request:", "piece": "matches:"}
{"function_name": "_accept_loop", "function_define": "    client.setblocking(True)\n    server_thread.daemon = True\n    server_thread.start()", "piece": "server_thread.daemon = True"}
{"function_name": "_server_loop", "function_define": "    with self._unlock():\n    self._requests_count += 1\n    if responder.handle(request):", "piece": "self._requests_count += 1"}
{"function_name": "test_simple", "function_define": "    project = self.create_project()\n    old_release.add_project(project)\n    new_release.add_project(project)", "piece": "old_release.add_project(project)"}
{"function_name": "_load_pose", "function_define": "    pose_label = json.load(f)\n    pose_data = np.array(pose_data)\n    point_num = pose_data.shape[0]", "piece": "pose_data = np.array(pose_data)"}
{"function_name": "sign_ecdsa", "function_define": "    if len(message) != 32:\n    if len(priv) != 32:\n    privkey = PrivateKey(priv)", "piece": "if len(priv) != 32:"}
{"function_name": "verify_ecdsa", "function_define": "    if len(message) != 32:\n    if len(signature) != 65:\n    if len(pub) != 64:", "piece": "if len(signature) != 65:"}
{"function_name": "_encode_int", "function_define": "    if encoded[0] >= 128:\n    yield (len(encoded) + 1)\n    yield len(encoded)", "piece": "yield (len(encoded) + 1)"}
{"function_name": "test_get_visit", "function_define": "    pet_id = random_integer()\n    visit_date = random_datetime()\n    assert store_db_visit", "piece": "visit_date = random_datetime()"}
{"function_name": "buildUrl", "function_define": "    if service == '':\n    for key, val in params.items():\n    if isinstance(val, list):", "piece": "for key, val in params.items():"}
{"function_name": "mergeHeaders", "function_define": "    headers = {}\n    headers.update(base_headers)\n    headers.update(auth_headers)", "piece": "headers.update(base_headers)"}
{"function_name": "performRequest", "function_define": "    response = ''\n    if type == self.REQUEST_GET:\n    elif type == self.REQUEST_POST:", "piece": "if type == self.REQUEST_GET:"}
{"function_name": "getUpdates", "function_define": "    params = {}\n    if since:\n    elif hours or minutes:", "piece": "if since:"}
{"function_name": "test_perturbed", "function_define": "    c = cs.CellSize()\n    pert = 3\n    pert_frac = 0.01", "piece": "pert = 3"}
{"function_name": "prepare_input", "function_define": "    mask = data['binseg']\n    if opt.gpu_ids:\n    data_A = data_A.cuda()", "piece": "if opt.gpu_ids:"}
{"function_name": "get_archive_name", "function_define": "    arcname = ''\n    if sys.version_info[0] >= 3:\n    self.current += 1", "piece": "if sys.version_info[0] >= 3:"}
{"function_name": "set_pyc_files", "function_define": "    if sys.version_info[0] >= 3:\n    bytecode_ext = 'pyc'\n    if self.metadata[1]:", "piece": "bytecode_ext = 'pyc'"}
{"function_name": "unpack_archive", "function_define": "    if archive_name:\n    archive_pyc_files = []\n    for f in files:", "piece": "archive_pyc_files = []"}
{"function_name": "unfrozen", "function_define": "    self.get_pythonscript_resource()\n    self.set_pyc_files()\n    for pyc_file in self.pyc_files:", "piece": "self.set_pyc_files()"}
{"function_name": "test_kwargs", "function_define": "    json_dict = self.a1.to_dict()\n    a2 = Amenity(**json_dict)\n    self.assertNotEqual(self.a1, a2)", "piece": "a2 = Amenity(**json_dict)"}
{"function_name": "get_link_pairs", "function_define": "    links = []\n    if supplier.receives_grants:\n    if supplier.paid_in_sterling:", "piece": "if supplier.receives_grants:"}
{"function_name": "create_transfer", "function_define": "    transfer.creator = user.key\n    ref = data_models.get_next_ref()\n    transfer.ref_id = 'FT%04d' % ref", "piece": "ref = data_models.get_next_ref()"}
{"function_name": "process_supplier", "function_define": "    if request.method == 'POST':\n    model.add_form('update', form)\n    valid_actions = [ACTION_UPDATE]", "piece": "model.add_form('update', form)"}
{"function_name": "image_generator", "function_define": "    while True:\n    if use_aug:\n    yield (i_triplet, y_triplet)", "piece": "if use_aug:"}
{"function_name": "create_file", "function_define": "    path = os.path.join(*paths)\n    with open(path, 'wb') as fp:\n    fp.write(bytes_(content))", "piece": "with open(path, 'wb') as fp:"}
{"function_name": "balanced_batches", "function_define": "    batch_idx = list(ulb)\n    batch_idx.extend(lb)\n    x_batch = []", "piece": "batch_idx.extend(lb)"}
{"function_name": "find_classes", "function_define": "    if new_classes is None:\n    new_classes = set()\n    new_classes.add(k)", "piece": "new_classes = set()"}
{"function_name": "hex_to_rgb", "function_define": "    value = value.lstrip('#')\n    lv = len(value)\n    if add_alpha != -1:", "piece": "lv = len(value)"}
{"function_name": "recycle_palette", "function_define": "    length = len(palette)\n    nrepeat = size // length + 1\n    out = palette * nrepeat", "piece": "nrepeat = size // length + 1"}
{"function_name": "read_tsne", "function_define": "    if contents is None:\n    plchldr = 'Upload first'\n    if file_extension == '.csv':", "piece": "plchldr = 'Upload first'"}
{"function_name": "compute_tsne", "function_define": "    ctx = dash.callback_context\n    globals()\n    out = json.dumps(toStore)", "piece": "globals()"}
{"function_name": "plot_tsne", "function_define": "    globals()\n    labels = np.array(labels)\n    ids = np.array(ids)", "piece": "labels = np.array(labels)"}
{"function_name": "update_plot_meas", "function_define": "    if hoverData is not None:\n    if overlay == 'None':\n    hovered_series -= subtract_array", "piece": "if overlay == 'None':"}
{"function_name": "export_selection", "function_define": "    if selected_points is None:\n    df_out = [frame_class['ID']]\n    if 'Class' in export_options:", "piece": "df_out = [frame_class['ID']]"}
{"function_name": "export_tSNEPDF", "function_define": "    fig_exp = go.Figure()\n    fig_data = fig['data']\n    fig_layout = fig['layout']", "piece": "fig_data = fig['data']"}
{"function_name": "set_mat_np", "function_define": "    mat_key (str):\n    mat_numpy (ndarray):\n    Matrix in numpy format.", "piece": "mat_numpy (ndarray):"}
{"function_name": "set_mat_list", "function_define": "    mat_key (str):\n    mat_list (List[list]):\n    Matrix in list format.", "piece": "mat_list (List[list]):"}
{"function_name": "set_value", "function_define": "    key (str):\n    Name of the parameter.\n    value (object):", "piece": "Name of the parameter."}
{"function_name": "get_mat_np", "function_define": "    key (str):\n    Name of the parameter.\n    Returns:", "piece": "Name of the parameter."}
{"function_name": "to_string", "function_define": "    Returns:\n    A dict in json string format.\n    dump_dict = self.to_dict()", "piece": "A dict in json string format."}
{"function_name": "load_from_dict", "function_define": "    json_dict (dict):\n    for key in json_dict.keys():\n    if key == 'name':", "piece": "for key in json_dict.keys():"}
{"function_name": "validate_item", "function_define": "    CameraParameter.SUPPORTED_KEYS.\n    key (Any):\n    Key in CameraParameter.", "piece": "key (Any):"}
{"function_name": "__check_key__", "function_define": "    CameraParameter.SUPPORTED_KEYS.\n    key (Any):\n    Key in CameraParameter.", "piece": "key (Any):"}
{"function_name": "np_savetxt_3d", "function_define": "    Parameters\n    array3d: ndarray with ndim = 3\n    filename: str", "piece": "array3d: ndarray with ndim = 3"}
{"function_name": "h5_attrs_to_dict", "function_define": "    Parameters\n    h5_attrs: h5py.AttributeManager\n    dict [str, str or Number]", "piece": "h5_attrs: h5py.AttributeManager"}
{"function_name": "read_ndarrays", "function_define": "    Parameters\n    h5file_group: h5py.Group\n    dict [str, ndarray]", "piece": "h5file_group: h5py.Group"}
{"function_name": "read_objects", "function_define": "    Parameters\n    h5file_group: h5py.Group\n    dict [str, IOData]", "piece": "h5file_group: h5py.Group"}
{"function_name": "write_data", "function_define": "    if dataset.ndim <= 2:\n    np.savetxt(filename, dataset)\n    elif dataset.ndim == 3:", "piece": "np.savetxt(filename, dataset)"}
{"function_name": "insertRow", "function_define": "    s = Session()\n    s.add(row)\n    s.commit()", "piece": "s.add(row)"}
{"function_name": "primaryCol", "function_define": "    s = Session()\n    dataList = []\n    for i in data:", "piece": "dataList = []"}
{"function_name": "stoploss", "function_define": "    Creates a stoploss order.\n    ordertype = 'stop'\n    if self._config['dry_run']:", "piece": "ordertype = 'stop'"}
{"function_name": "analyze_initial", "function_define": "    if class_list:\n    classes = class_list\n    has_support = supports[i] > 0.0", "piece": "classes = class_list"}
{"function_name": "convert_pattern", "function_define": "    regex = re.compile('\\\\s=\\\\s')\n    if support:\n    patterns = pattern.split('^')", "piece": "if support:"}
{"function_name": "get_all_keys", "function_define": "    other = []\n    for key in keys:\n    res = get_all_keys(dic[key])", "piece": "for key in keys:"}
{"function_name": "get_colors_nodes", "function_define": "    base_color = '#333333'\n    pattern_color = '#7FC241'\n    if not regex.match(label):", "piece": "pattern_color = '#7FC241'"}
{"function_name": "get_colors_links", "function_define": "    base_color = '#D3D3D3'\n    out_color = '#333333'\n    saved = []", "piece": "out_color = '#333333'"}
{"function_name": "eigenfaces_train", "function_define": "    count = 0\n    img = cv2.imread(img_path, 0)\n    img_list[:, count] = img_col[:]", "piece": "img = cv2.imread(img_path, 0)"}
{"function_name": "timed_dataload", "function_define": "    counter = 0\n    for text, sentiment in data:\n    if counter % 10000 == 0:", "piece": "for text, sentiment in data:"}
{"function_name": "_get_order", "function_define": "    order = kw.pop('order', None)\n    if order is None:\n    inp = self.input", "piece": "if order is None:"}
{"function_name": "voterank", "function_define": "    Parameters\n    G : graph\n    A NetworkX graph.", "piece": "G : graph"}
{"function_name": "get_logger", "function_define": "    logger = logging.getLogger(name)\n    if name == 'app':\n    datefmt = '%Y-%m-%d %H:%M:%S'", "piece": "if name == 'app':"}
{"function_name": "split_words", "function_define": "    words = []\n    raw_words = s.split()\n    for raw_word in raw_words:", "piece": "raw_words = s.split()"}
{"function_name": "test_getvalue", "function_define": "    sp = util.BufferedByteStream()\n    sp.write('asdfasdf')\n    sp.write('spam')", "piece": "sp.write('asdfasdf')"}
{"function_name": "test_read", "function_define": "    x = util.BufferedByteStream()\n    self.assertEqual(x.tell(), 0)\n    self.assertEqual(len(x), 0)", "piece": "self.assertEqual(x.tell(), 0)"}
{"function_name": "test_seek", "function_define": "    self.assertEqual(sp.tell(), 0)\n    sp.seek(0, 0)\n    self.assertEqual(sp.tell(), 0)", "piece": "sp.seek(0, 0)"}
{"function_name": "test_tell", "function_define": "    self.assertEqual(len(sp), 26)\n    self.assertEqual(sp.tell(), 0)\n    sp.read(1)", "piece": "self.assertEqual(sp.tell(), 0)"}
{"function_name": "test_truncate", "function_define": "    self.assertEqual(len(sp), 6)\n    sp.truncate()\n    self.assertEqual(len(sp), 0)", "piece": "sp.truncate()"}
{"function_name": "test_write", "function_define": "    sp = util.BufferedByteStream()\n    self.assertEqual(len(sp), 0)\n    self.assertEqual(sp.tell(), 0)", "piece": "self.assertEqual(len(sp), 0)"}
{"function_name": "test_len", "function_define": "    sp = util.BufferedByteStream()\n    self.assertEqual(len(sp), 0)\n    self.assertEqual(sp.tell(), 0)", "piece": "self.assertEqual(len(sp), 0)"}
{"function_name": "test_consume", "function_define": "    sp = util.BufferedByteStream()\n    self.assertEqual(sp.tell(), 0)\n    sp.consume()", "piece": "self.assertEqual(sp.tell(), 0)"}
{"function_name": "_write_endian", "function_define": "    old_endian = obj.endian\n    for x in range(2):\n    obj.truncate()", "piece": "for x in range(2):"}
{"function_name": "test_write_uchar", "function_define": "    x = util.BufferedByteStream()\n    x.write_uchar(0)\n    x.write_uchar(255)", "piece": "x.write_uchar(0)"}
{"function_name": "test_write_char", "function_define": "    x = util.BufferedByteStream()\n    x.write_char(0)\n    x.write_char(-128)", "piece": "x.write_char(0)"}
{"function_name": "test_remaining", "function_define": "    self.assertEqual(x.tell(), 0)\n    x.seek(2)\n    self.assertEqual(x.tell(), 2)", "piece": "x.seek(2)"}
{"function_name": "test_add_pos", "function_define": "    a.seek(1)\n    b.seek(0, 2)\n    self.assertEqual(a.tell(), 1)", "piece": "b.seek(0, 2)"}
{"function_name": "test_nested", "function_define": "    class A(object):\n    class B(object):\n    class C(object):", "piece": "class B(object):"}
{"function_name": "test_multiple", "function_define": "    class A(object):\n    class B(object):\n    class C(object):", "piece": "class B(object):"}
{"function_name": "test_new_mixed", "function_define": "    class A(object):\n    class B(A):\n    class C(B):", "piece": "class B(A):"}
{"function_name": "test_deep", "function_define": "    class A(object):\n    class B(A):\n    class C(B):", "piece": "class B(A):"}
{"function_name": "test_alias", "function_define": "    class A:\n    class __amf__:\n    alias = 'foo.bar.Spam'", "piece": "class __amf__:"}
{"function_name": "test_static", "function_define": "    class A:\n    class __amf__:\n    static = ['foo', 'bar']", "piece": "class __amf__:"}
{"function_name": "test_exclude", "function_define": "    class A:\n    class __amf__:\n    exclude = ['foo', 'bar']", "piece": "class __amf__:"}
{"function_name": "test_readonly", "function_define": "    class A:\n    class __amf__:\n    readonly = ['foo', 'bar']", "piece": "class __amf__:"}
{"function_name": "test_amf3", "function_define": "    class A:\n    class __amf__:\n    amf3 = True", "piece": "class __amf__:"}
{"function_name": "test_dynamic", "function_define": "    class A:\n    class __amf__:\n    dynamic = False", "piece": "class __amf__:"}
{"function_name": "test_external", "function_define": "    class A:\n    class __amf__:\n    external = True", "piece": "class __amf__:"}
{"function_name": "test_proxy", "function_define": "    class A:\n    class __amf__:\n    proxy = ['foo', 'bar']", "piece": "class __amf__:"}
{"function_name": "test_synonym", "function_define": "    class A:\n    class __amf__:\n    synonym = {'foo': 'bar'}", "piece": "class __amf__:"}
{"function_name": "calculate_nodes", "function_define": "    parEnv = MPIEnvironment()\n    parEnv.comm1(self.tComm)\n    matDim = []", "piece": "parEnv.comm1(self.tComm)"}
{"function_name": "create_node", "function_define": "    if node_create.directives:\n    if node_create.tags:\n    if node_create.threat_actor:", "piece": "if node_create.tags:"}
{"function_name": "update_node", "function_define": "    if 'directives' in update_data:\n    if 'tags' in update_data:\n    if 'threats' in update_data:", "piece": "if 'tags' in update_data:"}
{"function_name": "apply_to_input", "function_define": "    input = module(input)\n    input = module(input, param)\n    input = module(input)", "piece": "input = module(input, param)"}
{"function_name": "_on_event", "function_define": "    if was_queued:\n    if self._btn_timer:\n    self._btn_timer.cancel()", "piece": "if self._btn_timer:"}
{"function_name": "get_root", "function_define": "    parts = file.split(sep='_')\n    ret = ''\n    for k in range(len(parts)):", "piece": "ret = ''"}
{"function_name": "copy_file", "function_define": "    if fltr is None:\n    dst = os.path.join(to, as_file)\n    copyfile(src, dst)", "piece": "dst = os.path.join(to, as_file)"}
{"function_name": "do_connect", "function_define": "    Parameters\n    dictionary : dict\n    from . import execution", "piece": "dictionary : dict"}
{"function_name": "from_dataframe", "function_define": "    from a DataFrame\n    Parameters\n    df : DataFrame", "piece": "Parameters"}
{"function_name": "hdfs_data_loader", "function_define": "    para: the parameters dictionary\n    Returns:\n    raw_data:  log sequences matrix", "piece": "Returns:"}
{"function_name": "bgl_data_loader", "function_define": "    para: the parameters dictionary\n    Returns:\n    raw_data: list of (label, time)", "piece": "Returns:"}
{"function_name": "axes_contains", "function_define": "    Parameters\n    ax : matplotlib.Axes\n    Axes instance.", "piece": "ax : matplotlib.Axes"}
{"function_name": "test_plot_cosmo", "function_define": "    blps = [blp for blp in blpairs]\n    plt.close(f1)\n    plt.close(f2)", "piece": "plt.close(f1)"}
{"function_name": "test_delay_wedge", "function_define": "    plt.close()\n    plt.close()\n    plt.close()", "piece": "plt.close()"}
{"function_name": "test_main_add", "function_define": "    args = mock.Mock()\n    mock_parser.return_value = args\n    vbmc.main()", "piece": "mock_parser.return_value = args"}
{"function_name": "test_main_delete", "function_define": "    args = mock.Mock()\n    mock_parser.return_value = args\n    vbmc.main()", "piece": "mock_parser.return_value = args"}
{"function_name": "test_main_start", "function_define": "    args = mock.Mock()\n    mock_parser.return_value = args\n    vbmc.main()", "piece": "mock_parser.return_value = args"}
{"function_name": "test_main_stop", "function_define": "    args = mock.Mock()\n    mock_parser.return_value = args\n    vbmc.main()", "piece": "mock_parser.return_value = args"}
{"function_name": "test_main_list", "function_define": "    args = mock.Mock()\n    mock_parser.return_value = args\n    vbmc.main()", "piece": "mock_parser.return_value = args"}
{"function_name": "test_main_show", "function_define": "    args = mock.Mock()\n    mock_parser.return_value = args\n    vbmc.main()", "piece": "mock_parser.return_value = args"}
{"function_name": "cylExtent", "function_define": "    w, h = cameras[0].size\n    ccorners_result = list(ccorners)\n    ts = list(ts)", "piece": "ccorners_result = list(ccorners)"}
{"function_name": "cameraToWorld", "function_define": "    if len(p) == 2:\n    tp0 = type(p[0])\n    p = np.array([p[0], p[1], 1.0])", "piece": "tp0 = type(p[0])"}
{"function_name": "file_operation", "function_define": "    pwd = os.getcwd()\n    pwd = pwd.strip()\n    path = pwd.rstrip('\\\\')", "piece": "pwd = pwd.strip()"}
{"function_name": "files_iteration", "function_define": "    start_time = time.time()\n    current_path = os.getcwd()\n    if os.path.isdir(full_path):", "piece": "current_path = os.getcwd()"}
{"function_name": "setup_sgpr", "function_define": "    X = np.random.randn(1000, 3)\n    Y = np.random.randn(1000, 3)\n    Z = np.random.randn(100, 3)", "piece": "Y = np.random.randn(1000, 3)"}
{"function_name": "test_adam", "function_define": "    with self.test_context():\n    m = Quadratic()\n    opt.minimize(m, maxiter=5000)", "piece": "m = Quadratic()"}
{"function_name": "test_lbfgsb", "function_define": "    with self.test_context():\n    m = Quadratic()\n    opt.minimize(m, maxiter=1000)", "piece": "m = Quadratic()"}
{"function_name": "test_name", "function_define": "    with self.test_context():\n    m1 = Empty()\n    m2 = Empty(name='foo')", "piece": "m1 = Empty()"}
{"function_name": "read_dat", "function_define": "    with open(name) as f:\n    for line in f:\n    if line.startswith('# P'):", "piece": "for line in f:"}
{"function_name": "train_test_split", "function_define": "    assert X.shape[0] == y.shape[0]\n    size = X.shape[0]\n    sep = int(split * size)", "piece": "size = X.shape[0]"}
{"function_name": "save_errors", "function_define": "    f = open('learning.curve', 'w')\n    print('#\\tX\\tY', file=f)\n    f.close()", "piece": "print('#\\tX\\tY', file=f)"}
{"function_name": "find_sizes", "function_define": "    if i == j:\n    self.distances_matrix[i, j] = 0\n    a = self.centers[i, :]", "piece": "self.distances_matrix[i, j] = 0"}
{"function_name": "get_description", "function_define": "    desc = dict()\n    desc['data'] = True\n    desc['cache'] = 86400", "piece": "desc['data'] = True"}
{"function_name": "test_transaction", "function_define": "    con = duckdb.connect()\n    con.begin()\n    con.rollback()", "piece": "con.begin()"}
{"function_name": "test_xr_bitround", "function_define": "    if keepbits == 'dict':\n    elif keepbits == 'int':\n    keepbits = i", "piece": "elif keepbits == 'int':"}
{"function_name": "_train_detector", "function_define": "    Training an object detector\n    self._get_output_directory()\n    except Exception as e:", "piece": "self._get_output_directory()"}
{"function_name": "_abort_helpers", "function_define": "    if no_style:\n    style = None\n    skip_mnemonic = '[s]'", "piece": "style = None"}
{"function_name": "metadata_prompt", "function_define": "    msg('select match')\n    choice = selector.prompt()\n    raise choice", "piece": "choice = selector.prompt()"}
{"function_name": "metadata_guess", "function_define": "    label = str(metadata)\n    if no_style:\n    label += ' (best guess)'", "piece": "if no_style:"}
{"function_name": "subtitle_prompt", "function_define": "    msg('select language')\n    choice = selector.prompt()\n    raise choice", "piece": "choice = selector.prompt()"}
{"function_name": "run_inference", "function_define": "    model_path: path to tf model\n    image_path: path to image file\n    img_h: image height", "piece": "image_path: path to image file"}
{"function_name": "combine_messages", "function_define": "    array of template numbers (tns)\n    with those digits. i.e.:\n    tn - template number", "piece": "with those digits. i.e.:"}
{"function_name": "largest_pairs", "function_define": "    largest = -1\n    for pair in pairs:\n    a, b = pair", "piece": "for pair in pairs:"}
{"function_name": "sanitizeField", "function_define": "    s = re.sub('<!--.*-->', '', s)\n    if match:\n    s = match.group(1)", "piece": "if match:"}
{"function_name": "_get_tests", "function_define": "    tests = []\n    for test in initial_tests:\n    if os.path.isdir(test):", "piece": "for test in initial_tests:"}
{"function_name": "_waitpid", "function_define": "    while True:\n    if os.WIFSIGNALED(status):\n    if os.WIFEXITED(status):", "piece": "if os.WIFSIGNALED(status):"}
{"function_name": "_run_test_qt", "function_define": "    env = self._test_env\n    print(exc.output)\n    if exc.returncode > 0:", "piece": "print(exc.output)"}
{"function_name": "_run_google_test", "function_define": "    timeout = self._options.timeout\n    timeout *= 10\n    pid, fd = os.forkpty()", "piece": "timeout *= 10"}
{"function_name": "run_tests", "function_define": "    if not self._tests:\n    sys.stderr.flush()\n    crashed_tests = {}", "piece": "sys.stderr.flush()"}
{"function_name": "shortcut", "function_define": "    ch_in = input.shape[1]\n    if ch_in != ch_out:\n    if stride == 1:", "piece": "if ch_in != ch_out:"}
{"function_name": "succession", "function_define": "    to process (a + 1).\n    if a < 0:\n    tape = TapeGenerator.new_tape()", "piece": "if a < 0:"}
{"function_name": "init_network", "function_define": "    self.net.initialize()\n    if self.restore_model:\n    self.net.restore_controller()", "piece": "if self.restore_model:"}
{"function_name": "save_model", "function_define": "    self.net.save_controller()\n    self.net.save_base()\n    self.net.save_tech()", "piece": "self.net.save_base()"}
{"function_name": "update_network", "function_define": "    self.update_counter += 1\n    if self.use_trick_1:\n    if P.use_alternative_update:", "piece": "if self.use_trick_1:"}
{"function_name": "tech_step", "function_define": "    if tech_action == 0:\n    pos = U.get_pos(no_unit_index)\n    elif tech_action == 2:", "piece": "pos = U.get_pos(no_unit_index)"}
{"function_name": "pop_step", "function_define": "    if pop_action == 0:\n    M.mineral_worker(self)\n    elif pop_action == 1:", "piece": "M.mineral_worker(self)"}
{"function_name": "fight_step", "function_define": "    if army:\n    if fight_action == 1:\n    M.attack_step(self, fight_pos)", "piece": "if fight_action == 1:"}
{"function_name": "tech_action", "function_define": "    tech_obs = self.get_tech_input()\n    self.tech_step(act)\n    reward = 0", "piece": "self.tech_step(act)"}
{"function_name": "pop_action", "function_define": "    pop_obs = self.get_pop_input()\n    self.pop_step(act)\n    reward = 0", "piece": "self.pop_step(act)"}
{"function_name": "fight_action", "function_define": "    reward = 0\n    if army:\n    if not self.use_fight:", "piece": "if army:"}
{"function_name": "set_flag", "function_define": "    self.controller_flag = True\n    self.base_flag = True\n    self.battle_flag = True", "piece": "self.base_flag = True"}
{"function_name": "safe_action", "function_define": "    self.obs = obs\n    self.step += 1\n    self.update_result()", "piece": "self.step += 1"}
{"function_name": "update_result", "function_define": "    if self.obs is None:\n    self.is_end = True\n    outcome = 0", "piece": "self.is_end = True"}
{"function_name": "fantasize_costs", "function_define": "    fantasy_costs = []\n    fantasy_optimizers = []\n    if algo == 'EI-PUC_CC':", "piece": "fantasy_optimizers = []"}
{"function_name": "fit_model", "function_define": "    Y_copy = Y.clone()\n    if Y.ndim == 1:\n    Y_copy = Y_copy.unsqueeze(-1)", "piece": "if Y.ndim == 1:"}
{"function_name": "isomorphisms", "function_define": "    empty) list of isomorphisms.\n    or a list of these.\n    EXAMPLES::", "piece": "or a list of these."}
{"function_name": "__invert__", "function_define": "    EXAMPLES::\n    sage: E = EllipticCurve('5077')\n    sage: w = E.isomorphism_to(F)", "piece": "sage: E = EllipticCurve('5077')"}
{"function_name": "get_transform", "function_define": "    transform_list = []\n    if is_train:\n    transform_list.append(normalize)", "piece": "if is_train:"}
{"function_name": "betRequest", "function_define": "    players = game_state['players']\n    our_bet = 0\n    still_close = 2", "piece": "our_bet = 0"}
{"function_name": "_add_report", "function_define": "    while True:\n    result = (yield)\n    continue", "piece": "result = (yield)"}
{"function_name": "_process_report", "function_define": "    while True:\n    result = (yield)\n    raise TypeError(result, str(e))", "piece": "result = (yield)"}
{"function_name": "sendMultiPart", "function_define": "    msg = MIMEMultipart()\n    msg['From'] = sender\n    msg['To'] = to", "piece": "msg['From'] = sender"}
{"function_name": "process_main", "function_define": "    if not backup_recipients:\n    file_out = BIO()\n    tar.add(dropbox.fs_path)", "piece": "file_out = BIO()"}
{"function_name": "set_values", "function_define": "    value = diaf_list[value]\n    if which == 'ROA':\n    elif which == 'VOA':", "piece": "if which == 'ROA':"}
{"function_name": "save_values", "function_define": "    if which == 'ROA':\n    elif which == 'VOA':\n    self.__data.save_locally()", "piece": "elif which == 'VOA':"}
{"function_name": "voa_change_f", "function_define": "    self.set_full_range.fire()\n    self.__voa = value\n    self.set_values(value, 'VOA')", "piece": "self.__voa = value"}
{"function_name": "roa_change_f", "function_define": "    self.set_full_range.fire()\n    self.__roa = value\n    self.set_values(value, 'ROA')", "piece": "self.__roa = value"}
{"function_name": "_swig_getattr", "function_define": "    if name == 'thisown':\n    if method:\n    raise AttributeError(name)", "piece": "if method:"}
{"function_name": "_run_on_asics", "function_define": "    Returns:\n    if type(asic_index) == int:\n    if asic_index != 0:", "piece": "if type(asic_index) == int:"}
{"function_name": "get_route", "function_define": "    if asic_id == DEFAULT_ASIC_ID:\n    ns_prefix = ''\n    ns_prefix = '-n ' + str(asic_id)", "piece": "ns_prefix = ''"}
{"function_name": "__getattr__", "function_define": "    attr: attribute to get\n    Returns:\n    self.multi_asic_attr = attr", "piece": "Returns:"}
{"function_name": "get_queue_oid", "function_define": "    queue OID\n    port: Port ID\n    queue_num: Queue", "piece": "port: Port ID"}
{"function_name": "startEventLoop", "function_define": "    global HANDLER\n    while True:\n    HANDLER.processRequests()", "piece": "while True:"}
{"function_name": "startQtEventLoop", "function_define": "    if app is None:\n    app = QtGui.QApplication([])\n    global HANDLER", "piece": "app = QtGui.QApplication([])"}
{"function_name": "eventLoop", "function_define": "    while True:\n    self.processRequests()\n    time.sleep(0.01)", "piece": "self.processRequests()"}
{"function_name": "startEventTimer", "function_define": "    self.timer = QtCore.QTimer()\n    if self._processRequests:\n    if app is None:", "piece": "if self._processRequests:"}
{"function_name": "processRequests", "function_define": "    Process.processRequests(self)\n    except ClosedError:\n    self.timer.stop()", "piece": "except ClosedError:"}
{"function_name": "update_filters", "function_define": "    list to fetch deferred results.\n    for uid in uids:\n    if item:", "piece": "for uid in uids:"}
{"function_name": "fetchMore", "function_define": "    if not index.isValid():\n    item = self.itemFromIndex(index)\n    sg_data = item.get_sg_data()", "piece": "item = self.itemFromIndex(index)"}
{"function_name": "get_source_by_id", "function_define": "    Retrieve source by id\n    connection = pool.connection()\n    if row_count > 0:", "piece": "connection = pool.connection()"}
{"function_name": "get_source_id", "function_define": "    Retrieve Source id\n    connection = pool.connection()\n    if row_count > 0:", "piece": "connection = pool.connection()"}
{"function_name": "add_source", "function_define": "    Insert sources into the database\n    connection = pool.connection()\n    connection.commit()", "piece": "connection = pool.connection()"}
{"function_name": "add_sources", "function_define": "    Add sources into Source table\n    for source in sources:\n    print(source.get('model'))", "piece": "for source in sources:"}
{"function_name": "delete_source", "function_define": "    connection = pool.connection()\n    connection.commit()\n    if row_count > 0:", "piece": "connection.commit()"}
{"function_name": "add_form", "function_define": "    width2 = 28\n    self.add_label('Date:')\n    self.add_spacer(2)", "piece": "self.add_label('Date:')"}
{"function_name": "add_edit_buttons", "function_define": "    self.add_ctl_button('Prev')\n    self.add_ctl_button('Next')\n    self.add_btn_spacer()", "piece": "self.add_ctl_button('Next')"}
{"function_name": "_init_logs", "function_define": "    if self._logs is None:\n    kwargs = {}\n    attempts_left = MAX_INIT_TRIES", "piece": "kwargs = {}"}
{"function_name": "send_messages", "function_define": "    log_events = []\n    for msg in messages:\n    raw_message = msg.decode('utf8')", "piece": "for msg in messages:"}
{"function_name": "least_trial_num", "function_define": "    buffer = []\n    for i in range(1000001):\n    buffer += [0]", "piece": "for i in range(1000001):"}
{"function_name": "loss_fn_SBL", "function_define": "    model_state, loss_state = state\n    if warm_restart:\n    prior_init = None", "piece": "if warm_restart:"}
{"function_name": "_aggVariant", "function_define": "    rownames_list = []\n    metric_avg_list = []\n    if variant == None:", "piece": "metric_avg_list = []"}
{"function_name": "aggClassif", "function_define": "    rownames_list_all = []\n    metric_avg_list_all = []\n    for variant in classif_variants:", "piece": "metric_avg_list_all = []"}
{"function_name": "aggImpute", "function_define": "    rownames_list_all = []\n    acc_avg_list_all = []\n    mse_avg_list_all = []", "piece": "acc_avg_list_all = []"}
{"function_name": "load_wsi", "function_define": "    wsi = OpenSlide(path)\n    level_dim = wsi.level_dimensions\n    x = level_dim[1][0]", "piece": "level_dim = wsi.level_dimensions"}
{"function_name": "create_event", "function_define": "    event = Event()\n    event.add('dtstart', start_at)\n    event.add('dtend', end_at)", "piece": "event.add('dtstart', start_at)"}
{"function_name": "get_calendar", "function_define": "    data = get_schedule(streamer)\n    user = data['user']\n    cal = Calendar()", "piece": "user = data['user']"}
{"function_name": "printList", "function_define": "    if head is None:\n    print(' ')\n    curr_node = head", "piece": "print(' ')"}
{"function_name": "sortedMerge", "function_define": "    result = None\n    if a == None:\n    if b == None:", "piece": "if a == None:"}
{"function_name": "mergeSort", "function_define": "    if h == None or h.next == None:\n    middle = self.getMiddle(h)\n    nexttomiddle = middle.next", "piece": "middle = self.getMiddle(h)"}
{"function_name": "getMiddle", "function_define": "    if head == None:\n    slow = head\n    fast = head", "piece": "slow = head"}
{"function_name": "load_casb_data", "function_define": "    while True:\n    load_casb_risk_scores(configs)\n    sleep(fetch_period_in_secs)", "piece": "load_casb_risk_scores(configs)"}
{"function_name": "index_page", "function_define": "    if request.method == 'POST':\n    f = request.FILES['sentFile']\n    with open(f.name, 'w'):", "piece": "f = request.FILES['sentFile']"}
{"function_name": "check_feed", "function_define": "    assert feed.version == version\n    if version.is_rss:\n    elif version.is_atom:", "piece": "if version.is_rss:"}
{"function_name": "predict_on_image", "function_define": "    Arguments:\n    Returns:\n    A tensor with face detections.", "piece": "Returns:"}
{"function_name": "predict_on_batch", "function_define": "    Arguments:\n    Returns:\n    of shape (0, 17).", "piece": "Returns:"}
{"function_name": "draw_markings", "function_define": "    GL.glColor3f(0, 1, 0)\n    if not self.s_icon_width:\n    GL.glBegin(GL.GL_LINE_LOOP)", "piece": "if not self.s_icon_width:"}
{"function_name": "prep_cache", "function_define": "    self.s_num_cached_coords = 0\n    self.s_cached_x_coords = []\n    self.s_cached_y_coords = []", "piece": "self.s_cached_x_coords = []"}
{"function_name": "getTxnsFromPool", "function_define": "    rwo = list()\n    for i in MasterObj.mempool:\n    rwo.append(i)", "piece": "for i in MasterObj.mempool:"}
{"function_name": "MineBlock", "function_define": "    import multiprocessing as mp\n    ctx = mp.get_context('spawn')\n    q = ctx.Queue()", "piece": "ctx = mp.get_context('spawn')"}
{"function_name": "miner_thread", "function_define": "    self.running = True\n    curr_miner = self.miner_address\n    while not self.shutdown:", "piece": "curr_miner = self.miner_address"}
{"function_name": "assign_role_flow", "function_define": "    Returns:\n    if assignee_participant:\n    db_session.add(incident)", "piece": "if assignee_participant:"}
{"function_name": "run_gym_dqn", "function_define": "    agent = DQN(**kwargs)\n    if test_env is None:\n    test_agent = None", "piece": "if test_env is None:"}
{"function_name": "run_gym_agent57", "function_define": "    manager = Agent57(**kwargs)\n    if test_env is None:\n    test_actor = None", "piece": "if test_env is None:"}
{"function_name": "test_token_type", "function_define": "    with test_database(test_db, ()):\n    self.user1.save()\n    user.delete_instance()", "piece": "self.user1.save()"}
{"function_name": "test_report", "function_define": "    self.user1.save()\n    self.repo1.save()\n    self.job1.save()", "piece": "self.repo1.save()"}
{"function_name": "mancheClassique", "function_define": "    if self.numero_manche <= 1:\n    self.print_v(str(cartes))\n    annonces = []", "piece": "self.print_v(str(cartes))"}
{"function_name": "jouerPartie", "function_define": "    self.initialiserJeu()\n    while self.numero_manche > 1:\n    self.mancheClassique()", "piece": "while self.numero_manche > 1:"}
{"function_name": "derniereManche", "function_define": "    self.print_v('Derni\u00e8re manche')\n    self.print_v(str(cartes))\n    for j in ordreJeu:", "piece": "self.print_v(str(cartes))"}
{"function_name": "collision", "function_define": "    if type(other) is Gobo:\n    self.touched_gobo = True\n    print('Hello Gobo!')", "piece": "self.touched_gobo = True"}
{"function_name": "data_validation", "function_define": "    environment_scopes = []\n    errors = schema.validate(data)\n    if errors_index_rows:", "piece": "errors = schema.validate(data)"}
{"function_name": "trackPBSQueue", "function_define": "    jobs = 0\n    while True:\n    time.sleep(minutes * 60)", "piece": "while True:"}
{"function_name": "test_basic", "function_define": "    km = KMeans.KMeansPlus(K=4)\n    self.assertEqual(km._K, 4)\n    y_pred = result[1]", "piece": "self.assertEqual(km._K, 4)"}
{"function_name": "PreProcess", "function_define": "    PreProcess_timer = Timer()\n    PreProcess_timer.tic()\n    if Flag == False:", "piece": "PreProcess_timer.tic()"}
{"function_name": "img_pre_for_SVHN", "function_define": "    rectangle_imgs = []\n    original_imgs = []\n    h_i, w_i, _ = crop_img.shape", "piece": "original_imgs = []"}
{"function_name": "mk_cluster_dirs", "function_define": "    save_dir : \u4fdd\u5b58\u5206\u7c7b\u7ed3\u679c\u7684\u6839\u76ee\u5f55\n    num_cls : \u5206\u7c7b\u7684\u6570\u91cf\uff0c\u79cd\u7c7b\u6570\n    for i in range(num_cls):", "piece": "num_cls : \u5206\u7c7b\u7684\u6570\u91cf\uff0c\u79cd\u7c7b\u6570"}
{"function_name": "get_games_owned", "function_define": "    games = {}\n    for el in xml:\n    if el.tag == 'games':", "piece": "for el in xml:"}
{"function_name": "test_open", "function_define": "    stream.save = mock.MagicMock()\n    stream.closed = True\n    assert stream.open() is stream", "piece": "stream.closed = True"}
{"function_name": "test_close", "function_define": "    stream.save = mock.MagicMock()\n    assert stream.close() is stream\n    assert stream.closed is True", "piece": "assert stream.close() is stream"}
{"function_name": "test_read_none", "function_define": "    except StopIteration:\n    result = []\n    if item is ...:", "piece": "result = []"}
{"function_name": "test_redirect", "function_define": "    station.save = mock.MagicMock()\n    station.stream_lock_ttl = 0\n    stream.save = mock.MagicMock()", "piece": "station.stream_lock_ttl = 0"}
{"function_name": "test_context", "function_define": "    stream.open = mock.MagicMock()\n    stream.close = mock.MagicMock()\n    with stream:", "piece": "stream.close = mock.MagicMock()"}
{"function_name": "runVerifyDEM", "function_define": "    demimg.renderVRT()\n    demimg.load(wgsdemname + '.xml')\n    bbox = reference.getBbox()", "piece": "demimg.load(wgsdemname + '.xml')"}
{"function_name": "data_files", "function_define": "    Returns:\n    if not data_files:\n    exit(-1)", "piece": "if not data_files:"}
{"function_name": "get_folder_id", "function_define": "    folder_id = 'nil'\n    for file in file_list:\n    if file['title'] == folder_name:", "piece": "for file in file_list:"}
{"function_name": "show_board", "function_define": "    sleep(1)\n    self.update_board()\n    board = self.board.copy()", "piece": "self.update_board()"}
{"function_name": "update_board", "function_define": "    self.update_image()\n    for i in range(ROWS):\n    for j in range(COLS):", "piece": "for i in range(ROWS):"}
{"function_name": "play_one_move", "function_define": "    while True:\n    self.update_image()\n    if self.is_my_turn():", "piece": "self.update_image()"}
{"function_name": "pointsToLine2", "function_define": "    if p1.x == p2.x:\n    l.m = INF\n    l.c = p1.x", "piece": "l.m = INF"}
{"function_name": "areIntersect", "function_define": "    if areParallel(l1, l2):\n    if not math.isclose(l1.b, 0.0):\n    p.y = -(l1.a * p.x + l1.c)", "piece": "if not math.isclose(l1.b, 0.0):"}
{"function_name": "closestPoint", "function_define": "    if math.isclose(l.b, 0.0):\n    ans.x, ans.y = (-l.c, p.y)\n    if math.isclose(l.a, 0.0):", "piece": "ans.x, ans.y = (-l.c, p.y)"}
{"function_name": "reflectionPoint", "function_define": "    b = point()\n    closestPoint(l, p, b)\n    v = toVec(p, b)", "piece": "closestPoint(l, p, b)"}
{"function_name": "distToLine", "function_define": "    ap = toVec(a, p)\n    ab = toVec(a, b)\n    u = dot(ap, ab) / norm_sq(ab)", "piece": "ab = toVec(a, b)"}
{"function_name": "crear_db", "function_define": "    db.create_all()\n    msg = 'creado'\n    msg = 'ya existe'", "piece": "msg = 'creado'"}
{"function_name": "mostrar_pregunta", "function_define": "    p = Pregunta.query.get(pid)\n    r['id'] = p.id\n    r['texto'] = p.texto", "piece": "r['id'] = p.id"}
{"function_name": "crear_pregunta", "function_define": "    texto = request.form['texto']\n    p = Pregunta(texto=texto)\n    db.session.add(p)", "piece": "p = Pregunta(texto=texto)"}
{"function_name": "is_up_to_date", "function_define": "    installed = installed.split('.')\n    latest = latest.split('.')\n    for i in range(len(installed)):", "piece": "latest = latest.split('.')"}
{"function_name": "keycap_digit", "function_define": "    c = int(c)\n    if 0 < c < 10:\n    elif c == 10:", "piece": "if 0 < c < 10:"}
{"function_name": "register_alarm", "function_define": "    for alarm in listify(alarm):\n    if alarm not in self._alarms:\n    self._alarms.append(alarm)", "piece": "if alarm not in self._alarms:"}
{"function_name": "test_oidc_login", "function_define": "    state = parsed_query['state'][0]\n    user = baker.make(UserProfile)\n    page = self.app.get(location)", "piece": "user = baker.make(UserProfile)"}
{"function_name": "needle_alignment", "function_define": "    DESCRIPTION\n    from Bio import pairwise2\n    a = MultipleSeqAlignment([])", "piece": "from Bio import pairwise2"}
{"function_name": "aln_magic_format", "function_define": "    DESCRIPTION\n    Guess alignment file format.\n    with open(infile) as handle:", "piece": "Guess alignment file format."}
{"function_name": "aln_magic_read", "function_define": "    DESCRIPTION\n    from Bio import AlignIO\n    if not format:", "piece": "from Bio import AlignIO"}
{"function_name": "load_aln_multi", "function_define": "    DESCRIPTION\n    loaded structures.\n    ARGUMENTS", "piece": "loaded structures."}
{"function_name": "Settings", "function_define": "    raise IgnoreExtraConf()\n    file_name = kwargs['filename']\n    flags = []", "piece": "file_name = kwargs['filename']"}
{"function_name": "VendorSignUpView", "function_define": "    if request.method == 'POST':\n    if form.is_valid():\n    form.save()", "piece": "if form.is_valid():"}
{"function_name": "read_yaml", "function_define": "    By <NAME> for Mechanical Color\n    yaml_file = open(file_path, 'r')\n    yaml_file.close()", "piece": "yaml_file = open(file_path, 'r')"}
{"function_name": "test_writeable", "function_define": "    By <NAME> for Mechanical Color\n    If all is well, returns True.\n    os.mkdir(test_dir_path)", "piece": "If all is well, returns True."}
{"function_name": "get_next_action", "function_define": "    if not self.cursor:\n    self.cursor = self.root\n    self.cursor = new_c", "piece": "self.cursor = self.root"}
{"function_name": "get_next_move", "function_define": "    if goal in self.children:\n    best = None\n    max_u = 0", "piece": "best = None"}
{"function_name": "publishUpdates", "function_define": "    self.unpackBody()\n    if 'items' not in checkPost:\n    print('Updating post...')", "piece": "if 'items' not in checkPost:"}
{"function_name": "stripBody", "function_define": "    modBod = ''\n    cache = ''\n    state = STATE_NEWLINE", "piece": "cache = ''"}
{"function_name": "unpackBody", "function_define": "    if self.unpacked:\n    deeper = False\n    for i in range(0, len(blocks)):", "piece": "deeper = False"}
{"function_name": "assign_device", "function_define": "    if device > -1:\n    elif device == -1:\n    device = 'cuda'", "piece": "elif device == -1:"}
{"function_name": "make_log_dir", "function_define": "    if args.with_sacred:\n    if not os.path.isdir(log_dir):\n    os.mkdir(log_dir)", "piece": "if not os.path.isdir(log_dir):"}
{"function_name": "get_data_loader", "function_define": "    if args.dataset == 'cifar10':\n    args.num_classes = 10\n    elif args.dataset == 'cifar100':", "piece": "args.num_classes = 10"}
{"function_name": "build_model", "function_define": "    if self.args.dtype == '64':\n    self.net = self.net.double()\n    if self.device == 'cuda':", "piece": "self.net = self.net.double()"}
{"function_name": "epoch_pass", "function_define": "    if phase == 'train':\n    self.net.train(True)\n    self.net.train(False)", "piece": "self.net.train(True)"}
{"function_name": "surgery_core", "function_define": "    arg_dict = get_root_arg_info(f)\n    arg_pos = []\n    if freevar in arg_dict:", "piece": "arg_pos = []"}
{"function_name": "make_closure", "function_define": "    arg_dict = get_root_arg_info(f)\n    arg_pos = []\n    if freevar in arg_dict:", "piece": "arg_pos = []"}
{"function_name": "training", "function_define": "    Returns:\n    super().training(**kwargs)\n    if zero_init_states is not None:", "piece": "super().training(**kwargs)"}
{"function_name": "read_from_fits", "function_define": "    Parameters\n    file_name : str\n    Name of file with path", "piece": "file_name : str"}
{"function_name": "write_to_fits", "function_define": "    Parameters\n    file_name : str\n    Name of file with path", "piece": "file_name : str"}
{"function_name": "read_file", "function_define": "    Parameters\n    file_name : str\n    Name of file with path", "piece": "file_name : str"}
{"function_name": "read_input_files", "function_define": "    Parameters\n    data_file_name : str\n    psf_file_name : str", "piece": "data_file_name : str"}
{"function_name": "get_filesets", "function_define": "    in cpio.gz format\n    Arguments:\n    reply = self._recvmsg()", "piece": "Arguments:"}
{"function_name": "cmd_filerelay", "function_define": "    fr = FileRelay(dev)\n    sets = FileRelay.filesets\n    if args.s is not None:", "piece": "sets = FileRelay.filesets"}
{"function_name": "initLayers", "function_define": "    self.reluLayer = ReLU()\n    self.sigmoidLayer = Sigmoid()\n    self.lossLayer = CrossEntropy()", "piece": "self.sigmoidLayer = Sigmoid()"}
{"function_name": "analyseTunnel", "function_define": "    numLigneLue = 0\n    chouBlanc = True\n    nbCell = 0", "piece": "chouBlanc = True"}
{"function_name": "lanceSinodoju", "function_define": "    r1 = conn.getresponse()\n    print(r1.status, r1.reason)\n    data1 = r1.read()", "piece": "print(r1.status, r1.reason)"}
{"function_name": "separateurMille", "function_define": "    maChaine0 = '%d' % monEntier\n    maChaine1 = ''\n    monSigne = maChaine0[numSigne2]", "piece": "maChaine1 = ''"}
{"function_name": "viewSinodoju", "function_define": "    tableauDeLignes = []\n    nbBitsFournis = len(graine) * 6\n    nbCellules = 145", "piece": "nbBitsFournis = len(graine) * 6"}
{"function_name": "vireSigne", "function_define": "    maChainePurgee = ''\n    monSigne = maChaine[numSigne]\n    if monSigne != monSigneAVirer:", "piece": "monSigne = maChaine[numSigne]"}
{"function_name": "run_check_net", "function_define": "    batch_size = 8\n    C, H, W = (1, 128, 128)\n    net = SaltNet().cuda()", "piece": "C, H, W = (1, 128, 128)"}
{"function_name": "set_mode", "function_define": "    self.mode = mode\n    self.eval()\n    elif mode in ['train']:", "piece": "self.eval()"}
{"function_name": "construct_class", "function_define": "    name = class_name(schema.name)\n    name_lower = name.lower()\n    if len(fn_body) == 0:", "piece": "name_lower = name.lower()"}
{"function_name": "_construct_to_", "function_define": "    if output == 'json':\n    method = 'dumps'\n    elif output == 'dict':", "piece": "method = 'dumps'"}
{"function_name": "get_selector", "function_define": "    name = pars['name']\n    embeddings = pars['embeddings']\n    trainer = pars['trainer']", "piece": "embeddings = pars['embeddings']"}
{"function_name": "SliderMoved", "function_define": "    if val_h1_max < val_h1_min:\n    val_h1_max = val_h1_min\n    if val_h2_max < val_h2_min:", "piece": "val_h1_max = val_h1_min"}
{"function_name": "peer_subscribe", "function_define": "    self.subscribe()\n    if not self._ever_subscribed:\n    self._ever_subscribed = True", "piece": "if not self._ever_subscribed:"}
{"function_name": "test_config", "function_define": "    utils.output_dir = str(tmpdir)\n    config.start_chapter(chap)\n    for sec in parts:", "piece": "config.start_chapter(chap)"}
{"function_name": "datacube", "function_define": "    shape = a.shape\n    lenShape = len(shape)\n    nf1 = len(flist_chunk)", "piece": "lenShape = len(shape)"}
{"function_name": "initialize", "function_define": "    for m in self.modules():\n    if isinstance(m, nn.Conv2d):\n    elif isinstance(m, nn.Linear):", "piece": "if isinstance(m, nn.Conv2d):"}
{"function_name": "surfaceArea", "function_define": "    result = 0\n    for i in xrange(len(grid)):\n    for j in xrange(len(grid)):", "piece": "for i in xrange(len(grid)):"}
{"function_name": "surfaceArea2", "function_define": "    n, ans = (len(grid), 0)\n    for i in xrange(n):\n    for j in xrange(n):", "piece": "for i in xrange(n):"}
{"function_name": "surfaceArea3", "function_define": "    for row in grid:\n    rrow = [0] + row + [0]\n    for col in zip(*grid):", "piece": "rrow = [0] + row + [0]"}
{"function_name": "tratarErrorFloat", "function_define": "    if n != '':\n    d = n.isalpha()\n    e = n.isalnum()", "piece": "d = n.isalpha()"}
{"function_name": "label_tag", "function_define": "    if not contents:\n    classes = []\n    if self.is_checkbox:", "piece": "classes = []"}
{"function_name": "setup_indices", "function_define": "    if self.force_delete:\n    self.destroy_indices()\n    self.setup_residents_index()", "piece": "self.destroy_indices()"}
{"function_name": "destroy_indices", "function_define": "    for assembly in self.assemblies:\n    snp_index = 'snp_' + assembly\n    for chrom in self.chroms:", "piece": "snp_index = 'snp_' + assembly"}
{"function_name": "setup_snps_index", "function_define": "    for assembly in self.assemblies:\n    snp_index = 'snp_' + assembly\n    for chrom in self.chroms:", "piece": "snp_index = 'snp_' + assembly"}
{"function_name": "_GetTxDataFromDB", "function_define": "    sqlret = sql.run(strsql)\n    if not isinstance(sqlret, list):\n    ret_trxs = []", "piece": "if not isinstance(sqlret, list):"}
{"function_name": "setHeaderLabel", "function_define": "    if isinstance(labels, str):\n    labels = [labels]\n    if self._tree is not None:", "piece": "labels = [labels]"}
{"function_name": "setColumnText", "function_define": "    new_list = []\n    new_list.append(value)\n    self._cols_labels = new_list", "piece": "new_list.append(value)"}
{"function_name": "test_condor_cat", "function_define": "    num_jobs = 100\n    dirs = [None] * num_jobs\n    jobs = [None] * num_jobs", "piece": "dirs = [None] * num_jobs"}
{"function_name": "ejercicio11", "function_define": "    s = str(n)\n    reverso = s[::-1]\n    if s == reverso:", "piece": "reverso = s[::-1]"}
{"function_name": "ejercicio13", "function_define": "    if seg >= 60:\n    min = seg / 60\n    if seg >= 3600:", "piece": "min = seg / 60"}
{"function_name": "ejercicio14", "function_define": "    if n3 > n2 > n1:\n    elif n3 > n1 > n2:\n    elif n2 > n3 > n1:", "piece": "elif n3 > n1 > n2:"}
{"function_name": "ejercicio15", "function_define": "    t1 = [0, 0, '', 0, 0, '']\n    t2 = [0] * 2\n    for i in pbs:", "piece": "t2 = [0] * 2"}
{"function_name": "ejercicio16", "function_define": "    print('\\n')\n    IMC = masa / estatura\n    if 16 < IMC < 16.9:", "piece": "IMC = masa / estatura"}
{"function_name": "ejercicio17", "function_define": "    from datetime import date\n    fechainicial = date(2014, 1, 1)\n    fechafinal = date(a\u00f1o, mes, dia)", "piece": "fechainicial = date(2014, 1, 1)"}
{"function_name": "ejercicio18", "function_define": "    if n == 1:\n    print('enero')\n    elif n == 2:", "piece": "print('enero')"}
{"function_name": "ejercicio19", "function_define": "    print('Ingrese Monto : ')\n    monto = float(input())\n    if monto > 1000:", "piece": "monto = float(input())"}
{"function_name": "check_num_atoms", "function_define": "    mol: rdkit.Chem.rdchem.Mol\n    The molecule to check.\n    check passes unconditionally.", "piece": "The molecule to check."}
{"function_name": "get_gaze_rays", "function_define": "    cap = cv2.VideoCapture(filename)\n    frame_no = 0\n    gaze_angles = {}", "piece": "frame_no = 0"}
{"function_name": "get_service_info", "function_define": "    c = db.cursor()\n    row = c.fetchone()\n    if not row:", "piece": "row = c.fetchone()"}
{"function_name": "stop_service", "function_define": "    assert isinstance(name, str)\n    pid = self.get_service_pid(name)\n    if pid == os.getpid():", "piece": "pid = self.get_service_pid(name)"}
{"function_name": "parse_genome", "function_define": "    Parameters\n    auto_install : bool, optional\n    genomes_dir : str, optional", "piece": "auto_install : bool, optional"}
{"function_name": "transcribe_file", "function_define": "    if request.method == 'POST':\n    res = {}\n    if 'file' not in request.files:", "piece": "res = {}"}
{"function_name": "count_sentences", "function_define": "    text = text.strip()\n    if len(text) == 0:\n    split_result = None", "piece": "if len(text) == 0:"}
{"function_name": "remove_if_exists", "function_define": "    to_remove = []\n    for i in range(len(mylist)):\n    if mylist[i] == item:", "piece": "for i in range(len(mylist)):"}
{"function_name": "find_first", "function_define": "    idx = mylist.index(item)\n    except ValueError:\n    idx = -1", "piece": "except ValueError:"}
{"function_name": "test_string", "function_define": "    s = String()\n    element = etree.Element('test')\n    element = element[0]", "piece": "element = etree.Element('test')"}
{"function_name": "test_datetime", "function_define": "    element = etree.Element('test')\n    element = element[0]\n    self.assertEquals(n, dt)", "piece": "element = element[0]"}
{"function_name": "test_date_format", "function_define": "    t = datetime.date.today()\n    format = '%Y %m %d'\n    element = etree.Element('test')", "piece": "format = '%Y %m %d'"}
{"function_name": "test_utcdatetime", "function_define": "    e = etree.Element('test')\n    e.text = datestring\n    self.assertEquals(dt.year, 2007)", "piece": "e.text = datestring"}
{"function_name": "test_integer", "function_define": "    integer = Integer()\n    element = etree.Element('test')\n    element = element[0]", "piece": "element = etree.Element('test')"}
{"function_name": "test_float", "function_define": "    f = 1.22255645\n    element = etree.Element('test')\n    element = element[0]", "piece": "element = etree.Element('test')"}
{"function_name": "test_array_empty", "function_define": "    type = Array(String)\n    values = []\n    element = etree.Element('test')", "piece": "values = []"}
{"function_name": "test_unicode", "function_define": "    s = u'4Ue4'\n    self.assertEquals(4, len(s))\n    element = etree.Element('test')", "piece": "self.assertEquals(4, len(s))"}
{"function_name": "test_null", "function_define": "    element = etree.Element('test')\n    print(etree.tostring(element))\n    element = element[0]", "piece": "print(etree.tostring(element))"}
{"function_name": "test_boolean", "function_define": "    b = etree.Element('test')\n    b = b[0]\n    b = etree.Element('test')", "piece": "b = b[0]"}
{"function_name": "test_4suite", "function_define": "    gg = SomeBlob()\n    element = etree.Element('test')\n    element = element[0]", "piece": "element = etree.Element('test')"}
{"function_name": "get_dir_name", "function_define": "    dir_list = []\n    for name in os.listdir(dir):\n    path = dir + '/' + name", "piece": "for name in os.listdir(dir):"}
{"function_name": "scan_dir", "function_define": "    dir_list = []\n    for name in os.listdir(dir):\n    path = dir + '/' + name", "piece": "for name in os.listdir(dir):"}
{"function_name": "init_simul", "function_define": "    skeletons = []\n    for i in range(test_num):\n    cbr_num = min(test_num, cbr_num)", "piece": "for i in range(test_num):"}
{"function_name": "read_csv", "function_define": "    data = []\n    for line in reader:\n    fields = line.split(',')", "piece": "for line in reader:"}
{"function_name": "handle_path", "function_define": "    if len(paths) == 1:\n    path = paths[0]\n    if os.path.isdir(path):", "piece": "path = paths[0]"}
{"function_name": "read_hdf", "function_define": "    layers = []\n    temp = pd.read_hdf(filename)\n    nrows = df.shape[0]", "piece": "temp = pd.read_hdf(filename)"}
{"function_name": "write_hdf", "function_define": "    meta = metadata['metadata']\n    df.index.name = None\n    if not properties['id'][0]:", "piece": "df.index.name = None"}
{"function_name": "write_masks", "function_define": "    meta = metadata['metadata']\n    shape_inds = []\n    for n, mask in enumerate(masks):", "piece": "shape_inds = []"}
{"function_name": "to_c_flags", "function_define": "    if isinstance(source, int):\n    result = 0\n    for i, name in enumerate(bits):", "piece": "result = 0"}
{"function_name": "printMeta", "function_define": "    fp: ostream\n    indent: str\n    subindent = indent + '  '", "piece": "indent: str"}
{"function_name": "add_slugs", "function_define": "    username = suser.user.username\n    slug = slugify(username)\n    suser.slug = slug", "piece": "slug = slugify(username)"}
{"function_name": "better_than", "function_define": "    if self is other:\n    elif not other:\n    except TypeError:", "piece": "elif not other:"}
{"function_name": "__unicode__", "function_define": "    if self.canttell:\n    elif self.has_color():\n    if self.has_gloss():", "piece": "elif self.has_color():"}
{"function_name": "mturk_submit", "function_define": "    if unicode(version) != u'1.0':\n    if not hit_contents:\n    new_objects = {}", "piece": "if not hit_contents:"}
{"function_name": "current_platform", "function_define": "    from sys import platform\n    if platform == 'win32':\n    if platform == 'darwin':", "piece": "if platform == 'win32':"}
{"function_name": "set_paging", "function_define": "    for each in self.item_limits:\n    if division % 1 == 0:\n    self.pages -= 1", "piece": "if division % 1 == 0:"}
{"function_name": "autotyped", "function_define": "    based on the input data type.\n    data = np.asarray(data)\n    n = coerce_numeric(data)", "piece": "data = np.asarray(data)"}
{"function_name": "_calculate", "function_define": "    if view is not None:\n    grids = [g[view] for g in grids]\n    if self.world:", "piece": "grids = [g[view] for g in grids]"}
{"function_name": "_update_data", "function_define": "    given self._categories\n    self._is_jittered = False\n    self._data = left.astype(float)", "piece": "self._is_jittered = False"}
{"function_name": "add_component", "function_define": "    The label. If this is a string,\n    array-like\n    TypeError, if label is invalid", "piece": "array-like"}
{"function_name": "coordinate_links", "function_define": "    if self._coordinate_links:\n    if not self.coords:\n    result = []", "piece": "if not self.coords:"}
{"function_name": "new_subset", "function_define": "    represented properly by the UI\n    this subset.\n    nsub = len(self.subsets)", "piece": "this subset."}
{"function_name": "add_subset", "function_define": "    represented properly by the UI\n    if subset in self.subsets:\n    state = subset", "piece": "if subset in self.subsets:"}
{"function_name": "update_id", "function_define": "    changed = False\n    if old in self._components:\n    changed = True", "piece": "if old in self._components:"}
{"function_name": "get_component", "function_define": "    if component_id is None:\n    raise IncompatibleAttribute()\n    except KeyError:", "piece": "raise IncompatibleAttribute()"}
{"function_name": "time_limit", "function_define": "    raise TimeoutError()\n    timer.start()\n    res = func(*args, **kwargs)", "piece": "timer.start()"}
{"function_name": "all_projects", "function_define": "    projs = []\n    while request is not None:\n    response = request.execute()", "piece": "while request is not None:"}
{"function_name": "visualize_trial", "function_define": "    Parameters\n    plb.ion()\n    plb.pause(0.0001)", "piece": "plb.ion()"}
{"function_name": "test_make_png", "function_define": "    self.iconizr.optimize()\n    self.iconizr.spritize()\n    self.iconizr.makePNGs()", "piece": "self.iconizr.spritize()"}
{"function_name": "show_image", "function_define": "    if image.dtype == np.float32:\n    if image.shape[0] == 3:\n    bytes_io = BytesIO()", "piece": "if image.shape[0] == 3:"}
{"function_name": "visualize_style", "function_define": "    if allow_both_directions_change:\n    if images_idx.size == 0:\n    if seed is not None:", "piece": "if images_idx.size == 0:"}
{"function_name": "show_images", "function_define": "    for i in range(images.shape[0]):\n    if image.dtype == np.float32:\n    if image.shape[0] == 3:", "piece": "if image.dtype == np.float32:"}
{"function_name": "__set_covar", "function_define": "    self._covar = covar\n    self._inv_covar = None\n    self._log_det_covar = None", "piece": "self._inv_covar = None"}
{"function_name": "land_page", "function_define": "    url = response.url\n    for i in range(1, page_count):\n    link = url % str(i)", "piece": "for i in range(1, page_count):"}
{"function_name": "plan_page", "function_define": "    json = soup.body.text\n    null = ''\n    true = 'true'", "piece": "null = ''"}
{"function_name": "plan_list_page", "function_define": "    json = soup.body.text\n    null = ''\n    true = 'true'", "piece": "null = ''"}
{"function_name": "create_3d_model", "function_define": "    for obj in bpy.data.objects:\n    if obj.type == 'FONT':\n    obj.select_set(True)", "piece": "if obj.type == 'FONT':"}
{"function_name": "_ReverseHostname", "function_define": "    The hostname entry is reversed:\n    moc.elgoog.www.\n    Should be:", "piece": "moc.elgoog.www."}
{"function_name": "mergeTrees", "function_define": "    if root1 and root2:\n    elif root1 or root2:\n    t = find(t1, t2)", "piece": "elif root1 or root2:"}
{"function_name": "add_overlays", "function_define": "    output = []\n    if faces is not None:\n    if len(faces) > 0:", "piece": "if faces is not None:"}
{"function_name": "append_queue", "function_define": "    global queue\n    if name is not None:\n    queue.append(name)", "piece": "if name is not None:"}
{"function_name": "get_status", "function_define": "    global queue\n    output = []\n    for i in queue:", "piece": "output = []"}
{"function_name": "parse_feed_xm", "function_define": "    except ET.ParseError:\n    results = {}\n    results.update(parse_item(item))", "piece": "results = {}"}
{"function_name": "send_results", "function_define": "    msg = ['<html><body>']\n    msg.append('</body></html>')\n    msg['To'] = address", "piece": "msg.append('</body></html>')"}
{"function_name": "setup_smtp", "function_define": "    global SMTP\n    smtp_config = smtp_config or {}\n    if SMTP is not None:", "piece": "smtp_config = smtp_config or {}"}
{"function_name": "embTexts", "function_define": "    Par\u00e2metros:\n    dataSeries: dataframe['tweet']\n    retorno = []", "piece": "dataSeries: dataframe['tweet']"}
{"function_name": "get_tweet_embed", "function_define": "    Par\u00e2metros:\n    text: tweet a ser tokenizado\n    method: conforme enum METHOD", "piece": "text: tweet a ser tokenizado"}
{"function_name": "freeze_layers", "function_define": "    for layer in layers:\n    if layer in name:\n    parameter.requires_grad_(False)", "piece": "if layer in name:"}
{"function_name": "model_info", "function_define": "    from thop import profile\n    p = next(model.parameters())\n    flops = 2 * macs", "piece": "p = next(model.parameters())"}
{"function_name": "generate_loader", "function_define": "    prop_to_type = dict()\n    ignore = [p for p in TO_EXCLUDE]\n    for schema in schemas:", "piece": "ignore = [p for p in TO_EXCLUDE]"}
{"function_name": "generate_setters", "function_define": "    setters = []\n    update_schema = schema\n    indent = ' ' * indentation", "piece": "update_schema = schema"}
{"function_name": "signal_handler", "function_define": "    if server:\n    server.server_close()\n    finally:", "piece": "server.server_close()"}
{"function_name": "find_file", "function_define": "    found = False\n    for file in files:\n    if file[0] == self.path[1:]:", "piece": "for file in files:"}
{"function_name": "start_requests", "function_define": "    urls = []\n    for url in urls:\n    yield scrapy.Request(url=url)", "piece": "for url in urls:"}
{"function_name": "make_request", "function_define": "    while True:\n    except HTTPError as e:\n    response = e.response", "piece": "except HTTPError as e:"}
{"function_name": "_map_arguments", "function_define": "    parts = route.split('/')\n    args_iter = iter(args)\n    mapped_parts = []", "piece": "args_iter = iter(args)"}
{"function_name": "make_schema", "function_define": "    s: A JSON-like schema string\n    Returns:\n    loader.flatten_mapping(node)", "piece": "Returns:"}
{"function_name": "add_column", "function_define": "    name: The name of the column.\n    if name.upper() == 'TIMESTAMP':\n    self.user_provided_ts_ = True", "piece": "if name.upper() == 'TIMESTAMP':"}
{"function_name": "__setitem__", "function_define": "    if isinstance(key, str):\n    self.tensors[key] = value\n    for k in self.tensors.keys():", "piece": "self.tensors[key] = value"}
{"function_name": "_deep_sort", "function_define": "    if isinstance(obj, dict):\n    for key in sorted(obj):\n    elif isinstance(obj, list):", "piece": "for key in sorted(obj):"}
{"function_name": "parse_args", "function_define": "    args = parser.parse_args()\n    np.random.seed(args.seed)\n    torch.manual_seed(args.seed)", "piece": "np.random.seed(args.seed)"}
{"function_name": "sim_info", "function_define": "    inventory = list()\n    entry = dict()\n    entry['protocol'] = protocol", "piece": "entry = dict()"}
{"function_name": "hybrid_forward", "function_define": "    x = self.conv1(x)\n    x = self.bn1(x)\n    x = self.relu(x)", "piece": "x = self.bn1(x)"}
{"function_name": "_make_res_layer", "function_define": "    downsample = None\n    with downsample.name_scope():\n    with layers.name_scope():", "piece": "with downsample.name_scope():"}
{"function_name": "function", "function_define": "    val = 0.0\n    for i in range(D):\n    val = val + sol[i] * sol[i]", "piece": "for i in range(D):"}
{"function_name": "sim_execute", "function_define": "    if len(sessions) > 0:\n    session = choice(sessions)\n    obs = Observation(True)", "piece": "session = choice(sessions)"}
{"function_name": "test01_query", "function_define": "    db = Database()\n    f = db.groups()\n    self.assertEqual(len(f), 2)", "piece": "f = db.groups()"}
{"function_name": "set_dimensions", "function_define": "    for i in range(10):\n    suffix = SUFFIXES[i]\n    if i < num_dims:", "piece": "suffix = SUFFIXES[i]"}
{"function_name": "make_nxdata", "function_define": "    pad_dims = []\n    for d in generator.dimensions:\n    if len(d.axes) == 1:", "piece": "for d in generator.dimensions:"}
{"function_name": "make_layout_xml", "function_define": "    if not ndarray_infos:\n    primary_rank = 2\n    xml = et_to_string(root_el)", "piece": "primary_rank = 2"}
{"function_name": "on_reset", "function_define": "    super().on_reset(context)\n    self.on_abort(context)\n    os.remove(self.layout_filename)", "piece": "self.on_abort(context)"}
{"function_name": "on_configure", "function_define": "    self.num_captured_offset = 0\n    if generator.duration > 0:\n    if self.runs_on_windows:", "piece": "if generator.duration > 0:"}
{"function_name": "initial_arcs", "function_define": "    threads = []\n    arcs = []\n    for thread in threads:", "piece": "arcs = []"}
{"function_name": "is_consistent", "function_define": "    threads = []\n    for thread in threads:\n    thread.start()", "piece": "for thread in threads:"}
{"function_name": "print_assignment", "function_define": "    if i % 3 == 0 and i != 0:\n    print('- - - - - - - -')\n    if j % 3 == 0 and j != 0:", "piece": "print('- - - - - - - -')"}
{"function_name": "check_slope", "function_define": "    pointer = {'x': 0, 'y': 0}\n    print(f'Slope: {slope}')\n    output_map = []", "piece": "print(f'Slope: {slope}')"}
{"function_name": "count_trees", "function_define": "    trees = 0\n    for line in marked_map:\n    trees = trees + line.count('X')", "piece": "for line in marked_map:"}
{"function_name": "get_square_sum", "function_define": "    square_sum = 0\n    for r in range(row, row + 2):\n    for c in range(col, col + 2):", "piece": "for r in range(row, row + 2):"}
{"function_name": "print_square", "function_define": "    for r in range(row, row + 2):\n    for c in range(col, col + 2):\n    print(matrix[r][c], end=' ')", "piece": "for c in range(col, col + 2):"}
{"function_name": "test_imports", "function_define": "    import os.path, pkgutil\n    import colabtools\n    for module in modules:", "piece": "import colabtools"}
{"function_name": "module_run", "function_define": "    q = self.get_resolver()\n    for host in hosts:\n    answers = q.query(host)", "piece": "for host in hosts:"}
{"function_name": "init_nodes", "function_define": "    f = open('bgp_network.csv', 'r')\n    reader = csv.reader(f)\n    for row in reader:", "piece": "reader = csv.reader(f)"}
{"function_name": "mnist_h5", "function_define": "    import h5py\n    path = 'mnist.h5'\n    h5 = h5py.File(path, 'r')", "piece": "path = 'mnist.h5'"}
{"function_name": "title_id", "function_define": "    tid = ''\n    if parents:\n    tid += '-'.join(parents) + '-'", "piece": "if parents:"}
{"function_name": "safe_headers", "function_define": "    hdrs = dict(headers)\n    if key in hdrs:\n    hdrs[key] = 'xxx'", "piece": "if key in hdrs:"}
{"function_name": "disconnect", "function_define": "    for conn, _ in self.connections:\n    if conn.is_connected():\n    conn.disconnect()", "piece": "if conn.is_connected():"}
{"function_name": "_extract", "function_define": "    for t in self.transforms:\n    qs = qs.transform(t)\n    self.addon = list(qs)[0]", "piece": "qs = qs.transform(t)"}
{"function_name": "getCoord", "function_define": "    with open(filename) as csvfile:\n    reader = csv.DictReader(csvfile)\n    coordinates_train = []", "piece": "reader = csv.DictReader(csvfile)"}
{"function_name": "get_next_id", "function_define": "    Returns:\n    int: next authorized id\n    if self.next_id == []:", "piece": "int: next authorized id"}
{"function_name": "add_node", "function_define": "    Returns:\n    int: id of the new node.\n    if id is None:", "piece": "int: id of the new node."}
{"function_name": "remove_node", "function_define": "    self.nodes.remove(c)\n    pos = self.pos.pop(c, 0)\n    for e in e_to_remove:", "piece": "pos = self.pos.pop(c, 0)"}
{"function_name": "fuse_nodes", "function_define": "    for e in e_to_remove:\n    self.edges.append(new_e)\n    for s in s_to_remove:", "piece": "self.edges.append(new_e)"}
{"function_name": "write_to_am", "function_define": "    if t_b is None:\n    if t_e is None:\n    if new_pos is None:", "piece": "if t_e is None:"}
{"function_name": "write_to_svg", "function_define": "    import svgwrite\n    if roots is None:\n    if node_size is None:", "piece": "if roots is None:"}
{"function_name": "read_from_csv", "function_define": "    if v.isdigit():\n    with open(file_path) as f:\n    lines = f.readlines()", "piece": "with open(file_path) as f:"}
{"function_name": "read_from_ASTEC", "function_define": "    self.name = {}\n    self.volume = {}\n    self.lT2pkl = {}", "piece": "self.volume = {}"}
{"function_name": "read_tgmm_xml", "function_define": "    it should be written as follow:\n    digits are filed with 0s\n    z_mult (float): aspect ratio", "piece": "digits are filed with 0s"}
{"function_name": "to_binary", "function_define": "    if starting_points is None:\n    number_sequence = [-1]\n    pos_sequence = []", "piece": "number_sequence = [-1]"}
{"function_name": "read_from_binary", "function_define": "    reverse_time: bool, not used\n    q_size = struct.calcsize('q')\n    H_size = struct.calcsize('H')", "piece": "q_size = struct.calcsize('q')"}
{"function_name": "get_idx3d", "function_define": "    t (int): time\n    Returns:\n    the correspondancy list,", "piece": "Returns:"}
{"function_name": "get_predecessors", "function_define": "    Returns:\n    cycle = [x]\n    acc += 1", "piece": "cycle = [x]"}
{"function_name": "get_successors", "function_define": "    Returns:\n    cycle = [x]\n    acc += 1", "piece": "cycle = [x]"}
{"function_name": "get_cycle", "function_define": "    Returns:\n    if depth is not None:\n    depth_pred = depth_succ = depth", "piece": "if depth is not None:"}
{"function_name": "get_all_tracks", "function_define": "    Returns:\n    self.all_tracks = []\n    to_do = set(self.nodes)", "piece": "self.all_tracks = []"}
{"function_name": "get_sub_tree", "function_define": "    x (int): id of root node\n    Returns:\n    to_do = [x]", "piece": "Returns:"}
{"function_name": "format_names", "function_define": "    tmp = {}\n    val = v.split('.')[1][:-1]\n    except Exception as e:", "piece": "val = v.split('.')[1][:-1]"}
{"function_name": "serve_rpc", "function_define": "    plugins = [QuarkAsyncPlugin()]\n    rpc = service.RpcWorker(plugins)\n    session.dispose()", "piece": "rpc = service.RpcWorker(plugins)"}
{"function_name": "boot_server", "function_define": "    config.init(sys.argv[1:])\n    config.setup_logging()\n    config.set_config_defaults()", "piece": "config.setup_logging()"}
{"function_name": "test_main", "function_define": "    config.init(sys.argv[1:])\n    config.setup_logging()\n    config.set_config_defaults()", "piece": "config.setup_logging()"}
{"function_name": "run_exception", "function_define": "    a, b = (2, [1, 2])\n    exception(a, b)\n    except ZeroDivisionError:", "piece": "exception(a, b)"}
{"function_name": "get_module_depth", "function_define": "    Parameters\n    depth_image: ndarray\n    The depth image.", "piece": "depth_image: ndarray"}
{"function_name": "resolve_gene_id", "function_define": "    output - a wormbase gene ID\n    Example:\n    if result:", "piece": "Example:"}
{"function_name": "CreateExecutable", "function_define": "    fullPath = args.location\n    if not os.path.exists(fullPath):\n    os.makedirs(fullPath)", "piece": "if not os.path.exists(fullPath):"}
{"function_name": "init_app", "function_define": "    with app.app_context():\n    from . import routes\n    init_forms(server=app)", "piece": "from . import routes"}
{"function_name": "search_intersect", "function_define": "    array3 = arcpy.Array()\n    array4 = arcpy.Array()\n    for part2 in row2[1]:", "piece": "array4 = arcpy.Array()"}
{"function_name": "searchInPolygon", "function_define": "    X4 = point2.X\n    Y4 = point2.Y\n    Z4 = point2.Z", "piece": "Y4 = point2.Y"}
{"function_name": "clear_edges", "function_define": "    if not keys:\n    guids = []\n    for u, v in keys:", "piece": "guids = []"}
{"function_name": "clear_edgelabels", "function_define": "    if not keys:\n    guids = []\n    for key in keys:", "piece": "guids = []"}
{"function_name": "draw_edges", "function_define": "    Parameters\n    keys : list\n    color : str, tuple, dict", "piece": "keys : list"}
{"function_name": "draw_edgelabels", "function_define": "    Parameters\n    text : dict\n    will be labelled with its key.", "piece": "text : dict"}
{"function_name": "connect_campaign", "function_define": "    if not reference:\n    if '@' in reference:\n    parts = reference.split('@', 1)", "piece": "if '@' in reference:"}
{"function_name": "__reduce__", "function_define": "    For pickling.\n    EXAMPLES::\n    sage: k is loads(dumps(k))", "piece": "EXAMPLES::"}
{"function_name": "__richcmp__", "function_define": "    Compare ``self`` with ``right``.\n    EXAMPLES::\n    sage: k = GF(2)", "piece": "EXAMPLES::"}
{"function_name": "characteristic", "function_define": "    EXAMPLES::\n    sage: k = GF(7)\n    sage: k.characteristic()", "piece": "sage: k = GF(7)"}
{"function_name": "is_prime_field", "function_define": "    EXAMPLES::\n    sage: k.<a> = GF(3)\n    sage: k.is_prime_field()", "piece": "sage: k.<a> = GF(3)"}
{"function_name": "polynomial", "function_define": "    Returns the polynomial ``name``.\n    EXAMPLES::\n    sage: k.<a> = GF(3)", "piece": "EXAMPLES::"}
{"function_name": "ListFeature", "function_define": "    if request.GET.get('genres'):\n    paginator = Paginator(list, 20)\n    list = paginator.page(page)", "piece": "paginator = Paginator(list, 20)"}
{"function_name": "initialize_type", "function_define": "    if LAYOUT_CHOICES is None:\n    cls.media_defs = MEDIA_DEFS\n    class Meta:", "piece": "cls.media_defs = MEDIA_DEFS"}
{"function_name": "fanzhuan", "function_define": "    str2 = str[::-1]\n    if str != str2:\n    print('NO')", "piece": "if str != str2:"}
{"function_name": "do_fanzhuan", "function_define": "    while True:\n    lie1 = input()\n    fanzhuan(lie1)", "piece": "lie1 = input()"}
{"function_name": "do_motai", "function_define": "    num = int(input())\n    data_nohave = []\n    data_have = []", "piece": "data_nohave = []"}
{"function_name": "register_hook", "function_define": "    class CustomHook(ClassyHook):\n    if name in HOOK_REGISTRY:\n    HOOK_REGISTRY[name] = cls", "piece": "if name in HOOK_REGISTRY:"}
{"function_name": "login_brute", "function_define": "    for line in f:\n    word = line.strip()\n    json_dict['login'] = case", "piece": "word = line.strip()"}
{"function_name": "password_brute", "function_define": "    for letter in generator():\n    msg = json.dumps(json_dict)\n    client_socket.send(msg.encode())", "piece": "msg = json.dumps(json_dict)"}
{"function_name": "tralaste_general", "function_define": "    text = text.replace(';', '')\n    text = text.replace('%', '#')\n    text = text.replace('%}', '\"\"\"')", "piece": "text = text.replace('%', '#')"}
{"function_name": "translate_lists", "function_define": "    for j in i:\n    rep = j.group(0)\n    text = re.sub('\\\\[,', '[', text)", "piece": "rep = j.group(0)"}
{"function_name": "translate_arange", "function_define": "    i = k.finditer(text)\n    for j in i:\n    rep = j.group(0)", "piece": "for j in i:"}
{"function_name": "vouching", "function_define": "    invoices_dict = {}\n    transactions_with_errors = {}\n    ref_id = form.ref_id.data", "piece": "transactions_with_errors = {}"}
{"function_name": "_internal_init", "function_define": "    if opts is None:\n    opts = pulumi.ResourceOptions()\n    if opts.version is None:", "piece": "opts = pulumi.ResourceOptions()"}
{"function_name": "random_colors", "function_define": "    Generate random colors.\n    convert to RGB.\n    random.shuffle(colors)", "piece": "convert to RGB."}
{"function_name": "draw_boxes", "function_define": "    customizations.\n    if not ax:\n    colors = random_colors(N)", "piece": "if not ax:"}
{"function_name": "create_timing", "function_define": "    cpu = json.load(fp=fp)\n    except Exception:\n    cpu = dict()", "piece": "except Exception:"}
{"function_name": "cfg_to_flatdict", "function_define": "    config = ConfigParser()\n    config.read(file_path)\n    sections = config._sections", "piece": "config.read(file_path)"}
{"function_name": "convert_flatdict", "function_define": "    for x in file_obj:\n    for y in file_obj[x]:\n    k = x + '_' + y", "piece": "for y in file_obj[x]:"}
{"function_name": "test_namespace", "function_define": "    cmds.file(f=True, new=True)\n    boo = Namespace('boo')\n    self.assertEqual(boo, ':boo')", "piece": "boo = Namespace('boo')"}
{"function_name": "get_queryset", "function_define": "    if raw_public_key:\n    except Exception as e:\n    raise NonValidPubKey", "piece": "except Exception as e:"}
{"function_name": "system_call", "function_define": "    call = program_name\n    if privilege == True:\n    call = 'sudo ' + call", "piece": "if privilege == True:"}
{"function_name": "buildArgs", "function_define": "    arr = [line.strip()]\n    if len(argv) > 0:\n    arr.extend(argv)", "piece": "if len(argv) > 0:"}
{"function_name": "nmap_worker", "function_define": "    line = line.strip()\n    services_fp.close()\n    scantype = scorchedearth", "piece": "services_fp.close()"}
{"function_name": "skip_unless", "function_define": "    self.num_skipped += 1\n    test_name = func.__name__\n    if not condition:", "piece": "test_name = func.__name__"}
{"function_name": "assert_equal", "function_define": "    if first == second:\n    self.num_successful += 1\n    self.num_errored += 1", "piece": "self.num_successful += 1"}
{"function_name": "assert_unequal", "function_define": "    if first != second:\n    self.num_successful += 1\n    self.num_errored += 1", "piece": "self.num_successful += 1"}
{"function_name": "assert_true", "function_define": "    if type(val) is not bool:\n    raise TypeError\n    elif bool(val):", "piece": "raise TypeError"}
{"function_name": "assert_false", "function_define": "    if type(val) is not bool:\n    raise TypeError\n    elif not bool(val):", "piece": "raise TypeError"}
{"function_name": "test_pl_to_choi", "function_define": "    choi = kraus2choi(pauli[1])\n    pl = kraus2pauli_liouville(H)\n    choi = kraus2choi(H)", "piece": "pl = kraus2pauli_liouville(H)"}
{"function_name": "_callback", "function_define": "    global _counter\n    global _start\n    if exception:", "piece": "global _start"}
{"function_name": "do_inference", "function_define": "    Returns:\n    The classification error rate.\n    if insecure:", "piece": "The classification error rate."}
{"function_name": "sanitizeTex", "function_define": "    Parameters\n    texstring : string\n    sanitized : string", "piece": "texstring : string"}
{"function_name": "csvToTex", "function_define": "    Parameters\n    csvpath : string\n    na_rep : string, default \"--\"", "piece": "csvpath : string"}
{"function_name": "csvToXlsx", "function_define": "    Parameters\n    csvpath : string\n    xlsxpath : string", "piece": "csvpath : string"}
{"function_name": "makeTexTable", "function_define": "    Parameters\n    tablefile : string\n    caption : string", "piece": "tablefile : string"}
{"function_name": "makeTexFigure", "function_define": "    actually add it to any document.\n    Parameters\n    figfile : string", "piece": "Parameters"}
{"function_name": "processFilename", "function_define": "    Parameters\n    filename : string\n    sanitized : string", "piece": "filename : string"}
{"function_name": "setMPLStyle", "function_define": "    if serif:\n    fontfamily = 'serif'\n    fontfamily = 'sans-serif'", "piece": "fontfamily = 'serif'"}
{"function_name": "_multicol_format", "function_define": "    n, col = args\n    if n == 0:\n    align = 'l'", "piece": "if n == 0:"}
{"function_name": "jacobi_method", "function_define": "    A_, b_ = (A.copy(), b.copy())\n    diag = np.diag(A_)\n    shap = A.shape", "piece": "diag = np.diag(A_)"}
{"function_name": "test_equality", "function_define": "    args = [('a', 1), ('b', 2)]\n    imm_0 = Immutable(*args)\n    imm_1 = Immutable(*args)", "piece": "imm_0 = Immutable(*args)"}
{"function_name": "write_record", "function_define": "    if fieldnames is None:\n    fieldnames = list(record.keys())\n    with open(fp, 'w') as csv_f:", "piece": "fieldnames = list(record.keys())"}
{"function_name": "json_to_embed", "function_define": "    em = discord.Embed()\n    em.title = json_dict['title']\n    em.url = json_dict['url']", "piece": "em.title = json_dict['title']"}
{"function_name": "caso_list", "function_define": "    logged_in_user = request.user\n    if usuario_aseguradora:\n    is_aseguradora = True", "piece": "if usuario_aseguradora:"}
{"function_name": "load_model", "function_define": "    model = torch.load(file_path)\n    model.eval()\n    self.__model = model", "piece": "model.eval()"}
{"function_name": "__set_model2cuda", "function_define": "    if torch.cuda.is_available():\n    log.info('Setting cuda')\n    self.model.cuda()", "piece": "log.info('Setting cuda')"}
{"function_name": "leverage_model", "function_define": "    self.__model = model\n    self.__set_parallelism()\n    self.__set_optimizer()", "piece": "self.__set_parallelism()"}
{"function_name": "test_curate_view", "function_define": "    Only officer can curate returns\n    allowed = [self.officer]\n    for user in allowed:", "piece": "allowed = [self.officer]"}
{"function_name": "test_view_log", "function_define": "    Only officer can view log\n    allowed = [self.officer]\n    for user in allowed:", "piece": "allowed = [self.officer]"}
{"function_name": "test_add_log", "function_define": "    Only officer can view log\n    allowed = [self.officer]\n    for user in allowed:", "piece": "allowed = [self.officer]"}
{"function_name": "update_speed", "function_define": "    p_now[p_now < 0] = 0\n    p_past[p_now < 0] = 0\n    print('speed: ', speed)", "piece": "p_past[p_now < 0] = 0"}
{"function_name": "make_script", "function_define": "    for arg in arguments:\n    value = scheduler.get(arg, None)\n    if value is not None:", "piece": "value = scheduler.get(arg, None)"}
{"function_name": "cores21_setup", "function_define": "    fm = of.ofp_flow_mod()\n    fm.match.dl_type = 2048\n    fm.match.nw_proto = 1", "piece": "fm.match.dl_type = 2048"}
{"function_name": "resend_packet", "function_define": "    msg = of.ofp_packet_out()\n    msg.data = packet_in\n    msg.actions.append(action)", "piece": "msg.data = packet_in"}
{"function_name": "_handle_PacketIn", "function_define": "    packet = event.parsed\n    if not packet.parsed:\n    packet_in = event.ofp", "piece": "if not packet.parsed:"}
{"function_name": "mail_send", "function_define": "    email_user = 'your_email'\n    email_password = '<PASSWORD>'\n    email_send = users[query]", "piece": "email_password = '<PASSWORD>'"}
{"function_name": "pick_sound", "function_define": "    if self.s_type == self.V:\n    if self.s_type == self.CV:\n    if self.s_type == self.VC:", "piece": "if self.s_type == self.CV:"}
{"function_name": "generateSector", "function_define": "    if not os.path.exists('data'):\n    os.mkdir('data')\n    world_list = []", "piece": "os.mkdir('data')"}
{"function_name": "start_transition", "function_define": "    self.animation.stop()\n    if value:\n    self.animation.setEndValue(3)", "piece": "if value:"}
{"function_name": "paintEvent", "function_define": "    painter = QPainter(self)\n    painter.setPen(Qt.NoPen)\n    painter.end()", "piece": "painter.setPen(Qt.NoPen)"}
{"function_name": "print_output", "function_define": "    separator = '---' * 20\n    print(sample)\n    print(separator)", "piece": "print(sample)"}
{"function_name": "find_winner", "function_define": "    y_pred = model.predict(X.values)\n    y_winner = y.copy()\n    y_winner['y_pred'] = y_pred", "piece": "y_winner = y.copy()"}
{"function_name": "_printResults", "function_define": "    for key in self.modellist:\n    if key == 'PowerLaw':\n    llpl = self.Results[key]", "piece": "if key == 'PowerLaw':"}
{"function_name": "TestModel", "function_define": "    for key in self.modellist:\n    Dumpfile.close()\n    self._printResults()", "piece": "Dumpfile.close()"}
{"function_name": "_setPowerLaw", "function_define": "    if pars[0] != None:\n    print('Fixing Prefactor')\n    comp.freeze(par)", "piece": "print('Fixing Prefactor')"}
{"function_name": "_setLogParabola", "function_define": "    if pars[0] != None:\n    print('Fixing norm')\n    comp.freeze(par)", "piece": "print('Fixing norm')"}
{"function_name": "calc_stats", "function_define": "    if report_is_now:\n    if time_now < launch_begin:\n    till_end_of_work_time = Time(0)", "piece": "if time_now < launch_begin:"}
{"function_name": "get_stats_str", "function_define": "    for ts in pool:\n    ts_name = ts.__class__.__name__\n    ts_bill = ts.get_bill()", "piece": "ts_name = ts.__class__.__name__"}
{"function_name": "setup_wizard", "function_define": "    if default:\n    res = input(prompt + ': ')\n    if not res:", "piece": "res = input(prompt + ': ')"}
{"function_name": "__format__", "function_define": "    if not t_format:\n    negative = self.seconds < 0\n    m_sec = 60", "piece": "negative = self.seconds < 0"}
{"function_name": "__parse_json__", "function_define": "    if self.json:\n    if self.free_tags:\n    for entry in self.entries:", "piece": "if self.free_tags:"}
{"function_name": "get_option", "function_define": "    if default:\n    res = input(prompt + ': ')\n    if not res:", "piece": "res = input(prompt + ': ')"}
{"function_name": "plot_dependency", "function_define": "    print(df_agg_mean)\n    print(df_agg_std)\n    plt.figure(figsize=(13.5, 9))", "piece": "print(df_agg_std)"}
{"function_name": "get_account_fees", "function_define": "    result = pay.get_account_info()\n    if order_type == 'withdrawal':\n    elif order_type == 'deposit':", "piece": "if order_type == 'withdrawal':"}
{"function_name": "convert_Linear", "function_define": "    input = ctx.method_args[0]\n    output = ctx.method_return\n    if bias is not None:", "piece": "output = ctx.method_return"}
{"function_name": "add_buffer", "function_define": "    log = ''\n    if tip is not None:\n    pipette.pick_up_tip(tip)", "piece": "if tip is not None:"}
{"function_name": "convertdate_", "function_define": "    if attr_type == 'day':\n    if attr_type == 'year':\n    if int(date_attr[:2]) < 20:", "piece": "if attr_type == 'year':"}
{"function_name": "courses_spider", "function_define": "    data_to_csv = []\n    page = 1\n    while page <= max_pages:", "piece": "page = 1"}
{"function_name": "export_to_csv", "function_define": "    csv_writer.writeheader()\n    for course in csv_data:\n    csv_writer.writerow(course_data)", "piece": "for course in csv_data:"}
{"function_name": "prac_conv_DecToN", "function_define": "    t= b, o, x\n    correct_num = 0\n    for i in range(question_num):", "piece": "correct_num = 0"}
{"function_name": "prac_conv_NtoDec", "function_define": "    t= b, o, x\n    correct_num = 0\n    for i in range(question_num):", "piece": "correct_num = 0"}
{"function_name": "load_schema", "function_define": "    with open(filepath) as fp:\n    data = json.load(fp)\n    if '@type' not in data:", "piece": "data = json.load(fp)"}
{"function_name": "init_weights", "function_define": "    for m in self.modules():\n    if isinstance(m, nn.Conv2d):\n    nn.init.xavier_normal_(m.weight)", "piece": "if isinstance(m, nn.Conv2d):"}
{"function_name": "_make_stage", "function_define": "    stage = []\n    for i in range(num_blocks):\n    self.in_channels = out_channels", "piece": "for i in range(num_blocks):"}
{"function_name": "get_output", "function_define": "    if sys.platform == 'win32':\n    shell = False\n    shell = True", "piece": "shell = False"}
{"function_name": "parse_output", "function_define": "    ret = {}\n    for line in output.splitlines():\n    m = reg.match(line)", "piece": "for line in output.splitlines():"}
{"function_name": "normalize_env", "function_define": "    controlled by the keys argument.\n    normenv = {}\n    if shellenv:", "piece": "normenv = {}"}
{"function_name": "task_buffer", "function_define": "    global dst_id\n    global src_name\n    while True:", "piece": "global src_name"}
{"function_name": "move_log", "function_define": "    option = 'move'\n    path = './'\n    flags = '--included=*.log'", "piece": "path = './'"}
{"function_name": "task_process", "function_define": "    chat_id = chat_id\n    message_id = message.message_id\n    dst_info = {}", "piece": "message_id = message.message_id"}
{"function_name": "task_message_box", "function_define": "    global context_old\n    context_old = 'iCopy'\n    if context_old != context:", "piece": "context_old = 'iCopy'"}
{"function_name": "test_daily_at", "function_define": "    daily = libfactory.daily_adapter\n    at = daily.at('2015', '2', '2')\n    assert len(at) == len(at_data)", "piece": "at = daily.at('2015', '2', '2')"}
{"function_name": "splitStrToList", "function_define": "    if string:\n    final = []\n    buffer = ''", "piece": "final = []"}
{"function_name": "stringfyList", "function_define": "    output = ''\n    output += f'{oneList[i]},'\n    output += oneList[-1]", "piece": "output += f'{oneList[i]},'"}
{"function_name": "checkRangeList", "function_define": "    isNumber = True\n    i = len(left)\n    while isNumber and i > 0:", "piece": "i = len(left)"}
{"function_name": "getNumberRange", "function_define": "    isNumber = True\n    i = len(left)\n    while isNumber and i > 0:", "piece": "i = len(left)"}
{"function_name": "getLetterRange", "function_define": "    compiledList = []\n    orderLeftDigit = ord(leftDigit)\n    orderLeftDigit += 1", "piece": "orderLeftDigit = ord(leftDigit)"}
{"function_name": "calculate_fuel", "function_define": "    if method == 1:\n    fuel = mass // 3 - 2\n    elif method == 2:", "piece": "fuel = mass // 3 - 2"}
{"function_name": "test_uniques", "function_define": "    errors = []\n    for cog in obtained:\n    if key not in expected:", "piece": "for cog in obtained:"}
{"function_name": "optimize_color", "function_define": "    c = Color(color)\n    if by == 'luminance':\n    c.luminance = value", "piece": "if by == 'luminance':"}
{"function_name": "__key_warning", "function_define": "    suggest = None\n    if key == 'odataType':\n    suggest = 'odata_type'", "piece": "if key == 'odataType':"}
{"function_name": "read_line", "function_define": "    a = b = c = d = e = None\n    if line:\n    a, line = piece(line)", "piece": "if line:"}
{"function_name": "add_leaf", "function_define": "    if leaf.name < self.name:\n    if self.left:\n    self.left = leaf", "piece": "if self.left:"}
{"function_name": "print_all", "function_define": "    if self.left:\n    self.left.print_all()\n    self.print_data()", "piece": "self.left.print_all()"}
{"function_name": "add_table", "function_define": "    title = title.ljust(W[0])\n    r.extend([subt, '\\n'])\n    l = max([len(k) for k in table])", "piece": "r.extend([subt, '\\n'])"}
{"function_name": "flush_colors", "function_define": "    add('\\n')\n    r.extend(colors)\n    colors.clear()", "piece": "r.extend(colors)"}
{"function_name": "adapt_to_ex", "function_define": "    self.head = head\n    self.input_shape = input_shape\n    config = {}", "piece": "self.input_shape = input_shape"}
{"function_name": "runExample", "function_define": "    myTempSensor.begin()\n    time.sleep(1)\n    print('Initialized.')", "piece": "time.sleep(1)"}
{"function_name": "callback", "function_define": "    msg = json.loads(data.data)\n    print(msg['shoulder']['pitch'])\n    cnt = cnt + 1", "piece": "print(msg['shoulder']['pitch'])"}
{"function_name": "parseSQL", "function_define": "    Parameters\n    filename : :class:`str`\n    Name of the SQL file.", "piece": "filename : :class:`str`"}
{"function_name": "parseLine", "function_define": "    Parameters\n    line : :class:`str`\n    A single line from a SQL file.", "piece": "line : :class:`str`"}
{"function_name": "fixNOFITS", "function_define": "    Parameters\n    filename : :class:`str`\n    config = self._getYAML(filename)", "piece": "filename : :class:`str`"}
{"function_name": "fixMapping", "function_define": "    file `filename`.\n    Parameters\n    filename : :class:`str`", "piece": "Parameters"}
{"function_name": "mapColumns", "function_define": "    drop = list()\n    for sc in self.colNames:\n    if sc in self.mapping:", "piece": "for sc in self.colNames:"}
{"function_name": "_photoFlag", "function_define": "    Parameters\n    column : :class:`dict`\n    A TapSchema column definition.", "piece": "column : :class:`dict`"}
{"function_name": "processFITS", "function_define": "    Parameters\n    hdu : :class:`int`, optional\n    The name of the file written.", "piece": "hdu : :class:`int`, optional"}
{"function_name": "writeSQL", "function_define": "    SQL commands to pre-load.\n    Parameters\n    filename : :class:`str`", "piece": "Parameters"}
{"function_name": "writePOSTSQL", "function_define": "    Parameters\n    filename : :class:`str`\n    Name of the SQL file.", "piece": "filename : :class:`str`"}
{"function_name": "from_ann2dic", "function_define": "    for i in range(1000):\n    print(i)\n    q_dic = {}", "piece": "print(i)"}
{"function_name": "viterbi_decode", "function_define": "    nodes: (seq_len, target_size)\n    scores = nodes[0]\n    scores[1:] -= 100000", "piece": "scores = nodes[0]"}
{"function_name": "ner_print", "function_define": "    model.eval()\n    tokenier = Tokenizer(word2idx)\n    for text in test_data:", "piece": "tokenier = Tokenizer(word2idx)"}
{"function_name": "iteration", "function_define": "    total_loss = 0\n    start_time = time.time()\n    step = 0", "piece": "start_time = time.time()"}
{"function_name": "open_h5file", "function_define": "    Parameters\n    filename : str\n    HDF5 file name.", "piece": "filename : str"}
{"function_name": "encodefuns", "function_define": "    are empty.\"\"\"\n    ascii += '\\x00'\n    n = len(ascii)", "piece": "ascii += '\\x00'"}
{"function_name": "tagblock", "function_define": "    n = len(tag)\n    tablelen = 12 * n\n    offset = 128 + tablelen + 4", "piece": "tablelen = 12 * n"}
{"function_name": "profileFromPNG", "function_define": "    r = png.Reader(file=inp)\n    i = chunk.index(b'\\x00')\n    name = chunk[:i]", "piece": "i = chunk.index(b'\\x00')"}
{"function_name": "writeICCdatetime", "function_define": "    import time\n    if t is None:\n    t = time.gmtime()", "piece": "if t is None:"}
{"function_name": "fromString", "function_define": "    self.d = dict()\n    d = self.d\n    if len(profile) < 128:", "piece": "d = self.d"}
{"function_name": "_addTags", "function_define": "    for tag, thing in k.items():\n    thing = (thing,)\n    typetag = defaulttagtype[tag]", "piece": "thing = (thing,)"}
{"function_name": "writeHeader", "function_define": "    if key in d:\n    d[key] = value\n    z = '\\x00' * 4", "piece": "d[key] = value"}
{"function_name": "_test_render", "function_define": "    ct = CommentTemplater()\n    ct.label = label\n    r = ct.render(self.obj)", "piece": "ct.label = label"}
{"function_name": "replace_chain", "function_define": "    chain = [op]\n    tensor = op.output\n    if op is None:", "piece": "tensor = op.output"}
{"function_name": "_match_chain", "function_define": "    chain = [op]\n    tensor = op.output\n    if op is None:", "piece": "tensor = op.output"}
{"function_name": "read_triples", "function_define": "    triples = set()\n    for line in f:\n    assert len(params) == 3", "piece": "for line in f:"}
{"function_name": "read_references", "function_define": "    ref1, ref2 = (list(), list())\n    for line in f:\n    assert len(params) == 2", "piece": "for line in f:"}
{"function_name": "div_list", "function_define": "    ls_len = len(ls)\n    if n <= 0 or 0 == ls_len:\n    if n > ls_len:", "piece": "if n <= 0 or 0 == ls_len:"}
{"function_name": "triples2ht_set", "function_define": "    ht_set = set()\n    for h, r, t in triples:\n    ht_set.add((h, t))", "piece": "for h, r, t in triples:"}
{"function_name": "polygon_length", "function_define": "    n = len(face)\n    for i in range(3, n):\n    if face[i] == FILL_VALUE:", "piece": "for i in range(3, n):"}
{"function_name": "polygon_area", "function_define": "    length = len(polygon)\n    area = 0.0\n    U = to_vector(a, b)", "piece": "area = 0.0"}
{"function_name": "point_in_polygon", "function_define": "    length = len(poly)\n    v0 = as_point(poly[-1])\n    c = False", "piece": "v0 = as_point(poly[-1])"}
{"function_name": "boxes_intersect", "function_define": "    Parameters\n    a: (xmin, xmax, ymin, ymax)\n    b: (xmin, xmax, ymin, ymax)", "piece": "a: (xmin, xmax, ymin, ymax)"}
{"function_name": "bounding_box", "function_define": "    max_n_verts = len(polygon)\n    xmin = xmax = first_vertex[0]\n    ymin = ymax = first_vertex[1]", "piece": "xmin = xmax = first_vertex[0]"}
{"function_name": "build_bboxes", "function_define": "    n_polys = len(faces)\n    for i in nb.prange(n_polys):\n    polygon = faces[i]", "piece": "for i in nb.prange(n_polys):"}
{"function_name": "copy_vertices", "function_define": "    length = polygon_length(face)\n    out = allocate_polygon()\n    for i in range(length):", "piece": "out = allocate_polygon()"}
{"function_name": "parse_data_abort", "function_define": "    ret = {}\n    for line in text.splitlines():\n    line = line.strip()", "piece": "for line in text.splitlines():"}
{"function_name": "execute_cmdline", "function_define": "    schedule = sorted(set(schedule))\n    data = OptionsData()\n    sheets = data.get_sheet_names()", "piece": "data = OptionsData()"}
{"function_name": "read_input", "function_define": "    game (Game): Current game state.\n    Returns:\n    for event in pygame.event.get():", "piece": "Returns:"}
{"function_name": "create_wall", "function_define": "    obj = Wall(game)\n    obj.pos[0] = x\n    obj.pos[1] = y", "piece": "obj.pos[0] = x"}
{"function_name": "create_base", "function_define": "    os.chdir(self.path)\n    os.chdir(self.cwd)\n    cmake_file.write(cmake_string)", "piece": "os.chdir(self.cwd)"}
{"function_name": "create_project", "function_define": "    cmake_file.write(cmake_string)\n    os.mkdir(src_path)\n    f.write(cmake_string)", "piece": "os.mkdir(src_path)"}
{"function_name": "create_src", "function_define": "    os.mkdir(src_path)\n    f.write(cmake_string)\n    f.write(cpp_string)", "piece": "f.write(cmake_string)"}
{"function_name": "create_test", "function_define": "    os.mkdir(tests_path)\n    f.write(cmake_string)\n    f.write(cpp_string)", "piece": "f.write(cmake_string)"}
{"function_name": "_get_event_urls", "function_define": "    urls = []\n    url = response.urljoin(link)\n    pattern = '(?P<link>.*/\\\\d{4})'", "piece": "url = response.urljoin(link)"}
{"function_name": "_parse_start", "function_define": "    rm = re.search(pattern, date)\n    if rm is not None:\n    day = rm.group('day')", "piece": "if rm is not None:"}
{"function_name": "_parse_end", "function_define": "    rm = re.search(pattern, date)\n    if rm is not None:\n    day = rm.group('day')", "piece": "if rm is not None:"}
{"function_name": "_parse_links", "function_define": "    dates = []\n    for text in cells:\n    rm = re.search(pattern, text)", "piece": "for text in cells:"}
{"function_name": "get_manifest", "function_define": "    errors = []\n    for node in exporter.nodes:\n    errors.append(msg)", "piece": "for node in exporter.nodes:"}
{"function_name": "generate_order", "function_define": "    PAGE_HEIGHT = defaultPageSize[1]\n    PAGE_WIDTH = defaultPageSize[0]\n    LEFT_MARGIN = 30", "piece": "PAGE_WIDTH = defaultPageSize[0]"}
{"function_name": "myFirstPage", "function_define": "    cursor = CURSOR_HEIGHT\n    c.saveState()\n    c.setFillColorRGB(1, 1, 1)", "piece": "c.saveState()"}
{"function_name": "myLaterPages", "function_define": "    cursor = PAGE_HEIGHT - 54\n    c.saveState()\n    c.setFont('Helvetica-Bold', 14)", "piece": "c.saveState()"}
{"function_name": "build_pdf", "function_define": "    Story = [Spacer(1, 3.11 * inch)]\n    num_of_doors = len(door_list)\n    except IndexError:", "piece": "num_of_doors = len(door_list)"}
{"function_name": "collect_runtimes", "function_define": "    result : bool\n    msg : str\n    errors : dict", "piece": "msg : str"}
{"function_name": "run_checks", "function_define": "    Parameters\n    result : bool\n    report : dict", "piece": "result : bool"}
{"function_name": "add_tool", "function_define": "    Parameters\n    id : unicode\n    Id of the tool being added.", "piece": "id : unicode"}
{"function_name": "move_tool", "function_define": "    Parameters\n    kind : {'pre-hook', 'post-hook'}\n    Kind of hook to move.", "piece": "kind : {'pre-hook', 'post-hook'}"}
{"function_name": "remove_tool", "function_define": "    Parameters\n    id : unicode\n    Id of the monitor to remove.", "piece": "id : unicode"}
{"function_name": "build_datasets", "function_define": "    assert mode in ['train', 'test']\n    cfg = data_cfg[mode]\n    if cfg['dataset'] == 'kface':", "piece": "cfg = data_cfg[mode]"}
{"function_name": "infer_quote", "function_define": "    Handles Strings With quotes\n    Returns:\n    Query: [description]", "piece": "Returns:"}
{"function_name": "statusbigquery", "function_define": "    BigQuery table\n    Returns:\n    str: status messages", "piece": "Returns:"}
{"function_name": "queryjobstatus", "function_define": "    id (str): [description]\n    Returns:\n    print(type(api_response))", "piece": "Returns:"}
{"function_name": "_apply_gate", "function_define": "    on the `_mode` class parameter.\n    mat (array): The matrix to apply\n    if self._mode == 'blas':", "piece": "mat (array): The matrix to apply"}
{"function_name": "_apply_channel", "function_define": "    Kraus operators.\n    Always results in a mixed state.\n    if self._pure:", "piece": "Always results in a mixed state."}
{"function_name": "measure_fock", "function_define": "    Measures a list of modes.\n    if self._pure:\n    state = self._state", "piece": "if self._pure:"}
{"function_name": "measure_homodyne", "function_define": "    if self._pure:\n    state = self._state\n    if select is not None:", "piece": "state = self._state"}
{"function_name": "is_yale_college", "function_define": "    all_data = all_response.json()\n    if all_data['count'] < 1:\n    if yc_data['count'] == 0:", "piece": "if all_data['count'] < 1:"}
{"function_name": "test_one_save", "function_define": "    st = State()\n    sleep(0.05)\n    first_updated_at = st.updated_at", "piece": "sleep(0.05)"}
{"function_name": "test_two_saves", "function_define": "    st = State()\n    sleep(0.05)\n    first_updated_at = st.updated_at", "piece": "sleep(0.05)"}
{"function_name": "test_profile_env", "function_define": "    Ensure the VERSION is updated\n    utils_mock = mocks[1]\n    utils_mock.render = utils.render", "piece": "utils_mock = mocks[1]"}
{"function_name": "init_jobs", "function_define": "    data = json.load(f)\n    data = json.load(f)\n    data = json.load(f)", "piece": "data = json.load(f)"}
{"function_name": "on_batch_begin", "function_define": "    if not train:\n    new_input = []\n    y1 = last_target[shuffle]", "piece": "new_input = []"}
{"function_name": "softsign", "function_define": "    seed = softkey_decode(softkey)\n    if header is None:\n    header = b''", "piece": "if header is None:"}
{"function_name": "get_file", "function_define": "    Request GET for file\n    url: str : API URL\n    payload: dict : Request payload", "piece": "url: str : API URL"}
{"function_name": "test_Movinet_A0", "function_define": "    Test MovinetA0 model.\n    x = torch.randn(1, 3, 1, 64, 64)\n    y = model(x)", "piece": "x = torch.randn(1, 3, 1, 64, 64)"}
{"function_name": "test_Movinet_A1", "function_define": "    Test MovinetA1 model.\n    x = torch.randn(1, 3, 1, 64, 64)\n    y = model(x)", "piece": "x = torch.randn(1, 3, 1, 64, 64)"}
{"function_name": "test_Movinet_A2", "function_define": "    Test MovinetA2 model.\n    x = torch.randn(1, 3, 1, 64, 64)\n    y = model(x)", "piece": "x = torch.randn(1, 3, 1, 64, 64)"}
{"function_name": "test_Movinet_A3", "function_define": "    Test MovinetA3 model.\n    x = torch.randn(1, 3, 1, 64, 64)\n    y = model(x)", "piece": "x = torch.randn(1, 3, 1, 64, 64)"}
{"function_name": "test_Movinet_A4", "function_define": "    Test MovinetA4 model.\n    x = torch.randn(1, 3, 1, 64, 64)\n    y = model(x)", "piece": "x = torch.randn(1, 3, 1, 64, 64)"}
{"function_name": "test_Movinet_A5", "function_define": "    Test MovinetA5 model.\n    x = torch.randn(1, 3, 1, 64, 64)\n    y = model(x)", "piece": "x = torch.randn(1, 3, 1, 64, 64)"}
{"function_name": "test_Movinet_A4_", "function_define": "    Test MovinetA4 2+1d model.\n    config = _C.MODEL.MoViNetA4\n    x = torch.randn(1, 3, 1, 64, 64)", "piece": "config = _C.MODEL.MoViNetA4"}
{"function_name": "test_Movinet_A5_", "function_define": "    Test MovinetA5 2+1d model.\n    config = _C.MODEL.MoViNetA5\n    x = torch.randn(1, 3, 1, 64, 64)", "piece": "config = _C.MODEL.MoViNetA5"}
{"function_name": "process_command", "function_define": "    Model structure changes:\n    del command.usage\n    if command.usages:", "piece": "del command.usage"}
{"function_name": "get_default_date", "function_define": "    if paris_mean:\n    dt = datetime.utcnow()\n    dt = datetime.now()", "piece": "dt = datetime.utcnow()"}
{"function_name": "parse_date", "function_define": "    d = t = None\n    if is_time_re.match(datestr):\n    t = time.fromisoformat(datestr)", "piece": "if is_time_re.match(datestr):"}
{"function_name": "gen_by_config", "function_define": "    fJson = json.loads(fContent)\n    nsInfo = fJson['namespace']\n    codes_list = []", "piece": "nsInfo = fJson['namespace']"}
{"function_name": "build_project", "function_define": "    if selectors is None:\n    selectors = ['*/*']\n    if exclusions is None:", "piece": "selectors = ['*/*']"}
{"function_name": "evaluate_Expr", "function_define": "    if isinstance(E, Scalar):\n    elif isinstance(E, Var):\n    elif isinstance(E, BinOp):", "piece": "elif isinstance(E, Var):"}
{"function_name": "evaluate_Cmd", "function_define": "    out = []\n    for m in M:\n    m_out = dict(m)", "piece": "for m in M:"}
{"function_name": "test_While", "function_define": "    x = Var('x')\n    y = Var('y')\n    m1 = {x.name: 4, y.name: 0}", "piece": "y = Var('y')"}
{"function_name": "update_memories", "function_define": "    out = []\n    for m in M:\n    m_out = dict(m)", "piece": "for m in M:"}
{"function_name": "get_parcels", "function_define": "    json (dict): output JSON info\n    Returns:\n    json['parcels'] = result", "piece": "Returns:"}
{"function_name": "get_buildings", "function_define": "    json (dict): output JSON info\n    Returns:\n    json['buildings'] = result", "piece": "Returns:"}
{"function_name": "get_mobile", "function_define": "    json (dict): output JSON info\n    Returns:\n    json['mobile'] = result", "piece": "Returns:"}
{"function_name": "get_finances", "function_define": "    json (dict): output JSON info\n    Returns:\n    json['finance'] = result", "piece": "Returns:"}
{"function_name": "get_investments", "function_define": "    json (dict): output JSON info\n    Returns:\n    json['investment'] = result", "piece": "Returns:"}
{"function_name": "get_debt", "function_define": "    json (dict): output JSON info\n    Returns:\n    json['debt'] = result", "piece": "Returns:"}
{"function_name": "get_gift", "function_define": "    json (dict): output JSON info\n    Returns:\n    json['gift'] = result", "piece": "Returns:"}
{"function_name": "get_income", "function_define": "    json (dict): output JSON info\n    Returns:\n    json['income'] = result", "piece": "Returns:"}
{"function_name": "next_batch", "function_define": "    texts = []\n    wf, txf = self.current_read_[bi]\n    if self.to_reset_[bi] == 1:", "piece": "wf, txf = self.current_read_[bi]"}
{"function_name": "transform_txt", "function_define": "    elif timing_sym_list == None:\n    raw_chunks = line.split(' ')\n    mutated = raw_chunks", "piece": "raw_chunks = line.split(' ')"}
{"function_name": "gen_embedding", "function_define": "    with torch.no_grad():\n    speaker_embeddings = []\n    x, y = model.parse_batch(batch)", "piece": "speaker_embeddings = []"}
{"function_name": "test_model_score", "function_define": "    model = OffsetNet()\n    assert result > 0\n    with pytest.raises(ValueError):", "piece": "assert result > 0"}
{"function_name": "fetch_records", "function_define": "    the INA data.\n    board_file: board file\n    Returns:", "piece": "board_file: board file"}
{"function_name": "write_to_file", "function_define": "    file: file to write to.\n    with open(file, 'w') as pyfile:\n    pyfile.write('inas = [\\n')", "piece": "with open(file, 'w') as pyfile:"}
{"function_name": "mock_recipe_run", "function_define": "    data = {}\n    class MockTaskOutput:\n    nonlocal data", "piece": "class MockTaskOutput:"}
{"function_name": "test_saved_yaml", "function_define": "    saved_forcing = load(tmp_path)\n    forcing.shape = None\n    assert forcing == saved_forcing", "piece": "forcing.shape = None"}
{"function_name": "get_picoev_file", "function_define": "    poller_file = None\n    if 'Linux' == platform.system():\n    print('Sorry, not support .')", "piece": "if 'Linux' == platform.system():"}
{"function_name": "get_sources", "function_define": "    src = []\n    for file in files:\n    src.append(src_path)", "piece": "for file in files:"}
{"function_name": "call_http", "function_define": "    Parameters\n    state: List[HistoryEvent]\n    scheduled", "piece": "state: List[HistoryEvent]"}
{"function_name": "get_metadata", "function_define": "    a video asset from a given url\n    with ydl:\n    bitrate = None", "piece": "with ydl:"}
{"function_name": "init_optimizer", "function_define": "    if optim == 'adam':\n    elif optim == 'amsgrad':\n    elif optim == 'sgd':", "piece": "elif optim == 'amsgrad':"}
{"function_name": "contador", "function_define": "    if p == 0:\n    elif p < 0:\n    if f > i:", "piece": "elif p < 0:"}
{"function_name": "_map_geo_values", "function_define": "    if not initial:\n    initial = Geo()\n    if value:", "piece": "initial = Geo()"}
{"function_name": "_request_geo", "function_define": "    result = Queue()\n    request_thread.start()\n    request_thread.join()", "piece": "request_thread.start()"}
{"function_name": "loadFile", "function_define": "    self.data = {}\n    self.samples = []\n    for dataset in self.datasets:", "piece": "self.samples = []"}
{"function_name": "statistic", "function_define": "    gs = data[:, 0]\n    sys = data[:, 1]\n    sysb = data[:, 2]", "piece": "sys = data[:, 1]"}
{"function_name": "write_log", "function_define": "    if id == -1:\n    idlog = 1\n    db.session.commit()", "piece": "idlog = 1"}
{"function_name": "test_search_type", "function_define": "    item1 = BaseValueItem('item_1')\n    item2 = Item('item_2')\n    assert Rule.get_items() == []", "piece": "item2 = Item('item_2')"}
{"function_name": "test_search_oh", "function_define": "    item3 = Item('item_2')\n    assert Rule.get_items() == []\n    Items.add_item(item1)", "piece": "assert Rule.get_items() == []"}
{"function_name": "test_search_name", "function_define": "    item1 = BaseValueItem('item_1a')\n    item2 = Item('item_2a')\n    assert Rule.get_items() == []", "piece": "item2 = Item('item_2a')"}
{"function_name": "lengthOfLastWord", "function_define": "    s = s.strip()\n    wordList = s.split(' ')\n    lastWord = wordList[-1]", "piece": "wordList = s.split(' ')"}
{"function_name": "add_page_object", "function_define": "    if action == 'add':\n    except KeyError:\n    elif action == 'edit':", "piece": "except KeyError:"}
{"function_name": "query_by_pageId", "function_define": "    except KeyError:\n    response = []\n    for page_obj in page_list:", "piece": "response = []"}
{"function_name": "resetBoard", "function_define": "    for player in players:\n    self.addToBoard(player)\n    for item in items:", "piece": "self.addToBoard(player)"}
{"function_name": "playerPickUpItem", "function_define": "    if not player.item == None:\n    itemToDrop = player.item\n    itemToDrop.player = None", "piece": "itemToDrop = player.item"}
{"function_name": "toString", "function_define": "    outString = ''\n    for _ in range(self.size + 2):\n    outString += 'w '", "piece": "for _ in range(self.size + 2):"}
{"function_name": "toStringDeaths", "function_define": "    outString = ''\n    foundDeadPlayerInPos = False\n    for player in players:", "piece": "foundDeadPlayerInPos = False"}
{"function_name": "heuristics", "function_define": "    rule = int(moviment[0])\n    animal = int(moviment[1])\n    land = int(moviment[2])", "piece": "animal = int(moviment[1])"}
{"function_name": "bestScore", "function_define": "    bestValue = 0\n    bestMoviment = []\n    for moviments in self.children:", "piece": "bestMoviment = []"}
{"function_name": "AddTextWithBack", "function_define": "    string = str(string)\n    with widget.canvas:\n    Color(0.95, 0.95, 0.95)", "piece": "with widget.canvas:"}
{"function_name": "nextCard", "function_define": "    showYesNo = True\n    if not nextItem:\n    info = []", "piece": "if not nextItem:"}
{"function_name": "updateRequests", "function_define": "    self.updateRequestsInfo()\n    for request in self.requests:\n    self.remove_widget(request)", "piece": "for request in self.requests:"}
{"function_name": "pictureChanger", "function_define": "    text_input = TextInput(text='')\n    btn1 = Button(text='Confirm')\n    btn2 = Button(text='Cancel')", "piece": "btn1 = Button(text='Confirm')"}
{"function_name": "updateMatchInfo", "function_define": "    parent = match.parent\n    if parent.level == Level.ALEVEL:\n    level = 'A-Level'", "piece": "if parent.level == Level.ALEVEL:"}
{"function_name": "updateMatches", "function_define": "    self.updateMatchInfo()\n    for match in self.matches:\n    self.remove_widget(self.matches)", "piece": "for match in self.matches:"}
{"function_name": "updateUser", "function_define": "    self.goToPage(0)\n    tutorHomePage.updateRequests()\n    tutorMatchesPage.updateMatches()", "piece": "tutorHomePage.updateRequests()"}
{"function_name": "matchToString", "function_define": "    parent = match.parent\n    if parent.level == Level.ALEVEL:\n    level = 'A-Level'", "piece": "if parent.level == Level.ALEVEL:"}
{"function_name": "getPolicies", "function_define": "    getParameters = []\n    if filter is not None:\n    if scannedOnly is not None:", "piece": "if filter is not None:"}
{"function_name": "getlogger", "function_define": "    handler.setLevel(logging.INFO)\n    handler.setFormatter(formatter)\n    console.setLevel(logging.INFO)", "piece": "handler.setFormatter(formatter)"}
{"function_name": "createKDTree", "function_define": "    if len(data) <= max_num:\n    parts.append(data)\n    parts2.append(data2)", "piece": "parts.append(data)"}
{"function_name": "atomic_save", "function_define": "    torch.save(data, tmp_path)\n    os.replace(tmp_path, filepath)\n    except Exception as e:", "piece": "os.replace(tmp_path, filepath)"}
{"function_name": "record_direct", "function_define": "    if backend == 'bluemuse':\n    if not address:\n    found_muse = find_muse(name)", "piece": "if not address:"}
{"function_name": "trigger_handler", "function_define": "    for handler in self._handlers:\n    handler.do_actions(trigger_info)\n    except Exception as e:", "piece": "handler.do_actions(trigger_info)"}
{"function_name": "do_actions", "function_define": "    if len(self._actions) == 0:\n    for action in self._actions:\n    do_action(action, trigger_info)", "piece": "for action in self._actions:"}
{"function_name": "insert_snippet", "function_define": "    prepend_str = option.get(name)\n    backend = option['backends'][0]\n    if prepend_str is None:", "piece": "backend = option['backends'][0]"}
{"function_name": "_getfilesstr", "function_define": "    if len(files) == 0:\n    joined = ', '.join(files)\n    if len(joined) <= 40:", "piece": "joined = ', '.join(files)"}
{"function_name": "printnow", "function_define": "    self._printtitle()\n    stats: List[str] = []\n    if changes:", "piece": "stats: List[str] = []"}
{"function_name": "__organizeCSVs", "function_define": "    OrderedDict\n    See function description.\n    cellDataDict = OrderedDict()", "piece": "See function description."}
{"function_name": "r_cond_mvn", "function_define": "    numpy2ri.activate()\n    n = cov.shape[0]\n    numpy2ri.deactivate()", "piece": "n = cov.shape[0]"}
{"function_name": "prop_end", "function_define": "    Parameters\n    wf : obj\n    wf.wfarr : numpy ndarray", "piece": "wf : obj"}
{"function_name": "push_tokens", "function_define": "    out = state.out\n    largest_index = -1\n    for t in tokens:", "piece": "largest_index = -1"}
{"function_name": "split_by_lines", "function_define": "    for a single line\n    result = []\n    line = []", "piece": "result = []"}
{"function_name": "select_rotor", "function_define": "    if rotor_model == 'Rotor-I':\n    rotor_model_list = rotor_i_list\n    elif rotor_model == 'Rotor-II':", "piece": "rotor_model_list = rotor_i_list"}
{"function_name": "trace_file", "function_define": "    if tracer == 'autotrace':\n    trace_command = autotrace_cmd\n    elif tracer == 'potrace':", "piece": "trace_command = autotrace_cmd"}
{"function_name": "trace_thread", "function_define": "    while True:\n    work_file = q.get()\n    q.task_done()", "piece": "work_file = q.get()"}
{"function_name": "autotrace", "function_define": "    files = os.listdir('.')\n    for x in range(8):\n    t.daemon = True", "piece": "for x in range(8):"}
{"function_name": "testFunction", "function_define": "    x = 'asdfasdf' * (ct / 8)\n    for _ in xrange(passCt):\n    for e in v:", "piece": "for _ in xrange(passCt):"}
{"function_name": "read_message", "function_define": "    name = 'Test'\n    msg = 'This is a test'\n    topics = ['Topic1', 'Topic2']", "piece": "msg = 'This is a test'"}
{"function_name": "importModels", "function_define": "    Parameters\n    modelPathDict = {\n    for dimension in self.big5List:", "piece": "modelPathDict = {"}
{"function_name": "get_twitter", "function_define": "    corresponding class variable.\n    Parameters\n    Initialized TwitterAPI object.", "piece": "Parameters"}
{"function_name": "create_profile", "function_define": "    Parameters\n    username : string, default=None\n    profile : Profile", "piece": "username : string, default=None"}
{"function_name": "get_personality", "function_define": "    Parameters\n    profileList : list, default=None\n    be carried out.", "piece": "profileList : list, default=None"}
{"function_name": "do_kmeans", "function_define": "    assert d == 3\n    t0 = time()\n    t0 = time()", "piece": "t0 = time()"}
{"function_name": "recreate_image", "function_define": "    d = codebook.shape[1]\n    image = np.zeros((w, h, d))\n    label_idx = 0", "piece": "image = np.zeros((w, h, d))"}
{"function_name": "find_adjacent", "function_define": "    t0 = time()\n    end_col = 0\n    match_r = []", "piece": "end_col = 0"}
{"function_name": "delete_pt", "function_define": "    if max_pts < 2:\n    nuke.message('Minimum 2 points')\n    node = nuke.thisNode()", "piece": "nuke.message('Minimum 2 points')"}
{"function_name": "insert_pt", "function_define": "    if max_pts >= MAX_POINTS:\n    node = nuke.thisNode()\n    knob_name = 'pt' + str(pt)", "piece": "node = nuke.thisNode()"}
{"function_name": "initialiseNode", "function_define": "    node.removeKnob(start_knob)\n    node.addKnob(start_knob)\n    knobs = []", "piece": "node.addKnob(start_knob)"}
{"function_name": "token_required", "function_define": "    token = authorization_headers[1]\n    if not user:\n    print(e)", "piece": "if not user:"}
{"function_name": "_item_iterator", "function_define": "    for item in items:\n    item.reload(checkFiles=True)\n    yield item", "piece": "item.reload(checkFiles=True)"}
{"function_name": "_batch_get", "function_define": "    start = 0\n    while True:\n    start = start + 1 + batch_size", "piece": "while True:"}
{"function_name": "_refresh_items", "function_define": "    item.refresh()\n    if analyze:\n    item.analyze()", "piece": "if analyze:"}
{"function_name": "_setup_logger", "function_define": "    logging.raiseExceptions = False\n    logger.setLevel(logging.DEBUG)\n    logger.handlers = []", "piece": "logger.setLevel(logging.DEBUG)"}
{"function_name": "parse_reply", "function_define": "    code = root.get('code')\n    if code != 'done':\n    log.error(code)", "piece": "if code != 'done':"}
{"function_name": "common_ancestor", "function_define": "    global name_object\n    for node in node_list:\n    ancestral_list = []", "piece": "for node in node_list:"}
{"function_name": "shannonDiv", "function_define": "    taxDiv = 0.0\n    for item in dictionary:\n    taxDiv = 1.0", "piece": "for item in dictionary:"}
{"function_name": "orgGenealCount", "function_define": "    if anc in geneaDict:\n    taxName = geneaDict[anc]\n    taxSum += int(orgCnt)", "piece": "taxName = geneaDict[anc]"}
{"function_name": "phyloTester", "function_define": "    if taxName != 'unknown':\n    if len(testList) == 2:\n    del testList[0]", "piece": "if len(testList) == 2:"}
{"function_name": "genealogy", "function_define": "    ancestors = []\n    tax_id = self.tax_id\n    while 1:", "piece": "tax_id = self.tax_id"}
{"function_name": "kitchen_reminder", "function_define": "    status = db.getStatus(conn)\n    if status == 'DISABLED':\n    if currentBoyNum == 1:", "piece": "if status == 'DISABLED':"}
{"function_name": "test_mp3", "function_define": "    except SoxError:\n    pytest.skip()\n    assert 'sox_string' in info", "piece": "pytest.skip()"}
{"function_name": "test_basic_txt", "function_define": "    dictionary.write()\n    print(c.no_transcription_files)\n    c.initialize_corpus(dictionary)", "piece": "print(c.no_transcription_files)"}
{"function_name": "test_stereo", "function_define": "    if os.path.exists(temp):\n    dictionary.write()\n    d.initialize_corpus(dictionary)", "piece": "dictionary.write()"}
{"function_name": "test_flac", "function_define": "    if os.path.exists(temp):\n    dictionary.write()\n    d.initialize_corpus(dictionary)", "piece": "dictionary.write()"}
{"function_name": "test_flac_mp", "function_define": "    if os.path.exists(temp):\n    dictionary.write()\n    d.initialize_corpus(dictionary)", "piece": "dictionary.write()"}
{"function_name": "test_flac_tg", "function_define": "    if os.path.exists(temp):\n    dictionary.write()\n    d.initialize_corpus(dictionary)", "piece": "dictionary.write()"}
{"function_name": "test_flac_tg_mp", "function_define": "    if os.path.exists(temp):\n    dictionary.write()\n    d.initialize_corpus(dictionary)", "piece": "dictionary.write()"}
{"function_name": "test_subset", "function_define": "    dictionary.write()\n    c.initialize_corpus(dictionary)\n    sd = c.split_directory()", "piece": "c.initialize_corpus(dictionary)"}
{"function_name": "test_weird_words", "function_define": "    dictionary.write()\n    c.initialize_corpus(dictionary)\n    print(dictionary.oovs_found)", "piece": "c.initialize_corpus(dictionary)"}
{"function_name": "test_punctuated", "function_define": "    dictionary.write()\n    c.initialize_corpus(dictionary)\n    dictionary.cleanup_logger()", "piece": "c.initialize_corpus(dictionary)"}
{"function_name": "treat_data", "function_define": "    rows = []\n    for data in raw_data:\n    flatten_data = flatten(data)", "piece": "for data in raw_data:"}
{"function_name": "set_trophy", "function_define": "    if msg[2]['trid'] not in tr:\n    trid = None\n    trid = msg[2]['trid']", "piece": "trid = None"}
{"function_name": "_forward_box", "function_define": "    their matching ground truth.\n    Returns:\n    In training, a dict of losses.", "piece": "Returns:"}
{"function_name": "_forward_mask", "function_define": "    Returns:\n    In training, a dict of losses.\n    if not self.mask_on:", "piece": "In training, a dict of losses."}
{"function_name": "get_qoes", "function_define": "    global_results = {}\n    for abr in abrs_list:\n    global_results[abr] = []", "piece": "for abr in abrs_list:"}
{"function_name": "get_qoes_partial", "function_define": "    experiments_executed_so_far = 0\n    partial_results = {}\n    for abr in abrs_list:", "piece": "partial_results = {}"}
{"function_name": "plot_cdf", "function_define": "    ax = fig.add_subplot(111)\n    avg_best = -1000000000000\n    abr_best = ''", "piece": "avg_best = -1000000000000"}
{"function_name": "plot_bar", "function_define": "    results_metric_avg = {}\n    for scheme in results.keys():\n    ax = fig.add_subplot(111)", "piece": "for scheme in results.keys():"}
{"function_name": "test_annotations", "function_define": "    eq = self.assertAnnotationEqual\n    eq('...')\n    eq(\"'some_string'\")", "piece": "eq('...')"}
{"function_name": "_check_crc", "function_define": "    idx = buf.find(b'!')\n    if idx < 0:\n    cs = b''", "piece": "if idx < 0:"}
{"function_name": "do_options", "function_define": "    if options.current:\n    print(self.driver.get_current())\n    print(r)", "piece": "print(self.driver.get_current())"}
{"function_name": "clear_memory", "function_define": "    log.debug('Clear memory')\n    data = self.command('MEM=CLEAR')\n    if data == 'OK':", "piece": "data = self.command('MEM=CLEAR')"}
{"function_name": "reset_max", "function_define": "    log.debug('Reset max values')\n    data = self.command('MAX=RESET')\n    if data != 'OK':", "piece": "data = self.command('MAX=RESET')"}
{"function_name": "reset_min", "function_define": "    log.debug('Reset min values')\n    data = self.command('MIN=RESET')\n    if data != 'OK':", "piece": "data = self.command('MIN=RESET')"}
{"function_name": "set_clock", "function_define": "    if ans == 'y':\n    self.driver.station.set_time()\n    print('Set clock cancelled.')", "piece": "self.driver.station.set_time()"}
{"function_name": "genLoopPackets", "function_define": "    cmd_mode = True\n    if self.polling_interval == 0:\n    self.station.set_auto()", "piece": "if self.polling_interval == 0:"}
{"function_name": "_init_station", "function_define": "    station.flush()\n    station.wakeup()\n    station.set_echo()", "piece": "station.wakeup()"}
{"function_name": "_parse_values", "function_define": "    pkt = dict()\n    for i, v in enumerate(values):\n    if i >= len(header):", "piece": "for i, v in enumerate(values):"}
{"function_name": "_parse_header", "function_define": "    for v in header:\n    if v == 'HDR' or v[0:1] == '!':\n    continue", "piece": "if v == 'HDR' or v[0:1] == '!':"}
{"function_name": "get_header", "function_define": "    log.debug('Get header')\n    data = self.command('HEADER')\n    cols = data.split(',')", "piece": "data = self.command('HEADER')"}
{"function_name": "get_current_data", "function_define": "    data = ''\n    if send_now:\n    data = self.command('NOW')", "piece": "if send_now:"}
{"function_name": "get_time", "function_define": "    log.debug('Get time')\n    tstr = self.command('TIME=?')\n    if tstr not in ['ERROR', 'OK']:", "piece": "tstr = self.command('TIME=?')"}
{"function_name": "set_baro", "function_define": "    if offset != '0':\n    parts = offset.split('.')\n    if data != 'OK':", "piece": "parts = offset.split('.')"}
{"function_name": "get_rain", "function_define": "    log.debug('Get rain total')\n    rstr = self.command('RAIN')\n    if rstr not in ['ERROR', 'OK']:", "piece": "rstr = self.command('RAIN')"}
{"function_name": "gen_records", "function_define": "    of 0 indicates all records.\n    reboot ('MSG,').\n    records).", "piece": "reboot ('MSG,')."}
{"function_name": "get_avg_location", "function_define": "    result = Vector((0, 0, 0))\n    for v in verts:\n    result += v.co", "piece": "for v in verts:"}
{"function_name": "get_key_val", "function_define": "    case-sensitive.\n    Parameters\n    fits_file : str", "piece": "Parameters"}
{"function_name": "raw_to_absrms", "function_define": "    TODO: cite paper.\n    Parameters\n    power : np.array of floats", "piece": "Parameters"}
{"function_name": "var_and_rms", "function_define": "    TODO: cite textbook or paper.\n    Parameters\n    power : np.array of floats", "piece": "Parameters"}
{"function_name": "freq_lag_out", "function_define": "    normalized.\n    Parameters\n    out_base : str", "piece": "Parameters"}
{"function_name": "bias_term", "function_define": "    page 12) of Uttley et al. 2014.\n    subtracted).\n    Parameters", "piece": "subtracted)."}
{"function_name": "get_phase_err", "function_define": "    Parameters\n    Eqn 9 of Uttley et al 2014.\n    ci : Band object", "piece": "Eqn 9 of Uttley et al 2014."}
{"function_name": "phase_to_tlags", "function_define": "    Parameters\n    f : float or np.array of floats\n    with np.errstate(all='ignore'):", "piece": "f : float or np.array of floats"}
{"function_name": "find_static_dirs", "function_define": "    static_dirs = []\n    if os.path.exists(static_path):\n    static_dirs.append(static_path)", "piece": "if os.path.exists(static_path):"}
{"function_name": "data_input", "function_define": "    label = ' '\n    if self.Data.shape[0] == 30:\n    self.Data = np.array([])", "piece": "if self.Data.shape[0] == 30:"}
{"function_name": "conn_use", "function_define": "    for runnable in runnables:\n    runnable(conn)\n    conn.commit()", "piece": "runnable(conn)"}
{"function_name": "cursor_exec", "function_define": "    cursor = conn.cursor()\n    for r in runnables:\n    r(cursor)", "piece": "for r in runnables:"}
{"function_name": "generateMatrix", "function_define": "    lvl, c = (0, 1)\n    while lvl <= n // 2:\n    if c <= n * n:", "piece": "while lvl <= n // 2:"}
{"function_name": "split_signal", "function_define": "    unsigned = x + 2 ** 15\n    coarse = unsigned // 256\n    fine = unsigned % 256", "piece": "coarse = unsigned // 256"}
{"function_name": "custom_svd", "function_define": "    cr, cc = matrix.shape\n    matrix = np.copy(matrix)\n    if cr < rows:", "piece": "matrix = np.copy(matrix)"}
{"function_name": "compress_image", "function_define": "    colormap = 'RGB'\n    if len(img.shape) == 2:\n    colormap = 'L'", "piece": "if len(img.shape) == 2:"}
{"function_name": "_pad_matrix", "function_define": "    cr, cc = matrix.shape\n    matrix = np.copy(matrix)\n    if cr < rows:", "piece": "matrix = np.copy(matrix)"}
{"function_name": "test_usage", "function_define": "    empty_config = {}\n    bus = Bus(logger=MagicMock())\n    node.start()", "piece": "bus = Bus(logger=MagicMock())"}
{"function_name": "test_update", "function_define": "    empty_config = {}\n    bus = Bus(logger=MagicMock())\n    tester = bus.handle('tester')", "piece": "bus = Bus(logger=MagicMock())"}
{"function_name": "voice_conversion", "function_define": "    Change string to Mel.\n    Parameters\n    string: str", "piece": "Parameters"}
{"function_name": "occur_new_digit", "function_define": "    empty_cells = []\n    if len(empty_cells) == 0:\n    del empty_cells", "piece": "if len(empty_cells) == 0:"}
{"function_name": "on_key_up", "function_define": "    if self.lock:\n    self.lock = True\n    all_moved = False", "piece": "self.lock = True"}
{"function_name": "on_key_down", "function_define": "    if self.lock:\n    self.lock = True\n    all_moved = False", "piece": "self.lock = True"}
{"function_name": "on_key_left", "function_define": "    if self.lock:\n    self.lock = True\n    all_moved = False", "piece": "self.lock = True"}
{"function_name": "on_key_right", "function_define": "    if self.lock:\n    self.lock = True\n    all_moved = False", "piece": "self.lock = True"}
{"function_name": "draw_square", "function_define": "    for i in range(0, 4):\n    tur.forward(self.NC_CELL_SIZE)\n    tur.left(90)", "piece": "tur.forward(self.NC_CELL_SIZE)"}
{"function_name": "grid_forest", "function_define": "    Parameters:\n    height, height of trees\n    Returns:", "piece": "height, height of trees"}
{"function_name": "is_secure", "function_define": "    in AWS, ``False`` otherwise.\n    if not self.__yml:\n    if self._aws_parameter:", "piece": "if not self.__yml:"}
{"function_name": "_render_write", "function_define": "    d['Name'] = self.name\n    d['Value'] = self.value\n    d['Overwrite'] = True", "piece": "d['Value'] = self.value"}
{"function_name": "_parse_key", "function_define": "    KEY:secure\n    KEY:external\n    KEY:external:secure", "piece": "KEY:external"}
{"function_name": "__from_yml", "function_define": "    KEY=value\n    KEY:secure=value\n    KEY:external", "piece": "KEY:secure=value"}
{"function_name": "get_config_value", "function_define": "    Preference:\n    if config_path is None:\n    value = default", "piece": "if config_path is None:"}
{"function_name": "mkdir_parents", "function_define": "    the directory already exists.\n    os.makedirs(path)\n    except OSError as exc:", "piece": "os.makedirs(path)"}
{"function_name": "check_accuracy", "function_define": "    if loader.dataset.train:\n    num_correct = 0\n    num_samples = 0", "piece": "num_correct = 0"}
{"function_name": "ugly_numbers", "function_define": "    ugly = [1]\n    while len(ugly) < n:\n    index_of_2 += 1", "piece": "while len(ugly) < n:"}
{"function_name": "possibleHeights", "function_define": "    for i in range(1, len(parent)):\n    edges[parent[i]].append(i)\n    for u in edges[v]:", "piece": "edges[parent[i]].append(i)"}
{"function_name": "calcHeight", "function_define": "    for u in edges[v]:\n    calcHeight(u)\n    for i in range(len(edges[v])):", "piece": "calcHeight(u)"}
{"function_name": "findNewHeights", "function_define": "    firstMaxHeight = tailHeight + 1\n    secondMaxHeight = tailHeight + 1\n    if len(edges[v]) > 0:", "piece": "secondMaxHeight = tailHeight + 1"}
{"function_name": "load_sys_config", "function_define": "    fp = 'data/RICC.config'\n    data = None\n    with open(fp) as f:", "piece": "data = None"}
{"function_name": "loadfile", "function_define": "    values = []\n    f = open(name, 'r')\n    for x in f:", "piece": "f = open(name, 'r')"}
{"function_name": "create_user", "function_define": "    usuario.is_active = True\n    usuario.is_staff = False\n    usuario.is_superuser = False", "piece": "usuario.is_staff = False"}
{"function_name": "create_superuser", "function_define": "    usuario.is_active = True\n    usuario.is_staff = True\n    usuario.is_superuser = True", "piece": "usuario.is_staff = True"}
{"function_name": "get_unfollowers", "function_define": "    isWorkingFollowers = 1\n    isWorkingFollowing = 1\n    iter_following = 1", "piece": "isWorkingFollowing = 1"}
{"function_name": "get_names", "function_define": "    sleep(2)\n    last_ht, ht = (0, 1)\n    while last_ht != ht:", "piece": "last_ht, ht = (0, 1)"}
{"function_name": "create_pose_msg", "function_define": "    pose = geometry_msgs.msg.Pose()\n    pose.position.x = position[0]\n    pose.position.y = position[1]", "piece": "pose.position.x = position[0]"}
{"function_name": "read_binary", "function_define": "    Reads a Binary file and\n    fp = open(file_path, 'rb')\n    header = fp.read(80)", "piece": "fp = open(file_path, 'rb')"}
{"function_name": "get_facets", "function_define": "    if name:\n    for facet in self._facets[name]:\n    yield facet", "piece": "for facet in self._facets[name]:"}
{"function_name": "fill_form", "function_define": "    Returns:\n    self.user_data = user_data\n    user_defined_form_data = None", "piece": "self.user_data = user_data"}
{"function_name": "downloadris", "function_define": "    myHttp = HttpLite()\n    count = len(urls)\n    for i, url in enumerate(urls):", "piece": "count = len(urls)"}
{"function_name": "downloadpdf", "function_define": "    myHttp = HttpLite()\n    count = len(urls)\n    path = root + '/'", "piece": "count = len(urls)"}
{"function_name": "downloadacm", "function_define": "    myHttp = HttpLite()\n    count = len(urls)\n    for i, url in enumerate(urls):", "piece": "count = len(urls)"}
{"function_name": "downloaddoi", "function_define": "    myHttp = HttpLite()\n    myHttp.addCookiejar()\n    count = len(urls)", "piece": "myHttp.addCookiejar()"}
{"function_name": "downloadindex", "function_define": "    elist = ['404']\n    myHttp = HttpLite()\n    count = len(urls)", "piece": "myHttp = HttpLite()"}
{"function_name": "itest_relax_wf", "function_define": "    wf.add_final_cleanup(['WFK'])\n    ion_fw_id = wf.ion_fw.fw_id\n    old_new = wf.add_to_db(lpad=lp)", "piece": "ion_fw_id = wf.ion_fw.fw_id"}
{"function_name": "itest_uncoverged", "function_define": "    ion_fw_id = wf.ion_fw.fw_id\n    old_new = wf.add_to_db(lpad=lp)\n    ion_fw_id = old_new[ion_fw_id]", "piece": "old_new = wf.add_to_db(lpad=lp)"}
{"function_name": "itest_dilatmx", "function_define": "    ion_fw_id = wf.ion_fw.fw_id\n    old_new = wf.add_to_db(lpad=lp)\n    ion_fw_id = old_new[ion_fw_id]", "piece": "old_new = wf.add_to_db(lpad=lp)"}
{"function_name": "_build_msvc", "function_define": "    msbuild = MSBuild(self)\n    arch = str(self.settings.arch)\n    if arch != 'x86':", "piece": "arch = str(self.settings.arch)"}
{"function_name": "_make_args", "function_define": "    datadir = self._datadir\n    prefix = self.package_folder\n    samplesdir = self._samplesdir", "piece": "prefix = self.package_folder"}
{"function_name": "_patch_sources", "function_define": "    tools.patch(**patch)\n    for fn in os.listdir('.'):\n    if not fn.endswith('.vcxproj'):", "piece": "for fn in os.listdir('.'):"}
{"function_name": "package_info", "function_define": "    self.env_info.CC65 = cc65_cc\n    self.env_info.AS65 = cc65_as\n    self.env_info.LD65 = cc65_ld", "piece": "self.env_info.AS65 = cc65_as"}
{"function_name": "save_or_delete", "function_define": "    data = {}\n    data['user'] = user\n    if status_type == 'unsubscribe':", "piece": "data['user'] = user"}
{"function_name": "clear_console", "function_define": "    clear console\n    if sys.platform == 'darwin':\n    os.system('clear')", "piece": "if sys.platform == 'darwin':"}
{"function_name": "simulate_games", "function_define": "    unchanged.\n    modes = []\n    if collect_data:", "piece": "modes = []"}
{"function_name": "read_data_single", "function_define": "    while True:\n    byte = self.ser.read(1)\n    packet = self.input(byte)", "piece": "byte = self.ser.read(1)"}
{"function_name": "test_primary_ip4", "function_define": "    intcount = 0\n    if not interface.mgmt_only:\n    intcount += 1", "piece": "if not interface.mgmt_only:"}
{"function_name": "test_unique_ip", "function_define": "    already_found = []\n    if ip.address in already_found:\n    continue", "piece": "if ip.address in already_found:"}
{"function_name": "add_view", "function_define": "    response = None\n    if is_batch_upload:\n    errors = []", "piece": "if is_batch_upload:"}
{"function_name": "validate_form", "function_define": "    model = self.model\n    opts = model._meta\n    add = True", "piece": "opts = model._meta"}
{"function_name": "getImdbDetails", "function_define": "    mpaa = imdb['mpaa']\n    mpaa_arr = mpaa.split(' ', 2)\n    if len(mpaa_arr) > 2:", "piece": "mpaa_arr = mpaa.split(' ', 2)"}
{"function_name": "decToBin", "function_define": "    secret_bin = []\n    for i in dec:\n    secret_bin.append(f'{i:08b}')", "piece": "for i in dec:"}
{"function_name": "filter2LSB", "function_define": "    piclsb = []\n    replaceNum = 0\n    index = 0", "piece": "replaceNum = 0"}
{"function_name": "get_extracts", "function_define": "    pages = get_pages(limit=limit)\n    print('CREATING POOL')\n    pool = Pool(limit)", "piece": "print('CREATING POOL')"}
{"function_name": "optimize", "function_define": "    start = default_timer()\n    if n_ef_plotting_points > 0:\n    fig, ax = plt.subplots()", "piece": "if n_ef_plotting_points > 0:"}
{"function_name": "call_optimizer", "function_define": "    if optimizer == 'MaxSharpe':\n    ef.min_volatility()\n    if target_volatility is None:", "piece": "ef.min_volatility()"}
{"function_name": "modifiers", "function_define": "    mod = ()\n    if event.ShiftDown():\n    mod += (constants.KEY_SHIFT,)", "piece": "if event.ShiftDown():"}
{"function_name": "newFigure", "function_define": "    app.Create()\n    frame.SetSize((w, h))\n    figure = Figure(frame)", "piece": "frame.SetSize((w, h))"}
{"function_name": "OnLeftUp", "function_define": "    x, y = event.GetPosition()\n    self.ReleaseMouse()\n    except Exception:", "piece": "self.ReleaseMouse()"}
{"function_name": "OnRightUp", "function_define": "    x, y = event.GetPosition()\n    self.ReleaseMouse()\n    except Exception:", "piece": "self.ReleaseMouse()"}
{"function_name": "OnDoubleClick", "function_define": "    x, y = event.GetPosition()\n    if event.LeftDClick():\n    elif event.RightDClick():", "piece": "if event.LeftDClick():"}
{"function_name": "_ProcessKey", "function_define": "    Also produce text version.\n    key = event.GetKeyCode()\n    if key in KEYMAP:", "piece": "key = event.GetKeyCode()"}
{"function_name": "OnResize", "function_define": "    if self.figure:\n    self.figure._OnResize()\n    event.Skip()", "piece": "self.figure._OnResize()"}
{"function_name": "OnActivate", "function_define": "    if event.GetActive():\n    self.Refresh()\n    event.Skip()", "piece": "self.Refresh()"}
{"function_name": "_SetTitle", "function_define": "    if not self._destroyed:\n    if hasattr(window, 'SetTitle'):\n    window.SetTitle(title)", "piece": "if hasattr(window, 'SetTitle'):"}
{"function_name": "_SetPosition", "function_define": "    if not self._destroyed:\n    widget = self._widget\n    widget = widget.GetParent()", "piece": "widget = self._widget"}
{"function_name": "_GetPosition", "function_define": "    if not self._destroyed:\n    widget = self._widget\n    widget = widget.GetParent()", "piece": "widget = self._widget"}
{"function_name": "_GetNativeApp", "function_define": "    app = guisupport.get_app_wx()\n    wx.app_instance = app\n    if self._timer is None:", "piece": "wx.app_instance = app"}
{"function_name": "_ProcessEvents", "function_define": "    app = self._GetNativeApp()\n    old = wx.EventLoop.GetActive()\n    eventLoop = wx.EventLoop()", "piece": "old = wx.EventLoop.GetActive()"}
{"function_name": "spawnBear", "function_define": "    moveDir = random.randint(1, 2)\n    speed = random.randint(0, 2)\n    bears.append(bear)", "piece": "speed = random.randint(0, 2)"}
{"function_name": "bearsExec", "function_define": "    for bear in bears:\n    bear.move()\n    bear.draw()", "piece": "bear.move()"}
{"function_name": "isHitPlayer", "function_define": "    x, y = (int(self.x), self.y)\n    w, h = (self.width, self.height)\n    px, py = player.getXY()", "piece": "w, h = (self.width, self.height)"}
{"function_name": "guarda_solucion", "function_define": "    session.add(resultado)\n    session.commit()\n    session.refresh(resultado)", "piece": "session.commit()"}
{"function_name": "run_upload", "function_define": "    type = type_list[upload_type]\n    if project.handle_input:\n    project.handle_input(upload)", "piece": "if project.handle_input:"}
{"function_name": "check_uploads", "function_define": "    if pu.count():\n    upload = pu[0]\n    print('Running %s' % upload.id)", "piece": "upload = pu[0]"}
{"function_name": "main_loop", "function_define": "    while True:\n    check_uploads()\n    time.sleep(10)", "piece": "check_uploads()"}
{"function_name": "dataloader", "function_define": "    left_fold = 'image_2/'\n    right_fold = 'image_3/'\n    disp_L = 'disp_occ_0/'", "piece": "right_fold = 'image_3/'"}
{"function_name": "truncate_lines", "function_define": "    with open(filename, 'w') as out:\n    truncated = truncate_line(line)\n    out.write(truncated + '\\n')", "piece": "truncated = truncate_line(line)"}
{"function_name": "get_title", "function_define": "    if '_' in text.keys():\n    aux = ''\n    for part in text['$$']:", "piece": "aux = ''"}
{"function_name": "process_entry", "function_define": "    if text['#name'] == 'title':\n    if '_' in text.keys():\n    sections.append(get_title(text))", "piece": "if '_' in text.keys():"}
{"function_name": "get_info", "function_define": "    with lock:\n    sections = []\n    id_paper = r1.url.split('/')[-1]", "piece": "sections = []"}
{"function_name": "thread_caller", "function_define": "    elsev_file = open(file_, 'r')\n    for line in elsev_file:\n    threads.append(t)", "piece": "for line in elsev_file:"}
{"function_name": "ff_comparator", "function_define": "    data = {}\n    self.__get_followers()\n    self.__get_following()", "piece": "self.__get_followers()"}
{"function_name": "setUpClass", "function_define": "    k.set_learning_phase(1)\n    model = Sequential()\n    model.add(Dropout(0.25))", "piece": "model = Sequential()"}
{"function_name": "_augment", "function_define": "    if hflip:\n    x = x.flip(-1)\n    if vflip:", "piece": "x = x.flip(-1)"}
{"function_name": "_choiceHandler", "function_define": "    if ch == -1 or ch == 12:\n    print('\\n[!]Terminated')\n    elif ch == 0:", "piece": "print('\\n[!]Terminated')"}
{"function_name": "qlearning", "function_define": "    for i in range(num_ep):\n    s = env.reset()\n    done = False", "piece": "s = env.reset()"}
{"function_name": "infer_vector", "function_define": "    Parameters\n    items: str or list\n    the text of question", "piece": "items: str or list"}
{"function_name": "run_task", "function_define": "    if self.__task is None:\n    result = self.__task()\n    if result is None:", "piece": "result = self.__task()"}
{"function_name": "popleft_size", "function_define": "    sliced = bytearray()\n    for i in range(size):\n    if self:", "piece": "for i in range(size):"}
{"function_name": "vgg_block", "function_define": "    set_verbosity(ERROR)\n    x = inputs\n    for repetition in range(m):", "piece": "x = inputs"}
{"function_name": "vgg_loss", "function_define": "    set_verbosity(ERROR)\n    if tiled:\n    loss_models = []", "piece": "if tiled:"}
{"function_name": "plotData", "function_define": "    y = y.flatten()\n    pos = y == 1\n    neg = y == 0", "piece": "pos = y == 1"}
{"function_name": "dataset3Params", "function_define": "    sigma = 0.3\n    x1 = [1, 2, 1]\n    x2 = [0, 4, -1]", "piece": "x1 = [1, 2, 1]"}
{"function_name": "getVocabList", "function_define": "    vocabList = {}\n    i, word = line.split()\n    vocabList[word] = int(i)", "piece": "i, word = line.split()"}
{"function_name": "processEmail", "function_define": "    vocabList = getVocabList()\n    word_indices = []\n    for token in email_contents:", "piece": "word_indices = []"}
{"function_name": "emailFeatures", "function_define": "    n = 1899\n    x = np.zeros((n, 1))\n    for idx in word_indices:", "piece": "x = np.zeros((n, 1))"}
{"function_name": "build_dict", "function_define": "    word_freq_dict = dict()\n    for word in corpus:\n    if word not in word_freq_dict:", "piece": "for word in corpus:"}
{"function_name": "build_batch", "function_define": "    center_word_batch = []\n    target_word_batch = []\n    label_batch = []", "piece": "target_word_batch = []"}
{"function_name": "wheelEvent", "function_define": "    super().wheelEvent(event)\n    orig_view_pos = event.pos()\n    if y_change > 0:", "piece": "orig_view_pos = event.pos()"}
{"function_name": "batch_predict", "function_define": "    Perform batch-wise predictions\n    Q = prediction_x.shape[1]\n    M = zt_list[0].shape[0]", "piece": "Q = prediction_x.shape[1]"}
{"function_name": "create_mask", "function_define": "    qlen: Sequence length\n    mlen: Mask length\n    if self.same_length:", "piece": "mlen: Mask length"}
{"function_name": "prune_heads", "function_define": "    if len(heads) == 0:\n    for head in heads:\n    mask[head] = 0", "piece": "for head in heads:"}
{"function_name": "getNewLength", "function_define": "    timeInFrames = 0\n    for chunk in chunks:\n    leng = chunk[1] - chunk[0]", "piece": "for chunk in chunks:"}
{"function_name": "getAudioChunks", "function_define": "    import math\n    if maxAudioVolume == 0:\n    for i in range(audioFrameCount):", "piece": "if maxAudioVolume == 0:"}
{"function_name": "prettyTime", "function_define": "    newTime = localtime(newTime)\n    hours = newTime.tm_hour\n    if hours == 0:", "piece": "hours = newTime.tm_hour"}
{"function_name": "vidTracks", "function_define": "    import os\n    import platform\n    if ffmpeg == 'ffmpeg':", "piece": "import platform"}
{"function_name": "progressBar", "function_define": "    doneStr = '\u2588' * done\n    if percentDone == 0:\n    percentPerSec = 0", "piece": "if percentDone == 0:"}
{"function_name": "stale_callback", "function_define": "    if fnc is not None:\n    fnc(fig, stale)\n    if stale and fig.canvas:", "piece": "fnc(fig, stale)"}
{"function_name": "re_abort", "function_define": "    if self.RE.state != 'idle':\n    self.RE.abort()\n    self.RE.is_aborted = True", "piece": "self.RE.abort()"}
{"function_name": "update_re_state", "function_define": "    if self.RE.state == 'idle':\n    elif self.RE.state == 'running':\n    elif self.RE.state == 'paused':", "piece": "elif self.RE.state == 'running':"}
{"function_name": "count_five", "function_define": "    Parameters\n    sample_x : list\n    A random sample x1,...,xn.", "piece": "sample_x : list"}
{"function_name": "_connect", "function_define": "    LOG.exception(e)\n    LOG.exception(e)\n    LOG.exception(e)", "piece": "LOG.exception(e)"}
{"function_name": "connect_pkey", "function_define": "    LOG.exception(e)\n    LOG.exception(e)\n    LOG.exception(e)", "piece": "LOG.exception(e)"}
{"function_name": "create_shell", "function_define": "    if self._shell:\n    self._shell.close()\n    cols = cols or DEFAULT_COLUMNS", "piece": "self._shell.close()"}
{"function_name": "close_shell", "function_define": "    if self._shell:\n    self._shell.close()\n    self._shell = None", "piece": "self._shell.close()"}
{"function_name": "close_sftp", "function_define": "    if self._sftp:\n    self._sftp.close()\n    self._sftp = None", "piece": "self._sftp.close()"}
{"function_name": "_backward", "function_define": "    while self._shell.recv_ready():\n    forward_stream.send(data)\n    forward_stream.send(data)", "piece": "forward_stream.send(data)"}
{"function_name": "format_sftp_attr", "function_define": "    datestr = ''\n    datestr = '(unknown date)'\n    if attr is not None:", "piece": "datestr = '(unknown date)'"}
{"function_name": "write_command", "function_define": "    if not self._start_time:\n    self.start()\n    if input_content is not None:", "piece": "self.start()"}
{"function_name": "eval_block", "function_define": "    expression.\n    if namespace is None:\n    namespace = {}", "piece": "if namespace is None:"}
{"function_name": "to_form_paras", "function_define": "    custom_paras = []\n    type_str = openapi.TYPE_STRING\n    type_str = type_format", "piece": "type_str = openapi.TYPE_STRING"}
{"function_name": "minimumCost", "function_define": "    for c1, c2, cost in connections:\n    adj[c1].append([c2, cost])\n    adj[c2].append([c1, cost])", "piece": "adj[c1].append([c2, cost])"}
{"function_name": "createPost", "function_define": "    form = PostForm()\n    if request.method == 'POST':\n    if form.is_valid():", "piece": "if request.method == 'POST':"}
{"function_name": "updatePost", "function_define": "    form = PostForm(instance=post)\n    if request.method == 'POST':\n    if form.is_valid():", "piece": "if request.method == 'POST':"}
{"function_name": "deletePost", "function_define": "    if request.method == 'POST':\n    post.delete()\n    context = {'item': post}", "piece": "post.delete()"}
{"function_name": "sendEmail", "function_define": "    if request.method == 'POST':\n    email.fail_silently = False\n    email.send()", "piece": "email.fail_silently = False"}
{"function_name": "loginPage", "function_define": "    if request.method == 'POST':\n    if user is not None:\n    login(request, user)", "piece": "if user is not None:"}
{"function_name": "registerPage", "function_define": "    form = CustomUserCreationForm()\n    if request.method == 'POST':\n    if form.is_valid():", "piece": "if request.method == 'POST':"}
{"function_name": "updateProfile", "function_define": "    user = request.user\n    profile = user.profile\n    if request.method == 'POST':", "piece": "profile = user.profile"}
{"function_name": "test_ozy_dirs", "function_define": "    ozy_dir = get_ozy_dir()\n    assert ozy_dir is not None\n    home = os.environ['HOME']", "piece": "assert ozy_dir is not None"}
{"function_name": "run_demo", "function_define": "    Run demo visualization.\n    slowfast/config/defaults.py\n    np.random.seed(cfg.RNG_SEED)", "piece": "slowfast/config/defaults.py"}
{"function_name": "parse_data", "function_define": "    all_data = []\n    query_id = line[0]\n    query = line[1].strip()", "piece": "query_id = line[0]"}
{"function_name": "case_data", "function_define": "    query_id = line[0]\n    query = line[1].strip()\n    query_id_sub = line[2]", "piece": "query = line[1].strip()"}
{"function_name": "text_to_sequence", "function_define": "    if len(sequence) == 0:\n    sequence = [0]\n    if reverse:", "piece": "sequence = [0]"}
{"function_name": "pad_sequence", "function_define": "    if truncating == 'pre':\n    trunc = sequence[-maxlen:]\n    trunc = sequence[:maxlen]", "piece": "trunc = sequence[-maxlen:]"}
{"function_name": "_separator", "function_define": "    if sep == 'Comma':\n    elif sep == 'Tab':\n    elif sep == 'Fixed':", "piece": "elif sep == 'Tab':"}
{"function_name": "to_year_week_day", "function_define": "    Returns:\n    list of ['Schedule:Day:Hourly']\n    ep_days = []", "piece": "list of ['Schedule:Day:Hourly']"}
{"function_name": "field_set", "function_define": "    field_set value.\n    Available values are:\n    Returns:", "piece": "Available values are:"}
{"function_name": "special_day", "function_define": "    Day Type\"\"\"\n    sp_slicer_ = slicer_.copy()\n    sp_slicer_.loc[:] = False", "piece": "sp_slicer_ = slicer_.copy()"}
{"function_name": "exit_execute", "function_define": "    if self.ts_process is not None:\n    self.ts_process.terminate()\n    self.ts_process.wait()", "piece": "self.ts_process.terminate()"}
{"function_name": "_POST_predict", "function_define": "    logger.info('\u6536\u5230predict\u8bf7\u6c42')\n    self.lock.acquire()\n    self.lock.release()", "piece": "self.lock.acquire()"}
{"function_name": "put_model", "function_define": "    while True:\n    if os.path.exists(mar_file):\n    logger.error('register failed')", "piece": "if os.path.exists(mar_file):"}
{"function_name": "test_random_flip", "function_define": "    random = RandomGenerator()\n    random.seed(0)\n    random.seed(1)", "piece": "random.seed(0)"}
{"function_name": "test_sample", "function_define": "    all_samples = []\n    random = RandomGenerator()\n    random.seed(0)", "piece": "random = RandomGenerator()"}
{"function_name": "test_seed", "function_define": "    for s in range(10):\n    pdf1 = Pdf(self.counter, s)\n    sample = pdf1.sample()", "piece": "pdf1 = Pdf(self.counter, s)"}
{"function_name": "compile_shader", "function_define": "    glCompileShader(shaderId)\n    if not success:\n    print('info log: \\n', infoLog)", "piece": "if not success:"}
{"function_name": "context_windows", "function_define": "    left_size = left_size_window[i]\n    left_size = left_size_window\n    right_size = right_size_window", "piece": "left_size = left_size_window"}
{"function_name": "fit_to_corpus", "function_define": "    self.compute_prob(corpus)\n    self.build_sampling(corpus)\n    self.build_graph()", "piece": "self.build_sampling(corpus)"}
{"function_name": "compute_prob", "function_define": "    for w in counter.keys():\n    v = counter[w]\n    if word_probability > 1.0:", "piece": "v = counter[w]"}
{"function_name": "build_sampling", "function_define": "    batch = []\n    labels = []\n    start = time.time()", "piece": "labels = []"}
{"function_name": "create_batches", "function_define": "    print(self.labels.shape)\n    print(self.labels.shape)\n    print(self.inputs.shape)", "piece": "print(self.labels.shape)"}
{"function_name": "generate_batch", "function_define": "    span = 2 * skip_window + 1\n    for _ in range(span):\n    target = skip_window", "piece": "for _ in range(span):"}
{"function_name": "build_graph", "function_define": "    self.graph = tf.Graph()\n    with self.graph.as_default():\n    tf.set_random_seed(13)", "piece": "with self.graph.as_default():"}
{"function_name": "generate_tsne", "function_define": "    if embeddings is None:\n    embeddings = self.embeddings\n    labels = self.words[:word_count]", "piece": "embeddings = self.embeddings"}
{"function_name": "fcubeprep_iraf", "function_define": "    if AB_zero == yes:\n    AB_zero = True\n    AB_zero = False", "piece": "AB_zero = True"}
{"function_name": "training_step", "function_define": "    x, y = batch\n    y_hat = self(x)\n    loss = F.cross_entropy(y_hat, y)", "piece": "y_hat = self(x)"}
{"function_name": "validation_step", "function_define": "    x, y = batch\n    y_hat = self(x)\n    loss = F.cross_entropy(y_hat, y)", "piece": "y_hat = self(x)"}
{"function_name": "test_step", "function_define": "    x, y = batch\n    y_hat = self(x)\n    loss = F.cross_entropy(y_hat, y)", "piece": "y_hat = self(x)"}
{"function_name": "__calc_entropy", "function_define": "    dict_label = dict()\n    for label in y:\n    if label not in dict_label:", "piece": "for label in y:"}
{"function_name": "spearman_corr", "function_define": "    np.sort(X, axis=1)\n    np.sort(y)\n    n = X.shape[0]", "piece": "np.sort(y)"}
{"function_name": "pearson_corr", "function_define": "    x_dev = X - np.mean(X, axis=0)\n    y_dev = y - np.mean(y)\n    sum_dev = y_dev.T.dot(x_dev)", "piece": "y_dev = y - np.mean(y)"}
{"function_name": "fechner_corr", "function_define": "    y_mean = np.mean(y)\n    n = X.shape[0]\n    f_ratios = np.zeros(X.shape[1])", "piece": "n = X.shape[0]"}
{"function_name": "__label_binarize", "function_define": "    classes = np.unique(y)\n    n_samples = len(y)\n    n_classes = len(classes)", "piece": "n_samples = len(y)"}
{"function_name": "__chisquare", "function_define": "    optimizations.\n    chisq = f_obs\n    chisq -= f_exp", "piece": "chisq = f_obs"}
{"function_name": "__take_k", "function_define": "    hits = []\n    for samp in dm_i:\n    hits.append(samp)", "piece": "for samp in dm_i:"}
{"function_name": "reliefF_measure", "function_define": "    Differs with skrebate.ReliefF\n    Only for complete X\n    Training labels", "piece": "Only for complete X"}
{"function_name": "writecsv", "function_define": "    with open(filepath, 'w') as f:\n    writer.writeheader()\n    elif cell_segmentation is None:", "piece": "writer.writeheader()"}
{"function_name": "_on_state_change", "function_define": "    any_working = False\n    for widget in self.tab_widgets:\n    any_working = True", "piece": "for widget in self.tab_widgets:"}
{"function_name": "test_approx_kde", "function_define": "    data = np.random.randn(1000)\n    assert x.shape[0] == y.shape[0]\n    if plot:", "piece": "assert x.shape[0] == y.shape[0]"}
{"function_name": "test_plot_dist", "function_define": "    data = np.random.randn(1000)\n    if plot:\n    plt.show()", "piece": "if plot:"}
{"function_name": "test_prior_plot", "function_define": "    class MyModel(pf.Model):\n    model = MyModel()\n    model.weight.prior_plot()", "piece": "model = MyModel()"}
{"function_name": "commonClass", "function_define": "    if pg == 0:\n    if 'page' in session:\n    pg = session['page']", "piece": "if 'page' in session:"}
{"function_name": "atreatfound", "function_define": "    h = request.form.get('humor')\n    p = request.form.get('area')\n    result = ayutrt(p, h)", "piece": "p = request.form.get('area')"}
{"function_name": "pconstitute", "function_define": "    global vsum, psum, ksum\n    vsum, psum, ksum = (0, 0, 0)\n    s = request.form.get('selbuild')", "piece": "vsum, psum, ksum = (0, 0, 0)"}
{"function_name": "tconstitute", "function_define": "    global vsum, psum, ksum\n    s = request.form.get('seltaste')\n    s = request.form.get('selsleep')", "piece": "s = request.form.get('seltaste')"}
{"function_name": "mindpost", "function_define": "    yr = int(request.form.get('yr'))\n    mo = int(request.form.get('mo'))\n    dy = int(request.form.get('dy'))", "piece": "mo = int(request.form.get('mo'))"}
{"function_name": "spiritpost", "function_define": "    yr = int(request.form.get('yr'))\n    mo = int(request.form.get('mo'))\n    dy = int(request.form.get('dy'))", "piece": "mo = int(request.form.get('mo'))"}
{"function_name": "_handle_token", "function_define": "    Ops = _OutputOperation\n    States = _ParserState\n    kind, text, groups, *_ = token", "piece": "States = _ParserState"}
{"function_name": "test_from_xml", "function_define": "    node = fromstring(src)\n    assert defn.name == name\n    assert defn.value == value", "piece": "assert defn.name == name"}
{"function_name": "test_check_type", "function_define": "    defn = DefinedName(name='test')\n    defn.value = value\n    assert defn.type == expected", "piece": "defn.value = value"}
{"function_name": "test_duplicate", "function_define": "    dl = DefinedNameList()\n    assert not dl._duplicate(defn)\n    dl.append(defn)", "piece": "assert not dl._duplicate(defn)"}
{"function_name": "test_cleanup", "function_define": "    datadir.chdir()\n    xml = src.read()\n    node = fromstring(xml)", "piece": "xml = src.read()"}
{"function_name": "test_localnames", "function_define": "    datadir.chdir()\n    xml = src.read()\n    node = fromstring(xml)", "piece": "xml = src.read()"}
{"function_name": "test_get", "function_define": "    datadir.chdir()\n    xml = src.read()\n    node = fromstring(xml)", "piece": "xml = src.read()"}
{"function_name": "populate_value", "function_define": "    var = self.run(context)\n    if var == '<':\n    self._remove_last(context)", "piece": "if var == '<':"}
{"function_name": "get_file_global", "function_define": "    if name in file_globals:\n    out = file_globals[name]\n    out = default_value", "piece": "out = file_globals[name]"}
{"function_name": "create_version", "function_define": "    global PACKAGE_VERSION\n    bintray = Bintray()\n    now = datetime.datetime.now()", "piece": "bintray = Bintray()"}
{"function_name": "imresize_np", "function_define": "    Input: img: Numpy, HWC BGR [0,1]\n    Output: HWC BGR [0,1] w/o round\n    kernel_width = 4", "piece": "Output: HWC BGR [0,1] w/o round"}
{"function_name": "uniques_in_block", "function_define": "    bb = vu.block_to_bb(block)\n    labels = ds[bb]\n    empty_labels = labels.sum() == 0", "piece": "labels = ds[bb]"}
{"function_name": "find_uniques", "function_define": "    with open(config_path) as f:\n    config = json.load(f)\n    input_key = config['input_key']", "piece": "config = json.load(f)"}
{"function_name": "run_impl", "function_define": "    self.init(shebang)\n    ds = f[self.input_key]\n    shape = ds.shape", "piece": "ds = f[self.input_key]"}
{"function_name": "map_project_slug", "function_define": "    if project is None:\n    if not project_slug:\n    except Project.DoesNotExist:", "piece": "if not project_slug:"}
{"function_name": "inner_view", "function_define": "    if project is None:\n    if not project_slug:\n    except Project.DoesNotExist:", "piece": "if not project_slug:"}
{"function_name": "load_FireNet", "function_define": "    model = Sequential()\n    data_input_shape = (224, 224, 3)\n    model.add(BatchNormalization())", "piece": "data_input_shape = (224, 224, 3)"}
{"function_name": "load_LSTM", "function_define": "    n_timesteps = 10\n    n_features = 640\n    model2 = Sequential()", "piece": "n_features = 640"}
{"function_name": "_parse_json", "function_define": "    info_json = json.load(j)\n    image_ids = []\n    image_paths = []", "piece": "image_ids = []"}
{"function_name": "get_repo_data", "function_define": "    if request.status_code == 200:\n    data = []\n    for items in states:", "piece": "data = []"}
{"function_name": "merge_data", "function_define": "    entries = itertools.chain(*data)\n    df = pd.DataFrame(entries)\n    df['hour'] = df.time.dt.hour", "piece": "df = pd.DataFrame(entries)"}
{"function_name": "find_target", "function_define": "    if not Solution2._root:\n    Solution2._root = root\n    if not root:", "piece": "Solution2._root = root"}
{"function_name": "test_approx_eq", "function_define": "    class TestDevice(cirq.Device):\n    a = cirq.NamedQubit('a')\n    b = cirq.NamedQubit('b')", "piece": "a = cirq.NamedQubit('a')"}
{"function_name": "test_concatenate", "function_define": "    a = cirq.NamedQubit('a')\n    b = cirq.NamedQubit('b')\n    c = cirq.Circuit()", "piece": "b = cirq.NamedQubit('b')"}
{"function_name": "test_set_device", "function_define": "    with pytest.raises(ValueError):\n    c.device = cg.Foxtail\n    c[:] = []", "piece": "c.device = cg.Foxtail"}
{"function_name": "test_bad_index", "function_define": "    a = cirq.NamedQubit('a')\n    b = cirq.NamedQubit('b')\n    with pytest.raises(TypeError):", "piece": "b = cirq.NamedQubit('b')"}
{"function_name": "test_all_qubits", "function_define": "    a = cirq.NamedQubit('a')\n    b = cirq.NamedQubit('b')\n    assert c.all_qubits() == {a, b}", "piece": "b = cirq.NamedQubit('b')"}
{"function_name": "test_items", "function_define": "    a = cirq.NamedQubit('a')\n    b = cirq.NamedQubit('b')\n    c = cirq.Circuit()", "piece": "b = cirq.NamedQubit('b')"}
{"function_name": "test_copy", "function_define": "    a = cirq.NamedQubit('a')\n    b = cirq.NamedQubit('b')\n    c2 = c.copy()", "piece": "b = cirq.NamedQubit('b')"}
{"function_name": "test_save_qasm", "function_define": "    q0 = cirq.NamedQubit('q0')\n    circuit.save_qasm(file_path)\n    with open(file_path, 'r') as f:", "piece": "circuit.save_qasm(file_path)"}
{"function_name": "isOpened", "function_define": "    if self.changing:\n    if self.method == 'CAP':\n    elif self.method == 'URL':", "piece": "if self.method == 'CAP':"}
{"function_name": "test_redis", "function_define": "    key = make_key('test', uuid4())\n    conn = get_redis()\n    assert not conn.exists(key)", "piece": "conn = get_redis()"}
{"function_name": "iter_plugins", "function_define": "    regex = '>([\\\\d\\\\w-]*)</a>'\n    name = match.groups()[0]\n    continue", "piece": "name = match.groups()[0]"}
{"function_name": "sky_stats", "function_define": "    sky level  - from clipped mean\n    wexcl = 30\n    texp = np.zeros(self.nfiles)", "piece": "wexcl = 30"}
{"function_name": "driz_prep", "function_define": "    os.system('rm -rf %s' % drizdir)\n    os.system('mkdir %s' % drizdir)\n    for f in self.archfiles:", "piece": "os.system('mkdir %s' % drizdir)"}
{"function_name": "set_defaults", "function_define": "    instrument-dependent.\n    they may overwrite them.\n    generic defaults.", "piece": "they may overwrite them."}
{"function_name": "call_astrodriz", "function_define": "    os.chdir(drizdir)\n    for ext in ['ctx', 'wht']:\n    os.chdir('..')", "piece": "for ext in ['ctx', 'wht']:"}
{"function_name": "run_adriz", "function_define": "    self.driz_prep(drizdir)\n    adpars = self.set_defaults()\n    if debug:", "piece": "adpars = self.set_defaults()"}
{"function_name": "put_blt_in_orig", "function_define": "    Required inputs:\n    Optional inputs:\n    directory called 'aligned_files'", "piece": "Optional inputs:"}
{"function_name": "run_tweakreg", "function_define": "    well with this data set\n    Required inputs\n    blotted data)", "piece": "Required inputs"}
{"function_name": "put_orig_in_blt", "function_define": "    Required inputs:\n    Optional inputs:\n    flcorig = pf.open(f)", "piece": "Optional inputs:"}
{"function_name": "encode_multipart", "function_define": "    lines = []\n    if isinstance(data, dict):\n    data = data.items()", "piece": "if isinstance(data, dict):"}
{"function_name": "resolve_want", "function_define": "    attr_path = want.split('.')\n    base = attr_path[0]\n    attr_path = attr_path[1:]", "piece": "base = attr_path[0]"}
{"function_name": "test_get_winner", "function_define": "    teams = sample(team_names, k=2)\n    game = Game(teams=teams)\n    game.field_goal(teams[0])", "piece": "game = Game(teams=teams)"}
{"function_name": "telemetry", "function_define": "    imgString = data['image']\n    throttle = 1.0\n    global g_steering", "piece": "throttle = 1.0"}
{"function_name": "__update_values", "function_define": "    frame_count = 0\n    seconds = len(self._delta_queue)\n    with self._lock:", "piece": "seconds = len(self._delta_queue)"}
{"function_name": "get_avg_fps", "function_define": "    if self._start_time == 0:\n    self._start_time = time.time()\n    if diff == 0:", "piece": "self._start_time = time.time()"}
{"function_name": "set_layer", "function_define": "    Arguments\n    name: str\n    The name of the layer.", "piece": "name: str"}
{"function_name": "_set_unit", "function_define": "    if unit == self.unit:\n    if unit is None:\n    self._unit = None", "piece": "if unit is None:"}
{"function_name": "start_multi", "function_define": "    self.image = None\n    self._doRun(True)\n    logger.info('!!! running all:')", "piece": "self._doRun(True)"}
{"function_name": "combine_image", "function_define": "    Generator\u3067\u751f\u6210\u3057\u305f\u753b\u50cf\u3068label\u3092Concat\u3059\u308b\n    parameters\n    image : Generator\u3067\u751f\u6210\u3057\u305f\u753b\u50cf", "piece": "parameters"}
{"function_name": "setState", "function_define": "    self.stateIndex = stateIndex\n    self.curIndex = curIndex\n    self.destIndex = destIndex", "piece": "self.curIndex = curIndex"}
{"function_name": "get_py_paths", "function_define": "    list<Path>\n    py_paths = []\n    pattern = '^[^\\\\.]\\\\w+\\\\.py'", "piece": "py_paths = []"}
{"function_name": "mark_as_graded", "function_define": "    ta_username = getpass.getuser()\n    print('Graded by', ta_username)\n    scoresheet.write(ta_username)", "piece": "print('Graded by', ta_username)"}
{"function_name": "configure_device", "function_define": "    self.device = xm.xla_device()\n    self.distributed = True\n    is_xla = True", "piece": "self.distributed = True"}
{"function_name": "write_result", "function_define": "    Write the updated exposure.\n    if os.path.exists(output_file):\n    os.unlink(output_file)", "piece": "if os.path.exists(output_file):"}
{"function_name": "_load_data", "function_define": "    file_ok = True\n    n_hdu = len(hdu_list)\n    file_ok = False", "piece": "n_hdu = len(hdu_list)"}
{"function_name": "_get_pixel_index", "function_define": "    only int on input\"\"\"\n    self._make_column_row_vectors()\n    out = index[index_mask][0]", "piece": "self._make_column_row_vectors()"}
{"function_name": "save_pixel_curve", "function_define": "    if flux is None:\n    time = np.copy(self.jd_short)\n    if full_time:", "piece": "time = np.copy(self.jd_short)"}
{"function_name": "shifter_test", "function_define": "    crc_good = ''\n    for i in range(len(valid)):\n    yield i_data.eq(value[i] == '1')", "piece": "for i in range(len(valid)):"}
{"function_name": "multi_ctrl_x", "function_define": "    O(len(controls)).\n    targets - target qubits.\n    m = len(controls)", "piece": "targets - target qubits."}
{"function_name": "decompose", "function_define": "    controls - control qubits.\n    targets - target qubits.\n    assert cirq.is_unitary(matrix)", "piece": "targets - target qubits."}
{"function_name": "tokenizer", "function_define": "    if entry.rstrip():\n    continue\n    yield token", "piece": "continue"}
{"function_name": "_molfile", "function_define": "    yield MolfileStart()\n    for token in _ctab(stream):\n    yield token", "piece": "for token in _ctab(stream):"}
{"function_name": "_data_block", "function_define": "    while len(stream) > 0:\n    line = stream.popleft()\n    if line.startswith('>'):", "piece": "line = stream.popleft()"}
{"function_name": "readResults", "function_define": "    print('- read general info')\n    general_info = {}\n    if gen_nm in file_nms:", "piece": "general_info = {}"}
{"function_name": "_boxplotFIMDiffs", "function_define": "    data_labels = ['FIM Diff']\n    colors = [kPallete[0]]\n    data = []", "piece": "colors = [kPallete[0]]"}
{"function_name": "_do_inference", "function_define": "    Returns:\n    Response from model server\n    del schema.feature[:]", "piece": "Response from model server"}
{"function_name": "test_info", "function_define": "    with open(path, 'r') as f:\n    json_rep = json.load(f)\n    InfoResponse(**json_rep)", "piece": "json_rep = json.load(f)"}
{"function_name": "test_providers", "function_define": "    with open(path, 'r') as f:\n    json_rep = json.load(f)\n    LinksResponse(**json_rep)", "piece": "json_rep = json.load(f)"}
{"function_name": "fetchText", "function_define": "    one column for each actor\n    for row in csvReader:\n    if row[0] == indText:", "piece": "for row in csvReader:"}
{"function_name": "fetchVign", "function_define": "    starts = []\n    startdest = []\n    nvign = 0", "piece": "startdest = []"}
{"function_name": "addThing", "function_define": "    csvReader = csv.reader(obj)\n    for row in csvReader:\n    if row[0] == indVign:", "piece": "for row in csvReader:"}
{"function_name": "writeStrip", "function_define": "    repeats the last object.\"\"\"\n    strip = []\n    for indVign in story:", "piece": "strip = []"}
{"function_name": "createStrip", "function_define": "    story = fetchVign(config)\n    if specialPlatform == 'android':\n    except Exception as err:", "piece": "if specialPlatform == 'android':"}
{"function_name": "readConfig", "function_define": "    config = json.load(f)\n    except IOError:\n    print('config.json not found')", "piece": "except IOError:"}
{"function_name": "prec_at_k", "function_define": "    n_users = train_data.shape[0]\n    res = list()\n    mn_prec = np.hstack(res)", "piece": "res = list()"}
{"function_name": "recall_at_k", "function_define": "    n_users = train_data.shape[0]\n    res = list()\n    mrecall = np.hstack(res)", "piece": "res = list()"}
{"function_name": "ric_rank_at_k", "function_define": "    n_users = train_data.shape[0]\n    res = list()\n    mrrank = np.hstack(res)", "piece": "res = list()"}
{"function_name": "normalized_dcg", "function_define": "    n_users = train_data.shape[0]\n    res = list()\n    ndcg = np.hstack(res)", "piece": "res = list()"}
{"function_name": "_make_prediction", "function_define": "    n_songs = train_data.shape[1]\n    if vad_data is not None:\n    X_pred = Et[user_idx].dot(Eb)", "piece": "if vad_data is not None:"}
{"function_name": "_parse_box_files", "function_define": "    result = []\n    if file.endswith('.box'):\n    parser = Parser(path)", "piece": "if file.endswith('.box'):"}
{"function_name": "test_mv_uno", "function_define": "    for f in filepath_parts:\n    filepath = path.join(tmpdir, *f)\n    touch(filepath)", "piece": "filepath = path.join(tmpdir, *f)"}
{"function_name": "test_mv_multi", "function_define": "    for f in filepath_parts:\n    filepath = path.join(tmpdir, *f)\n    touch(filepath)", "piece": "filepath = path.join(tmpdir, *f)"}
{"function_name": "test_touch", "function_define": "    assert not path.exists(fdpath)\n    touch(fdpath)\n    assert path.exists(fdpath)", "piece": "touch(fdpath)"}
{"function_name": "test_rm_multi", "function_define": "    os.chdir(tmpdir)\n    mkdir('test_env')\n    cd('test_env')", "piece": "mkdir('test_env')"}
{"function_name": "test_rm_para", "function_define": "    os.chdir(tmpdir)\n    test_files = ['q', 'w', 'e']\n    mkdir('test_env')", "piece": "test_files = ['q', 'w', 'e']"}
{"function_name": "test_cp_dir", "function_define": "    os.chdir(tmpdir)\n    mkdir('test_env')\n    cd('test_env')", "piece": "mkdir('test_env')"}
{"function_name": "create_network", "function_define": "    if T_dimension == None:\n    T_dimension = num_classes\n    train_txt = ''", "piece": "T_dimension = num_classes"}
{"function_name": "saveFromFile", "function_define": "    if self.file_name is not None:\n    self.readFile()\n    self.setWords()", "piece": "self.readFile()"}
{"function_name": "readFile", "function_define": "    file = open(self.file_name, 'r')\n    self.file_content = file.read()\n    file.close()", "piece": "self.file_content = file.read()"}
{"function_name": "markDirty", "function_define": "    if not self.dirty:\n    self.dirty = True\n    self.context.dirtySlot(self)", "piece": "self.dirty = True"}
{"function_name": "propagate", "function_define": "    assert self.dirty\n    self.dirty = False\n    diff = self.valuediff", "piece": "self.dirty = False"}
{"function_name": "updateValues", "function_define": "    if diff:\n    for value in diff:\n    if self.next:", "piece": "for value in diff:"}
{"function_name": "markCritical", "function_define": "    assert node is self.node\n    if not self.isCritical:\n    self.isCritical = True", "piece": "if not self.isCritical:"}
{"function_name": "updateFlags", "function_define": "    diff = ~self.flags & flags\n    new = self.flagsdiff | diff\n    if new != self.flagsdiff:", "piece": "new = self.flagsdiff | diff"}
{"function_name": "markNull", "function_define": "    if not self.null:\n    self.null = True\n    if self.next:", "piece": "self.null = True"}
{"function_name": "_update_config", "function_define": "    if data_key in data:\n    val = data[data_key]\n    if val is not None:", "piece": "val = data[data_key]"}
{"function_name": "_add_to_info", "function_define": "    value = config.get(key)\n    if value:\n    info[key] = value", "piece": "if value:"}
{"function_name": "testSpecialCases", "function_define": "    b = tfb.Power(power=power)\n    b_other = cls()\n    self.assertAllClose(y, y_other)", "piece": "b_other = cls()"}
{"function_name": "map_region2files", "function_define": "    regions = []\n    if ds is None:\n    for line in fin:", "piece": "if ds is None:"}
{"function_name": "ucsc_format_base", "function_define": "    ra = region_args\n    new_line = list(fields[0:3])\n    sum_ = fields[3]", "piece": "new_line = list(fields[0:3])"}
{"function_name": "ucsc_url", "function_define": "    endpoint = 'snaptron'\n    endpoint = region_args.app\n    if region_args.print_header:", "piece": "endpoint = region_args.app"}
{"function_name": "stream_header", "function_define": "    ra = region_args\n    custom_header = ra.header\n    if len(REQ_FIELDS) > 0:", "piece": "custom_header = ra.header"}
{"function_name": "stream_record", "function_define": "    ra = region_args\n    if len(fields) == 0:\n    fields = line.split('\\t')", "piece": "if len(fields) == 0:"}
{"function_name": "filter_by_ranges", "function_define": "    skip = False\n    for rfield in rquerys.keys():\n    op, rval = rquerys[rfield]", "piece": "for rfield in rquerys.keys():"}
{"function_name": "open_wav_file", "function_define": "    log('Opening: %s' % filename)\n    wav_data = wavio.read(filename)\n    if resample != None:", "piece": "wav_data = wavio.read(filename)"}
{"function_name": "resample_wav", "function_define": "    N = in_fs / out_fs\n    if int(N) == N:\n    if int(N) != 1:", "piece": "if int(N) == N:"}
{"function_name": "butter_bandpass", "function_define": "    nyq = 0.5 * fs\n    low = lowcut / nyq\n    high = highcut / nyq", "piece": "low = lowcut / nyq"}
{"function_name": "design_bp", "function_define": "    nyq_rate = fs / 2\n    cf = 1800\n    offset = 1000", "piece": "cf = 1800"}
{"function_name": "design_lp", "function_define": "    nyq_rate = fs / 2\n    cf = 2500\n    order = 500", "piece": "cf = 2500"}
{"function_name": "fsk_demodulate", "function_define": "    block_len = int(fs / baud)\n    t = np.arange(0, block_len) / fs\n    bitstream = []", "piece": "t = np.arange(0, block_len) / fs"}
{"function_name": "decode_block", "function_define": "    output_str = ''\n    while True:\n    if i > len(bits) - 12:", "piece": "while True:"}
{"function_name": "plot_numpy_data", "function_define": "    for i in mag:\n    plt.plot(i)\n    plt.show()", "piece": "plt.plot(i)"}
{"function_name": "output_data", "function_define": "    print(string)\n    with open(fname, 'a+') as f:\n    f.write(string + '\\r\\n')", "piece": "with open(fname, 'a+') as f:"}
{"function_name": "get_area", "function_define": "    area = []\n    min_x, width = (0, 0)\n    for y in range(side):", "piece": "min_x, width = (0, 0)"}
{"function_name": "CommitChanges", "function_define": "    correct_rows = []\n    thumb_problems = False\n    if prefix.startswith('f'):", "piece": "thumb_problems = False"}
{"function_name": "_SetNonDupePort", "function_define": "    new_port = new_service.GetPort()\n    if new_port in existing_ports:\n    next_port = self._GetNextPort()", "piece": "if new_port in existing_ports:"}
{"function_name": "_EnterURL", "function_define": "    addee_media = set()\n    for m in self._current_media:\n    addee_media.add(m)", "piece": "for m in self._current_media:"}
{"function_name": "_RemoveURL", "function_define": "    removee_media = set()\n    for m in self._current_media:\n    removee_media.add(m)", "piece": "for m in self._current_media:"}
{"function_name": "_UpdateList", "function_define": "    self._urls_listbox.clear()\n    for m in self._current_media:\n    label = url", "piece": "for m in self._current_media:"}
{"function_name": "_SetLocations", "function_define": "    if len(prefixes) > 0:\n    path = dlg.GetPath()\n    for prefix in prefixes:", "piece": "path = dlg.GetPath()"}
{"function_name": "EventArchiveAdd", "function_define": "    hta_path = dlg_file.GetPath()\n    archive_namespaces.sort()\n    dlg.SetPanel(panel)", "piece": "archive_namespaces.sort()"}
{"function_name": "EventArchiveEdit", "function_define": "    if selection != -1:\n    if not os.path.exists(hta_path):\n    archive_namespaces.sort()", "piece": "if not os.path.exists(hta_path):"}
{"function_name": "_EditMimeLaunch", "function_define": "    message += os.linesep * 2\n    message += os.linesep * 2\n    if launch_path is None:", "piece": "message += os.linesep * 2"}
{"function_name": "_GetListCtrlData", "function_define": "    if media_start_paused:\n    if media_start_with_embed:\n    if preview_start_paused:", "piece": "if media_start_with_embed:"}
{"function_name": "StyleChanged", "function_define": "    if qt_style_name is None:\n    except Exception as e:\n    if qt_stylesheet_name is None:", "piece": "except Exception as e:"}
{"function_name": "_TestAddress", "function_define": "    network_job.OverrideBandwidth()\n    network_job.SetForLogin(True)\n    network_job.WaitUntilDone()", "piece": "network_job.SetForLogin(True)"}
{"function_name": "_TestCredentials", "function_define": "    if not response['verified']:\n    message = 'Everything looks ok!'\n    except Exception as e:", "piece": "message = 'Everything looks ok!'"}
{"function_name": "_UpdateControls", "function_define": "    self._upnp.SetValue(None)\n    self._upnp.setEnabled(False)\n    self._upnp.setEnabled(True)", "piece": "self._upnp.setEnabled(False)"}
{"function_name": "_ShowHelp", "function_define": "    message += os.linesep * 2\n    message += os.linesep * 2\n    message += os.linesep * 2", "piece": "message += os.linesep * 2"}
{"function_name": "check_pca", "function_define": "    data_dirs = []\n    class_names = []\n    class_counter = 0", "piece": "class_names = []"}
{"function_name": "preprocess_data", "function_define": "    data_dirs = []\n    class_names = []\n    class_counter = 0", "piece": "class_names = []"}
{"function_name": "plot_data", "function_define": "    data_dirs = []\n    class_names = []\n    class_counter = 0", "piece": "class_names = []"}
{"function_name": "form_operation", "function_define": "    if request.method == 'POST':\n    form = FORM(request.POST)\n    if form.is_valid():", "piece": "form = FORM(request.POST)"}
{"function_name": "activate_account", "function_define": "    if tk is None:\n    if tk.user.is_active:\n    userdata = tk.user", "piece": "if tk.user.is_active:"}
{"function_name": "scoreboard", "function_define": "    if request.method == 'POST':\n    if user is None:\n    args = {}", "piece": "if user is None:"}
{"function_name": "_load_samples", "function_define": "    if int(sys.version[0]) > 2:\n    shuffled_img = pickle.load(f)\n    import pdb", "piece": "shuffled_img = pickle.load(f)"}
{"function_name": "_load_anno", "function_define": "    shuffled_anno = pickle.load(f)\n    bboxes = []\n    labels = []", "piece": "bboxes = []"}
{"function_name": "predict_parallel", "function_define": "    all_predictions = {}\n    predictions = future.result()\n    if future == future1:", "piece": "predictions = future.result()"}
{"function_name": "move_dirs", "function_define": "    os.makedirs(protected_root)\n    os.makedirs(private_root)\n    if os.path.exists(exports_dir):", "piece": "os.makedirs(private_root)"}
{"function_name": "remove_doc", "function_define": "    id = request.args.get('id')\n    d = Doc.objects.get(id=id)\n    d.delete()", "piece": "d = Doc.objects.get(id=id)"}
{"function_name": "getHeadlines", "function_define": "    headlines = []\n    feed = parseRSS(rss_url)\n    for newsitem in feed['items']:", "piece": "feed = parseRSS(rss_url)"}
{"function_name": "best_move", "function_define": "    candidate_games = []\n    lower_bound = 0\n    upper_bound = 0", "piece": "lower_bound = 0"}
{"function_name": "get_epsilon", "function_define": "    knots = {0: 1, 1: 0, 2: 2}\n    bins = 10\n    data = []", "piece": "bins = 10"}
{"function_name": "runs_from_db", "function_define": "    for record in results:\n    run_number = record['run']\n    if not record.get('analysis'):", "piece": "run_number = record['run']"}
{"function_name": "insert_muxjob", "function_define": "    job_id = _id.inserted_id\n    sys.exit(1)\n    if job_id:", "piece": "sys.exit(1)"}
{"function_name": "get_mux_details", "function_define": "    readunits_dict = {}\n    samples_dict = {}\n    for sample_dir in sample_list:", "piece": "samples_dict = {}"}
{"function_name": "setTargets", "function_define": "    for ver in ['2.4.6']:\n    self.patchLevel['2.4.6'] = 2\n    self.defaultTarget = '2.4.6'", "piece": "self.patchLevel['2.4.6'] = 2"}
{"function_name": "define_hx", "function_define": "    name, args0 = args0.popitem()\n    locals_ = locals_.copy()\n    for v in args0:", "piece": "locals_ = locals_.copy()"}
{"function_name": "execute_hx", "function_define": "    for name, args in args0.items():\n    if name == 'shell':\n    elif name == 'bin_out':", "piece": "if name == 'shell':"}
{"function_name": "config_hx", "function_define": "    for name, args in args0.items():\n    if name == 'encoding':\n    if args[0].s == 'string':", "piece": "if name == 'encoding':"}
{"function_name": "repeat_hx", "function_define": "    for name, data in args.items():\n    for i in range(int(name[1:])):\n    for d in data:", "piece": "for i in range(int(name[1:])):"}
{"function_name": "struct_hx", "function_define": "    struct_args = []\n    for name, args in args0.items():\n    if name == 'int':", "piece": "for name, args in args0.items():"}
{"function_name": "print_tree", "function_define": "    for i in range(indent - 1):\n    out.write(INDENT_STRING1)\n    if indent > 0:", "piece": "out.write(INDENT_STRING1)"}
{"function_name": "_make_tree", "function_define": "    index, stack = (0, [])\n    lexicons = []\n    root = None", "piece": "lexicons = []"}
{"function_name": "add_parents", "function_define": "    self.parent = parent\n    for child in self.children:\n    if isinstance(child, ConstTree):", "piece": "for child in self.children:"}
{"function_name": "remove_nodes", "function_define": "    for c in self.children:\n    if isinstance(c, ConstTree):\n    if filter(c):", "piece": "if isinstance(c, ConstTree):"}
{"function_name": "from_exp_worth", "function_define": "    max_diff = round(x / 10)\n    too_high = x + max_diff + 1\n    weapon_chance = 0.35", "piece": "too_high = x + max_diff + 1"}
{"function_name": "new_bodyguard", "function_define": "    for i in range(n):\n    if not weak:\n    lv = rndint(*BODYGUARD_LV)", "piece": "if not weak:"}
{"function_name": "new_custom_hcf", "function_define": "    name = input('Name: ')\n    if level > 1:\n    f.level_up(level - 1)", "piece": "if level > 1:"}
{"function_name": "new_drunkard", "function_define": "    if strong:\n    lv = rndint(*DRUNKARD_STRONG_LV)\n    rand_atts_mode = 2", "piece": "lv = rndint(*DRUNKARD_STRONG_LV)"}
{"function_name": "new_fighter", "function_define": "    for i in range(n):\n    if not lv:\n    lv = rndint(1, 20)", "piece": "if not lv:"}
{"function_name": "new_foreigner", "function_define": "    if not lv:\n    lv = rndint(*FOREIGNER_LV)\n    if country is None:", "piece": "lv = rndint(*FOREIGNER_LV)"}
{"function_name": "new_opponent", "function_define": "    for i in range(n):\n    fs.append(f)\n    if len(fs) == 1:", "piece": "fs.append(f)"}
{"function_name": "new_police", "function_define": "    for i in range(n):\n    lv = rndint(*POLICE_LV)\n    fs.append(f)", "piece": "lv = rndint(*POLICE_LV)"}
{"function_name": "new_robber", "function_define": "    for i in range(n):\n    if not weak:\n    lv = rndint(*ROBBER_LV)", "piece": "if not weak:"}
{"function_name": "new_thief", "function_define": "    if not tough:\n    lv = rndint(*THIEF_LV)\n    rand_atts_mode = 0", "piece": "lv = rndint(*THIEF_LV)"}
{"function_name": "new_thug", "function_define": "    for i in range(n):\n    if not weak:\n    lv = rndint(*THUG_LV)", "piece": "if not weak:"}
{"function_name": "copy_fighter", "function_define": "    Weapons are included.\"\"\"\n    new = Fighter(*atts)\n    if orig.weapon:", "piece": "new = Fighter(*atts)"}
{"function_name": "kpath_decoder", "function_define": "    separated by space.\n    Examples:\n    ksegs = []", "piece": "Examples:"}
{"function_name": "kpath_encoder", "function_define": "    except AssertionError:\n    assert len(ksyms) % 2 == 0\n    except AssertionError:", "piece": "assert len(ksyms) % 2 == 0"}
{"function_name": "start_client", "function_define": "    tcpClient.connect(address)\n    p = pyaudio.PyAudio()\n    logging.info('Please speak.')", "piece": "p = pyaudio.PyAudio()"}
{"function_name": "test_bloch", "function_define": "    state = QuantumState(n)\n    state.set_computational_basis(0)\n    H(0).update_quantum_state(state)", "piece": "state.set_computational_basis(0)"}
{"function_name": "test_rotate_buff", "function_define": "    buff = [1, 2, 3, 4]\n    buff = _rotate_buff(buff)\n    assert buff == [4, 1, 2, 3]", "piece": "buff = _rotate_buff(buff)"}
{"function_name": "copy_plugin", "function_define": "    global path\n    if not plugin.endswith('.py'):\n    os.listdir(path + plugin[0:-3])", "piece": "if not plugin.endswith('.py'):"}
{"function_name": "remove_plugin", "function_define": "    global path\n    if not plugin.endswith('.py'):\n    os.remove(path + '../' + plugin)", "piece": "if not plugin.endswith('.py'):"}
{"function_name": "prefer_gpu", "function_define": "    from .ops import CupyOps\n    if CupyOps.xp is not None:\n    Model.Ops = CupyOps", "piece": "if CupyOps.xp is not None:"}
{"function_name": "require_gpu", "function_define": "    from .ops import CupyOps\n    if CupyOps.xp is not None:\n    Model.Ops = CupyOps", "piece": "if CupyOps.xp is not None:"}
{"function_name": "remap_ids", "function_define": "    id_map = {0: 0}\n    n_vector = len(id_map)\n    for i, id_ in enumerate(ids):", "piece": "n_vector = len(id_map)"}
{"function_name": "copy_array", "function_define": "    dst[:] = src\n    cupy.copyto(dst, src)\n    numpy.copyto(dst, src)", "piece": "cupy.copyto(dst, src)"}
{"function_name": "to_categorical", "function_define": "    xp = get_array_module(y)\n    if xp is cupy:\n    y = y.get()", "piece": "if xp is cupy:"}
{"function_name": "minibatch", "function_define": "    while i < len(stream):\n    yield stream[i:i + batch_size]\n    i += batch_size", "piece": "yield stream[i:i + batch_size]"}
{"function_name": "begin_update", "function_define": "    n_vector = len(id_map)\n    for i, id_ in enumerate(ids):\n    if id_ not in id_map:", "piece": "for i, id_ in enumerate(ids):"}
{"function_name": "small_db", "function_define": "    id1 = empty_db.add(trans1)\n    id2 = empty_db.add(trans2)\n    id3 = empty_db.add(trans3)", "piece": "id2 = empty_db.add(trans2)"}
{"function_name": "test_delete", "function_define": "    cats0 = empty_db.select_all()\n    assert len(cats0) == 0\n    empty_db.add(cat0)", "piece": "assert len(cats0) == 0"}
{"function_name": "test_delete2", "function_define": "    cats0 = med_db.select_all()\n    med_db.add(cat0)\n    cats1 = med_db.select_all()", "piece": "med_db.add(cat0)"}
{"function_name": "test_sum_date", "function_define": "    empty_db.add(cat0)\n    empty_db.add(cat1)\n    empty_db.add(cat2)", "piece": "empty_db.add(cat1)"}
{"function_name": "test_sum_month", "function_define": "    empty_db.add(cat0)\n    empty_db.add(cat1)\n    empty_db.add(cat2)", "piece": "empty_db.add(cat1)"}
{"function_name": "test_sum_year", "function_define": "    empty_db.add(cat0)\n    empty_db.add(cat1)\n    empty_db.add(cat2)", "piece": "empty_db.add(cat1)"}
{"function_name": "print_grid", "function_define": "    print('---')\n    for i in range(-10, 10):\n    for k in range(-10, 10):", "piece": "for i in range(-10, 10):"}
{"function_name": "change_move", "function_define": "    if move == move_right:\n    if move == move_down:\n    if move == move_left:", "piece": "if move == move_down:"}
{"function_name": "patch_paths", "function_define": "    patched_dict = {}\n    patched_value = None\n    if isinstance(value, dict):", "piece": "patched_value = None"}
{"function_name": "generate_graph", "function_define": "    Initialize from n vertices.\n    for i in range(n):\n    self.add_vertex(i)", "piece": "for i in range(n):"}
{"function_name": "add_vertex", "function_define": "    Add a vertex to the graph.\n    if u not in self.vertices():\n    self.graph[str(u)] = []", "piece": "if u not in self.vertices():"}
{"function_name": "remove_vertex", "function_define": "    Remove vertex from graph.\n    if u in self.vertices():\n    del self.graph[str(u)]", "piece": "if u in self.vertices():"}
{"function_name": "add_edge", "function_define": "    Add an edge to the graph.\n    self.graph[str(u)].append(v)\n    self.graph[str(v)].append(u)", "piece": "self.graph[str(u)].append(v)"}
{"function_name": "remove_edge", "function_define": "    Remove an edge from the graph.\n    self.graph[str(u)].remove(v)\n    self.graph[str(v)].remove(u)", "piece": "self.graph[str(u)].remove(v)"}
{"function_name": "remove_all_edges", "function_define": "    if v in self.vertices():\n    edges = list(self.graph[str(v)])\n    for e in edges:", "piece": "edges = list(self.graph[str(v)])"}
{"function_name": "vertex_cover", "function_define": "    if covered is None:\n    covered = []\n    if current_depth < reach:", "piece": "covered = []"}
{"function_name": "kernelization", "function_define": "    covered = []\n    while k > 0:\n    if len(tops) > 0:", "piece": "while k > 0:"}
{"function_name": "approximation", "function_define": "    cover = []\n    edges = self.edges()\n    while edges:", "piece": "edges = self.edges()"}
{"function_name": "extractProm", "function_define": "    http://www.gencodegenes.org\n    in a new GFF file.\n    Parameters", "piece": "in a new GFF file."}
{"function_name": "findpeer", "function_define": "    Leaves socket in ESI.\"\"\"\n    if os == 'linux':\n    if port == None:", "piece": "if os == 'linux':"}
{"function_name": "train_ctl", "function_define": "    momentum = params['momentum']\n    data_dir = params['data_dir']\n    num_iter = params['num_iter']", "piece": "data_dir = params['data_dir']"}
{"function_name": "train_step", "function_define": "    images, labels = inputs\n    with tf.GradientTape() as tape:\n    loss_copy = loss", "piece": "with tf.GradientTape() as tape:"}
{"function_name": "replace_vars", "function_define": "    assert isinstance(instr, str)\n    newstr = copy.copy(instr)\n    miscutils.fwdebug_print('BEG')", "piece": "newstr = copy.copy(instr)"}
{"function_name": "segwit_preimage", "function_define": "    hashPrevouts = b'\\x00' * 32\n    hashSequence = b'\\x00' * 32\n    hashOutputs = b'\\x00' * 32", "piece": "hashSequence = b'\\x00' * 32"}
{"function_name": "_sc_deserialize", "function_define": "    if num_ins != 0:\n    flag = ord(sio.read(1))\n    witness = []", "piece": "flag = ord(sio.read(1))"}
{"function_name": "middleNode", "function_define": "    len_ = 1\n    temp = head\n    while temp.next:", "piece": "temp = head"}
{"function_name": "del_arg_op", "function_define": "    starti = endi = 0\n    for i in range(0, len(op)):\n    if op[i] == '(':", "piece": "for i in range(0, len(op)):"}
{"function_name": "dealarg_for", "function_define": "    starti = endi = 0\n    left = right = 0\n    ret = ''", "piece": "left = right = 0"}
{"function_name": "dealarg_call", "function_define": "    starti = endi = 0\n    left = right = 0\n    ret = ''", "piece": "left = right = 0"}
{"function_name": "deallist", "function_define": "    starti = endi = 0\n    for i in range(0, len(ty)):\n    if ty[i] == '[':", "piece": "for i in range(0, len(ty)):"}
{"function_name": "del_multi_arg", "function_define": "    si = ei = 0\n    for i in range(0, len(ty)):\n    if ty[i] == '(':", "piece": "for i in range(0, len(ty)):"}
{"function_name": "GetMiddleStr", "function_define": "    if startIndex >= 0:\n    startIndex += len(startStr)\n    endIndex = content.index(endStr)", "piece": "startIndex += len(startStr)"}
{"function_name": "dealtuple", "function_define": "    my = re.sub(' ', '', ty)\n    my = my[1:-1]\n    lsmy = my.split(',')", "piece": "my = my[1:-1]"}
{"function_name": "findcircle_call", "function_define": "    global fcall\n    fcall = ''\n    tempy = recheck(tempy)", "piece": "fcall = ''"}
{"function_name": "del_call", "function_define": "    call = ''\n    if len(calls) > 0:\n    call = calls[0]", "piece": "if len(calls) > 0:"}
{"function_name": "findcircle", "function_define": "    global fresult\n    lsy = tempy.split('-->')\n    for i in range(0, len(lsy)):", "piece": "lsy = tempy.split('-->')"}
{"function_name": "finalcheck", "function_define": "    s = re.sub('\\\\*\\\\*', '', s)\n    s = re.sub('\\\\*args', 'args', s)\n    s = re.sub('\\n', '', s)", "piece": "s = re.sub('\\\\*args', 'args', s)"}
{"function_name": "get_tosim_score", "function_define": "    if ' ' in maxflow:\n    flows = maxflow.split(' ')\n    for flow in flows:", "piece": "flows = maxflow.split(' ')"}
{"function_name": "standard", "function_define": "    scs = scsk\n    data = []\n    for k in scs.keys():", "piece": "data = []"}
{"function_name": "get_ngram_scores", "function_define": "    ngramscore = {}\n    for flow in flows:\n    s = s + flow + '\\n'", "piece": "for flow in flows:"}
{"function_name": "get_ngram_score", "function_define": "    flows = []\n    if baseflag == 1:\n    for api in apis:", "piece": "if baseflag == 1:"}
{"function_name": "get_api_scores", "function_define": "    dataflow_ngram_score = {}\n    basetype = ''\n    baseflag = 0", "piece": "basetype = ''"}
{"function_name": "get_tosim_scores", "function_define": "    tosim_scores = {}\n    for api in apis:\n    continue", "piece": "for api in apis:"}
{"function_name": "show_process", "function_define": "    if i is not None:\n    self.i = i\n    self.i += 1", "piece": "self.i = i"}
{"function_name": "logger_factory", "function_define": "    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    logger.addHandler(file_handler)", "piece": "logger.setLevel(logging.INFO)"}
{"function_name": "spiral_stc_cpp", "function_define": "    num_free = 0\n    for i in range(img.shape[0]):\n    for j in range(img.shape[1]):", "piece": "for i in range(img.shape[0]):"}
{"function_name": "topography", "function_define": "    b = -1000.0\n    if rsq < rsq_pin:\n    b = -200.0", "piece": "if rsq < rsq_pin:"}
{"function_name": "thickness", "function_define": "    h = 600.0\n    h = h - 300 * y / L\n    if y > L:", "piece": "h = h - 300 * y / L"}
{"function_name": "read_wave", "function_define": "    num_channels = wf.getnchannels()\n    assert num_channels == 1\n    sample_width = wf.getsampwidth()", "piece": "assert num_channels == 1"}
{"function_name": "frame_generator", "function_define": "    the sample rate.\n    offset = 0\n    timestamp = 0.0", "piece": "offset = 0"}
{"function_name": "vad_collector", "function_define": "    the voiced audio.\n    voiced frames.\n    Arguments:", "piece": "voiced frames."}
{"function_name": "get_pause_masks", "function_define": "    frame_duration_ms = 30\n    vad = webrtcvad.Vad()\n    frames = list(frames)", "piece": "vad = webrtcvad.Vad()"}
{"function_name": "prepare_data_new", "function_define": "    Prepare all data\n    if 'ADReSS' in dataset_dir:\n    max_len = 800", "piece": "if 'ADReSS' in dataset_dir:"}
{"function_name": "letter_to_number", "function_define": "    Arguments:\n    letter (str): Letter to convert.\n    Returns:", "piece": "letter (str): Letter to convert."}
{"function_name": "number_to_letter", "function_define": "    Arguments:\n    Returns:\n    letter = chr(number + 65)", "piece": "Returns:"}
{"function_name": "caeser_shift", "function_define": "    Arguments:\n    Returns:\n    if type(letter) != str:", "piece": "Returns:"}
{"function_name": "press_key", "function_define": "    properties of the EnigmaMachine.\n    Arguments:\n    letter (str): Letter pressed.", "piece": "Arguments:"}
{"function_name": "encrypt_message", "function_define": "    Arguments:\n    Returns:\n    if type(message) != str:", "piece": "Returns:"}
{"function_name": "map_letter", "function_define": "    Arguments:\n    Returns:\n    the plugboard.", "piece": "Returns:"}
{"function_name": "search_windows", "function_define": "    on_windows = []\n    for window in windows:\n    if prediction == 1:", "piece": "for window in windows:"}
{"function_name": "set_left", "function_define": "    self.left = node\n    if node:\n    node.parent = self", "piece": "if node:"}
{"function_name": "set_right", "function_define": "    self.right = node\n    if node:\n    node.parent = self", "piece": "if node:"}
{"function_name": "preorder_iter", "function_define": "    if self.is_empty():\n    raise StopIteration()\n    if self.has_left():", "piece": "raise StopIteration()"}
{"function_name": "rotate_to_right", "function_define": "    if not self.left:\n    new_root = self.left\n    self.set_left(new_root.right)", "piece": "new_root = self.left"}
{"function_name": "rotate_to_left", "function_define": "    if not self.right:\n    new_root = self.right\n    self.set_right(new_root.left)", "piece": "new_root = self.right"}
{"function_name": "balanced_insert", "function_define": "    ret = self.insert(x)\n    check_node = ret.parent or ret\n    while check_node:", "piece": "check_node = ret.parent or ret"}
{"function_name": "parsePage", "function_define": "    sel = Selector(response)\n    pubTime = '2020-09-01'\n    category = 2", "piece": "pubTime = '2020-09-01'"}
{"function_name": "_read_header", "function_define": "    headerdict = {}\n    parts = line.split('=')\n    if len(parts) == 1:", "piece": "parts = line.split('=')"}
{"function_name": "_extract_header", "function_define": "    header = Header()\n    if 'date' in headerdict:\n    header.date = dt.date()", "piece": "if 'date' in headerdict:"}
{"function_name": "write_h5", "function_define": "    f = h5py.File(filename, 'w')\n    for key, value in d.items():\n    f.close()", "piece": "for key, value in d.items():"}
{"function_name": "load_trajectory", "function_define": "    with open(filename) as f:\n    lines = f.readlines()\n    pool = mp.Pool()", "piece": "lines = f.readlines()"}
{"function_name": "fill_missing", "function_define": "    T, N, D = data.shape\n    df = pd.DataFrame(data)\n    df = df.fillna(method='pad')", "piece": "df = pd.DataFrame(data)"}
{"function_name": "circle_data_gui", "function_define": "    window = tkinter.Tk()\n    canvas.pack()\n    radius_input.focus()", "piece": "canvas.pack()"}
{"function_name": "__display_gif", "function_define": "    while True:\n    image.seek(frame)\n    print(self.__draw_image(image))", "piece": "image.seek(frame)"}
{"function_name": "draw_image", "function_define": "    self.__display_gif(image)\n    print(self.__draw_image(image))\n    finally:", "piece": "print(self.__draw_image(image))"}
{"function_name": "__draw_image", "function_define": "    if self.size:\n    image = image.resize(self.size)\n    width, _ = image.size", "piece": "image = image.resize(self.size)"}
{"function_name": "from_url", "function_define": "    if not isinstance(url, str):\n    parsed_url = urlparse(url)\n    if response.status_code == 404:", "piece": "parsed_url = urlparse(url)"}
{"function_name": "label_images", "function_define": "    areas_all = []\n    cleared = clear_border(image_th)\n    image_labeled = label(cleared)", "piece": "cleared = clear_border(image_th)"}
{"function_name": "https_middleware", "function_define": "    HTTPS. By default:\n    headers = DEFAULT_MATCH_HEADERS\n    if match_headers is not None:", "piece": "headers = DEFAULT_MATCH_HEADERS"}
{"function_name": "sample_fold", "function_define": "    large structure).\n    of the Markov chain.\n    Returns:", "piece": "of the Markov chain."}
{"function_name": "sample_chain", "function_define": "    instance (`kernel`).\n    increase memory requirements.\n    of the Markov chain.", "piece": "increase memory requirements."}
{"function_name": "createTask", "function_define": "    title = form.title.data\n    priority = form.priority.data\n    shortdesc = form.shortdesc.data", "piece": "priority = form.priority.data"}
{"function_name": "add_post", "function_define": "    context = {}\n    context['nav_active'] = 'posts'\n    form = PostForm()", "piece": "context['nav_active'] = 'posts'"}
{"function_name": "edit_post", "function_define": "    context = {}\n    context['nav_active'] = 'posts'\n    context['post'] = post", "piece": "context['nav_active'] = 'posts'"}
{"function_name": "delete_post", "function_define": "    context = {}\n    context['nav_active'] = 'posts'\n    post.delete()", "piece": "context['nav_active'] = 'posts'"}
{"function_name": "categories", "function_define": "    context = {}\n    page = request.GET.get('page')\n    except PageNotAnInteger:", "piece": "page = request.GET.get('page')"}
{"function_name": "add_category", "function_define": "    context = {}\n    form = CategoryForm()\n    if request.method == 'POST':", "piece": "form = CategoryForm()"}
{"function_name": "edit_category", "function_define": "    context = {}\n    context['category'] = category\n    if request.method == 'POST':", "piece": "context['category'] = category"}
{"function_name": "edit_tag", "function_define": "    context = {}\n    context['nav_active'] = 'tags'\n    tag = Tag.objects.get(pk=tag_id)", "piece": "context['nav_active'] = 'tags'"}
{"function_name": "delete_tag", "function_define": "    context = {}\n    context['nav_active'] = 'tags'\n    tag = Tag.objects.get(pk=tag_id)", "piece": "context['nav_active'] = 'tags'"}
{"function_name": "get_top_movies", "function_define": "    html = retrieve(top_url)\n    root = etree.HTML(html)\n    continue", "piece": "root = etree.HTML(html)"}
{"function_name": "get_movie", "function_define": "    html = retrieve(movie_url)\n    root = etree.HTML(html)\n    actor_name = a.text", "piece": "root = etree.HTML(html)"}
{"function_name": "get_actor", "function_define": "    html = retrieve(actor_url)\n    root = etree.HTML(html)\n    day, month, year = m.groups()", "piece": "root = etree.HTML(html)"}
{"function_name": "retrieve", "function_define": "    if not cache_path.is_file():\n    r.raise_for_status()\n    cache_path.write_text(r.text)", "piece": "r.raise_for_status()"}
{"function_name": "post_init", "function_define": "    ICP = env['ir.config_parameter']\n    val = ICP.get_param(key)\n    ICP.set_param(key, val, groups)", "piece": "val = ICP.get_param(key)"}
{"function_name": "get_phone_number", "function_define": "    if not subscriber.phone:\n    oas.state = state\n    oas.save()", "piece": "oas.state = state"}
{"function_name": "make_choose", "function_define": "    fact = factorial(mod, n)\n    nonlocal fact, ifact\n    if k < 0 or n < k:", "piece": "nonlocal fact, ifact"}
{"function_name": "create_repo", "function_define": "    pkgs = []\n    for spec in SPECS:\n    pkg.epoch = spec.epoch", "piece": "for spec in SPECS:"}
{"function_name": "compute_rackspec", "function_define": "    rackspec = {}\n    if stype == 'stack':\n    beams = plan['skeleton']['beam']", "piece": "if stype == 'stack':"}
{"function_name": "run_wrapper", "function_define": "    Arguments\n    threads    -- usable threads\n    run = job_rule.run_func", "piece": "threads    -- usable threads"}
{"function_name": "printjob", "function_define": "    super().printjob(job)\n    if job.is_group():\n    for j in job.jobs:", "piece": "if job.is_group():"}
{"function_name": "get_job_args", "function_define": "    waitfiles_parameter = ''\n    if self.assume_shared_fs:\n    wait_for_files = []", "piece": "if self.assume_shared_fs:"}
{"function_name": "format_job_exec", "function_define": "    if prefix:\n    prefix += ' &&'\n    if suffix:", "piece": "prefix += ' &&'"}
{"function_name": "run_group_job", "function_define": "    while True:\n    n_finished = 0\n    for f in futures:", "piece": "n_finished = 0"}
{"function_name": "cached_or_run", "function_define": "    if to_cache:\n    except CacheMissException:\n    run_func(*args)", "piece": "except CacheMissException:"}
{"function_name": "write_jobscript", "function_define": "    except KeyError as e:\n    if self.is_default_jobscript:\n    with open(jobscript, 'w') as f:", "piece": "if self.is_default_jobscript:"}
{"function_name": "cluster_params", "function_define": "    if isinstance(value, str):\n    except NameError as e:\n    if job.is_group():", "piece": "except NameError as e:"}
{"function_name": "_launch_sidecar", "function_define": "    buf = process.stdout.readline()\n    sys.stdout.write(buf)\n    buf = process.stdout.readline()", "piece": "sys.stdout.write(buf)"}
{"function_name": "_wait_for_jobs", "function_define": "    from tibanna.core import API\n    while True:\n    with self.lock:", "piece": "while True:"}
{"function_name": "register_secret", "function_define": "    import kubernetes.client\n    secret.type = 'Opaque'\n    secret.data = {}", "piece": "secret.type = 'Opaque'"}
{"function_name": "split_filename", "function_define": "    f = os.path.abspath(filename)\n    if checkdir:\n    checkdir = checkdir.rstrip('/')", "piece": "if checkdir:"}
{"function_name": "copy_stdout", "function_define": "    buf = process.stdout.readline()\n    sys.stdout.write(buf)\n    buf = process.stdout.readline()", "piece": "sys.stdout.write(buf)"}
{"function_name": "job_status", "function_define": "    os.remove(active_job.jobscript)\n    os.remove(active_job.jobfailed)\n    os.remove(active_job.jobscript)", "piece": "os.remove(active_job.jobfailed)"}
{"function_name": "test_save_single", "function_define": "    input = {'myset': self.df}\n    result = self.loader.etl(input)\n    self.assertIs(input, result)", "piece": "result = self.loader.etl(input)"}
{"function_name": "test_save_many", "function_define": "    print(args)\n    self.assertEqual(len(args), 1)\n    datasets = args[0]", "piece": "self.assertEqual(len(args), 1)"}
{"function_name": "_raise_error", "function_define": "    Raise an error response.\n    nested function calls.\n    Parameters", "piece": "nested function calls."}
{"function_name": "_constants", "function_define": "    data = {}\n    if callable(v):\n    v = v(request)", "piece": "if callable(v):"}
{"function_name": "includeme", "function_define": "    settings = config.get_settings()\n    config.include('pyramid_tm')\n    config.include('pyramid_beaker')", "piece": "config.include('pyramid_tm')"}
{"function_name": "demultiplex", "function_define": "    out_handles = {}\n    if sample:\n    count = 0", "piece": "if sample:"}
{"function_name": "smooth_mae_loss", "function_define": "    input (Tensors):\n    target (Tensor):\n    beta (float):", "piece": "target (Tensor):"}
{"function_name": "format_name", "function_define": "    name = ''\n    name += f_name.title()\n    name += ' '", "piece": "name += f_name.title()"}
{"function_name": "parse_nodes_data", "function_define": "    for node_data in data:\n    node = GNS3Node.load(node_data)\n    name_to_node[node.name] = node", "piece": "node = GNS3Node.load(node_data)"}
{"function_name": "visit_revealjs", "function_define": "    section_attr = {}\n    if node.get('id'):\n    for attr in attr_list:", "piece": "if node.get('id'):"}
{"function_name": "load_taskclass", "function_define": "    if not taskpath:\n    if isinstance(taskpath, type):\n    if issubclass(taskpath, Task):", "piece": "if isinstance(taskpath, type):"}
{"function_name": "get_proxy", "function_define": "    if proxycls is None:\n    proxycls = ParentProxy\n    proxy = proxycls(self)", "piece": "proxycls = ParentProxy"}
{"function_name": "_register_check", "function_define": "    if not dest:\n    if dest.startswith('_'):\n    if dest in self._fwddefs:", "piece": "if dest.startswith('_'):"}
{"function_name": "_add_transfer", "function_define": "    if dest not in defs:\n    cont[dest] = value\n    import pdb", "piece": "cont[dest] = value"}
{"function_name": "pre_perform", "function_define": "    if targs.log:\n    self.add_logger(targs.log)\n    if targs.verbose:", "piece": "self.add_logger(targs.log)"}
{"function_name": "post_perform", "function_define": "    if targs.webapp:\n    appath = targs.webapp\n    if wait2close:", "piece": "appath = targs.webapp"}
{"function_name": "teardown_request", "function_define": "    if exception:\n    db.session.rollback()\n    db.session.remove()", "piece": "db.session.rollback()"}
{"function_name": "project_csv", "function_define": "    if project is None:\n    df = project.get_dataframe()\n    res = make_response(df.to_csv())", "piece": "df = project.get_dataframe()"}
{"function_name": "task_edit", "function_define": "    if task is None:\n    if task.hits:\n    task.name = request.json['name']", "piece": "if task.hits:"}
{"function_name": "task_delete", "function_define": "    if task is None:\n    if task.hits:\n    db.session.delete(task)", "piece": "if task.hits:"}
{"function_name": "response_submit", "function_define": "    lastResponse.data = request.json\n    lastResponse.submitted = True\n    db.session.commit()", "piece": "lastResponse.submitted = True"}
{"function_name": "response_chunk", "function_define": "    response_index = 0\n    if len(response.chunks) > 0:\n    if chunk is not None:", "piece": "if len(response.chunks) > 0:"}
{"function_name": "start_evaluation", "function_define": "    if 'type' in information:\n    if 'restart' in information:\n    response['iterations'] = 400", "piece": "if 'restart' in information:"}
{"function_name": "anneal_DS", "function_define": "    T_min = 0.0005\n    alpha = 0.9\n    c = 0.25", "piece": "alpha = 0.9"}
{"function_name": "neighbor", "function_define": "    assert len(solution) > 0\n    old_solution = solution\n    new_solution = old_solution", "piece": "old_solution = solution"}
{"function_name": "imageView", "function_define": "    form = None\n    filename = ''\n    user = request.user.id", "piece": "filename = ''"}
{"function_name": "vic_imageView", "function_define": "    form = None\n    userid = kwargs.get('userid')\n    if not tags:", "piece": "userid = kwargs.get('userid')"}
{"function_name": "validateToken", "function_define": "    if token:\n    split = token.split('.')[1]\n    decoded = {}", "piece": "split = token.split('.')[1]"}
{"function_name": "random_distort", "function_define": "    CHW and RGB format.\n    The default value is :obj:`32`.\n    The default value is :obj:`0.5`.", "piece": "The default value is :obj:`32`."}
{"function_name": "random_expand", "function_define": "    CHW format.\n    paper, this value is 4.\n    If it is :class:`numpy.ndarray`,", "piece": "paper, this value is 4."}
{"function_name": "translate_bbox", "function_define": "    bottom right vertices.\n    Returns:\n    out_bbox = bbox.copy()", "piece": "Returns:"}
{"function_name": "crop_bbox", "function_define": "    bottom right vertices.\n    indices of kept bounding boxes.\n    Returns:", "piece": "indices of kept bounding boxes."}
{"function_name": "_slice_to_bounds", "function_define": "    if slice_ is None:\n    if slice_.start is None:\n    l = slice_.start", "piece": "if slice_.start is None:"}
{"function_name": "resize_bbox", "function_define": "    bottom right vertices.\n    of the image before resized.\n    of the image after resized.", "piece": "of the image before resized."}
{"function_name": "random_flip", "function_define": "    CHW format.\n    Returns:\n    If :obj:`return_param = False`,", "piece": "Returns:"}
{"function_name": "flip_bbox", "function_define": "    bottom right vertices.\n    of the image before resized.\n    an image.", "piece": "of the image before resized."}
{"function_name": "load_image", "function_define": "    img = Image.open(filename)\n    if size is not None:\n    elif scale is not None:", "piece": "if size is not None:"}
{"function_name": "find_chess", "function_define": "    status = None\n    print('chess...')\n    objpoints = []", "piece": "print('chess...')"}
{"function_name": "testbench", "function_define": "    count_frame = 0\n    while 1:\n    print('calibrate state...')", "piece": "while 1:"}
{"function_name": "getPhoto", "function_define": "    while 1:\n    frame_line = frame_input\n    cv2.imshow('Video', frame_line)", "piece": "frame_line = frame_input"}
{"function_name": "run_request", "function_define": "    request = TestRequest(**params)\n    context = wsgiapp.init(request)\n    wsgiapp.run(context)", "piece": "context = wsgiapp.init(request)"}
{"function_name": "testNoAuth", "function_define": "    request = self.run_request()\n    assert not request.user.valid\n    assert status[:3] == '200'", "piece": "assert not request.user.valid"}
{"function_name": "testAnonSession", "function_define": "    cookie = ''\n    trail_expected = []\n    first = True", "piece": "trail_expected = []"}
{"function_name": "get_change", "function_define": "    if m in memo:\n    if m < 0:\n    if m == 0:", "piece": "if m < 0:"}
{"function_name": "platform_setup", "function_define": "    platform = factory(conf)\n    platform.setup('all_containers')\n    yield platform", "piece": "platform.setup('all_containers')"}
{"function_name": "resetWeights", "function_define": "    resetWeight(model.fc1)\n    resetWeight(model.fc2)\n    resetWeight(model.fc3)", "piece": "resetWeight(model.fc2)"}
{"function_name": "nextPage", "function_define": "    temp = connection.cursor()\n    showlist[0] = self.text1.text()\n    showlist[1] = self.text2.text()", "piece": "showlist[0] = self.text1.text()"}
{"function_name": "_load_state", "function_define": "    model = model_state.get('model')\n    self.model = model\n    self._model_kwargs = kwargs", "piece": "self.model = model"}
{"function_name": "unmatched", "function_define": "    ensure_login()\n    plex = factory.plex_api()\n    trakt = factory.trakt_api()", "piece": "plex = factory.plex_api()"}
{"function_name": "get_single_input", "function_define": "    query (str): The query\n    doc (str): The document\n    Returns:", "piece": "doc (str): The document"}
{"function_name": "make_vae", "function_define": "    z_mean = Dense(latent_dim)(h)\n    z_mean, z_log_sigma = args\n    h_decoded = decoder_h(z)", "piece": "z_mean, z_log_sigma = args"}
{"function_name": "init_user", "function_define": "    except StopIteration:\n    existing_cfg = None\n    if existing_cfg:", "piece": "existing_cfg = None"}
{"function_name": "cusolverDnCreate", "function_define": "    Create cuSolverDn context.\n    handle : int\n    cuSolverDn context.", "piece": "handle : int"}
{"function_name": "cusolverDnSgesvd", "function_define": "    References\n    jobu = jobu.encode('ascii')\n    jobvt = jobvt.encode('ascii')", "piece": "jobu = jobu.encode('ascii')"}
{"function_name": "cusolverDnDgesvd", "function_define": "    References\n    jobu = jobu.encode('ascii')\n    jobvt = jobvt.encode('ascii')", "piece": "jobu = jobu.encode('ascii')"}
{"function_name": "cusolverDnCgesvd", "function_define": "    References\n    jobu = jobu.encode('ascii')\n    jobvt = jobvt.encode('ascii')", "piece": "jobu = jobu.encode('ascii')"}
{"function_name": "cusolverDnZgesvd", "function_define": "    References\n    jobu = jobu.encode('ascii')\n    jobvt = jobvt.encode('ascii')", "piece": "jobu = jobu.encode('ascii')"}
{"function_name": "spacy_tokenizer", "function_define": "    cleaned_tokens = []\n    for token in tokens:\n    if not token.is_punct:", "piece": "for token in tokens:"}
{"function_name": "topic_tokenizer", "function_define": "    cleaned_tokens = []\n    for token in tokens:\n    if not token.is_punct:", "piece": "for token in tokens:"}
{"function_name": "topic_tokenizer2", "function_define": "    returns lemmas. \"\"\"\n    cleaned_tokens = []\n    for token in tokens:", "piece": "cleaned_tokens = []"}
{"function_name": "lcd_output", "function_define": "    if self._lcd is None:\n    self._lcd.clear()\n    if text:", "piece": "self._lcd.clear()"}
{"function_name": "verify_email", "function_define": "    if not self.email_verified:\n    secret = uuid.uuid4().hex[:20]\n    self.email_secret = secret", "piece": "secret = uuid.uuid4().hex[:20]"}
{"function_name": "get_idx_data", "function_define": "    self.valid_day_idx = 0\n    self.valid_city_idx += 1\n    self.valid_day_idx += 1", "piece": "self.valid_city_idx += 1"}
{"function_name": "run_dialog", "function_define": "    trop de lignes)\"\"\"\n    pages = txt.split('\\n\\n')\n    for page in pages:", "piece": "pages = txt.split('\\n\\n')"}
{"function_name": "resize_line", "function_define": "    if pile is None:\n    pile = []\n    assert isinstance(pile, list)", "piece": "pile = []"}
{"function_name": "idct_basis_2d", "function_define": "    Returns:\n    ODCT = np.kron(ODCT, ODCT)\n    ODCT = ODCT[:, :num_basis]", "piece": "ODCT = np.kron(ODCT, ODCT)"}
{"function_name": "normalize_shape", "function_define": "    if shape is None:\n    raise TypeError('shape is None')\n    shape = (int(shape),)", "piece": "raise TypeError('shape is None')"}
{"function_name": "guess_chunks", "function_define": "    ndims = len(shape)\n    if target_size > CHUNK_MAX:\n    target_size = CHUNK_MAX", "piece": "if target_size > CHUNK_MAX:"}
{"function_name": "normalize_chunks", "function_define": "    with the given `shape`.\"\"\"\n    chunks = (int(chunks),)\n    if len(chunks) > len(shape):", "piece": "chunks = (int(chunks),)"}
{"function_name": "is_total_slice", "function_define": "    class.\"\"\"\n    if item == Ellipsis:\n    if item == slice(None):", "piece": "if item == Ellipsis:"}
{"function_name": "default_test", "function_define": "    with tc.subTest('queue_001'):\n    q = q_cls(A1)\n    q.push(2)", "piece": "q = q_cls(A1)"}
{"function_name": "_check_xy", "function_define": "    if y is None:\n    if x is None:\n    x = np.arange(len(y))", "piece": "if x is None:"}
{"function_name": "add_curve", "function_define": "    Parameters\n    size: float, default is 7\n    Symbol size.", "piece": "size: float, default is 7"}
{"function_name": "add_scatter", "function_define": "    Parameters\n    size: float, default is 7\n    Symbol size.", "piece": "size: float, default is 7"}
{"function_name": "add_hist", "function_define": "    Parameters\n    data : array-like\n    Data for histogram constrction.", "piece": "data : array-like"}
{"function_name": "add_infline", "function_define": "    if kwargs:\n    if args:\n    keys = set(kwargs.keys())", "piece": "if args:"}
{"function_name": "_swap_items", "function_define": "    item0 = self._items[pos0]\n    item1 = self._items[pos1]\n    self._items[pos0] = item1", "piece": "item1 = self._items[pos1]"}
{"function_name": "_move_item", "function_define": "    if source < destination:\n    destination -= 1\n    item = self._items.pop(source)", "piece": "destination -= 1"}
{"function_name": "_remove_item", "function_define": "    if isinstance(item, LayerItem):\n    i = self._items.index(item)\n    elif isinstance(item, int):", "piece": "i = self._items.index(item)"}
{"function_name": "hoverEvent", "function_define": "    if ev.enter:\n    self.button.show()\n    if ev.exit:", "piece": "self.button.show()"}
{"function_name": "_read_options", "function_define": "    options_members = {}\n    for base in reversed(bases):\n    if hasattr(base, '_options'):", "piece": "for base in reversed(bases):"}
{"function_name": "get_mock_object", "function_define": "    context = Context._make(context)\n    context.memo.add(cls)\n    values = {}", "piece": "context.memo.add(cls)"}
{"function_name": "readProd", "function_define": "    class sar:\n    prod = product\n    name = product.getName()", "piece": "prod = product"}
{"function_name": "setup_logger", "function_define": "    logger = logging.getLogger(name)\n    logger.setLevel(level)\n    logger.addHandler(file_handler)", "piece": "logger.setLevel(level)"}
{"function_name": "rand_bbox", "function_define": "    if len(size) == 4:\n    W = size[2]\n    H = size[3]", "piece": "W = size[2]"}
{"function_name": "draw_pic_single", "function_define": "    mydata = mydata[:, [0, 2, 1]]\n    x = mydata[:, 0]\n    y = mydata[:, 1]", "piece": "x = mydata[:, 0]"}
{"function_name": "draw_pic_gt_pred", "function_define": "    gt = gt[:, [0, 2, 1]]\n    pred = pred[:, [0, 2, 1]]\n    plt.figure()", "piece": "pred = pred[:, [0, 2, 1]]"}
{"function_name": "pgd_attack", "function_define": "    if verbose:\n    if loss == 'xent':\n    if target_class is None:", "piece": "if loss == 'xent':"}
{"function_name": "kthGrammar", "function_define": "    if N == 1:\n    if K == 2:\n    if K <= 1 << N - 2:", "piece": "if K == 2:"}
{"function_name": "new_block", "function_define": "    if block_type is None:\n    rand_block = block_type(3)\n    self.active_block = rand_block", "piece": "rand_block = block_type(3)"}
{"function_name": "add_lines", "function_define": "    for _ in range(n):\n    self.board.add_line()\n    if not self.up():", "piece": "self.board.add_line()"}
{"function_name": "makeTrie", "function_define": "    trie, r_trie = (dict(), dict())\n    for word in words:\n    l = len(word)", "piece": "for word in words:"}
{"function_name": "searchTrie", "function_define": "    l = len(query)\n    if query[0] != '?':\n    if trie.get(l) is None:", "piece": "if query[0] != '?':"}
{"function_name": "countWords", "function_define": "    if isReverse is None:\n    if isReverse:\n    query = query[::-1]", "piece": "if isReverse:"}
{"function_name": "getLastPrice", "function_define": "    lines = f.read().splitlines()\n    lastLine = lines[-1]\n    lastPrice = lastLineItems[1]", "piece": "lastLine = lines[-1]"}
{"function_name": "get_results", "function_define": "    data = {}\n    with open(filename) as f:\n    for l in f:", "piece": "with open(filename) as f:"}
{"function_name": "test_printf", "function_define": "    k = init_kernel()\n    k.stack.push(443)\n    k.stack.push(20)", "piece": "k.stack.push(443)"}
{"function_name": "send_icon", "function_define": "    for row in image:\n    serial.write(bytes(row))\n    while not is_done():", "piece": "serial.write(bytes(row))"}
{"function_name": "send_text", "function_define": "    serial.write(str.encode(text))\n    while not is_done():\n    print('TEXT DRAWN')", "piece": "while not is_done():"}
{"function_name": "fibo_dos", "function_define": "    converged = False\n    while not converged:\n    num += 1", "piece": "while not converged:"}
{"function_name": "mydicts2", "function_define": "    myd = {}\n    for trace in sorted(self):\n    d = trace.mydict", "piece": "for trace in sorted(self):"}
{"function_name": "instantiate", "function_define": "    assert Miscs.is_expr(term), term\n    exprs = set()\n    if ntraces is None:", "piece": "exprs = set()"}
{"function_name": "padzeros", "function_define": "    new_traces = Traces()\n    for t in self:\n    tss = set(t.ss)", "piece": "for t in self:"}
{"function_name": "get_distMat", "function_define": "    coords = data[:, :2]\n    for i in range(len(coords)):\n    coord = coords[i]", "piece": "for i in range(len(coords)):"}
{"function_name": "get_solDist", "function_define": "    total_distance = 0\n    for route in routes:\n    r = [0] + route + [0]", "piece": "for route in routes:"}
{"function_name": "parse_vrp_answer", "function_define": "    routes = []\n    start = False\n    for line in f:", "piece": "start = False"}
{"function_name": "getQADict", "function_define": "    result = {}\n    if folderPath_q[-1] != '/':\n    if folderPath_a[-1] != '/':", "piece": "if folderPath_q[-1] != '/':"}
{"function_name": "find_ruins", "function_define": "    for i in range(len(routes)):\n    if c in routes[i]:\n    nodes = []", "piece": "if c in routes[i]:"}
{"function_name": "find_degree", "function_define": "    ab = b - a\n    bc = c - b\n    except RuntimeError:", "piece": "bc = c - b"}
{"function_name": "get_embeddings", "function_define": "    return: \u542b depot (\u7b2c\u96f6\u4e2a data)\n    d_max = np.max(distMat)\n    if _e is None:", "piece": "d_max = np.max(distMat)"}
{"function_name": "getValid_legacy", "function_define": "    complete_r = [0] + r + [0]\n    valids = []\n    tmp_t = 0", "piece": "valids = []"}
{"function_name": "geoinfotohex", "function_define": "    if lat < 0:\n    nlat = nlat * -1\n    if long < 0:", "piece": "nlat = nlat * -1"}
{"function_name": "bfhashtohex", "function_define": "    stemp = bfhash\n    keyval = stemp[:16]\n    inval = stemp[16:32]", "piece": "keyval = stemp[:16]"}
{"function_name": "generatecoinkey", "function_define": "    if len(password) == 0:\n    if len(gps) == 0:\n    centlatlong = gps.split(',')", "piece": "if len(gps) == 0:"}
{"function_name": "fresh_flt_file", "function_define": "    Parameters\n    preserve_dq : bool\n    path : str", "piece": "preserve_dq : bool"}
{"function_name": "clip_lists", "function_define": "    in either direction\n    import scipy.spatial\n    N = output.shape[0]", "piece": "import scipy.spatial"}
{"function_name": "match_lists", "function_define": "    import copy\n    from astropy.table import Table\n    import skimage.transform", "piece": "from astropy.table import Table"}
{"function_name": "table_to_radec", "function_define": "    if 'X_WORLD' in table.colnames:\n    rc, dc = ('X_WORLD', 'Y_WORLD')\n    rc, dc = ('ra', 'dec')", "piece": "rc, dc = ('X_WORLD', 'Y_WORLD')"}
{"function_name": "table_to_regions", "function_define": "    fp = open(output, 'w')\n    fp.write(header + '\\n')\n    fp.write('fk5\\n')", "piece": "fp.write(header + '\\n')"}
{"function_name": "make_SEP_catalog", "function_define": "    aper_segmask : bool\n    conda environment file.\n    array coordinates.", "piece": "conda environment file."}
{"function_name": "get_seg_iso_flux", "function_define": "    if 'number' in tab.colnames:\n    ids = np.array(tab['number'])\n    ids = np.array(tab['id'])", "piece": "ids = np.array(tab['number'])"}
{"function_name": "make_drz_catalog", "function_define": "    import copy\n    import sewpy\n    if sci is not None:", "piece": "import sewpy"}
{"function_name": "blot_background", "function_define": "    frame = inspect.currentframe()\n    import astropy.io.fits as pyfits\n    import astropy.wcs as pywcs", "piece": "import astropy.io.fits as pyfits"}
{"function_name": "asn_to_dict", "function_define": "    Parameters\n    input_asn : str\n    Filename of the ASN table", "piece": "input_asn : str"}
{"function_name": "get_sdss_catalog", "function_define": "    Parameters\n    ra, dec : float\n    radius : float", "piece": "ra, dec : float"}
{"function_name": "get_irsa_catalog", "function_define": "    Parameters\n    ra, dec : float\n    radius : float", "piece": "ra, dec : float"}
{"function_name": "tweak_align", "function_define": "    Intra-visit shifts (WFC3/IR)\n    frame = inspect.currentframe()\n    for k in grism_matches:", "piece": "frame = inspect.currentframe()"}
{"function_name": "clean_drizzle", "function_define": "    Parameters\n    root : str\n    is_build = False", "piece": "root : str"}
{"function_name": "tweak_flt", "function_define": "    Refine shifts of FLT files\n    import scipy.spatial\n    import sewpy", "piece": "import scipy.spatial"}
{"function_name": "visit_grism_sky", "function_define": "    import numpy.ma\n    import scipy.ndimage as nd\n    frame = inspect.currentframe()", "piece": "import scipy.ndimage as nd"}
{"function_name": "fix_star_centers", "function_define": "    Parameters\n    root : str\n    mag_lim : float", "piece": "root : str"}
{"function_name": "drizzle_overlaps", "function_define": "    Parameters\n    exposure_groups : list\n    parse_visits : bool", "piece": "exposure_groups : list"}
{"function_name": "manual_alignment", "function_define": "    Parameters\n    visit : dict\n    ds9 : `~grizli.ds9.DS9`", "piece": "visit : dict"}
{"function_name": "extract_fits_log", "function_define": "    log = OrderedDict()\n    im = pyfits.open(file)\n    for k in im[0].header:", "piece": "im = pyfits.open(file)"}
{"function_name": "custom_query", "function_define": "    query_result = dict()\n    cur_query_number = 0\n    print('query is a list of list')", "piece": "cur_query_number = 0"}
{"function_name": "get_most_k_sim", "function_define": "    min_rprs = None\n    min_dist = math.inf\n    target_cluster = []", "piece": "min_dist = math.inf"}
{"function_name": "mapping_to_file", "function_define": "    if not outfile:\n    n = numbits\n    Ni = 2 * n", "piece": "n = numbits"}
{"function_name": "IMANGraphNet", "function_define": "    aligner.train()\n    generator.train()\n    discriminator.train()", "piece": "generator.train()"}
{"function_name": "anglevslength", "function_define": "    arc = tdn.arclength(x, y)\n    for i in range(n - 1):\n    angles = np.zeros(len(x))", "piece": "for i in range(n - 1):"}
{"function_name": "get_package_data", "function_define": "    package themselves.\n    filepaths = []\n    for base, filenames in walk:", "piece": "filepaths = []"}
{"function_name": "load_simulated", "function_define": "    obsconf['dataset'] = dataset\n    obsconf['grism'] = grism\n    obsconf['orientat'] = orientat", "piece": "obsconf['grism'] = grism"}
{"function_name": "load_observed", "function_define": "    names = ('filename',)\n    for filename, in tab.iterrows():\n    self.files[img.dataset] = img", "piece": "for filename, in tab.iterrows():"}
{"function_name": "pca_download", "function_define": "    if url is None:\n    status = 'todo'\n    delta = None", "piece": "status = 'todo'"}
{"function_name": "generate_csv", "function_define": "    path = abspath(path)\n    name = basename(path)\n    if not isdir(cases):", "piece": "name = basename(path)"}
{"function_name": "read_rss", "function_define": "    READ RSS\n    info_log('reading rss', True)\n    rss = feedparser.parse(rss_path)", "piece": "info_log('reading rss', True)"}
{"function_name": "sample_datasets", "function_define": "    folds = []\n    for _ in range(n_folds):\n    rest = 1 - train_size", "piece": "for _ in range(n_folds):"}
{"function_name": "hex_dump", "function_define": "    if endianness == 'Iend_BE':\n    end = -1\n    if extra_constraints is None:", "piece": "end = -1"}
{"function_name": "view_data", "function_define": "    global dataframe\n    global stars\n    global j", "piece": "global stars"}
{"function_name": "predict_data", "function_define": "    orbital = float(e2.get())\n    temp = float(e3.get())\n    inclination = float(e4.get())", "piece": "temp = float(e3.get())"}
{"function_name": "prev_view_data", "function_define": "    global dataframe\n    global j\n    if j < 0:", "piece": "global j"}
{"function_name": "ingest_phrases", "function_define": "    their words and ingest them.\n    word_set = set()\n    for phrase in phrases:", "piece": "word_set = set()"}
{"function_name": "train_from_dump", "function_define": "    bow = BOWLanguageModel()\n    if filename.endswith('.txt'):\n    with open(filename, 'r') as f:", "piece": "if filename.endswith('.txt'):"}
{"function_name": "relations", "function_define": "    res = dict(edges=[], nodes=[])\n    nodes = {}\n    node['x'], node['y'] = (x, y)", "piece": "nodes = {}"}
{"function_name": "_load_dataset", "function_define": "    Returns:\n    dataset.\n    if self.test_name is not None:", "piece": "dataset."}
{"function_name": "_preprocess_one", "function_define": "    examples (dict):\n    Returns:\n    audio = example['audio']", "piece": "Returns:"}
{"function_name": "_dump_vocabulary", "function_define": "    dataset (Dataset):\n    vocab['<unk>'] = len(vocab)\n    vocab['<pad>'] = len(vocab)", "piece": "vocab['<unk>'] = len(vocab)"}
{"function_name": "_periodic_flush", "function_define": "    while True:\n    yield self._flush()\n    except Exception:", "piece": "yield self._flush()"}
{"function_name": "test_del_model", "function_define": "    pytest.importorskip('sklearn')\n    assert model_version.has_model\n    model_version.del_model()", "piece": "assert model_version.has_model"}
{"function_name": "get_event", "function_define": "    if source_format == 'geojson':\n    elif source_format == 'shp':\n    if cap_file:", "piece": "elif source_format == 'shp':"}
{"function_name": "test_build_fpn", "function_define": "    shapes = [160, 80, 40, 20]\n    pyramid = FPN()(features)\n    assert p.shape[1] == shape", "piece": "pyramid = FPN()(features)"}
{"function_name": "trans2comm", "function_define": "    Units: everything is in cgs.\n    self.sel_units = 'cgs'\n    self.trans_dx = 30000000.0", "piece": "self.sel_units = 'cgs'"}
{"function_name": "trans2commaxes", "function_define": "    if self.transunits == False:\n    self.trans_dx = 30000000.0\n    self.trans_dy = 30000000.0", "piece": "self.trans_dx = 30000000.0"}
{"function_name": "err_plot", "function_define": "    digits[phys] = digitsp\n    fig, ax = plt.subplots(1, 1)\n    ax.set_aspect('equal')", "piece": "fig, ax = plt.subplots(1, 1)"}
{"function_name": "_init_model", "function_define": "    num_sub_tokens_output = 5\n    if self.use_pretrained_model:\n    config = loaded_config", "piece": "if self.use_pretrained_model:"}
{"function_name": "optimizer", "function_define": "    self.d_model = d_model\n    self.warmup_steps = warmup_steps\n    arg1 = tf.math.rsqrt(step)", "piece": "self.warmup_steps = warmup_steps"}
{"function_name": "forwards", "function_define": "    if run.prerequisites:\n    course.save()\n    run.course = course", "piece": "course.save()"}
{"function_name": "_insert_urls", "function_define": "    resp = ''\n    for u in urls:\n    print('INSERT URLS: ', resp)", "piece": "for u in urls:"}
{"function_name": "upsert_urls", "function_define": "    if self.always_insert:\n    new_urls = []\n    existing_urls = []", "piece": "new_urls = []"}
{"function_name": "make_model", "function_define": "    c = copy.deepcopy\n    for p in model.parameters():\n    if p.dim() > 1:", "piece": "for p in model.parameters():"}
{"function_name": "allpages", "function_define": "    output = []\n    for item in AllPages:\n    temp = {}", "piece": "for item in AllPages:"}
{"function_name": "finalize", "function_define": "    divs = []\n    for x in range(len(doc.hLinks)):\n    divR = Div(*divs)", "piece": "for x in range(len(doc.hLinks)):"}
{"function_name": "setColor", "function_define": "    self.line1.color = color\n    self.line2.color = color\n    self.color = color", "piece": "self.line2.color = color"}
{"function_name": "process_page", "function_define": "    mediawiki_link = str(page)\n    title = page.title()\n    url = page.full_url()", "piece": "title = page.title()"}
{"function_name": "dot_to_json", "function_define": "    import json\n    import networkx\n    import pygraphviz", "piece": "import networkx"}
{"function_name": "lengthOfLIS", "function_define": "    tails = [0] * len(nums)\n    for x in nums:\n    i, j = (0, ans)", "piece": "for x in nums:"}
{"function_name": "process_cell", "function_define": "    src = cell['source']\n    self.apply_cell_macros(src)\n    except RmCellException:", "piece": "self.apply_cell_macros(src)"}
{"function_name": "show_position", "function_define": "    pos = self.click_position\n    msg = 'Coordinates in WGS84\\n'\n    if self.logdir:", "piece": "msg = 'Coordinates in WGS84\\n'"}
{"function_name": "closest_waypoint", "function_define": "    lat, lon = latlon\n    best_distance = -1\n    closest = -1", "piece": "best_distance = -1"}
{"function_name": "move_rally", "function_define": "    a = key.split(' ')\n    i = int(a[1])\n    self.moving_rally = i", "piece": "i = int(a[1])"}
{"function_name": "map_callback", "function_define": "    self.handle_menu_event(obj)\n    self.click_position = obj.latlon\n    self.click_time = time.time()", "piece": "self.click_position = obj.latlon"}
{"function_name": "mavlink_packet", "function_define": "    if m.get_type() == 'HEARTBEAT':\n    self.vehicle_type_name = 'plane'\n    self.vehicle_type_name = 'rover'", "piece": "self.vehicle_type_name = 'plane'"}
{"function_name": "connect_wifi", "function_define": "    import network\n    if not sta_if.isconnected():\n    sta_if.active(True)", "piece": "if not sta_if.isconnected():"}
{"function_name": "http_stream", "function_define": "    import socket\n    s = socket.socket()\n    s.connect(addr)", "piece": "s = socket.socket()"}
{"function_name": "print_forecast", "function_define": "    forecast = []\n    total = 0\n    total += float(value)", "piece": "total = 0"}
{"function_name": "prepare_dataset", "function_define": "    df = dataset.get_dataframe()\n    except Exception as e:\n    for col in required_schema:", "piece": "except Exception as e:"}
{"function_name": "gibbs_difference", "function_define": "    y1 = y[ind == 1]\n    y2 = y[ind == 2]\n    n1 = len(y1)", "piece": "y2 = y[ind == 2]"}
{"function_name": "get_turns", "function_define": "    if __game.state != 'playing':\n    print('gamestate', False)\n    print('active:', True)", "piece": "print('gamestate', False)"}
{"function_name": "gameboard", "function_define": "    for player_name in mock_names:\n    players = []\n    player = get_player()", "piece": "players = []"}
{"function_name": "is_active", "function_define": "    if __game.state != 'playing':\n    print('gamestate', False)\n    print('active:', True)", "piece": "print('gamestate', False)"}
{"function_name": "insideBoard", "function_define": "    Returns:\n    columns = len(board[0])\n    rows = len(board)", "piece": "columns = len(board[0])"}
{"function_name": "legalMove", "function_define": "    Returns:\n    cond1 = board[y][x] == ''\n    cond3 = y == 0", "piece": "cond1 = board[y][x] == ''"}
{"function_name": "timer_callback", "function_define": "    for key, mask in events:\n    self.pub_status()\n    self.pub_laser()", "piece": "self.pub_status()"}
{"function_name": "pub_status", "function_define": "    status_msg = Status()\n    loc_msg = Location()\n    except KeyError:", "piece": "loc_msg = Location()"}
{"function_name": "remove_special", "function_define": "    special characters.\n    mod_string = a_string\n    removal_list = ['<>:\\'\"/\\\\|?!*']", "piece": "mod_string = a_string"}
{"function_name": "art_path_check", "function_define": "    print('Album art not found:')\n    print(' File Name: %s' % a_file)\n    if prompt in ['y', 'Y', '']:", "piece": "print(' File Name: %s' % a_file)"}
{"function_name": "flac_art", "function_define": "    song = mflac.FLAC(flac_file)\n    pic = mflac.Picture()\n    pic.data = self.art_data", "piece": "pic = mflac.Picture()"}
{"function_name": "vorbis_art", "function_define": "    pic = mflac.Picture()\n    pic.data = self.art_data\n    pic.type = 3", "piece": "pic.data = self.art_data"}
{"function_name": "calc_observables", "function_define": "    Returns all correlations.\n    Cout = zeros(10)\n    H = params[0:4]", "piece": "Cout = zeros(10)"}
{"function_name": "fix_instance", "function_define": "    except Exception as exc:\n    self.stdout.write(str(exc))\n    self.stdout.write('\\n')", "piece": "self.stdout.write(str(exc))"}
{"function_name": "process_tweet", "function_define": "    stemmer = PorterStemmer()\n    tweet = re.sub('#', '', tweet)\n    tweets_clean = []", "piece": "tweet = re.sub('#', '', tweet)"}
{"function_name": "build_freqs", "function_define": "    tweets: a list of tweets\n    frequency\n    yslist = np.squeeze(ys).tolist()", "piece": "frequency"}
{"function_name": "get_vectors", "function_define": "    while True:\n    y = np.zeros(V)\n    x = np.zeros(V)", "piece": "y = np.zeros(V)"}
{"function_name": "get_batches", "function_define": "    batch_x = []\n    batch_y = []\n    while len(batch_x) < batch_size:", "piece": "batch_y = []"}
{"function_name": "compute_pca", "function_define": "    pass in: data as 2D NumPy array\n    m, n = data.shape\n    data -= data.mean(axis=0)", "piece": "m, n = data.shape"}
{"function_name": "get_dict", "function_define": "    indices: a list of word indices\n    words = sorted(list(set(data)))\n    n = len(words)", "piece": "words = sorted(list(set(data)))"}
{"function_name": "parse_payload", "function_define": "    if 'message' in payload:\n    elif 'delivery' in payload:\n    elif 'read' in payload:", "piece": "elif 'delivery' in payload:"}
{"function_name": "create_room", "function_define": "    room = self._get_random_name()\n    while room in self._rooms:\n    room = self._get_random_name()", "piece": "while room in self._rooms:"}
{"function_name": "join_room", "function_define": "    if name in self._rooms:\n    self._rooms[name][user] = False\n    raise KeyError('Unknown room.')", "piece": "self._rooms[name][user] = False"}
{"function_name": "broadcast", "function_define": "    for peer in peers:\n    if peer.uuid != sender:\n    peer.write_message(message)", "piece": "if peer.uuid != sender:"}
{"function_name": "map_data_split", "function_define": "    excluded_feats = []\n    if not condition():\n    if len(excluded_feats) > 0:", "piece": "if not condition():"}
{"function_name": "download_file", "function_define": "    Downloading a file from an url.\n    file: filename with path\n    with open(file, 'wb') as f:", "piece": "file: filename with path"}
{"function_name": "trt_payload_in", "function_define": "    res = {}\n    while '{{' in payload:\n    start = payload.index('{{')", "piece": "while '{{' in payload:"}
{"function_name": "crawl_folders", "function_define": "    sequence_set = []\n    for scene in self.scenes:\n    if len(imgs) < sequence_length:", "piece": "for scene in self.scenes:"}
{"function_name": "check_end_game", "function_define": "    print('##')\n    print('##')\n    self.stop()", "piece": "print('##')"}
{"function_name": "next_tick", "function_define": "    self.tick_id += 1\n    print('')\n    for robot in self.robots:", "piece": "print('')"}
{"function_name": "_build_product", "function_define": "    product = None\n    if product_name == FOO_NAME:\n    product = Foo()", "piece": "if product_name == FOO_NAME:"}
{"function_name": "get_skel", "function_define": "    Arguments\n    benchmarking : bool\n    skel : cloudvolume.Skeleton", "piece": "benchmarking : bool"}
{"function_name": "get_df_voxel", "function_define": "    Arguments\n    spacing : :class:`numpy.array`\n    origin : :class:`numpy.array`", "piece": "spacing : :class:`numpy.array`"}
{"function_name": "get_graph", "function_define": "    Arguments\n    Assumed to be np.array([x,y,z])\n    if type(spacing) == np.ndarray:", "piece": "Assumed to be np.array([x,y,z])"}
{"function_name": "get_paths", "function_define": "    Arguments\n    Assumed to be np.array([x,y,z])\n    paths : list", "piece": "Assumed to be np.array([x,y,z])"}
{"function_name": "get_bfs_subgraph", "function_define": "    Arguments\n    node_id : int\n    depth : int", "piece": "node_id : int"}
{"function_name": "get_sub_neuron", "function_define": "    Arguments\n    origin : :class:`numpy.array`\n    Assumed to be np.array([x,y,z])", "piece": "origin : :class:`numpy.array`"}
{"function_name": "_read_swc", "function_define": "    Read a single swc file\n    Arguments:\n    path {string} -- path to file", "piece": "Arguments:"}
{"function_name": "_read_swc_offset", "function_define": "    df['x'] = df['x'] + offset[0]\n    df['y'] = df['y'] + offset[1]\n    df['z'] = df['z'] + offset[2]", "piece": "df['y'] = df['y'] + offset[1]"}
{"function_name": "_read_s3", "function_define": "    into a pandas dataframe.\n    Parameters\n    s3_path : str", "piece": "Parameters"}
{"function_name": "_space_to_voxel", "function_define": "    Parameters\n    spacing : :class:`numpy.array`\n    origin : :class:`numpy.array`", "piece": "spacing : :class:`numpy.array`"}
{"function_name": "_df_in_voxel", "function_define": "    to voxel units\n    Parameters\n    df : :class:`pandas.DataFrame`", "piece": "Parameters"}
{"function_name": "_df_to_graph", "function_define": "    Parameters\n    are in voxel units.\n    G = nx.DiGraph()", "piece": "are in voxel units."}
{"function_name": "_get_sub_neuron", "function_define": "    Parameters\n    G_sub = G.copy()\n    start = bounding_box[0]", "piece": "G_sub = G.copy()"}
{"function_name": "_graph_to_paths", "function_define": "    list of paths.\n    Parameters\n    paths : list", "piece": "Parameters"}
{"function_name": "_swc2skeleton", "function_define": "    Arguments:\n    Keyword Arguments:\n    Returns:", "piece": "Keyword Arguments:"}
{"function_name": "get_validator", "function_define": "    for validator in VALIDATORS:\n    if validator.enabled():\n    if require:", "piece": "if validator.enabled():"}
{"function_name": "_api_error", "function_define": "    if isinstance(api_data, tuple):\n    error_code = api_data[0]\n    has_data = True", "piece": "error_code = api_data[0]"}
{"function_name": "_update_industry", "function_define": "    wind_data.name = f'{provider}\u884c\u4e1a'\n    table_name = f'{provider}\u884c\u4e1a'\n    if latest is None:", "piece": "table_name = f'{provider}\u884c\u4e1a'"}
{"function_name": "forcePrint", "function_define": "    enablePrint()\n    print(str)\n    sys.stdout.flush()", "piece": "print(str)"}
{"function_name": "run_to_task", "function_define": "    import general_utils\n    import utils\n    all_outputs = {}", "piece": "import utils"}
{"function_name": "set_log_level", "function_define": "    Parameters\n    return_old_level : bool\n    if verbose is None:", "piece": "return_old_level : bool"}
{"function_name": "set_log_file", "function_define": "    Parameters\n    fname : str, or None\n    output_format : str", "piece": "fname : str, or None"}
{"function_name": "run_subprocess", "function_define": "    Parameters\n    command : list of str\n    stdout : str", "piece": "command : list of str"}
{"function_name": "check_units", "function_define": "    Parameters\n    units : str\n    if units not in good_units:", "piece": "units : str"}
{"function_name": "verbose_dec", "function_define": "    set_log_level().\n    Parameters\n    function : callable", "piece": "Parameters"}
{"function_name": "_has_video", "function_define": "    if _new_pyglet():\n    except ImportError:\n    except ImportError:", "piece": "except ImportError:"}
{"function_name": "requires_lib", "function_define": "    import pytest\n    importlib.import_module(lib)\n    except Exception as exp:", "piece": "importlib.import_module(lib)"}
{"function_name": "fetch_data_file", "function_define": "    Parameters\n    fname : str\n    fname : str", "piece": "fname : str"}
{"function_name": "set_config", "function_define": "    Parameters\n    key : str | None\n    value : str |  None", "piece": "key : str | None"}
{"function_name": "_wait_secs", "function_define": "    Parameters\n    secs : float\n    Number of seconds to wait.", "piece": "secs : float"}
{"function_name": "running_rms", "function_define": "    Parameters\n    signal : array_like\n    win_length : int", "piece": "signal : array_like"}
{"function_name": "_fix_audio_dims", "function_define": "    Parameters\n    signal : array_like\n    n_channels : int", "piece": "signal : array_like"}
{"function_name": "object_diff", "function_define": "    Parameters\n    a : object\n    float, StringIO, BytesIO.", "piece": "a : object"}
{"function_name": "_check_params", "function_define": "    if not isinstance(params, dict):\n    params = deepcopy(params)\n    if not isinstance(params, dict):", "piece": "params = deepcopy(params)"}
{"function_name": "_decorate_class", "function_define": "    if self.extra:\n    msg += '; %s' % self.extra\n    init = cls.__init__", "piece": "msg += '; %s' % self.extra"}
{"function_name": "_decorate_fun", "function_define": "    if self.extra:\n    msg += '; %s' % self.extra\n    wrapped.__name__ = fun.__name__", "piece": "msg += '; %s' % self.extra"}
{"function_name": "_update_doc", "function_define": "    newdoc = 'DEPRECATED'\n    if self.extra:\n    if olddoc:", "piece": "if self.extra:"}
{"function_name": "print_hull", "function_define": "    for y in range(miny, maxy + 1):\n    row = ''\n    for x in range(minx, maxx + 1):", "piece": "row = ''"}
{"function_name": "paint_hull", "function_define": "    Parameters\n    inputfile: str\n    hull : dict<(int,int): int>", "piece": "inputfile: str"}
{"function_name": "highlightBlock", "function_define": "    while index >= 0:\n    index = expression.pos(nth)\n    self.setCurrentBlockState(0)", "piece": "index = expression.pos(nth)"}
{"function_name": "match_multiline", "function_define": "    start = 0\n    start = delimiter.indexIn(text)\n    add = delimiter.matchedLength()", "piece": "start = delimiter.indexIn(text)"}
{"function_name": "resizeEvent", "function_define": "    if self.DISPLAY_LINE_NUMBERS:\n    cr = self.contentsRect()\n    self.number_bar.setGeometry(rec)", "piece": "cr = self.contentsRect()"}
{"function_name": "run_test", "function_define": "    import sys\n    app = QApplication([])\n    editor.setPlainText(text)", "piece": "app = QApplication([])"}
{"function_name": "updateWidth", "function_define": "    width = self.getWidth()\n    if self.width() != width:\n    self.setFixedWidth(width)", "piece": "if self.width() != width:"}
{"function_name": "updateContents", "function_define": "    if scroll:\n    self.scroll(0, scroll)\n    self.font.setPointSize(fontSize)", "piece": "self.scroll(0, scroll)"}
{"function_name": "test_start", "function_define": "    bs_client_mock = mock.Mock()\n    err = bs_sim_controls.start()\n    assert err == 'Error'", "piece": "err = bs_sim_controls.start()"}
{"function_name": "test_reset", "function_define": "    bs_client_mock = mock.Mock()\n    err = bs_sim_controls.reset()\n    assert err == 'Error'", "piece": "err = bs_sim_controls.reset()"}
{"function_name": "test_pause", "function_define": "    bs_client_mock = mock.Mock()\n    err = bs_sim_controls.pause()\n    assert err == 'Error'", "piece": "err = bs_sim_controls.pause()"}
{"function_name": "test_resume", "function_define": "    bs_client_mock = mock.Mock()\n    err = bs_sim_controls.resume()\n    assert err == 'Error'", "piece": "err = bs_sim_controls.resume()"}
{"function_name": "test_stop", "function_define": "    bs_client_mock = mock.Mock()\n    err = bs_sim_controls.stop()\n    assert err == 'Error'", "piece": "err = bs_sim_controls.stop()"}
{"function_name": "test_set_speed", "function_define": "    bs_client_mock = mock.Mock()\n    bs_client_mock.reset_mock()\n    dt_mult = 10.1", "piece": "bs_client_mock.reset_mock()"}
{"function_name": "file_type_test", "function_define": "    bucket = Mock()\n    new_key = Mock()\n    session = Client().session()", "piece": "new_key = Mock()"}
{"function_name": "testCaseSuccess", "function_define": "    self._formatter.StartTest(test)\n    self._mock_timer.SetTime(0.042)\n    self._formatter.Success(test)", "piece": "self._mock_timer.SetTime(0.042)"}
{"function_name": "count_sort", "function_define": "    maxValue = 0\n    for i in range(len(list)):\n    if list[i] > maxValue:", "piece": "for i in range(len(list)):"}
{"function_name": "load_models", "function_define": "    import mud.models as models\n    Model = models.Model\n    self.types[v.__name__] = v", "piece": "Model = models.Model"}
{"function_name": "api_get_build", "function_define": "    conda_store = get_conda_store()\n    auth = get_auth()\n    if build is None:", "piece": "auth = get_auth()"}
{"function_name": "api_put_build", "function_define": "    conda_store = get_conda_store()\n    auth = get_auth()\n    if build is None:", "piece": "auth = get_auth()"}
{"function_name": "api_delete_build", "function_define": "    conda_store = get_conda_store()\n    auth = get_auth()\n    if build is None:", "piece": "auth = get_auth()"}
{"function_name": "tcl_code", "function_define": "    if self.rho is not None:\n    args.extend(['-rho', self.rho])\n    if self.cmass:", "piece": "args.extend(['-rho', self.rho])"}
{"function_name": "fill_feed_dict", "function_define": "    A feed_dict takes the form of:\n    feed_dict = {\n    Returns:", "piece": "feed_dict = {"}
{"function_name": "update_task_list", "function_define": "    for i, task in enumerate(tasks):\n    if task[1]:\n    icon = '\u2713'", "piece": "if task[1]:"}
{"function_name": "command_entered", "function_define": "    command = None\n    command = self.input_box.get()\n    sys.exit()", "piece": "command = self.input_box.get()"}
{"function_name": "wanted_file", "function_define": "    if not file_path:\n    for file_extension in filters:\n    if verbose:", "piece": "for file_extension in filters:"}
{"function_name": "remove_obsolete", "function_define": "    removed_paths = set()\n    if local_file not in files:\n    if verbose:", "piece": "if local_file not in files:"}
{"function_name": "sync_directory", "function_define": "    files = set()\n    for i in items:\n    item = drive[i]", "piece": "for i in items:"}
{"function_name": "sync_drive", "function_define": "    last_send = None\n    while True:\n    if not api.requires_2sa:", "piece": "while True:"}
{"function_name": "test_leafs", "function_define": "    create_rpc(self.nc_session)\n    self.maxDiff = None\n    self.assertEqual(xml, xml_read)", "piece": "self.maxDiff = None"}
{"function_name": "_public_emit", "function_define": "    print(header, end='', file=file)\n    if count % 8 == 0:\n    print(' ', end='', file=file)", "piece": "if count % 8 == 0:"}
{"function_name": "get_random_ad", "function_define": "    and ``ad_zone``.\n    if ad_category:\n    ad = qs.order_by('?')[0]", "piece": "if ad_category:"}
{"function_name": "session_scope", "function_define": "    session = Session()\n    yield session\n    session.commit()", "piece": "yield session"}
{"function_name": "get_item", "function_define": "    item_name = kwargs['item_name']\n    item_link = kwargs['item_link']\n    item_id = None", "piece": "item_link = kwargs['item_link']"}
{"function_name": "get_all_items", "function_define": "    with session_scope() as session:\n    item_dict = {}\n    for item in items:", "piece": "item_dict = {}"}
{"function_name": "get_items", "function_define": "    item_name = kwargs['item_name']\n    item_type = kwargs['item_type']\n    with session_scope() as session:", "piece": "item_type = kwargs['item_type']"}
{"function_name": "get_main_items", "function_define": "    with session_scope() as session:\n    item_dict = {}\n    for item in items:", "piece": "item_dict = {}"}
{"function_name": "update_active", "function_define": "    item_id = kwargs['item_id']\n    active = kwargs['active']\n    with session_scope() as session:", "piece": "active = kwargs['active']"}
{"function_name": "add_item", "function_define": "    with session_scope() as session:\n    item = Items(**kwargs)\n    session.add(item)", "piece": "item = Items(**kwargs)"}
{"function_name": "get_next_item_id", "function_define": "    with session_scope() as session:\n    if item_id is None:\n    item_id = 1", "piece": "if item_id is None:"}
{"function_name": "get_expenses", "function_define": "    date_type = kwargs['date_type']\n    query_date = kwargs['date']\n    with session_scope() as session:", "piece": "query_date = kwargs['date']"}
{"function_name": "add_expense", "function_define": "    with session_scope() as session:\n    expense = Expenses(**kwargs)\n    session.add(expense)", "piece": "expense = Expenses(**kwargs)"}
{"function_name": "get_next_exp_id", "function_define": "    with session_scope() as session:\n    if expense_id is None:\n    expense_id = 1", "piece": "if expense_id is None:"}
{"function_name": "get_borders", "function_define": "    with session_scope() as session:\n    if expense is not None:\n    if expense is not None:", "piece": "if expense is not None:"}
{"function_name": "get_totals", "function_define": "    query_month = query_date[0:7]\n    query_year = query_date[0:4]\n    with session_scope() as session:", "piece": "query_year = query_date[0:4]"}
{"function_name": "get_avgs", "function_define": "    expense_dict = {}\n    with session_scope() as session:\n    if expense[0] is not None:", "piece": "with session_scope() as session:"}
{"function_name": "__make_power_2", "function_define": "    ow, oh = img.size\n    h = int(round(oh / base) * base)\n    w = int(round(ow / base) * base)", "piece": "h = int(round(oh / base) * base)"}
{"function_name": "__scale_width", "function_define": "    ow, oh = img.size\n    if ow == target_width:\n    w = target_width", "piece": "if ow == target_width:"}
{"function_name": "test_cut", "function_define": "    Running Cut\n    Case 1: Ensure A-E is returned\n    Case 2: Ensure \u05d1,c is returned", "piece": "Case 1: Ensure A-E is returned"}
{"function_name": "test_add_alpha", "function_define": "    Add alpha maintainer\n    self.clean()\n    self.clean()", "piece": "self.clean()"}
{"function_name": "test_add_beta", "function_define": "    Add beta maintainer\n    self.clean()\n    self.clean()", "piece": "self.clean()"}
{"function_name": "test_contact_us", "function_define": "    self.clean()\n    print(response.text)\n    self.clean()", "piece": "print(response.text)"}
{"function_name": "tearDownClass", "function_define": "    cls.db.admins.delete_many({})\n    cls.db.project.delete_many({})\n    cls.db.contactUs.delete_many({})", "piece": "cls.db.project.delete_many({})"}
{"function_name": "display_value", "function_define": "    half_max = self.MAX / 2\n    self.display_color = self.orange\n    self.display_color = self.red", "piece": "self.display_color = self.orange"}
{"function_name": "display_gradient", "function_define": "    if self.VALUE > 1:\n    if self.start_variance:\n    self.start_color_vector.x *= -1", "piece": "if self.start_variance:"}
{"function_name": "moveReplace", "function_define": "    process_Move = userInput_Move\n    for tri in triButton:\n    for duo in duoButton:", "piece": "for tri in triButton:"}
{"function_name": "moveReplaceFinal", "function_define": "    process_Move = intermediate_Move\n    for tri in triButton:\n    for duo in duoButtonFinal:", "piece": "for tri in triButton:"}
{"function_name": "LCS_length", "function_define": "    if str1 is None or str2 is None:\n    len1 = len(str1)\n    len2 = len(str2)", "piece": "len1 = len(str1)"}
{"function_name": "expanded_vec2mat", "function_define": "    m = tc.vec2mat(v)\n    for t in range(m.shape[2]):\n    x[t, :] = m[:, :, t].ravel()", "piece": "for t in range(m.shape[2]):"}
{"function_name": "_make_model", "function_define": "    conv_config = config[0]\n    pooling_config = conv_config[3]\n    n_layers = conv_config[4]", "piece": "pooling_config = conv_config[3]"}
{"function_name": "show_plot", "function_define": "    images = (images + 1) / 2.0\n    for i in range(len(images)):\n    pyplot.axis('off')", "piece": "for i in range(len(images)):"}
{"function_name": "my_contourf", "function_define": "    py.colorbar()\n    py.xlabel('x')\n    py.ylabel('y')", "piece": "py.xlabel('x')"}
{"function_name": "my_scatter", "function_define": "    py.xlabel('x')\n    py.ylabel('y')\n    py.title(ttl)", "piece": "py.ylabel('y')"}
{"function_name": "moveToBurrow", "function_define": "    if self.hallway[pos] == '.':\n    a = self.hallway[pos]\n    if self.burrows[a] == []:", "piece": "a = self.hallway[pos]"}
{"function_name": "moveToHallway", "function_define": "    if self.burrows[b] == []:\n    if self.burrows[b] == [b]:\n    if self.burrows[b] == [b, b]:", "piece": "if self.burrows[b] == [b]:"}
{"function_name": "possibilities", "function_define": "    result = []\n    if new_states:\n    result += new_states", "piece": "if new_states:"}
{"function_name": "itemsgetter", "function_define": "    if len(items) == 1:\n    item = items[0]\n    f = operator.itemgetter(*items)", "piece": "item = items[0]"}
{"function_name": "tax2dict", "function_define": "    acc_taxid_info = {}\n    with open(acc2tax, 'r') as fin:\n    for line in fin:", "piece": "with open(acc2tax, 'r') as fin:"}
{"function_name": "get_accession", "function_define": "    accession = {}\n    pbar.update(len(record))\n    accession[acc] = acc", "piece": "pbar.update(len(record))"}
{"function_name": "acc_to_dict", "function_define": "    acc_taxid_dict = {}\n    taxlist = []\n    no_info = []", "piece": "taxlist = []"}
{"function_name": "get_lineage", "function_define": "    ranks = {}\n    for item in ranklist:\n    ranks[item] = 'yes'", "piece": "for item in ranklist:"}
{"function_name": "barplot_plots", "function_define": "    Create barplots of summary data.\n    Parameters\n    df : dataframe", "piece": "Parameters"}
{"function_name": "scatter_plots", "function_define": "    Parameters\n    df : dataframe\n    Dataframe of summary data.", "piece": "df : dataframe"}
{"function_name": "boxplot_plots", "function_define": "    Create boxplots of summary data.\n    Parameters\n    df : dataframe", "piece": "Parameters"}
{"function_name": "do_es_import", "function_define": "    import data from current dir\n    Poet.init()\n    Author.init()", "piece": "Poet.init()"}
{"function_name": "master_callback", "function_define": "    self.count += 1\n    except CvBridgeError as e:\n    print(e)", "piece": "except CvBridgeError as e:"}
{"function_name": "save_image", "function_define": "    dirPath = os.path.split(path)[0]\n    if not os.path.exists(dirPath):\n    os.makedirs(dirPath)", "piece": "if not os.path.exists(dirPath):"}
{"function_name": "test_custom", "function_define": "    config = Config()\n    config.foo = 'foo'\n    config.bar = 'bar'", "piece": "config.foo = 'foo'"}
{"function_name": "test_parent", "function_define": "    config = Config()\n    config.Foo.a = 10\n    config.Foo.b = 'wow'", "piece": "config.Foo.a = 10"}
{"function_name": "test_override1", "function_define": "    config = Config()\n    config.MyConfigurable.a = 2\n    config.MyConfigurable.b = 2.0", "piece": "config.MyConfigurable.a = 2"}
{"function_name": "test_override2", "function_define": "    config = Config()\n    config.Foo.a = 1\n    config.Bar.b = 'or'", "piece": "config.Foo.a = 1"}
{"function_name": "test_insert", "function_define": "    c = Config()\n    c.Containers.lis.insert(0, 'a')\n    c.Containers.lis.insert(1, 'b')", "piece": "c.Containers.lis.insert(0, 'a')"}
{"function_name": "test_set_update", "function_define": "    c = Config()\n    c.Containers.s.update({0, 1, 2})\n    c.Containers.s.update({3})", "piece": "c.Containers.s.update({0, 1, 2})"}
{"function_name": "test_update_self", "function_define": "    c = Config()\n    c.MyConfigurable.a = 5\n    m = MyConfigurable(config=c)", "piece": "c.MyConfigurable.a = 5"}
{"function_name": "getItems", "function_define": "    itemsArray = self.scraper()\n    items = {}\n    section = ''", "piece": "items = {}"}
{"function_name": "play_script", "function_define": "    lines = f.readlines()\n    for l in lines:\n    self.play(**json.loads(l))", "piece": "for l in lines:"}
{"function_name": "__next__", "function_define": "    otherwise raises StopIteration\n    if len(self._buffer) > 0:\n    raise StopIteration", "piece": "if len(self._buffer) > 0:"}
{"function_name": "_raw_send", "function_define": "    if self._sock.fileno() == -1:\n    self._closed = True\n    sent = 0", "piece": "self._closed = True"}
{"function_name": "close_raw", "function_define": "    not open.\n    self.close()\n    self._closed = True", "piece": "self.close()"}
{"function_name": "iter_csv", "function_define": "    data_list = list(file)[1:]\n    print(index)\n    print(general_date)", "piece": "print(index)"}
{"function_name": "create_data_list", "function_define": "    for i in count_date:\n    normal = str(i)[:10]\n    if normal in full:", "piece": "normal = str(i)[:10]"}
{"function_name": "test_multitrace", "function_define": "    roi1.plot()\n    roi2.plot()\n    roi3.plot()", "piece": "roi2.plot()"}
{"function_name": "time_tuple", "function_define": "    secs = round(time)\n    mins = secs // 60\n    secs %= 60", "piece": "mins = secs // 60"}
{"function_name": "add_appointment", "function_define": "    self.val1 = self.name_ent.get()\n    self.val2 = self.age_ent.get()\n    self.val3 = self.clicked.get()", "piece": "self.val2 = self.age_ent.get()"}
{"function_name": "send_request", "function_define": "    req.start1_x = start1_x\n    req.start1_y = start1_y\n    req.goal1_x = goal1_x", "piece": "req.start1_y = start1_y"}
{"function_name": "noisy_circle", "function_define": "    row = np.random.randint(size)\n    col = np.random.randint(size)\n    draw_circle(img, row, col, rad)", "piece": "col = np.random.randint(size)"}
{"function_name": "debug_func", "function_define": "    log.setLevel(logging.DEBUG)\n    log.debug(f'START {name}')\n    start_time = time.perf_counter()", "piece": "log.debug(f'START {name}')"}
{"function_name": "debug_class", "function_define": "    for attr in cls.__dict__:\n    if callable(getattr(cls, attr)):\n    if _cls is None:", "piece": "if callable(getattr(cls, attr)):"}
{"function_name": "update_item", "function_define": "    payload = json.dumps(item)\n    update.encoding = 'utf-8'\n    if update.status_code == 200:", "piece": "update.encoding = 'utf-8'"}
{"function_name": "__data_generator", "function_define": "    if img is not None:\n    X[i,] = img\n    X = self.basenet_preprocess(X)", "piece": "X[i,] = img"}
{"function_name": "calcul_bar", "function_define": "    min_x = round(0.2 * self.width)\n    max_x = round(0.95 * self.width)\n    min_y = self.new_height - 30", "piece": "max_x = round(0.95 * self.width)"}
{"function_name": "color_word_cloud", "function_define": "    plt.figure(figsize=(15, 12))\n    plt.axis('off')\n    self.output(file_name)", "piece": "plt.axis('off')"}
{"function_name": "image_word_cloud", "function_define": "    plt.figure(figsize=(10, 10))\n    plt.axis('off')\n    self.output(file_name)", "piece": "plt.axis('off')"}
{"function_name": "copy_asset_to_s3", "function_define": "    Returns:\n    split_id = planet_id.split(':')\n    item_type = split_id[0]", "piece": "split_id = planet_id.split(':')"}
{"function_name": "get_analytic_xml", "function_define": "    item_id (str): id of asset\n    Returns:\n    response = requests.get(xml_loc)", "piece": "Returns:"}
{"function_name": "extract_maps", "function_define": "    print(fname)\n    if os.path.exists(fname):\n    file = open(fname, 'rb')", "piece": "if os.path.exists(fname):"}
{"function_name": "LSMN_fit_CFA", "function_define": "    tot_runtime = time.time()\n    start = time.time()\n    self.generate_sample_paths()", "piece": "start = time.time()"}
{"function_name": "make_folder_path", "function_define": "    Returns the path.\n    UNITTEST - does path exist\n    if not args.u:", "piece": "UNITTEST - does path exist"}
{"function_name": "consolidate_logs", "function_define": "    Saves it in the SIP\n    uuid = os.path.basename(path)\n    for log in lognames:", "piece": "uuid = os.path.basename(path)"}
{"function_name": "move_files", "function_define": "    Runs moveit.py on all inputs\n    log_names = []\n    for item in inputs:", "piece": "log_names = []"}
{"function_name": "log_report", "function_define": "    for i in log_names:\n    if os.path.isfile(i):\n    log_names.remove(i)", "piece": "if os.path.isfile(i):"}
{"function_name": "get_object_entry", "function_define": "    if not args.sc:\n    if args.oe:\n    if args.oe[:2] != 'oe':", "piece": "if args.oe:"}
{"function_name": "determine_uuid", "function_define": "    if args.u:\n    uuid = args.u\n    sys.exit()", "piece": "uuid = args.u"}
{"function_name": "process_dcp", "function_define": "    Runs DCP specific functions.\n    dcp = DCP(absolute_dcp_path)\n    dcp_dict = dcp.parse()", "piece": "dcp = DCP(absolute_dcp_path)"}
{"function_name": "eval_target_net", "function_define": "    if classes is not None:\n    class_correct = np.zeros(10)\n    class_total = np.zeros(10)", "piece": "class_correct = np.zeros(10)"}
{"function_name": "eval_attack_net", "function_define": "    Edited for use with SVCs.\"\"\"\n    in_predicts = []\n    out_predicts = []", "piece": "in_predicts = []"}
{"function_name": "eval_attack_roc", "function_define": "    losses = []\n    target_net.eval()\n    attack_net.eval()", "piece": "target_net.eval()"}
{"function_name": "get_number", "function_define": "    s - An input string or number\n    Outputs:\n    except ValueError:", "piece": "Outputs:"}
{"function_name": "setup_module", "function_define": "    from blm import fundamental\n    mod.blm = blm\n    from blm import testblm", "piece": "mod.blm = blm"}
{"function_name": "test_score_node", "function_define": "    assert score[0] == 10\n    assert score\n    score = None", "piece": "assert score"}
{"function_name": "test_data", "function_define": "    self.sync()\n    assert toi.id[0] == self.toid1\n    assert toi.id[0] == self.toid1", "piece": "assert toi.id[0] == self.toid1"}
{"function_name": "recurrent_GABA", "function_define": "    S = self.net['I'].sGABA.sum()\n    self.net['E'].S_GABA = S\n    self.net['I'].S_GABA = S", "piece": "self.net['E'].S_GABA = S"}
{"function_name": "stimulus", "function_define": "    t = clock.t\n    self.net['E'].Istim = self.Istim\n    self.net['E'].Istim = 0", "piece": "self.net['E'].Istim = self.Istim"}
{"function_name": "_configure", "function_define": "    self._wait_pool = list()\n    self._wait_lock = ru.RLock()\n    self._pids = list()", "piece": "self._wait_lock = ru.RLock()"}
{"function_name": "add_pilots", "function_define": "    with self._wait_lock:\n    self._pids += pids\n    if self._wait_pool:", "piece": "self._pids += pids"}
{"function_name": "remove_pilots", "function_define": "    with self._pilots_lock:\n    for pid in pids:\n    if pid not in self._pids:", "piece": "for pid in pids:"}
{"function_name": "_schedule_units", "function_define": "    with self._pilots_lock:\n    if not self._pids:\n    self._log.debug('no pilots')", "piece": "if not self._pids:"}
{"function_name": "XmlEncode", "function_define": "    if len(self.tokens_) == 0:\n    xml_tokens = []\n    for token_ in self.Tokens():", "piece": "xml_tokens = []"}
{"function_name": "SetMorphs", "function_define": "    self.morphs_ = []\n    for m in morphs:\n    except UnicodeDecodeError:", "piece": "for m in morphs:"}
{"function_name": "SetFrequencies", "function_define": "    self.frequencies_ = []\n    for f in freq:\n    self.frequencies_.append(f)", "piece": "for f in freq:"}
{"function_name": "InitTokenStats", "function_define": "    tstats = TokenFreqStats(tok)\n    tfreq = []\n    for doc in self.doclist_.Docs():", "piece": "tfreq = []"}
{"function_name": "SetTokens", "function_define": "    self.tokens_ = []\n    for t in tokens:\n    self.AddToken(t)", "piece": "for t in tokens:"}
{"function_name": "AddToken", "function_define": "    token.SetLangId(self.id_)\n    if not merge:\n    self.tokens_.append(token)", "piece": "if not merge:"}
{"function_name": "CompactTokens", "function_define": "    tokens will not be merged.\n    map = {}\n    for token_ in self.tokens_:", "piece": "map = {}"}
{"function_name": "_forward", "function_define": "    data (Data): Input graph data.\n    Returns:\n    self._validate_features(data)", "piece": "Returns:"}
{"function_name": "__post_init__", "function_define": "    self.java_channels.size()\n    self.channels = {}\n    self.n_channels = 0", "piece": "self.channels = {}"}
{"function_name": "export_item", "function_define": "    item: A PodcastEpisodeItem.\n    fe = self.fg.add_entry()\n    title = item.get('title')", "piece": "fe = self.fg.add_entry()"}
{"function_name": "save_to_storage", "function_define": "    to have the following format:\n    url = urlparse(self.uri)\n    bucket = url.netloc", "piece": "url = urlparse(self.uri)"}
{"function_name": "get_model", "function_define": "    layers = []\n    layers.append(hidden)\n    for index in range(depth):", "piece": "layers.append(hidden)"}
{"function_name": "ektelesi", "function_define": "    while x != 10:\n    tyxaios_arithmos()\n    x = x + 1", "piece": "tyxaios_arithmos()"}
{"function_name": "tyxaios_arithmos", "function_define": "    arithmos = random.randint(1, 2)\n    if arithmos == 1:\n    print('\u039a\u03bf\u03c1\u03ce\u03bd\u03b1')", "piece": "if arithmos == 1:"}
{"function_name": "visit_func_decls", "function_define": "    visitor(node)\n    for c in node.get_children():\n    visit_func_decls(c, visitor)", "piece": "for c in node.get_children():"}
{"function_name": "_finished", "function_define": "    good = False\n    msg = 'returned %d' % code\n    self.finished.emit(code)", "piece": "msg = 'returned %d' % code"}
{"function_name": "_typed_value", "function_define": "    except ValueError:\n    rv = eval(sv)\n    if hasattr(rv, '__call__'):", "piece": "rv = eval(sv)"}
{"function_name": "fairCandySwap", "function_define": "    diff = (sum(A) - sum(B)) // 2\n    B = set(B)\n    A = set(A)", "piece": "B = set(B)"}
{"function_name": "add_thing", "function_define": "    if not isinstance(thing, Thing):\n    thing = Agent(thing)\n    if thing in self.things:", "piece": "thing = Agent(thing)"}
{"function_name": "delete_thing", "function_define": "    self.things.remove(thing)\n    except ValueError as e:\n    print(e)", "piece": "except ValueError as e:"}
{"function_name": "test_tuple", "function_define": "    policy.eval()\n    result = dict()\n    with torch.no_grad():", "piece": "result = dict()"}
{"function_name": "main_worker", "function_define": "    if args.use_ddp:\n    assert args.ddp_rank >= 0\n    args.ddp_rank = global_ddp_rank", "piece": "assert args.ddp_rank >= 0"}
{"function_name": "load_from_disk", "function_define": "    image_id = self.image_ids[index]\n    if not no_pkl:\n    assert osp.exists(pkl_fname)", "piece": "if not no_pkl:"}
{"function_name": "_update_kwargs", "function_define": "    Parameters\n    params : dict\n    step._update_kwargs(params)", "piece": "params : dict"}
{"function_name": "_pipeline_fit", "function_define": "    Parameters\n    step_tag : str\n    step : object", "piece": "step_tag : str"}
{"function_name": "_check_accessor", "function_define": "    except TypeError:\n    step_param_dict = step.__dict__\n    self._check_accessor(value)", "piece": "step_param_dict = step.__dict__"}
{"function_name": "get_all_contacts", "function_define": "    contact_list = set()\n    next_page_token = '1'\n    while next_page_token:", "piece": "next_page_token = '1'"}
{"function_name": "test_activeCells", "function_define": "    combo = vertMap * actMap\n    m = np.r_[1.0, 2.0]\n    mod = models.Model(m, combo)", "piece": "m = np.r_[1.0, 2.0]"}
{"function_name": "test_map2Dto3D_x", "function_define": "    m = np.random.rand(int(M2.nC))\n    m = np.arange(m2to3.nP)\n    self.assertTrue(m2to3.test())", "piece": "m = np.arange(m2to3.nP)"}
{"function_name": "test_map2Dto3D_y", "function_define": "    m = np.random.rand(M2.nC)\n    m = np.arange(m2to3.nP)\n    self.assertTrue(m2to3.test())", "piece": "m = np.arange(m2to3.nP)"}
{"function_name": "test_map2Dto3D_z", "function_define": "    m = np.random.rand(M2.nC)\n    m = np.arange(m2to3.nP)\n    self.assertTrue(m2to3.test())", "piece": "m = np.arange(m2to3.nP)"}
{"function_name": "test_Tile", "function_define": "    Test for TileMap\n    h = [5, 5, 5]\n    padDist = np.ones((3, 2)) * 100", "piece": "h = [5, 5, 5]"}
{"function_name": "test10_Brutus", "function_define": "    d = sentence.get_drs()\n    dprint(pt_to_ccg_derivation(pt))\n    dprint(d)", "piece": "dprint(pt_to_ccg_derivation(pt))"}
{"function_name": "word_vec", "function_define": "    Accept a single word as input.\n    Example::\n    array([ -1.40128313e-02, ...])", "piece": "Example::"}
{"function_name": "neighbours", "function_define": "    word = word.strip()\n    v = self.word_vec(word)\n    words, scores = ([], {})", "piece": "v = self.word_vec(word)"}
{"function_name": "add_word", "function_define": "    word_id = len(result.vocab)\n    if word in result.vocab:\n    if counts is None:", "piece": "if word in result.vocab:"}
{"function_name": "describe_start", "function_define": "    time_mock.increment(1)\n    sw.stop()\n    assert sw.elapsed == 1", "piece": "sw.stop()"}
{"function_name": "with_name", "function_define": "    mocker.patch('builtins.print')\n    time_mock.increment(0.1)\n    sw._print_report = False", "piece": "time_mock.increment(0.1)"}
{"function_name": "with_precision", "function_define": "    time_mock.increment(0.123456789)\n    assert str(sw) == '123.45679ms'\n    sw.precision = 3", "piece": "assert str(sw) == '123.45679ms'"}
{"function_name": "add_new_laps", "function_define": "    with Stopwatch() as sw:\n    for i in range(5):\n    with sw.lap():", "piece": "for i in range(5):"}
{"function_name": "describe_report", "function_define": "    with Stopwatch('sw1') as sw1:\n    time_mock.increment(1)\n    with Stopwatch() as sw2:", "piece": "time_mock.increment(1)"}
{"function_name": "with_stop", "function_define": "    time_mock.increment(1)\n    sw.stop()\n    assert sw.elapsed == 1", "piece": "sw.stop()"}
{"function_name": "with_statement", "function_define": "    time_mock.increment(1)\n    sw.stop()\n    assert sw.elapsed == 1", "piece": "sw.stop()"}
{"function_name": "without_laps", "function_define": "    with Stopwatch('sw1') as sw1:\n    time_mock.increment(1)\n    with Stopwatch() as sw2:", "piece": "time_mock.increment(1)"}
{"function_name": "with_laps", "function_define": "    with Stopwatch() as sw:\n    for i in range(5):\n    with sw.lap():", "piece": "for i in range(5):"}
{"function_name": "wrapped_view", "function_define": "    if not many:\n    result_list = [result_list]\n    if not resources:", "piece": "result_list = [result_list]"}
{"function_name": "getPacket", "function_define": "    tok = self._getTypeName()\n    if tok == 'Function':\n    f = self._getFunction()", "piece": "if tok == 'Function':"}
{"function_name": "evaluateString", "function_define": "    if self._reader is not None:\n    if wait:\n    self.waitForAnswer()", "piece": "if wait:"}
{"function_name": "waitForAnswer", "function_define": "    self.__accumulatingPS = []\n    while True:\n    pkt = self._nextPacket()", "piece": "while True:"}
{"function_name": "discardAnswer", "function_define": "    pkt = self.waitForAnswer()\n    self._newPacket()\n    pkt = self.waitForAnswer()", "piece": "self._newPacket()"}
{"function_name": "_handlePacket", "function_define": "    elif pkt_name == 'Call':\n    otype = self._getType()\n    if tname == 'Integer':", "piece": "otype = self._getType()"}
{"function_name": "_raiseLastError", "function_define": "    err = self.last_error\n    if isinstance(err, Exception):\n    raise err", "piece": "if isinstance(err, Exception):"}
{"function_name": "_getArray0", "function_define": "    res_arr = None\n    if tname == 'Object':\n    mark = LinkMark(self).init()", "piece": "if tname == 'Object':"}
{"function_name": "_nextIsObject", "function_define": "    mark = LinkMark(self)\n    res = False\n    mark.init()", "piece": "res = False"}
{"function_name": "_returnTraceback", "function_define": "    raise exc\n    except MathLinkException:\n    self.put(b'$Failed')", "piece": "except MathLinkException:"}
{"function_name": "_eval_to_string", "function_define": "    res = None\n    self.__LAST_EXCEPTION = None\n    self.flush()", "piece": "self.__LAST_EXCEPTION = None"}
{"function_name": "_eval_to_typeset", "function_define": "    image_data = None\n    self.__LAST_EXCEPTION = None\n    self.flush()", "piece": "self.__LAST_EXCEPTION = None"}
{"function_name": "_eval_to_image", "function_define": "    image_data = None\n    self.__LAST_EXCEPTION = None\n    self.flush()", "piece": "self.__LAST_EXCEPTION = None"}
{"function_name": "_eval_to_format", "function_define": "    res = None\n    self.__LAST_EXCEPTION = None\n    self.waitForAnswer()", "piece": "self.__LAST_EXCEPTION = None"}
{"function_name": "__callPython", "function_define": "    arg = self.get()\n    if res is None:\n    self._putSymbol('Null')", "piece": "if res is None:"}
{"function_name": "active_link", "function_define": "    link = self._ACTIVE_LINK\n    if link is None:\n    link = self._CORE_LINK", "piece": "if link is None:"}
{"function_name": "_nextPacket", "function_define": "    pkt = None\n    mark = LinkMark(self).init()\n    except MathLinkException as e:", "piece": "mark = LinkMark(self).init()"}
{"function_name": "test_suite_id", "function_define": "    Approval criteria:\n    Test steps:\n    request = FakeRequest()", "piece": "Test steps:"}
{"function_name": "lrcremoveinfo", "function_define": "    lines = lrc.split('\\n')\n    if lines[-1] == '':\n    offs = 0", "piece": "if lines[-1] == '':"}
{"function_name": "lrctimeconverter", "function_define": "    orderedlrclist = []\n    for i in range(len(lrc)):\n    a = lrc[i].split(']')", "piece": "for i in range(len(lrc)):"}
{"function_name": "get_iterator", "function_define": "    if osp.exists(label_path):\n    lp = open(label_path, 'r')\n    lp = None", "piece": "lp = open(label_path, 'r')"}
{"function_name": "add_to_act", "function_define": "    countries = countrylist()\n    for ta in ta_list['values']:\n    name = ta['value']", "piece": "for ta in ta_list['values']:"}
{"function_name": "link_objects", "function_define": "    object_files = []\n    for source in sources.values():\n    if len(stdout) > 0:", "piece": "for source in sources.values():"}
{"function_name": "printContext", "function_define": "    st = time.time()\n    if extns:\n    print('Extension list:')", "piece": "if extns:"}
{"function_name": "tkCreateContext", "function_define": "    major = c_int(0)\n    minor = c_int(0)\n    if not visual:", "piece": "minor = c_int(0)"}
{"function_name": "tkExpose", "function_define": "    self.activate()\n    if not self.initialised:\n    self.basic_lighting()", "piece": "if not self.initialised:"}
{"function_name": "tkResize", "function_define": "    Things to do on window resize:\n    Adjust viewport:\n    glViewPort(0,0, width, height)", "piece": "Adjust viewport:"}
{"function_name": "_display", "function_define": "    if self.freecalc_update is 1:\n    self.freecalc_update = 0\n    self.update_idletasks()", "piece": "self.freecalc_update = 0"}
{"function_name": "tkRedraw", "function_define": "    self.freecalc(self)\n    if not self.initialised:\n    self.activate()", "piece": "if not self.initialised:"}
{"function_name": "basic_lighting", "function_define": "    self.activate()\n    light_position = (1, 1, 1, 0)\n    GL.glEnable(GL.GL_LIGHTING)", "piece": "light_position = (1, 1, 1, 0)"}
{"function_name": "set_background", "function_define": "    self.r_back = r\n    self.g_back = g\n    self.b_back = b", "piece": "self.g_back = g"}
{"function_name": "set_centerpoint", "function_define": "    This is where we are looking.\"\"\"\n    self.xcenter = x\n    self.ycenter = y", "piece": "self.xcenter = x"}
{"function_name": "tkHandlePick", "function_define": "    if hasattr(self, 'pick'):\n    if self.pick(self, p1, p2):\n    self.tkRedraw()", "piece": "if self.pick(self, p1, p2):"}
{"function_name": "tkRecordMouse", "function_define": "    self.xmouse = event.x\n    self.ymouse = event.y\n    print(event.x, event.y)", "piece": "self.ymouse = event.y"}
{"function_name": "do_AutoSpin", "function_define": "    self.activate()\n    self.tkRedraw()\n    if self.autospin:", "piece": "self.tkRedraw()"}
{"function_name": "tkAutoSpin", "function_define": "    self.after(4)\n    self.update_idletasks()\n    if self.autospin_allowed:", "piece": "self.update_idletasks()"}
{"function_name": "tkRotate", "function_define": "    self.activate()\n    self.tkRedraw()\n    self.tkRecordMouse(event)", "piece": "self.tkRedraw()"}
{"function_name": "tkTranslate", "function_define": "    self.activate()\n    self.tkRedraw()\n    self.tkRecordMouse(event)", "piece": "self.tkRedraw()"}
{"function_name": "get_magnet", "function_define": "    request = requests.get(url)\n    if request:\n    if html:", "piece": "if request:"}
{"function_name": "search_hdshows", "function_define": "    request = requests.get(url)\n    if request:\n    if html:", "piece": "if request:"}
{"function_name": "romano_wolf", "function_define": "    N = inputs.shape[0]\n    S = set(range(N))\n    R = set()", "piece": "S = set(range(N))"}
{"function_name": "multiscaleify", "function_define": "    if frac_data_coarse == None:\n    frac_data_coarse = 0.1\n    lambda_binary_mask[argmin] = 1.0", "piece": "frac_data_coarse = 0.1"}
{"function_name": "uniform_region", "function_define": "    r_hats = loss_table.mean(axis=0)\n    if r_hats.min() >= alpha:\n    R = np.array([])", "piece": "if r_hats.min() >= alpha:"}
{"function_name": "AR_Noise_Process", "function_define": "    sigma2 = 1 / (1 - corr ** 2)\n    mus = np.zeros_like(signal)\n    for j in range(N):", "piece": "mus = np.zeros_like(signal)"}
{"function_name": "consolidate", "function_define": "    if items:\n    for item in items:\n    item['learner_ids'] = []", "piece": "for item in items:"}
{"function_name": "inverse_3by3_int", "function_define": "    to apply the division.\n    if len(M.shape) > 1:\n    M = M.flatten()", "piece": "if len(M.shape) > 1:"}
{"function_name": "__generate", "function_define": "    sheet: Any\n    for sheet in output_file.sheets:\n    if sheet.name == 'Legend':", "piece": "for sheet in output_file.sheets:"}
{"function_name": "get_response", "function_define": "    if not headers:\n    if queryString:\n    if response['title'] == 'OK':", "piece": "if queryString:"}
{"function_name": "draw_atoms", "function_define": "    F0 = Phi0.shape[0]\n    shape_to_plot = (int(F / 2), 2)\n    n_atoms = np.prod(shape_to_plot)", "piece": "shape_to_plot = (int(F / 2), 2)"}
{"function_name": "preprocess_glove", "function_define": "    Parameters\n    words = []\n    word2idx = {}", "piece": "words = []"}
{"function_name": "parseQuoted", "function_define": "    label = ''\n    quoteChar = treeString[offset]\n    offset += 1", "piece": "quoteChar = treeString[offset]"}
{"function_name": "parseLabel", "function_define": "    if offset == len(treeString):\n    label = ''\n    labelStart = offset", "piece": "label = ''"}
{"function_name": "parseBranch", "function_define": "    if treeString[offset] != '(':\n    branchStart = offset\n    internalNode += 1", "piece": "branchStart = offset"}
{"function_name": "parseFile", "function_define": "    line1 = treeF.readline().strip()\n    if line1 == '':\n    treeF.close()", "piece": "if line1 == '':"}
{"function_name": "treeToString", "function_define": "    if not node:\n    labelLen = ''\n    if node['label']:", "piece": "labelLen = ''"}
{"function_name": "treeIntersectIds", "function_define": "    if node['kids']:\n    prunedKids = []\n    for kid in node['kids']:", "piece": "prunedKids = []"}
{"function_name": "test_read_write", "function_define": "    write_hdf(out_file, df_example)\n    assert out_file.is_file()\n    df_read = read_hdf(out_file)", "piece": "assert out_file.is_file()"}
{"function_name": "get_sensor_xform", "function_define": "    sensor (SimRobotSensor)\n    Returns:\n    s = sensor.getSetting('Tsensor')", "piece": "Returns:"}
{"function_name": "set_sensor_xform", "function_define": "    its link-local transform to T.\n    sensor (SimRobotSensor)\n    sensor on its link.", "piece": "sensor (SimRobotSensor)"}
{"function_name": "camera_to_images", "function_define": "    image, the depth image, or both.\n    numpy is not available.\n    with color_format='channels')", "piece": "numpy is not available."}
{"function_name": "image_to_points", "function_define": "    absolute depth values.\n    z > 0.5 and z < 8 units.\n    range [0,1].", "piece": "z > 0.5 and z < 8 units."}
{"function_name": "camera_to_points", "function_define": "    right, +y toward up).\n    The arguments\n    value. Can be:", "piece": "The arguments"}
{"function_name": "camera_project", "function_define": "    in pixel values.\n    Arguments:\n    outside of the viewing volume.", "piece": "Arguments:"}
{"function_name": "fetch_user", "function_define": "    if query.isdigit():\n    user_model = get_user_model()\n    except user_model.DoesNotExist:", "piece": "user_model = get_user_model()"}
{"function_name": "patch_branch", "function_define": "    delta = target - address\n    if delta < 0:\n    delta = ~-delta + 1", "piece": "if delta < 0:"}
{"function_name": "apply_hooks", "function_define": "    for i in range(hooks_size // 8):\n    offset = hooks_offset + i * 8\n    original = word(data, offset)", "piece": "offset = hooks_offset + i * 8"}
{"function_name": "allASDTIRpairs", "function_define": "    currentlib = orthoribalgorithm()\n    TIRdict = getallTIRs()\n    dictofvals = {}", "piece": "TIRdict = getallTIRs()"}
{"function_name": "update_r", "function_define": "    keys = key.get_pressed()\n    self.rect.y -= self.speed\n    self.rect.y += self.speed", "piece": "self.rect.y -= self.speed"}
{"function_name": "update_l", "function_define": "    keys = key.get_pressed()\n    self.rect.y -= self.speed\n    self.rect.y += self.speed", "piece": "self.rect.y -= self.speed"}
{"function_name": "runtime_test", "function_define": "    data = [':runner']\n    if blacklist_file != '':\n    data += [blacklist_file]", "piece": "if blacklist_file != '':"}
{"function_name": "_test_handler", "function_define": "    str_checker(dump_str)\n    assert osp.isfile(tmp_filename)\n    assert load_obj == test_obj", "piece": "assert osp.isfile(tmp_filename)"}
{"function_name": "parse_log", "function_define": "    guards = defaultdict(list)\n    for l in log:\n    if l[2] is not None:", "piece": "for l in log:"}
{"function_name": "change_animation", "function_define": "    self.image.set_colorkey(0, 0)\n    self.clock += self.speed * 8\n    if self.clock >= 100:", "piece": "self.clock += self.speed * 8"}
{"function_name": "get_images", "function_define": "    images = []\n    for i in range(0, 3):\n    x = i * 32", "piece": "for i in range(0, 3):"}
{"function_name": "test_mean", "function_define": "    for column in result_data:\n    data = []\n    for row in test_data:", "piece": "data = []"}
{"function_name": "test_median", "function_define": "    for column in result_data:\n    data = []\n    for row in test_data:", "piece": "data = []"}
{"function_name": "test_mode", "function_define": "    for column in result_data:\n    data = []\n    for row in test_data:", "piece": "data = []"}
{"function_name": "test_variance", "function_define": "    for column in test_result:\n    list1 = []\n    for row in test_data:", "piece": "list1 = []"}
{"function_name": "test_sample_mean", "function_define": "    for column in test_result:\n    list1 = []\n    for row in test_data:", "piece": "list1 = []"}
{"function_name": "average_nn", "function_define": "    acc = np.zeros(N)\n    for t in range(times):\n    train = gen_data(dims)", "piece": "for t in range(times):"}
{"function_name": "init_config", "function_define": "    del config[HYPEROPT]\n    if output is None:\n    with open(output, 'w') as f:", "piece": "if output is None:"}
{"function_name": "wait_for", "function_define": "    interval = 1\n    count = 0\n    while True:", "piece": "count = 0"}
{"function_name": "pyplot_vars", "function_define": "    plt.ioff()\n    index = index.values\n    if index_values is None:", "piece": "index = index.values"}
{"function_name": "export_bundle", "function_define": "    dest_path = tempfile.mkdtemp()\n    ls_files.stdout.close()\n    checkout_index.communicate()", "piece": "ls_files.stdout.close()"}
{"function_name": "save_test_as_txt", "function_define": "    testFile = open(save_path, 'w')\n    testFile.write(testString)\n    testFile.close()", "piece": "testFile.write(testString)"}
{"function_name": "prepString", "function_define": "    final = ''\n    word_list = string.split(' ')\n    for word in word_list:", "piece": "word_list = string.split(' ')"}
{"function_name": "cholesky", "function_define": "    m = [int(x) for x in condition]\n    counter = 0\n    res = []", "piece": "counter = 0"}
{"function_name": "get_axis_points", "function_define": "    if A is None:\n    A = cholesky(sigma)\n    points = np.zeros((N, 6))", "piece": "A = cholesky(sigma)"}
{"function_name": "sigma_visualize", "function_define": "    if color is None:\n    if ax is None:\n    ax = matplotlib.pyplot", "piece": "if ax is None:"}
{"function_name": "getLevelOrder", "function_define": "    Returns:\n    random.shuffle(boardOneLevels)\n    random.shuffle(boardList)", "piece": "random.shuffle(boardOneLevels)"}
{"function_name": "flashBoard", "function_define": "    if self.isFlashing:\n    self.frameCount += 1\n    if self.frameCount % 12 < 6:", "piece": "self.frameCount += 1"}
{"function_name": "show_camera", "function_define": "    if video_capture.isOpened():\n    while True:\n    cv2.imshow(window_title, frame)", "piece": "while True:"}
{"function_name": "test_addFleet", "function_define": "    uuidContract = uuidFleet\n    print('\\n')\n    print(str(fleet), '\\n')", "piece": "print('\\n')"}
{"function_name": "postprocess", "function_define": "    processed_df:\n    Returns:\n    raise NotImplementedError", "piece": "Returns:"}
{"function_name": "map_to_color", "function_define": "    if scalar is None:\n    lo = int(0)\n    hi = int(colormap.shape[0] - 1)", "piece": "lo = int(0)"}
{"function_name": "map_to_scalar", "function_define": "    clo = colormap[i, 1:]\n    chi = colormap[i + 1, 1:]\n    cd = chi - clo", "piece": "chi = colormap[i + 1, 1:]"}
{"function_name": "normalize_cmap", "function_define": "    rows, cols = cmap.shape\n    if cols == 3:\n    if dtype is None:", "piece": "if cols == 3:"}
{"function_name": "read_cmap", "function_define": "    with open(filename) as csvfile:\n    csvfile.seek(0)\n    r = csv.reader(csvfile, dialect)", "piece": "csvfile.seek(0)"}
{"function_name": "remap_img", "function_define": "    if spread:\n    smin = np.min(scalar_field)\n    smax = np.max(scalar_field)", "piece": "smin = np.min(scalar_field)"}
{"function_name": "restorePrevious", "function_define": "    rigs = pm.ls(type='piperRig')\n    state = not all(states)\n    controls = control.getAll()", "piece": "state = not all(states)"}
{"function_name": "onSpacePressed", "function_define": "    t = self.translate.isChecked()\n    r = self.rotate.isChecked()\n    o = self.orient.isChecked()", "piece": "r = self.rotate.isChecked()"}
{"function_name": "onBendyPressed", "function_define": "    controls = control.getAllBendy()\n    pm.undoInfo(openChunk=True)\n    pm.undoInfo(closeChunk=True)", "piece": "pm.undoInfo(openChunk=True)"}
{"function_name": "onJointsPressed", "function_define": "    joints = pm.ls(type='joint')\n    pm.undoInfo(openChunk=True)\n    pm.undoInfo(closeChunk=True)", "piece": "pm.undoInfo(openChunk=True)"}
{"function_name": "onResetPressed", "function_define": "    pm.undoInfo(openChunk=True)\n    rig.zeroOut()\n    pm.undoInfo(closeChunk=True)", "piece": "rig.zeroOut()"}
{"function_name": "strip_smiles", "function_define": "    tweet = ''\n    for j in char_list:\n    tweet = tweet + j", "piece": "for j in char_list:"}
{"function_name": "sticker_select", "function_define": "    if sticker[0:4] == 'res.':\n    f = open('nowres.txt', 'w')\n    f.write(sticker)", "piece": "f = open('nowres.txt', 'w')"}
{"function_name": "sticker_click", "function_define": "    self.sel_frame = tk.Frame(self)\n    maxw = self.winfo_width() - 150\n    if sticker[0:4] == 'res.':", "piece": "maxw = self.winfo_width() - 150"}
{"function_name": "txt_change", "function_define": "    txt = sv.get()\n    if len(txt) >= 2:\n    txt = txt.replace('#', '_')", "piece": "if len(txt) >= 2:"}
{"function_name": "add_line", "function_define": "    t_frame.configure(bg='white')\n    for i in range(PER_LINE):\n    if i == len(stickers):", "piece": "for i in range(PER_LINE):"}
{"function_name": "set_stickers", "function_define": "    self.stickers = stickers\n    self.imgs = []\n    for i in self.frames:", "piece": "self.imgs = []"}
{"function_name": "select_item", "function_define": "    self.sv.set('')\n    self.sel['text'] = value\n    stickers = []", "piece": "self.sel['text'] = value"}
{"function_name": "sel_click", "function_define": "    if self.listbox_frame is None:\n    listbox_items = []\n    listbox_items.append('<all>')", "piece": "listbox_items = []"}
{"function_name": "txt_key_callback", "function_define": "    if event.char == '\\x1b':\n    if self.sv.get() == '':\n    self.destroy()", "piece": "if self.sv.get() == '':"}
{"function_name": "stickers_init", "function_define": "    self.imoji = {}\n    self.all_stickers = []\n    self.categories = []", "piece": "self.all_stickers = []"}
{"function_name": "test_buy_stock", "function_define": "    user_id = 1\n    account_id = 1\n    ts_code = '603912.SH'", "piece": "account_id = 1"}
{"function_name": "test_sell_stock", "function_define": "    user_id = 1\n    account_id = 1\n    ts_code = '603912.SH'", "piece": "account_id = 1"}
{"function_name": "parseLiftFile", "function_define": "    global chromLift\n    with open(fname) as f:\n    for line in f:", "piece": "with open(fname) as f:"}
{"function_name": "getMouseover", "function_define": "    ret = ''\n    ret += ', Type: loss'\n    ret += ', Type: gain'", "piece": "ret += ', Type: loss'"}
{"function_name": "dumpBedLines", "function_define": "    print('#%s' % '\\t'.join(fields))\n    for b in bedLines:\n    bed = bedLines[b]", "piece": "for b in bedLines:"}
{"function_name": "makeBedLine", "function_define": "    bed = {}\n    bed['chrom'] = chromLift[chrom]\n    bed['chromStart'] = chromStart", "piece": "bed['chrom'] = chromLift[chrom]"}
{"function_name": "add_memory", "function_define": "    c = '3sg'\n    dt = datetime.now()\n    RM.commit()", "piece": "dt = datetime.now()"}
{"function_name": "load_json", "function_define": "    found_fragments = []\n    if fragment['class'] == 'lossy':\n    lossy = True", "piece": "if fragment['class'] == 'lossy':"}
{"function_name": "get_fragments", "function_define": "    if lossy:\n    fragments = self.fragments\n    if as_dict:", "piece": "fragments = self.fragments"}
{"function_name": "get_base_peak", "function_define": "    if deisotoped:\n    base_peak = self.base_peak\n    if as_list:", "piece": "base_peak = self.base_peak"}
{"function_name": "get_peak_rank", "function_define": "    if deisotoped:\n    if as_list:\n    rank = peaks.index(peak) + 1", "piece": "if as_list:"}
{"function_name": "ion_type", "function_define": "    if self.name.startswith('P+P'):\n    if self.name.startswith('P'):\n    if self.spectrum.isLinear:", "piece": "if self.name.startswith('P'):"}
{"function_name": "create_fragments", "function_define": "    found_fragments = []\n    if fragment['class'] == 'lossy':\n    lossy = True", "piece": "if fragment['class'] == 'lossy':"}
{"function_name": "run_step", "function_define": "    Run one step simulation.\n    if not self._start_scenario:\n    self._manager.start_scenario()", "piece": "if not self._start_scenario:"}
{"function_name": "end_scenario", "function_define": "    if self._start_scenario:\n    self._manager.end_scenario()\n    self._start_scenario = False", "piece": "self._manager.end_scenario()"}
{"function_name": "clean_up", "function_define": "    client to start next episode.\n    if self._manager is not None:\n    self._manager.clean_up()", "piece": "if self._manager is not None:"}
{"function_name": "load_rnas", "function_define": "    dataset_rnas = observations_rnas\n    sequences_dict = None\n    if self.fp_fasta:", "piece": "sequences_dict = None"}
{"function_name": "compute_stats", "function_define": "    finite_obs = []\n    total_obs = 0\n    up_ref = 0", "piece": "total_obs = 0"}
{"function_name": "drawData", "function_define": "    canvas.delete('all')\n    canvas_width = 800\n    canvas_height = 400", "piece": "canvas_width = 800"}
{"function_name": "get_dir_data", "function_define": "    id_location = 0\n    id_file = 0\n    file_name = dir_file", "piece": "id_file = 0"}
{"function_name": "data_fun", "function_define": "    idx = idx_fun()\n    minibatch = []\n    for k in keys:", "piece": "minibatch = []"}
{"function_name": "neighbors_of", "function_define": "    global ftiles\n    global dirs\n    ncount = 0", "piece": "global dirs"}
{"function_name": "get_pdbflex_info", "function_define": "    assert len(infolist) == 1\n    newdict = {}\n    for k, v in infolist[0].items():", "piece": "newdict = {}"}
{"function_name": "voters_email", "function_define": "    if voter_constraints_include:\n    if voter_constraints_exclude:\n    for voter in voters:", "piece": "if voter_constraints_exclude:"}
{"function_name": "parse_exp", "function_define": "    index_a = get_a(input_str)\n    index_b = get_b(input_str)\n    index_c = get_c(input_str)", "piece": "index_b = get_b(input_str)"}
{"function_name": "calcsha1hash", "function_define": "    with open(myfile, 'rb') as f:\n    bytes = f.read()\n    if DEBUG:", "piece": "bytes = f.read()"}
{"function_name": "zipFiles", "function_define": "    if DEBUG:\n    print('\\nin zipfiles...')\n    print('myzipfile=', myzipfile)", "piece": "print('\\nin zipfiles...')"}
{"function_name": "copyFile", "function_define": "    if DEBUG:\n    print('\\n in copyFile')\n    print('myfile::', myfile)", "piece": "print('\\n in copyFile')"}
{"function_name": "get_median", "function_define": "    if not values:\n    sorted_values = deepcopy(values)\n    sorted_values.sort()", "piece": "sorted_values = deepcopy(values)"}
{"function_name": "init_edges", "function_define": "    for char in self.mapping:\n    char_width = char_image.shape[1]\n    if i - char_width + 1 < 0:", "piece": "char_width = char_image.shape[1]"}
{"function_name": "package_files", "function_define": "    paths = []\n    for d in dirs:\n    for filename in filenames:", "piece": "for d in dirs:"}
{"function_name": "show_chinese", "function_define": "    if len(ys) >= 32:\n    plt.xscale('symlog')\n    plt.yscale('symlog')", "piece": "plt.xscale('symlog')"}
{"function_name": "draw_picture", "function_define": "    length_x = []\n    length_y = []\n    for k, v in xy_list_tuple:", "piece": "length_y = []"}
{"function_name": "draw_box", "function_define": "    plt.figure(figsize=(10, 5))\n    if file:\n    plt.savefig(file)", "piece": "if file:"}
{"function_name": "get_port_mapping", "function_define": "    port_mapping = PortMapping()\n    for namespace in namespaces:\n    for key in port_table.getKeys():", "piece": "for namespace in namespaces:"}
{"function_name": "print_info", "function_define": "    print('task: ', self.task)\n    print('beta_1: ', self.beta_1)\n    print('beta_2: ', self.beta_2)", "piece": "print('beta_1: ', self.beta_1)"}
{"function_name": "test_make_pdf1", "function_define": "    if os.path.isfile(file_path):\n    self.assertTrue(result)\n    os.unlink(path_to_pdf)", "piece": "self.assertTrue(result)"}
{"function_name": "test_make_pdf2", "function_define": "    if os.path.isfile(file_path):\n    with open(file_path, 'rb') as f:\n    dummy_chapter.add_page(f.read())", "piece": "with open(file_path, 'rb') as f:"}
{"function_name": "_process", "function_define": "    env = os.environ.copy()\n    env[key] = str(value)\n    logging.info(cmd)", "piece": "env[key] = str(value)"}
{"function_name": "_filter_lines", "function_define": "    has_seen_problem_line = False\n    for line in lines:\n    if not has_seen_problem_line:", "piece": "for line in lines:"}
{"function_name": "_parse_output", "function_define": "    multiplier = int(multiplier)\n    base = int(base)\n    exponent = int(exponent)", "piece": "base = int(base)"}
{"function_name": "_get_ind_vars", "function_define": "    max_lits = None\n    for line in cnf_file.open():\n    match = re_to_match.search(line)", "piece": "for line in cnf_file.open():"}
{"function_name": "set_data", "function_define": "    self.code = '300770'\n    self.start = ''\n    self.end = ''", "piece": "self.start = ''"}
{"function_name": "import_data", "function_define": "    Load raw data from the disk.\n    index for each column\n    from csv import reader", "piece": "index for each column"}
{"function_name": "export_loop", "function_define": "    as `serialize.export_loop`.\n    data = {}\n    feels_empty = shaped == None", "piece": "data = {}"}
{"function_name": "to_native", "function_define": "    if value == EMPTY_DICT:\n    value = {}\n    value = value or {}", "piece": "value = {}"}
{"function_name": "_force_list", "function_define": "    raise TypeError()\n    if isinstance(value, dict):\n    except TypeError:", "piece": "if isinstance(value, dict):"}
{"function_name": "validate_items", "function_define": "    errors = {}\n    self.field.validate(value)\n    except ValidationError as e:", "piece": "self.field.validate(value)"}
{"function_name": "concat_msa", "function_define": "    alignments = []\n    for msa in msas:\n    for record in align._records:", "piece": "for msa in msas:"}
{"function_name": "plugin_list_all", "function_define": "    comp = {}\n    for v in ALL_VERSIONS:\n    p[v] = plugin_list(v)", "piece": "for v in ALL_VERSIONS:"}
{"function_name": "build_site", "function_define": "    print('Building plugin_data.js')\n    data = {}\n    plugin = plugin_from_path(path)", "piece": "data = {}"}
{"function_name": "handleTCP", "function_define": "    recv = user.socket.recv(1024)\n    for x in slices:\n    user.name = data['NAME']", "piece": "for x in slices:"}
{"function_name": "handleUDP", "function_define": "    while self.running:\n    recv = self.udp.recvfrom(1024)\n    if self.validReciever(recv[1]):", "piece": "recv = self.udp.recvfrom(1024)"}
{"function_name": "post_new", "function_define": "    elif request.method == 'POST':\n    form = PostForm(request.POST)\n    if form.is_valid():", "piece": "form = PostForm(request.POST)"}
{"function_name": "post_edit", "function_define": "    raise Http404\n    if request.method == 'POST':\n    if form.is_valid():", "piece": "if request.method == 'POST':"}
{"function_name": "view_camera", "function_define": "    print(ip_camera_url)\n    cctv = CCTV(ip_camera_url)\n    key = cv2.waitKey(1) & 255", "piece": "cctv = CCTV(ip_camera_url)"}
{"function_name": "make_pdf", "function_define": "    arg = params[:-2]\n    loc = params[-2]\n    scale = params[-1]", "piece": "loc = params[-2]"}
{"function_name": "normal_init", "function_define": "    if truncated:\n    if m.bias is not None:\n    m.bias.data.zero_()", "piece": "if m.bias is not None:"}
{"function_name": "build_encoder", "function_define": "    chosen encoder.\n    Returns:\n    An encoder instance.", "piece": "Returns:"}
{"function_name": "detail_resource", "function_define": "    driver = self.driver\n    self.list_resource()\n    self.sleep_time()", "piece": "self.list_resource()"}
{"function_name": "parse_undo", "function_define": "    undo_list = []\n    parsed = {}\n    if not undo:", "piece": "parsed = {}"}
{"function_name": "eval_logps", "function_define": "    p = p0[np.int(np.rint(s * l))]\n    l = len(p0) - 1\n    if s_eval != []:", "piece": "l = len(p0) - 1"}
{"function_name": "eval_mh_model", "function_define": "    if self.epsi is None:\n    w = 0.02\n    if self.epsi is None:", "piece": "w = 0.02"}
{"function_name": "changed_files", "function_define": "    if len(old.strip('0')) == 0:\n    del git_call[-2]\n    environ = os.environ.copy()", "piece": "del git_call[-2]"}
{"function_name": "_unscramble_name", "function_define": "    name = ' '.join(nameparts)\n    if '\\\\' not in name:\n    if name[0] == '\"':", "piece": "if '\\\\' not in name:"}
{"function_name": "pancake_sort", "function_define": "    left = 0\n    while left < number:\n    number -= 1", "piece": "while left < number:"}
{"function_name": "maximum_index", "function_define": "    index = 0\n    for _index in range(number):\n    if array[_index] > array[index]:", "piece": "for _index in range(number):"}
{"function_name": "luxRender", "function_define": "    configProps = lux.Properties()\n    sceneProps = lux.Properties()\n    scene = lux.Scene(sceneProps)", "piece": "sceneProps = lux.Properties()"}
{"function_name": "setNewIes", "function_define": "    self.iesFileLock.acquire()\n    f.close()\n    self.iesFileLock.release()", "piece": "f.close()"}
{"function_name": "_valid_config", "function_define": "    if key == 'absolute_import':\n    if key.startswith('_'):\n    val = __self[key]", "piece": "if key.startswith('_'):"}
{"function_name": "_request_post", "function_define": "    if content != '':\n    res_text = json.loads(content)\n    res_text = ''", "piece": "res_text = json.loads(content)"}
{"function_name": "test_remove_last", "function_define": "    self._list.remove_last()\n    for i in range(self.test_size):\n    self._list.insert_last(i)", "piece": "for i in range(self.test_size):"}
{"function_name": "test_remove_all", "function_define": "    self._list.remove_all()\n    self._list.insert_first(42)\n    self._list.remove_all()", "piece": "self._list.insert_first(42)"}
{"function_name": "test_is_empty", "function_define": "    for i in range(self.test_size):\n    self._list.insert_last(i)\n    for i in range(self.test_size):", "piece": "self._list.insert_last(i)"}
{"function_name": "test_iter", "function_define": "    for e in self._list:\n    self.fail()\n    for i in range(self.test_size):", "piece": "self.fail()"}
{"function_name": "test_reversed", "function_define": "    for e in reversed(self._list):\n    self.fail()\n    for i in range(self.test_size):", "piece": "self.fail()"}
{"function_name": "test_serialize", "function_define": "    s = pickle.dumps(self._list)\n    self._list = pickle.loads(s)\n    for i in range(self.test_size):", "piece": "self._list = pickle.loads(s)"}
{"function_name": "split_list", "function_define": "    target_list = []\n    cut = int(len(list) / n)\n    if cut == 0:", "piece": "cut = int(len(list) / n)"}
{"function_name": "run_trial_test", "function_define": "    info_space = InfoSpace()\n    info_space.tick('trial')\n    trial = Trial(spec, info_space)", "piece": "info_space.tick('trial')"}
{"function_name": "split_window", "function_define": "    Valid methods to add include:\n    Valid methods to add include:\n    Returns:", "piece": "Valid methods to add include:"}
{"function_name": "single_window", "function_define": "    Valid methods to add include:\n    land surface emissivity.\n    Defaults to 'avdan'.", "piece": "land surface emissivity."}
{"function_name": "emissivity", "function_define": "    from landsat 8 imagery\n    Defaults to 'avdan'.\n    Valid methods to add include:", "piece": "Defaults to 'avdan'."}
{"function_name": "fetch_data", "function_define": "    Arguments:\n    Returns:\n    data = hdulist[0].data", "piece": "Returns:"}
{"function_name": "magnifier", "function_define": "    Arguments:\n    y : input 2D map.\n    Returns:", "piece": "y : input 2D map."}
{"function_name": "horn_kernel", "function_define": "    horn_kernel : Horn shape kernel.\n    Arguments:\n    y (numpy array): input 2D map.", "piece": "Arguments:"}
{"function_name": "gaussian_kernel", "function_define": "    Arguments:\n    y (numpy array): input 2D map.\n    Returns:", "piece": "y (numpy array): input 2D map."}
{"function_name": "ch_mkdir", "function_define": "    Arguments:\n    Returns:\n    os.makedirs(directory)", "piece": "Returns:"}
{"function_name": "the_print", "function_define": "    if style == 'bold':\n    style = 1\n    elif style == 'underlined':", "piece": "style = 1"}
{"function_name": "true_objective", "function_define": "    p1 = torch.sigmoid(theta1)\n    p0 = (p1[0], p2[0])\n    p = (p1[1:], p2[1:])", "piece": "p0 = (p1[0], p2[0])"}
{"function_name": "rollout_binning", "function_define": "    for t in range(nsteps):\n    score1 += r1\n    score2 += r2", "piece": "score1 += r1"}
{"function_name": "test_multi_agent", "function_define": "    for fw in framework_iterator():\n    pg.train()\n    pg.stop()", "piece": "pg.train()"}
{"function_name": "isUserInList", "function_define": "    uList = []\n    if type(userList) is str:\n    uList = [userList]", "piece": "if type(userList) is str:"}
{"function_name": "filterListOnRe", "function_define": "    outList = []\n    for el in inList:\n    if re.search(inRe, el):", "piece": "for el in inList:"}
{"function_name": "download_dataset", "function_define": "    Download dataset\n    r = kwargs['session'].get(url)\n    r.raise_for_status()", "piece": "r = kwargs['session'].get(url)"}
{"function_name": "load_dataset", "function_define": "    key = f'{__name__}.{filename}'\n    if dataset_loaded:\n    globals()[key] = True", "piece": "if dataset_loaded:"}
{"function_name": "process_data", "function_define": "    df = Yle2019E(df)\n    df = delete_empty_rows(df)\n    df = attach_data(df)", "piece": "df = delete_empty_rows(df)"}
{"function_name": "correlation", "function_define": "    if pdf_file is not None:\n    pdf = PdfPages(pdf_file)\n    fig = plt.figure(figsize=(7, 7))", "piece": "pdf = PdfPages(pdf_file)"}
{"function_name": "stripDups", "function_define": "    result: list[str] = []\n    for item in l:\n    if item in result:", "piece": "for item in l:"}
{"function_name": "findFiles", "function_define": "    if not os.path.isdir(dir):\n    result: list[str] = []\n    for f in os.listdir(dir):", "piece": "result: list[str] = []"}
{"function_name": "objSha256", "function_define": "    toHash = {}\n    if len(keys) == 0:\n    toHash = obj", "piece": "if len(keys) == 0:"}
{"function_name": "downloadFile", "function_define": "    tmp = dest + '.tmp'\n    if os.path.isfile(dest):\n    r.raise_for_status()", "piece": "if os.path.isfile(dest):"}
{"function_name": "test_draw", "function_define": "    my = ConnectFour.Game()\n    for col in range(3):\n    for _ in range(6):", "piece": "for col in range(3):"}
{"function_name": "test_server", "function_define": "    time.sleep(3)\n    while True:\n    data = subprocess.getoutput(win)", "piece": "while True:"}
{"function_name": "parse_connection", "function_define": "    count = register(i, o)\n    tally = '_' + str(count)\n    if ak == 'In' or ak == 'Out':", "piece": "tally = '_' + str(count)"}
{"function_name": "getVersion", "function_define": "    if checkConnection() == True:\n    r = get(url)\n    page = r.text", "piece": "r = get(url)"}
{"function_name": "scrapeYoutube", "function_define": "    if self.go_no_go == 'go':\n    for v in self.vids:\n    self.videolist.append(tmp)", "piece": "for v in self.vids:"}
{"function_name": "scrapeDefinition", "function_define": "    if go_no_go == 'go':\n    if define_find == []:\n    raise Exception", "piece": "if define_find == []:"}
{"function_name": "node_encode", "function_define": "    node = discourse[node_index]\n    w1 = word_emb[0]\n    w2 = word_emb[-1]", "piece": "w1 = word_emb[0]"}
{"function_name": "test_safezip2", "function_define": "    with raises:\n    z = list(safezip2(x, y))\n    assert z == list(zip(x, y))", "piece": "z = list(safezip2(x, y))"}
{"function_name": "put_files", "function_define": "    if not os.path.exists(p):\n    raise SystemExit\n    files = glob.glob(path)", "piece": "raise SystemExit"}
{"function_name": "test_index_count", "function_define": "    l = self.create_list([1, 2, 3])\n    self.assertEqual(l[0], 1)\n    self.assertEqual(l[1], 2)", "piece": "self.assertEqual(l[0], 1)"}
{"function_name": "test_len_min_max", "function_define": "    l = self.create_list([1, 2, 3])\n    self.assertEqual(len(l), 3)\n    self.assertEqual(min(l), 1)", "piece": "self.assertEqual(len(l), 3)"}
{"function_name": "test_mutable", "function_define": "    l = self.create_list([1, 2, 3])\n    l[2] = 42\n    self.assertEqual(l[2], 42)", "piece": "l[2] = 42"}
{"function_name": "test_del", "function_define": "    l = self.create_list([1, 2013])\n    del l[0]\n    del l[1:]", "piece": "del l[0]"}
{"function_name": "test_pop_remove", "function_define": "    self.assertEqual(l.pop(), 7)\n    self.assertEqual(l.pop(0), 3)\n    l.extend([4, 5, 6])", "piece": "self.assertEqual(l.pop(0), 3)"}
{"function_name": "test_lset_issue", "function_define": "    l.insert(0, 5)\n    l.insert(0, 6)\n    l.append(7)", "piece": "l.insert(0, 6)"}
{"function_name": "search_connect", "function_define": "    numFound = c_int(0)\n    deviceIDs = intArray()\n    if numFound.value < 1:", "piece": "deviceIDs = intArray()"}
{"function_name": "config_spectrum", "function_define": "    rsa.SPECTRUM_SetDefault()\n    specSet = Spectrum_Settings()\n    specSet.span = span", "piece": "specSet = Spectrum_Settings()"}
{"function_name": "acquire_spectrum", "function_define": "    ready = c_bool(False)\n    traceData = traceArray()\n    outTracePoints = c_int(0)", "piece": "traceData = traceArray()"}
{"function_name": "spectrum_example", "function_define": "    search_connect()\n    cf = 2445300000.0\n    refLevel = -30", "piece": "cf = 2445300000.0"}
{"function_name": "config_block_iq", "function_define": "    recordLength = int(recordLength)\n    iqSampleRate = c_double(0)\n    time1 = []", "piece": "iqSampleRate = c_double(0)"}
{"function_name": "acquire_block_iq", "function_define": "    recordLength = int(recordLength)\n    ready = c_bool(False)\n    iqArray = c_float * recordLength", "piece": "ready = c_bool(False)"}
{"function_name": "block_iq_example", "function_define": "    search_connect()\n    cf = 1000000000.0\n    refLevel = 0", "piece": "cf = 1000000000.0"}
{"function_name": "config_DPX", "function_define": "    yTop = refLevel\n    yBottom = yTop - 100\n    dpxSet = DPX_SettingStruct()", "piece": "yBottom = yTop - 100"}
{"function_name": "dpx_example", "function_define": "    search_connect()\n    cf = 2445300000.0\n    refLevel = -30", "piece": "cf = 2445300000.0"}
{"function_name": "config_iq_stream", "function_define": "    bwActual = c_double(0)\n    sampleRate = c_double(0)\n    rsa.IQSTREAM_ClearAcqStatus()", "piece": "sampleRate = c_double(0)"}
{"function_name": "test_genesis", "function_define": "    tx = c.get_transaction(0, True)\n    assert len(tx.events) == 4\n    amap = tx.to_json_serializable()", "piece": "assert len(tx.events) == 4"}
{"function_name": "main_handler", "function_define": "    if mode == 'None':\n    elif mode == 'crawlerModel':\n    mainModel = '1'", "piece": "elif mode == 'crawlerModel':"}
{"function_name": "checkWin", "function_define": "    for i in range(5):\n    for i in range(5):\n    if checkRow(board[i:i + 21:5]):", "piece": "for i in range(5):"}
{"function_name": "body_ang_vel_pqr", "function_define": "    psi = angles[0]\n    theta = angles[1]\n    psi_p_dot = angles_dot[0]", "piece": "theta = angles[1]"}
{"function_name": "getMouthImage", "function_define": "    minx = miny = float('inf')\n    maxx = maxy = float('-inf')\n    minx = min(minx, x)", "piece": "maxx = maxy = float('-inf')"}
{"function_name": "getTeethScore", "function_define": "    area = height * width\n    ta = lab_ud\n    tu = luv_ud", "piece": "ta = lab_ud"}
{"function_name": "result_from_dir", "function_define": "    pics = os.listdir(pic_path)\n    meta = {}\n    images = []", "piece": "meta = {}"}
{"function_name": "print_network", "function_define": "    num_params = 0\n    for param in net.parameters():\n    num_params += param.numel()", "piece": "for param in net.parameters():"}
{"function_name": "print_setting", "function_define": "    print('init this train:')\n    print_network(net)\n    print('scale:', args.scale)", "piece": "print_network(net)"}
{"function_name": "batch_fft2d", "function_define": "    if inputs.dtype != tf.complex64:\n    if transpose:\n    outputs = tf.fft2d(inputs)", "piece": "if transpose:"}
{"function_name": "batch_ifft2d", "function_define": "    if transpose:\n    outputs = tf.ifft2d(inputs)\n    if transpose:", "piece": "outputs = tf.ifft2d(inputs)"}
{"function_name": "get_intersection", "function_define": "    x1 = max(rect1[0], rect2[0])\n    y1 = max(rect1[1], rect2[1])\n    x2 = min(rect1[2], rect2[2])", "piece": "y1 = max(rect1[1], rect2[1])"}
{"function_name": "get_crops", "function_define": "    im: Image ndarray\n    size_z: Target + context size\n    size_x: The resultant crop size", "piece": "size_z: Target + context size"}
{"function_name": "removeServer", "function_define": "    if server is None:\n    server.stop()\n    server.join()", "piece": "server.stop()"}
{"function_name": "set_fixed", "function_define": "    fixed = self.is_fixed()\n    if fixed:\n    self.update_xml()", "piece": "if fixed:"}
{"function_name": "readCSV2", "function_define": "    List = []\n    for row in reader:\n    List.append(row)", "piece": "for row in reader:"}
{"function_name": "readCSVbyColumn", "function_define": "    List = []\n    for row in reader:\n    if i == 0:", "piece": "for row in reader:"}
{"function_name": "serial_read", "function_define": "    import serial, time\n    reader = None\n    while reader == None:", "piece": "reader = None"}
{"function_name": "set_logger", "function_define": "    make_dir('logs')\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)", "piece": "logger = logging.getLogger(name)"}
{"function_name": "count_orbits", "function_define": "    dfs(NODE_ROOT)\n    orbits = 0\n    for node in values:", "piece": "orbits = 0"}
{"function_name": "find_path", "function_define": "    counter = 0\n    while node_a != NODE_ROOT:\n    node_a = parents[node_a]", "piece": "while node_a != NODE_ROOT:"}
{"function_name": "nan_throw", "function_define": "    stop = False\n    if (tensor != tensor).any():\n    print(name + ' has nans')", "piece": "if (tensor != tensor).any():"}
{"function_name": "squeeze2d", "function_define": "    if factor == 1:\n    size = input.size()\n    B = size[0]", "piece": "size = input.size()"}
{"function_name": "unsqueeze2d", "function_define": "    if factor == 1:\n    size = input.size()\n    B = size[0]", "piece": "size = input.size()"}
{"function_name": "get_padding", "function_define": "    if isinstance(padding, str):\n    if isinstance(kernel_size, int):\n    if isinstance(stride, int):", "piece": "if isinstance(kernel_size, int):"}
{"function_name": "get_weight", "function_define": "    w_shape = self.w_shape\n    if not self.LU:\n    if not reverse:", "piece": "if not self.LU:"}
{"function_name": "_get_bgp_config", "function_define": "    bgp_cfg = openconfig_bgp.Bgp()\n    ipv4_afsf.config.enabled = True\n    ipv6_afsf.config.enabled = True", "piece": "ipv4_afsf.config.enabled = True"}
{"function_name": "_render_canvas", "function_define": "    self.content_invalid = False\n    self.app.clearCanvas('main')\n    self._draw_square(color, (x, y))", "piece": "self.app.clearCanvas('main')"}
{"function_name": "_draw_square", "function_define": "    s = self.square_size\n    x = position[0] * s\n    y = position[1] * s", "piece": "x = position[0] * s"}
{"function_name": "sandwich", "function_define": "    func's docstring)\n    print(UPPER_SLICE)\n    func(*args, **kwargs)", "piece": "print(UPPER_SLICE)"}
{"function_name": "random_hodge", "function_define": "    h12 = []\n    with open('poly.txt', 'r') as f:\n    content = f.readlines()", "piece": "with open('poly.txt', 'r') as f:"}
{"function_name": "camb_params", "function_define": "    pars = camb.CAMBparams()\n    results = camb.get_results(pars)\n    totCL = powers['total']", "piece": "results = camb.get_results(pars)"}
{"function_name": "effective_zvalue", "function_define": "    xtem = []\n    ytem = []\n    dytem = []", "piece": "ytem = []"}
{"function_name": "parameters", "function_define": "    if supermassive == False:\n    rg = g * bhm\n    X, Y = np.meshgrid(mm, a)", "piece": "rg = g * bhm"}
{"function_name": "black_hole_data", "function_define": "    example_mass = [10, 24]\n    example_spin = [0.3, 0.7]\n    example_mass_error = [0.95, 1.4]", "piece": "example_spin = [0.3, 0.7]"}
{"function_name": "cov_ellipse", "function_define": "    if q is not None:\n    q = np.asarray(q)\n    elif nsig is not None:", "piece": "q = np.asarray(q)"}
{"function_name": "parse_cache_file", "function_define": "    cache_file_parsed = {}\n    got_squid_meta = False\n    payload = b''", "piece": "got_squid_meta = False"}
{"function_name": "parse_squid_meta", "function_define": "    squid_meta_parsed = {}\n    cache_key = squid_meta[11:27]\n    timestamp = squid_meta[32:39]", "piece": "cache_key = squid_meta[11:27]"}
{"function_name": "parse_references", "function_define": "    references = []\n    for ref in soup.find_all('a'):\n    insert = {}", "piece": "for ref in soup.find_all('a'):"}
{"function_name": "convert_abs_url", "function_define": "    if ref == None:\n    if ref[:4] == 'http':\n    if ref[:1] == '/':", "piece": "if ref[:4] == 'http':"}
{"function_name": "load_object", "function_define": "    page.get_wikidata()\n    de_page.get_wikidata()\n    ru_page.get_wikidata()", "piece": "de_page.get_wikidata()"}
{"function_name": "thread_fun", "function_define": "    while True:\n    obj, obj_type = queue.get()\n    self.load_object(obj, obj_type)", "piece": "obj, obj_type = queue.get()"}
{"function_name": "resolve_ids", "function_define": "    if rlt.startswith('P'):\n    if ent.startswith('Q'):\n    self._info['entities'] = {}", "piece": "if ent.startswith('Q'):"}
{"function_name": "getEntity", "function_define": "    self._page.get_wikidata()\n    loading_queue = Queue()\n    for ent in ents:", "piece": "loading_queue = Queue()"}
{"function_name": "copy_stream", "function_define": "    buffer_size = 1024 * 1024\n    while n > 0:\n    to_read = min(buffer_size, n)", "piece": "while n > 0:"}
{"function_name": "read_udta", "function_define": "    assert size == left + 8\n    body = stream.read(left)\n    class Udta(Atom):", "piece": "body = stream.read(left)"}
{"function_name": "read_full_atom", "function_define": "    value = read_uint(stream)\n    version = value >> 24\n    flags = value & 16777215", "piece": "version = value >> 24"}
{"function_name": "read_full_atom2", "function_define": "    value = read_uint(stream)\n    version = value >> 24\n    flags = value & 16777215", "piece": "version = value >> 24"}
{"function_name": "read_mvhd", "function_define": "    value = read_full_atom(stream)\n    left -= 4\n    time_scale = read_uint(stream)", "piece": "left -= 4"}
{"function_name": "read_tkhd", "function_define": "    value = read_full_atom(stream)\n    left -= 4\n    track_id = read_uint(stream)", "piece": "left -= 4"}
{"function_name": "read_mdhd", "function_define": "    left -= 4\n    if ver == 1:\n    time_scale = read_uint(stream)", "piece": "if ver == 1:"}
{"function_name": "read_hdlr", "function_define": "    value = read_full_atom(stream)\n    left -= 4\n    handler_type = read_uint(stream)", "piece": "left -= 4"}
{"function_name": "read_vmhd", "function_define": "    value = read_full_atom(stream)\n    left -= 4\n    assert left == 8", "piece": "left -= 4"}
{"function_name": "read_stsd", "function_define": "    value = read_full_atom(stream)\n    left -= 4\n    entry_count = read_uint(stream)", "piece": "left -= 4"}
{"function_name": "read_avc1", "function_define": "    skip_zeros(stream, 6)\n    skip_zeros(stream, 2)\n    skip_zeros(stream, 2)", "piece": "skip_zeros(stream, 2)"}
{"function_name": "read_stts", "function_define": "    value = read_full_atom(stream)\n    left -= 4\n    entry_count = read_uint(stream)", "piece": "left -= 4"}
{"function_name": "read_stss", "function_define": "    value = read_full_atom(stream)\n    left -= 4\n    entry_count = read_uint(stream)", "piece": "left -= 4"}
{"function_name": "read_stsc", "function_define": "    value = read_full_atom(stream)\n    left -= 4\n    entry_count = read_uint(stream)", "piece": "left -= 4"}
{"function_name": "read_stsz", "function_define": "    value = read_full_atom(stream)\n    left -= 4\n    sample_size = read_uint(stream)", "piece": "left -= 4"}
{"function_name": "read_stco", "function_define": "    value = read_full_atom(stream)\n    left -= 4\n    entry_count = read_uint(stream)", "piece": "left -= 4"}
{"function_name": "read_ctts", "function_define": "    value = read_full_atom(stream)\n    left -= 4\n    entry_count = read_uint(stream)", "piece": "left -= 4"}
{"function_name": "read_smhd", "function_define": "    value = read_full_atom(stream)\n    left -= 4\n    balance = read_ushort(stream)", "piece": "left -= 4"}
{"function_name": "read_mp4a", "function_define": "    time_scale = read_ushort(stream)\n    left -= 28\n    atom = read_atom(stream)", "piece": "left -= 28"}
{"function_name": "read_esds", "function_define": "    value = read_uint(stream)\n    version = value >> 24\n    assert version == 0", "piece": "version = value >> 24"}
{"function_name": "read_mdat", "function_define": "    source_start = stream.tell()\n    source_size = left\n    skip(stream, left)", "piece": "source_size = left"}
{"function_name": "read_atom", "function_define": "    header = stream.read(8)\n    if not header:\n    assert len(header) == 8", "piece": "if not header:"}
{"function_name": "parse_atoms", "function_define": "    atoms = []\n    while True:\n    atom = read_atom(stream)", "piece": "while True:"}
{"function_name": "read_mp4", "function_define": "    print(stream.name)\n    atoms = parse_atoms(stream)\n    assert len(moov) == 1", "piece": "atoms = parse_atoms(stream)"}
{"function_name": "merge_stts", "function_define": "    sample_list = []\n    for samples in samples_list:\n    sample_list += samples", "piece": "for samples in samples_list:"}
{"function_name": "merge_stss", "function_define": "    results = []\n    start = 0\n    start += sample_number_list", "piece": "start = 0"}
{"function_name": "merge_stsc", "function_define": "    results = []\n    chunk_index = 1\n    for i in range(len(chunks)):", "piece": "chunk_index = 1"}
{"function_name": "merge_stco", "function_define": "    offset = 0\n    results = []\n    offset += mdat.size - 8", "piece": "results = []"}
{"function_name": "merge_mdats", "function_define": "    class multi_mdat_atom(Atom):\n    self.write1(stream)\n    self.write2(stream)", "piece": "self.write1(stream)"}
{"function_name": "merge_moov", "function_define": "    mvhd_duration = 0\n    for x in moovs:\n    tkhd_durations = [0, 0]", "piece": "for x in moovs:"}
{"function_name": "merge_mp4s", "function_define": "    assert files\n    mp4s = list(map(read_mp4, ins))\n    moov = merge_moov(moovs, mdats)", "piece": "mp4s = list(map(read_mp4, ins))"}
{"function_name": "guess_output", "function_define": "    import os.path\n    n = min(map(len, inputs))\n    for i in reversed(range(1, n)):", "piece": "n = min(map(len, inputs))"}
{"function_name": "concat_mp4", "function_define": "    assert mp4s, 'no mp4 file found'\n    import os.path\n    if not output:", "piece": "import os.path"}
{"function_name": "random_game", "function_define": "    correct = 0\n    for i in range(words):\n    if self.get_random_character():", "piece": "for i in range(words):"}
{"function_name": "add_point", "function_define": "    tags = tags or []\n    for tag in tags:\n    self.buffer[tag] += 1", "piece": "for tag in tags:"}
{"function_name": "chi_square", "function_define": "    input data\n    input class labels\n    F, pval = chi2(X, y)", "piece": "input class labels"}
{"function_name": "stoporad", "function_define": "    topo ([type]): [description]\n    cosz ([type]): [description]\n    azimuth ([type]): [description]", "piece": "cosz ([type]): [description]"}
{"function_name": "_choose_submit", "function_define": "    form = wrapped_form.form\n    criteria = {'name': name}\n    if value:", "piece": "criteria = {'name': name}"}
{"function_name": "flip_cmd", "function_define": "    if cmd[0] == 'nop':\n    cmd[0] = 'jmp'\n    elif cmd[0] == 'jmp':", "piece": "cmd[0] = 'jmp'"}
{"function_name": "handle_message", "function_define": "    word = event.message.text\n    r = requests.get(url)\n    r.encoding = r.apparent_encoding", "piece": "r = requests.get(url)"}
{"function_name": "_set_pim_int_cmd", "function_define": "    if hasattr(v, '_utype'):\n    v = v._utype(v)\n    except (TypeError, ValueError):", "piece": "v = v._utype(v)"}
{"function_name": "_render_level", "function_define": "    for x in range(level.width):\n    for y in range(level.height):\n    for o in level._all_objects:", "piece": "for y in range(level.height):"}
{"function_name": "render_event", "function_define": "    if o.faction == '1':\n    color = [255, 0, 0]\n    color = [0, 0, 255]", "piece": "color = [255, 0, 0]"}
{"function_name": "GetAllCombi", "function_define": "    if n == 1:\n    elif n == 2:\n    elif n == 3:", "piece": "elif n == 2:"}
{"function_name": "combinationCount", "function_define": "    count = 0\n    while m <= n:\n    count += int((m + 2) / 2)", "piece": "while m <= n:"}
{"function_name": "scale_func", "function_define": "    Parameters\n    shift_vector\n    Examples", "piece": "shift_vector"}
{"function_name": "get_vector", "function_define": "    this vector field.\n    Parameters\n    The root point of the vector.", "piece": "Parameters"}
{"function_name": "start_animation", "function_define": "    Parameters\n    warm_up : bool, optional\n    flow_speed", "piece": "warm_up : bool, optional"}
{"function_name": "end_animation", "function_define": "    ValueError\n    Examples\n    class EndAnimation(Scene):", "piece": "Examples"}
{"function_name": "runge_kutta", "function_define": "    Parameters\n    step_size\n    How much the point is shifted.", "piece": "step_size"}
{"function_name": "hide_and_wait", "function_define": "    if alpha == 0:\n    mob.set_stroke(opacity=0)\n    elif alpha == 1:", "piece": "mob.set_stroke(opacity=0)"}
{"function_name": "pos_to_rgb", "function_define": "    vec = self.func(pos)\n    alpha *= len(self.rgbs) - 1\n    c1 = self.rgbs[int(alpha)]", "piece": "alpha *= len(self.rgbs) - 1"}
{"function_name": "compute_whdr", "function_define": "    error_sum = 0.0\n    error_equal_sum = 0.0\n    error_inequal_sum = 0.0", "piece": "error_equal_sum = 0.0"}
{"function_name": "to_pos_strand", "function_define": "    if send >= sstart:\n    sstart = slen - sstart + 1\n    send = slen - send + 1", "piece": "sstart = slen - sstart + 1"}
{"function_name": "calc_amp_len", "function_define": "    x_min = min([x_start, x_end])\n    x_max = max([x_start, x_end])\n    y_min = min([y_start, y_end])", "piece": "x_max = max([x_start, x_end])"}
{"function_name": "hits2info", "function_define": "    info = {}\n    status = {'no_amp': 0}\n    amp_lens = []", "piece": "status = {'no_amp': 0}"}
{"function_name": "edit_primer_info", "function_define": "    if infile is None:\n    os.makedirs(outdir)\n    outfile = prefix + '.tsv'", "piece": "os.makedirs(outdir)"}
{"function_name": "execute_command", "function_define": "    env = os.environ.copy()\n    result = proc.communicate()\n    proc_stdout = result[0]", "piece": "result = proc.communicate()"}
{"function_name": "testWorker", "function_define": "    assertStatusOk(resp)\n    jobModel = Job()\n    job = jobModel.save(job)", "piece": "jobModel = Job()"}
{"function_name": "testWorkerCancel", "function_define": "    jobModel = Job()\n    job = jobModel.save(job)\n    jobModel.scheduleJob(job)", "piece": "job = jobModel.save(job)"}
{"function_name": "on_become", "function_define": "    cmd = {u'command': u'enable'}\n    if passwd:\n    cmd[u'answer'] = passwd", "piece": "if passwd:"}
{"function_name": "on_unbecome", "function_define": "    prompt = self._get_prompt()\n    if prompt is None:\n    if b'(config' in prompt:", "piece": "if prompt is None:"}
{"function_name": "test_route_mount", "function_define": "    app = Starlette()\n    router = StarletteRouter(app)\n    router.export()", "piece": "router = StarletteRouter(app)"}
{"function_name": "cv_performance", "function_define": "    Parameters\n    n = number of examples\n    d = number of features", "piece": "n = number of examples"}
{"function_name": "lineplot", "function_define": "    Make a line plot.\n    Parameters\n    xx = range(len(x))", "piece": "Parameters"}
{"function_name": "check_overfit", "function_define": "    y = util.code_truVrest()\n    X, colnames = util.make_full_X()\n    n = len(y)", "piece": "X, colnames = util.make_full_X()"}
{"function_name": "exp_main", "function_define": "    test = str_to_bool(test)\n    exp_id = 'duke-seg2'\n    debug = False", "piece": "exp_id = 'duke-seg2'"}
{"function_name": "mask_tokens", "function_define": "    tokenizer: Tokenizer.\n    Returns:\n    inputs: Masked input tokens.", "piece": "Returns:"}
{"function_name": "eval_agent", "function_define": "    h = np.zeros((num_games,))\n    for game in range(num_games):\n    s = env.reset()", "piece": "for game in range(num_games):"}
{"function_name": "get_user", "function_define": "    response.raise_for_status()\n    data: UserInfo = response.json()\n    feide_userid = data['sub']", "piece": "data: UserInfo = response.json()"}
{"function_name": "_get_results", "function_define": "    response = data['Response']\n    if self.name in response:\n    result = response[self.name]", "piece": "if self.name in response:"}
{"function_name": "_get_data", "function_define": "    raise XeroBadRequest(response)\n    raise XeroUnauthorized(response)\n    raise XeroForbidden(response)", "piece": "raise XeroUnauthorized(response)"}
{"function_name": "create_or_save", "function_define": "    if 'Id' not in data:\n    body = data\n    if summarize_errors:", "piece": "body = data"}
{"function_name": "_upload_file", "function_define": "    if folderId is not None:\n    filename = self.filename(path)\n    files = dict()", "piece": "filename = self.filename(path)"}
{"function_name": "check_inputs", "function_define": "    yes = 'y'\n    no = 'n'\n    if resp.lower() == yes.lower():", "piece": "no = 'n'"}
{"function_name": "BEGIN_EXAMPLE", "function_define": "    from mpi4py import MPI\n    MPI.COMM_WORLD.Barrier()\n    if MPI.COMM_WORLD.rank == 0:", "piece": "MPI.COMM_WORLD.Barrier()"}
{"function_name": "END_EXAMPLE", "function_define": "    from mpi4py import MPI\n    MPI.COMM_WORLD.Barrier()\n    if MPI.COMM_WORLD.rank == 0:", "piece": "MPI.COMM_WORLD.Barrier()"}
{"function_name": "get_perm", "function_define": "    apkf = APK(path)\n    apk_permissions = []\n    for i in apkf.get_permissions():", "piece": "apk_permissions = []"}
{"function_name": "set_position", "function_define": "    b1 = bc.BaxterClass()\n    if limb == 'right':\n    print(joint_command)", "piece": "if limb == 'right':"}
{"function_name": "listen_server", "function_define": "    if ':' in local_address:\n    if s1 is None:\n    s1 = socket.socket()", "piece": "if s1 is None:"}
{"function_name": "copy_all", "function_define": "    while True:\n    io2.sendall(io1.recv())\n    except EOFError:", "piece": "io2.sendall(io1.recv())"}
{"function_name": "cmsg_add_link", "function_define": "    if len(info) == 1:\n    info = info[0]\n    elif len(info) >= 4:", "piece": "info = info[0]"}
{"function_name": "convert_time", "function_define": "    if minutes >= 1:\n    minutes = np.floor(t / 60.0)\n    t_str = str(seconds) + 's'", "piece": "minutes = np.floor(t / 60.0)"}
{"function_name": "sample_y", "function_define": "    Parameters\n    n_samples : int, default: 1\n    evaluated at query points.", "piece": "n_samples : int, default: 1"}
{"function_name": "tri_on_move", "function_define": "    if event.inaxes == tri_ax1:\n    elif event.inaxes == tri_ax2:\n    tri_fig.canvas.draw_idle()", "piece": "elif event.inaxes == tri_ax2:"}
{"function_name": "task_type", "function_define": "    The type of task run.\n    task_type = 'UNKNOWN_ENUM_VALUE'\n    self._task_type = task_type", "piece": "task_type = 'UNKNOWN_ENUM_VALUE'"}
{"function_name": "TicketUpdateView", "function_define": "    an existing ticket.\n    an instance of a TicketForm\n    if request.POST:", "piece": "an instance of a TicketForm"}
{"function_name": "SplitTicketView", "function_define": "    an instance of a SplitTicketForm\n    except Ticket.DoesNotExist:\n    if request.method == 'POST':", "piece": "except Ticket.DoesNotExist:"}
{"function_name": "upvote_ticket", "function_define": "    for this ticket yet.'\n    except User.DoesNotExist:\n    user = None", "piece": "except User.DoesNotExist:"}
{"function_name": "parseEtree", "function_define": "    parser = None\n    rootNode = doc.getroot()\n    if rootClass is None:", "piece": "rootNode = doc.getroot()"}
{"function_name": "parseString", "function_define": "    if sys.version_info.major == 2:\n    from StringIO import StringIO\n    parser = None", "piece": "from StringIO import StringIO"}
{"function_name": "parseLiteral", "function_define": "    parser = None\n    rootNode = doc.getroot()\n    if rootClass is None:", "piece": "rootNode = doc.getroot()"}
{"function_name": "do_meta_update", "function_define": "    updator = MetaUpdater()\n    updator._go()\n    updator = MetaUpdater()", "piece": "updator._go()"}
{"function_name": "get_times", "function_define": "    update_times = []\n    for blob, in aps:\n    job_dict = pickle.loads(blob)", "piece": "for blob, in aps:"}
{"function_name": "update_plot", "function_define": "    yr_lst_temp = yr_lst\n    yr_lst = []\n    yr_lst.append(year)", "piece": "yr_lst = []"}
{"function_name": "update_plot2", "function_define": "    yr_lst_temp = yr_lst\n    yr_lst = []\n    yr_lst.append(year)", "piece": "yr_lst = []"}
{"function_name": "update_plot3", "function_define": "    yr_lst_temp = yr_lst\n    yr_lst = []\n    yr_lst.append(year)", "piece": "yr_lst = []"}
{"function_name": "update_plot4", "function_define": "    yr_lst_temp = yr_lst\n    yr_lst = []\n    yr_lst.append(year)", "piece": "yr_lst = []"}
{"function_name": "update_plot5", "function_define": "    yr_lst_temp = yr_lst\n    yr_lst = []\n    yr_lst.append(year)", "piece": "yr_lst = []"}
{"function_name": "post_list", "function_define": "    db.add(new_post)\n    db.commit()\n    db.refresh(new_post)", "piece": "db.commit()"}
{"function_name": "update_list", "function_define": "    post = post_query.first()\n    if post is None:\n    db.commit()", "piece": "if post is None:"}
{"function_name": "delete_list", "function_define": "    post = post_query.first()\n    if post is None:\n    db.commit()", "piece": "if post is None:"}
{"function_name": "exec_module", "function_define": "    if is_old_facts:\n    for key in self.module_args:\n    setattr(self, key, kwargs[key])", "piece": "for key in self.module_args:"}
{"function_name": "list_items", "function_define": "    except CloudError as exc:\n    results = []\n    for item in response:", "piece": "results = []"}
{"function_name": "factor_product", "function_define": "    Parameters\n    args: `BaseFactor` instances.\n    factors to be multiplied", "piece": "args: `BaseFactor` instances."}
{"function_name": "factor_divide", "function_define": "    Parameters\n    phi1: Factor\n    The Dividend.", "piece": "phi1: Factor"}
{"function_name": "reset_flags", "function_define": "    if flags_to_reset == 'all':\n    self.flags = set([])\n    elif flags_to_reset:", "piece": "self.flags = set([])"}
{"function_name": "check_location", "function_define": "    self.bad_records = 0\n    for variant in self:\n    if 'BR' in variant.flags:", "piece": "for variant in self:"}
{"function_name": "get_location", "function_define": "    if not self.description:\n    self.description = {}\n    if not self.features:", "piece": "self.description = {}"}
{"function_name": "subclustering", "function_define": "    for record in self:\n    if len(record) < 3:\n    continue", "piece": "if len(record) < 3:"}
{"function_name": "gff_string", "function_define": "    if self.flags:\n    if self.description:\n    if self.subclusters != None:", "piece": "if self.description:"}
{"function_name": "filter_by_flags", "function_define": "    filtered_records = []\n    filtered_out_records = []\n    for record in self.records:", "piece": "filtered_out_records = []"}
{"function_name": "statistics", "function_define": "    plt.subplot(1, 1, 1)\n    plt.suptitle(title)\n    counts = self.count()", "piece": "plt.suptitle(title)"}
{"function_name": "do_compute", "function_define": "    row = grid.iloc[x, :]\n    eta = row['eta']\n    max_depth = row['max_depth']", "piece": "eta = row['eta']"}
{"function_name": "post_waterfalls", "function_define": "    new_waterfall = request.json\n    WaterfallModel(**new_waterfall)\n    abort(400)", "piece": "WaterfallModel(**new_waterfall)"}
{"function_name": "put_waterfalls", "function_define": "    changes = request.json\n    WaterfallModel(**changes)\n    if not repo.check_by_id(uid):", "piece": "WaterfallModel(**changes)"}
{"function_name": "get_task", "function_define": "    subtask_errors.\n    of subtasks.\n    query_params = []", "piece": "of subtasks."}
{"function_name": "create_task", "function_define": "    Create a new task in Drydock\n    endpoint = 'v1.0/tasks'\n    self._check_response(resp)", "piece": "endpoint = 'v1.0/tasks'"}
{"function_name": "validate_design", "function_define": "    endpoint = 'v1.0/validatedesign'\n    body = {'href': href}\n    self._check_response(resp)", "piece": "body = {'href': href}"}
{"function_name": "_check_response", "function_define": "    if resp.status_code == 401:\n    elif resp.status_code == 403:\n    elif not resp.ok:", "piece": "elif resp.status_code == 403:"}
{"function_name": "list_models_1_0", "function_define": "    files = []\n    subdir = check.model_1_0(subdir)\n    if ext == '.cellml':", "piece": "subdir = check.model_1_0(subdir)"}
{"function_name": "list_passes_1_0", "function_define": "    should pass validation.\n    files = list_models_1_0('valid')\n    if debug:", "piece": "files = list_models_1_0('valid')"}
{"function_name": "assert_valid", "function_define": "    the test result is a ``fail``.\n    result is an ``xfail``.\n    result is a ``fail``.", "piece": "result is an ``xfail``."}
{"function_name": "assert_invalid", "function_define": "    Arguments:\n    A string identifying the model\n    The path to the model file", "piece": "A string identifying the model"}
{"function_name": "separation", "function_define": "    if self > other:\n    other, self = (self, other)\n    if self.end > other.start:", "piece": "other, self = (self, other)"}
{"function_name": "trainingcurve", "function_define": "    testresults = {}\n    trainresults = {}\n    for params in modelparams:", "piece": "trainresults = {}"}
{"function_name": "binarize_file", "function_define": "    with open(input_file, 'r') as f:\n    for line in f:\n    if line.strip():", "piece": "for line in f:"}
{"function_name": "kappa_and_b", "function_define": "    Parameters\n    uTau : float\n    sampledU : 1d array", "piece": "uTau : float"}
{"function_name": "utau_iteration", "function_define": "    Parameters\n    uTau : float\n    sampledU : 1d array", "piece": "uTau : float"}
{"function_name": "get_latest_only", "function_define": "    tools_list = []\n    for tool in tools_yaml['tools']:\n    new_entry = {}", "piece": "for tool in tools_yaml['tools']:"}
{"function_name": "add_sections", "function_define": "    base_tools_labels = {}\n    for tool in base_dict['tools']:\n    for tool in new_tools['tools']:", "piece": "for tool in base_dict['tools']:"}
{"function_name": "update_from_base", "function_define": "    tools_list = []\n    updated_names = []\n    base_tools = {}", "piece": "updated_names = []"}
{"function_name": "start_app", "function_define": "    app = wx.App(0)\n    model: PETPModel = build_model()\n    view: PETPView = build_view()", "piece": "model: PETPModel = build_model()"}
{"function_name": "estimate_shape", "function_define": "    coordinates in each axis.\n    coord (array): Coordinates.\n    ndim = coord.shape[-1]", "piece": "coord (array): Coordinates."}
{"function_name": "nufft_adjoint", "function_define": "    Returns:\n    array: Transformed array.\n    See Also:", "piece": "array: Transformed array."}
{"function_name": "_scale_coord", "function_define": "    ndim = coord.shape[-1]\n    with device:\n    coord = scale * coord + shift", "piece": "with device:"}
{"function_name": "_get_ugly_number", "function_define": "    n (int): Base number.\n    if n <= 1:\n    ugly_nums = [1]", "piece": "if n <= 1:"}
{"function_name": "assign_batchs", "function_define": "    r = range(int(self.Y.shape[0]))\n    random.shuffle(r, random.random)\n    batches = list()", "piece": "random.shuffle(r, random.random)"}
{"function_name": "ForwardFunction", "function_define": "    X = self.X[self.batches[i]]\n    Y = self.Y[self.batches[i]]\n    self.objective = p", "piece": "Y = self.Y[self.batches[i]]"}
{"function_name": "get_grads", "function_define": "    self.initialise_theta()\n    k = self.ForwardFunction(i)\n    self.objective.backward()", "piece": "k = self.ForwardFunction(i)"}
{"function_name": "question_list", "function_define": "    if search_term:\n    limit = 25\n    if search_term:", "piece": "limit = 25"}
{"function_name": "question_vote", "function_define": "    g.user = User.query.get(user)\n    abort(404)\n    if vote:", "piece": "abort(404)"}
{"function_name": "reply_vote", "function_define": "    if vote:\n    db.session.delete(vote)\n    db.session.commit()", "piece": "db.session.delete(vote)"}
{"function_name": "reply_flag", "function_define": "    if flag:\n    db.session.delete(flag)\n    db.session.commit()", "piece": "db.session.delete(flag)"}
{"function_name": "_parse_args", "function_define": "    except UnboundLocalError:\n    if options.version:\n    if not args or options.help:", "piece": "if options.version:"}
{"function_name": "_perform_command", "function_define": "    command = args[0]\n    if command == 'for':\n    command = 'fordo'", "piece": "if command == 'for':"}
{"function_name": "_verbose", "function_define": "    if self.context.verbosity:\n    fp.write(msg % args)\n    except TypeError as err:", "piece": "fp.write(msg % args)"}
{"function_name": "run_evaluation", "function_define": "    timer = -time.time()\n    if np.any(seg_array < 0):\n    if np.any(gt_array < 0):", "piece": "if np.any(seg_array < 0):"}
{"function_name": "create_nodes", "function_define": "    for cert in all_certs:\n    matched_count = 0\n    if 'censys_count' in cert:", "piece": "matched_count = 0"}
{"function_name": "extract_slice", "function_define": "    hf = h5py.File(data_file, 'r')\n    print(hf.keys())\n    hf_ds = hf[dataset]", "piece": "print(hf.keys())"}
{"function_name": "change_status", "function_define": "    must provide conclusion.\n    Defaults to `None`.\n    must provide conclusion.", "piece": "Defaults to `None`."}
{"function_name": "safety_checking", "function_define": "    with self.safety_checking():\n    print(x)\n    RuntimeError: If not safe.", "piece": "print(x)"}
{"function_name": "take_flat_fields", "function_define": "    if cameras is None:\n    cameras = self.cameras\n    flat_config.update(kwargs)", "piece": "cameras = self.cameras"}
{"function_name": "prepare_cameras", "function_define": "    if drop:\n    for cam_name in failed_cameras:\n    self.remove_camera(cam_name)", "piece": "for cam_name in failed_cameras:"}
{"function_name": "_take_autoflats", "function_define": "    Default: 0.17.\n    Default: 0.05.\n    raise a TimeoutError instead.", "piece": "Default: 0.05."}
{"function_name": "_safe_sleep", "function_define": "    timer = CountdownTimer(duration)\n    while not timer.expired():\n    time.sleep(interval)", "piece": "while not timer.expired():"}
{"function_name": "test_keep_extra", "function_define": "    assert 'name' in row\n    assert 'email' in row\n    assert 'zip' in row", "piece": "assert 'email' in row"}
{"function_name": "line_intersect", "function_define": "    DET_TOLERANCE = 1e-08\n    x1, y1 = pt1\n    x2, y2 = pt2", "piece": "x1, y1 = pt1"}
{"function_name": "construct_maze", "function_define": "    if maze_id == 0:\n    if length != 1:\n    elif maze_id == 1:", "piece": "if length != 1:"}
{"function_name": "plot_ray", "function_define": "    structure = self.MAZE_STRUCTURE\n    for i in range(len(structure)):\n    cell = structure[i][j]", "piece": "for i in range(len(structure)):"}
{"function_name": "plot_state", "function_define": "    if state:\n    self.wrapped_env.reset(state)\n    for i in range(len(structure)):", "piece": "self.wrapped_env.reset(state)"}
{"function_name": "vis_datum_mask", "function_define": "    datum = dataset.random_datum()\n    fig = plt.figure()\n    fig.add_subplot(1, 2, 1)", "piece": "fig = plt.figure()"}
{"function_name": "datum_with_track", "function_define": "    Draws bounding boxes on image.\n    datum:      Datum Object\n    Returns:", "piece": "datum:      Datum Object"}
{"function_name": "image_with_box", "function_define": "    path:       str (path to image)\n    box:        [x, y, w, h]\n    color:      box color", "piece": "box:        [x, y, w, h]"}
{"function_name": "show_plt", "function_define": "    Plots image in current axis\n    arr:        image as np.array\n    self.ax.imshow(arr)", "piece": "arr:        image as np.array"}
{"function_name": "_get_targets", "function_define": "    var - settings module\n    pl - list of alive players\n    nick - nick of the mad scientist", "piece": "pl - list of alive players"}
{"function_name": "on_del_player", "function_define": "    pl = evt.data['pl']\n    while len(prots1) > 0:\n    pl = aevt.data['pl']", "piece": "while len(prots1) > 0:"}
{"function_name": "get_records", "function_define": "    url = kwargs['BASE_URL']\n    for fact in facts:\n    yield record", "piece": "for fact in facts:"}
{"function_name": "manning_eql", "function_define": "    xi : float\n    fixed_charge : str quantity\n    solution : Solution object", "piece": "fixed_charge : str quantity"}
{"function_name": "Color8to16", "function_define": "    r = color8 / 4 / 8\n    g = color8 / 4 % 8\n    b = color8 % 4", "piece": "g = color8 / 4 % 8"}
{"function_name": "CreatePalette", "function_define": "    output = StringIO.StringIO()\n    for i in xrange(0, 256):\n    color = Color8to16(i)", "piece": "for i in xrange(0, 256):"}
{"function_name": "delete_admin", "function_define": "    users = User.query.all()\n    for u in users:\n    db.session.delete(u)", "piece": "for u in users:"}
{"function_name": "get_dirs_files", "function_define": "    files_found = os.listdir(path)\n    files_found.sort()\n    dirs = list()", "piece": "files_found.sort()"}
{"function_name": "custom_search", "function_define": "    form = job_searchForm(data)\n    jobs_list = form.search()\n    if job_type:", "piece": "jobs_list = form.search()"}
{"function_name": "custome_search", "function_define": "    if 'page' in request.GET:\n    if request.POST:\n    if job_type:", "piece": "if request.POST:"}
{"function_name": "custom_walkins", "function_define": "    if 'page' in request.GET:\n    if request.POST:\n    if job_list:", "piece": "if request.POST:"}
{"function_name": "search_slugs", "function_define": "    slug = ''\n    for search in search_list:\n    for skill in skills:", "piece": "for search in search_list:"}
{"function_name": "validate_spec", "function_define": "    errors = []\n    zip_keys = _get_zip_keys(spec)\n    except ValueError as e:", "piece": "zip_keys = _get_zip_keys(spec)"}
{"function_name": "explode_variants", "function_define": "    zip_keys = _get_zip_keys(spec)\n    trim_empty_keys(explode)\n    variants = []", "piece": "trim_empty_keys(explode)"}
{"function_name": "classfy0", "function_define": "    dataSetSize = dataSet.shape[0]\n    sqDiffMat = diff ** 2\n    distances = sqDistances ** 0.5", "piece": "sqDiffMat = diff ** 2"}
{"function_name": "scrape_sub", "function_define": "    page = self.get(sub_url).text\n    leg = {}\n    leg.add_source(sub_url)", "piece": "leg = {}"}
{"function_name": "_bert_score_ddp", "function_define": "    scorer.update(preds, targets)\n    metrics_score = scorer.compute()\n    for metric in _METRICS:", "piece": "metrics_score = scorer.compute()"}
{"function_name": "parse_version", "function_define": "    lst = i['output']\n    ver = ''\n    if len(lst) > 0:", "piece": "ver = ''"}
{"function_name": "parseTopic", "function_define": "    print(linkContent)\n    if linkContent == '\u00bb':\n    url = link.extract_first()", "piece": "if linkContent == '\u00bb':"}
{"function_name": "_run_interface", "function_define": "    headers = []\n    units = {}\n    names = {}", "piece": "units = {}"}
{"function_name": "test_create_omop", "function_define": "    Test create omop db\n    runner = CliRunner()\n    assert result.exit_code == 0", "piece": "runner = CliRunner()"}
{"function_name": "test_list_tables", "function_define": "    Test list tables\n    runner = CliRunner()\n    assert result.exit_code == 0", "piece": "runner = CliRunner()"}
{"function_name": "progress_bar", "function_define": "    if self.debug == 1:\n    print(len(DIR))\n    beforedelete = len(DIR)", "piece": "print(len(DIR))"}
{"function_name": "array_call", "function_define": "    diffusion = k * del^4(vorticity)\n    state : dict\n    tendencies : dict", "piece": "state : dict"}
{"function_name": "_store_batch", "function_define": "    path = 'eval_batch'\n    mkdir_p(path)\n    sig, lengths, _ = data", "piece": "mkdir_p(path)"}
{"function_name": "episodic_test", "function_define": "    gold = 0\n    cum_reward = 0\n    for t in range(test_timesteps):", "piece": "cum_reward = 0"}
{"function_name": "hcp1200_download", "function_define": "    from datalad.api import install\n    if hcp_data_dir is None:\n    if not op.isdir(hcp_data_dir):", "piece": "if hcp_data_dir is None:"}
{"function_name": "download_ppt", "function_define": "    from glob import glob\n    from datalad.api import get\n    from datalad.api import install", "piece": "from datalad.api import get"}
{"function_name": "job_create", "function_define": "    if request.method == 'POST':\n    if form.is_valid():\n    form = form.save()", "piece": "if form.is_valid():"}
{"function_name": "save_dataset", "function_define": "    result = False\n    if csv_arguments:\n    args = csv_arguments.copy()", "piece": "if csv_arguments:"}
{"function_name": "save_mongo", "function_define": "    self.doc.insert_many(row_list)\n    except Exception as e:\n    self.logger.error(e)", "piece": "except Exception as e:"}
{"function_name": "inference_single", "function_define": "    img = mmcv.imread(imagname)\n    slide_h, slide_w = slide_size\n    hn, wn = chip_size", "piece": "slide_h, slide_w = slide_size"}
{"function_name": "evaluate_model1", "function_define": "    baseline = {}\n    baseline['roc'] = 0.5\n    results = {}", "piece": "baseline['roc'] = 0.5"}
{"function_name": "return_color", "function_define": "    i = float(i)\n    if i < 0:\n    elif i > 0:", "piece": "if i < 0:"}
{"function_name": "test_ram_diff", "function_define": "    ref_W = ram.total_power().W\n    new_W = ram.total_power().W\n    n_gb = array.nbytes / 1000 ** 3", "piece": "new_W = ram.total_power().W"}
{"function_name": "string_from_tags", "function_define": "    posts = cls.query.all()\n    tags_set = set()\n    for post in posts:", "piece": "tags_set = set()"}
{"function_name": "from_dict", "function_define": "    if not title:\n    if not category:\n    tags = article_dict.get('tags')", "piece": "if not category:"}
{"function_name": "get_motor_speed", "function_define": "    if response[2] != 1:\n    if speed > 32767:\n    speed -= 65536", "piece": "if speed > 32767:"}
{"function_name": "vdo_info_handle", "function_define": "    global title\n    global position\n    global language", "piece": "global position"}
{"function_name": "process_url", "function_define": "    global file_name\n    global title\n    global inputlang", "piece": "global title"}
{"function_name": "progress", "function_define": "    global output_path\n    global vdo_name\n    while x <= 100:", "piece": "global vdo_name"}
{"function_name": "worker_thread", "function_define": "    print('processing started ...')\n    count = 0\n    for inputfile in inputfiles:", "piece": "count = 0"}
{"function_name": "onWindowStart", "function_define": "    print(inputfiles)\n    print('use model =', model)\n    if inputfiles != None:", "piece": "print('use model =', model)"}
{"function_name": "openFileDialog", "function_define": "    print(inputfiles)\n    print('use model =', model)\n    if inputfiles != None:", "piece": "print('use model =', model)"}
{"function_name": "is_prime", "function_define": "    if n < 0:\n    for i in range(2, isqrt(n) + 1):\n    if n % i == 0:", "piece": "for i in range(2, isqrt(n) + 1):"}
{"function_name": "prime_bounds", "function_define": "    for i in range(2, b):\n    if is_prime(i):\n    primes.append(i)", "piece": "if is_prime(i):"}
{"function_name": "MakeDescriptor", "function_define": "    if package:\n    fields = []\n    fields.append(field)", "piece": "fields = []"}
{"function_name": "GetOptions", "function_define": "    if self._options:\n    except AttributeError:\n    self._options = options_class()", "piece": "except AttributeError:"}
{"function_name": "drawPath", "function_define": "    reac_energy = nodepath[0].energy\n    n = range(1, len(energies) + 1)\n    plt.figure()", "piece": "n = range(1, len(energies) + 1)"}
{"function_name": "optimizeReactant", "function_define": "    success = True\n    name = 'reac_opt.' + self.name\n    reac_node = self.reactant.copy()", "piece": "name = 'reac_opt.' + self.name"}
{"function_name": "optimizeProduct", "function_define": "    success = True\n    name = 'prod_opt.' + self.name\n    prod_node = self.product.copy()", "piece": "name = 'prod_opt.' + self.name"}
{"function_name": "optimizeNode", "function_define": "    success = True\n    mol = node.toMolecule()\n    except QuantumError as e:", "piece": "mol = node.toMolecule()"}
{"function_name": "executeIRC", "function_define": "    reactant and product were found.\n    chkfile_copy = None\n    correct_reac = True", "piece": "chkfile_copy = None"}
{"function_name": "add_paste", "function_define": "    Adds a new paste to pastebin\n    random.shuffle(possible)\n    where the paste was created", "piece": "random.shuffle(possible)"}
{"function_name": "delete_item", "function_define": "    uid (str): \u524a\u9664\u3059\u308b uid\n    username (str): \u524a\u9664\u3059\u308b Todo \u306e\u30e6\u30fc\u30b6\u30fc\u540d\n    Validates.username(username)", "piece": "username (str): \u524a\u9664\u3059\u308b Todo \u306e\u30e6\u30fc\u30b6\u30fc\u540d"}
{"function_name": "count_gates", "function_define": "    qobj: compiled qobj.\n    basis: gates basis for the qobj.\n    qubits: qubits to count over.", "piece": "basis: gates basis for the qobj."}
{"function_name": "coherence_limit", "function_define": "    If not given assume T2=2*T1 .\n    gatelen: length of the gate.\n    Returns:", "piece": "gatelen: length of the gate."}
{"function_name": "calculate_1q_epg", "function_define": "    EPG_{U1} &= 0 \\\\\\\\\n    import pprint\n    epc = 1.5e-3", "piece": "import pprint"}
{"function_name": "calculate_2q_epg", "function_define": "    epc_q0 = 1.5e-3\n    epc_q1 = 5.8e-4\n    epc = 2.4e-2", "piece": "epc_q1 = 5.8e-4"}
{"function_name": "calculate_1q_epc", "function_define": "    gate_per_cliff=gpc,\n    epg_1q=epgs_q0,\n    qubit=0)", "piece": "epg_1q=epgs_q0,"}
{"function_name": "calculate_2q_epc", "function_define": "    epg_q01 = 0.03\n    gate_per_cliff=gpc,\n    epg_2q=epg_q01,", "piece": "gate_per_cliff=gpc,"}
{"function_name": "print_out", "function_define": "    if isinstance(s, bytes):\n    s = s.decode('utf-8')\n    f.write(s.encode('utf-8'))", "piece": "s = s.decode('utf-8')"}
{"function_name": "getBroker", "function_define": "    broker = {}\n    with config_lock:\n    except Exception as err:", "piece": "with config_lock:"}
{"function_name": "getSubscriptions", "function_define": "    subs = []\n    with config_lock:\n    except Exception as err:", "piece": "with config_lock:"}
{"function_name": "returnTuple", "function_define": "    listTuple = []\n    for i in self.outputData:\n    x = i // self.row", "piece": "for i in self.outputData:"}
{"function_name": "test_bisect", "function_define": "    xtol = 1e-06\n    assert root < 1.0\n    xtol = 0.1", "piece": "assert root < 1.0"}
{"function_name": "check_delta_sep", "function_define": "    wl = np.asarray(scale_list)\n    wl_ref = wl[len(wl) // 2]\n    map_lft = sep_lft >= delta_sep", "piece": "wl_ref = wl[len(wl) // 2]"}
{"function_name": "rot_scale", "function_define": "    algorithm (step='fin').\n    Parameters\n    step: str", "piece": "Parameters"}
{"function_name": "get_time_series", "function_define": "    if mcube.ndim == 4:\n    indicesy = tempind[0, ind[::-1]]\n    indicesx = tempind[1, ind[::-1]]", "piece": "indicesy = tempind[0, ind[::-1]]"}
{"function_name": "KLIP_patch", "function_define": "    max_frames_lib = 200\n    if pa_threshold != 0:\n    if ann_center > fwhm * 20:", "piece": "if pa_threshold != 0:"}
{"function_name": "nmf_adisdi", "function_define": "    n, y, x = array.shape\n    matrix += np.abs(matrix.min())\n    if cube_ref is not None:", "piece": "matrix += np.abs(matrix.min())"}
{"function_name": "annular_NMF", "function_define": "    array = cube\n    if array.ndim != 3:\n    n, y, _ = array.shape", "piece": "if array.ndim != 3:"}
{"function_name": "NMF_patch", "function_define": "    if sklearn == True:\n    H = mod.fit(refs).components_\n    W = mod.transform(refs)", "piece": "H = mod.fit(refs).components_"}
{"function_name": "NMF_patch_range", "function_define": "    if verbose:\n    residuals = []\n    for i in ncomp_range:", "piece": "residuals = []"}
{"function_name": "do_pca_patch", "function_define": "    if scale_list is not None:\n    data_ref = matrix[indices_left]\n    if matrix_ref is not None:", "piece": "data_ref = matrix[indices_left]"}
{"function_name": "loci_adisdi", "function_define": "    for a given annulus.\n    y = cube_rot_scale.shape[1]\n    if not asize < y // 2:", "piece": "y = cube_rot_scale.shape[1]"}
{"function_name": "_leastsq_patch", "function_define": "    the speckle field computation.\n    ind_ref_list = []\n    coef_list = []", "piece": "ind_ref_list = []"}
{"function_name": "_decompose_patch", "function_define": "    j = i_patch\n    yy = indices[j][0]\n    xx = indices[j][1]", "piece": "yy = indices[j][0]"}
{"function_name": "SolveNMF", "function_define": "    Construct the NMF basis\n    Keywords:\n    Optional Input:", "piece": "Keywords:"}
{"function_name": "to_c_mech", "function_define": "    params.kdf = self.params['kdf']\n    shared_data = None\n    shared_data_len = 0", "piece": "shared_data = None"}
{"function_name": "user_disable", "function_define": "    user.is_active = False\n    user.save()\n    if request.user.is_staff:", "piece": "user.save()"}
{"function_name": "user_enable", "function_define": "    user.is_active = True\n    user.save()\n    if request.user.is_staff:", "piece": "user.save()"}
{"function_name": "form_valid", "function_define": "    if mailer.activated:\n    user = form.save()\n    login(self.request, user)", "piece": "user = form.save()"}
{"function_name": "index_login", "function_define": "    if getRefreshCount() == 1:\n    setRefreshCount(0)\n    setRefreshCount(0)", "piece": "setRefreshCount(0)"}
{"function_name": "Starting", "function_define": "    if getRefreshCount() == 0:\n    setRefreshCount(1)\n    context = []", "piece": "setRefreshCount(1)"}
{"function_name": "boderView_login", "function_define": "    context = []\n    tempId = getUserName()\n    for row in rows:", "piece": "tempId = getUserName()"}
{"function_name": "CheckIdPw", "function_define": "    if request.method == 'POST':\n    if form.is_valid():\n    flag = False", "piece": "if form.is_valid():"}
{"function_name": "getUserName", "function_define": "    global userName\n    context = []\n    dic = {'NAME': userName}", "piece": "context = []"}
{"function_name": "test_baselineEnv", "function_define": "    import gym\n    from stable_baselines import DQN\n    env = gym.make('CartPole-v1')", "piece": "from stable_baselines import DQN"}
{"function_name": "_add_token", "function_define": "    if raw_value == '__':\n    tail = self._tail\n    value = raw_value.lower()", "piece": "tail = self._tail"}
{"function_name": "enode_cost", "function_define": "    key = node.key\n    key = node.key.__name__\n    key = node.key[0]", "piece": "key = node.key.__name__"}
{"function_name": "_plot_hist", "function_define": "    axis.set_yscale('log')\n    axis.set_xscale('log')\n    axis.set_ylabel(label)", "piece": "axis.set_xscale('log')"}
{"function_name": "add_histogram", "function_define": "    plot = self.plots[self.plot_idx]\n    self.plot_idx += 1\n    plot.set_yscale('log')", "piece": "self.plot_idx += 1"}
{"function_name": "_plot_histogram", "function_define": "    axis.set_yticks([])\n    axis.set_xscale('log')\n    axis.minorticks_on()", "piece": "axis.set_xscale('log')"}
{"function_name": "Makeconnection", "function_define": "    time.sleep(5)\n    s.connect((H, P))\n    while 1:", "piece": "s.connect((H, P))"}
{"function_name": "setup_server", "function_define": "    Server.deps(context)\n    Server.user(context)\n    Server.group(context)", "piece": "Server.user(context)"}
{"function_name": "setup_ssl", "function_define": "    if artifact:\n    if not context.config.https:\n    if is_agree.upper() == 'Y':", "piece": "if not context.config.https:"}
{"function_name": "firstUniqChar", "function_define": "    dict_1 = {}\n    for i in s:\n    if i not in dict_1:", "piece": "for i in s:"}
{"function_name": "drawContour", "function_define": "    image = sitk.ReadImage(dcm_file)\n    gt = sitk.ReadImage(gt_label)\n    cv2.waitKey()", "piece": "gt = sitk.ReadImage(gt_label)"}
{"function_name": "exec_cmd", "function_define": "    args = cmd_and_args.split()\n    msger.debug(args)\n    if as_shell:", "piece": "msger.debug(args)"}
{"function_name": "exec_native_cmd", "function_define": "    args = cmd_and_args.split()\n    msger.debug(args)\n    if rc == 127:", "piece": "msger.debug(args)"}
{"function_name": "compare_text", "function_define": "    in the alt data\n    if debug:\n    results = []", "piece": "if debug:"}
{"function_name": "_get_atom_label", "function_define": "    Get FF atom label.\n    Code inspired by:\n    atnum = int(atom.GetAtomicNum())", "piece": "Code inspired by:"}
{"function_name": "_type_translator", "function_define": "    type_translator = {}\n    for t in types:\n    if not t[1].isalpha():", "piece": "for t in types:"}
{"function_name": "_bond_section", "function_define": "    bond_section = '\\n'\n    for bond in mol.get_bonds():\n    if has_h_atom(bond):", "piece": "for bond in mol.get_bonds():"}
{"function_name": "_species_section", "function_define": "    species_section = '\\nspecies\\n'\n    for spec in type_translator:\n    name = type_translator[spec]", "piece": "for spec in type_translator:"}
{"function_name": "_write_gulp_file", "function_define": "    with open(in_file, 'w') as f:\n    f.write(top_line)\n    f.write(position_section)", "piece": "f.write(top_line)"}
{"function_name": "_move_cif", "function_define": "    Parameters\n    filename : :class:`str`\n    None : :class:`NoneType`", "piece": "filename : :class:`str`"}
{"function_name": "assign_FF", "function_define": "    Parameters\n    mol : :class:`stk.Molecule`\n    The molecule to be optimized.", "piece": "mol : :class:`stk.Molecule`"}
{"function_name": "get_arguments", "function_define": "    parse = optparse.OptionParser()\n    if not options.interface:\n    elif not options.mac:", "piece": "if not options.interface:"}
{"function_name": "check_mode", "function_define": "    if random_mode == 'basic':\n    if current_mac:\n    if current_mac == options.mac:", "piece": "if current_mac:"}
{"function_name": "get_references", "function_define": "    references = []\n    t = s.get('@descriptionType')\n    c = self._text(s)", "piece": "t = s.get('@descriptionType')"}
{"function_name": "tsv_to_json", "function_define": "    includs all output tsv files\n    os.mkdir(json_files_directory)\n    if file.endswith('.tsv'):", "piece": "os.mkdir(json_files_directory)"}
{"function_name": "get_numbers", "function_define": "    lottery_numbers = []\n    for index_number in range(5):\n    index_number = index_number + 1", "piece": "for index_number in range(5):"}
{"function_name": "get_all_numbers", "function_define": "    continueRun = True\n    previously_lottery_date = ''\n    while continueRun:", "piece": "previously_lottery_date = ''"}
{"function_name": "label_interface", "function_define": "    Returns:\n    if font_size is None:\n    font_size = face.radius / 3", "piece": "if font_size is None:"}
{"function_name": "_get_model2_data", "function_define": "    X, X_1 = tee(X)\n    if aggr_level > 0:\n    X_1_handler = ArrayHandler()", "piece": "if aggr_level > 0:"}
{"function_name": "validate_model1", "function_define": "    if aggr_level is not None:\n    self.aggr_level1 = aggr_level\n    if self.aggr_level1 > 0:", "piece": "self.aggr_level1 = aggr_level"}
{"function_name": "satisfies", "function_define": "    RECEIVES: current state\n    RETURNS: True or False\n    current_state['boxes'].sort()", "piece": "RETURNS: True or False"}
{"function_name": "get_keys", "function_define": "    self.velX, self.velY = (0, 0)\n    keys = pygame.key.get_pressed()\n    if self.playerNum == 1:", "piece": "keys = pygame.key.get_pressed()"}
{"function_name": "direction", "function_define": "    direction\n    if self.playerNum == 1:\n    if self.velX > 100:", "piece": "if self.playerNum == 1:"}
{"function_name": "wall_collision", "function_define": "    if axis == 'x':\n    if collides:\n    if self.velX > 0:", "piece": "if collides:"}
{"function_name": "player_collision", "function_define": "    if self.playerNum == 1:\n    if axis == 'x':\n    if self.velX > 0:", "piece": "if axis == 'x':"}
{"function_name": "_prepare", "function_define": "    data = self.data\n    data.args = '/S'\n    ver, data.date = parser(url)[0]", "piece": "data.args = '/S'"}
{"function_name": "get_creddefid", "function_define": "    res = credentials['results']\n    print('payment creds', res)\n    if payment_creds:", "piece": "print('payment creds', res)"}
{"function_name": "get_schema_name", "function_define": "    resp = ob.get_creddef(creddef)\n    if not resp:\n    resp = ob.get_schema(schema_id)", "piece": "if not resp:"}
{"function_name": "collection_add", "function_define": "    the user to select a Collection.\n    ids = []\n    if 'ids' in request.GET:", "piece": "ids = []"}
{"function_name": "atom_feed", "function_define": "    site = Site.objects.get(id=1)\n    output = StringIO.StringIO()\n    handler.startDocument()", "piece": "output = StringIO.StringIO()"}
{"function_name": "entropy_test", "function_define": "    estimated = defaultdict(list)\n    plt.figure()\n    plt.xlabel(xlabel)", "piece": "plt.figure()"}
{"function_name": "semordnilap", "function_define": "    str1: a string\n    str2: a string\n    False otherwise.", "piece": "str2: a string"}
{"function_name": "_check_defaults", "function_define": "    if defaults is None:\n    elif isinstance(defaults, dict):\n    elif isinstance(defaults, list):", "piece": "elif isinstance(defaults, dict):"}
{"function_name": "_make_backup", "function_define": "    fpath = self.get_config_fpath()\n    if not osp.isdir(path):\n    os.makedirs(path)", "piece": "if not osp.isdir(path):"}
{"function_name": "set_as_defaults", "function_define": "    self.default_config = []\n    for section in self.sections():\n    secdict = {}", "piece": "for section in self.sections():"}
{"function_name": "get_default", "function_define": "    if sec == section:\n    if option in options:\n    value = options[option]", "piece": "if option in options:"}
{"function_name": "set_default", "function_define": "    based on current values.\n    if sec == section:\n    options[option] = default_value", "piece": "if sec == section:"}
{"function_name": "read_dataset", "function_define": "    ch = file.read(1)\n    buf = []\n    while True:", "piece": "buf = []"}
{"function_name": "get_task_args", "function_define": "    body = self.request.body\n    except ValueError as e:\n    raise HTTPError(400, str(e))", "piece": "except ValueError as e:"}
{"function_name": "get_first_author", "function_define": "    parts = self.endnote.split('\\n')\n    for part in parts:\n    if part.startswith('%A'):", "piece": "for part in parts:"}
{"function_name": "get_date", "function_define": "    parts = self.endnote.split('\\n')\n    for part in parts:\n    if part.startswith('%D'):", "piece": "for part in parts:"}
{"function_name": "notify_user", "function_define": "    with db_session() as dbs:\n    logger.debug('user: %s', user)\n    if user:", "piece": "logger.debug('user: %s', user)"}
{"function_name": "start_deployment", "function_define": "    with db_session() as dbs:\n    deployment_complete = False\n    if app_dep:", "piece": "deployment_complete = False"}
{"function_name": "create_parser", "function_define": "    mapping = dict()\n    modules = [_quick_plot, _topk]\n    for module in modules:", "piece": "modules = [_quick_plot, _topk]"}
{"function_name": "findMode", "function_define": "    nums = []\n    if not root:\n    self.dfs(root, nums)", "piece": "if not root:"}
{"function_name": "_add_common_lin", "function_define": "    if isinstance(alpha, int):\n    alpha = float(alpha)\n    assert isinstance(alpha, float)", "piece": "alpha = float(alpha)"}
{"function_name": "_update_single", "function_define": "    xj = self.gmm.predict(context)\n    this_context = xj == j\n    for choice in range(self.narms):", "piece": "this_context = xj == j"}
{"function_name": "ImageCallback", "function_define": "    if logger is None:\n    logger.dataEx.acquire()\n    logger.dataEx.release()", "piece": "logger.dataEx.acquire()"}
{"function_name": "PoseCallback", "function_define": "    if logger is None:\n    logger.dataEx.acquire()\n    logger.dataEx.release()", "piece": "logger.dataEx.acquire()"}
{"function_name": "_optimize", "function_define": "    self.snnls.optimize()\n    w = self.snnls.weights()\n    self.wts = w[w > 0]", "piece": "w = self.snnls.weights()"}
{"function_name": "parse_config", "function_define": "    with yaml_path.open() as stream:\n    except yaml.YAMLError as exc:\n    raise ConfigException(exc)", "piece": "except yaml.YAMLError as exc:"}
{"function_name": "_initialize", "function_define": "    for item in xml.getroot():\n    self._alias[item.tag] = item\n    self._mapping[key] = _type", "piece": "self._alias[item.tag] = item"}
{"function_name": "progress_switch", "function_define": "    if self.progressbar.isHidden():\n    self.progressbar.show()\n    self.progress_msg.show()", "piece": "self.progressbar.show()"}
{"function_name": "init_random_seed", "function_define": "    Default to 'cuda'.\n    Returns:\n    int: Seed to be used.", "piece": "Returns:"}
{"function_name": "set_random_seed", "function_define": "    seed (int): Seed to be used.\n    Default: False.\n    random.seed(seed)", "piece": "Default: False."}
{"function_name": "train_detector", "function_define": "    if 'imgs_per_gpu' in cfg.data:\n    if distributed:\n    if 'runner' not in cfg:", "piece": "if distributed:"}
{"function_name": "DistanceMeasure", "function_define": "    GPIO.setmode(GPIO.BCM)\n    trig = 27\n    GPIO.setup(trig, GPIO.OUT)", "piece": "trig = 27"}
{"function_name": "take_screenshots", "function_define": "    img1 = grab(bbox=self.cords)\n    time.sleep(1)\n    img2 = grab(bbox=self.cords)", "piece": "time.sleep(1)"}
{"function_name": "readVoxType", "function_define": "    dpWriteh5.addArgs(parser)\n    arg_str = ''\n    if verbose:", "piece": "arg_str = ''"}
{"function_name": "writeVoxType", "function_define": "    assert data is not None or inraw\n    dpWriteh5.addArgs(parser)\n    arg_str = ''", "piece": "dpWriteh5.addArgs(parser)"}
{"function_name": "readLabels", "function_define": "    if not data_type:\n    data_type = cls.LBLS_STR_DTYPE\n    dpWriteh5.addArgs(parser)", "piece": "data_type = cls.LBLS_STR_DTYPE"}
{"function_name": "writeLabels", "function_define": "    assert data is not None or inraw\n    dpWriteh5.addArgs(parser)\n    arg_str = ''", "piece": "dpWriteh5.addArgs(parser)"}
{"function_name": "thresholdSizes", "function_define": "    assert lbls.dtype.kind in 'ui'\n    sizes = emLabels.getSizes(lbls)\n    sizes = sizes[1:]", "piece": "sizes = emLabels.getSizes(lbls)"}
{"function_name": "readProbs", "function_define": "    dpWriteh5.addArgs(parser)\n    arg_str = ''\n    if verbose:", "piece": "arg_str = ''"}
{"function_name": "writeProbs", "function_define": "    assert data is not None or inraw\n    dpWriteh5.addArgs(parser)\n    arg_str = ''", "piece": "dpWriteh5.addArgs(parser)"}
{"function_name": "get_test_data", "function_define": "    data_windows = []\n    x = data_windows[:, :-1]\n    y = data_windows[:, -1, [0]]", "piece": "x = data_windows[:, :-1]"}
{"function_name": "get_train_data", "function_define": "    data_x = []\n    data_y = []\n    data_x.append(x)", "piece": "data_y = []"}
{"function_name": "test_setnx", "function_define": "    self.cache.delete('test_key_nx')\n    self.assertEqual(res, None)\n    self.assertTrue(res)", "piece": "self.assertEqual(res, None)"}
{"function_name": "test_save_string", "function_define": "    res = self.cache.get('test_key')\n    self.assertEqual(res, 'hello')\n    self.cache.set('test_key', '2')", "piece": "self.assertEqual(res, 'hello')"}
{"function_name": "test_save_dict", "function_define": "    now_dt = datetime.datetime.now()\n    res = self.cache.get('test_key')\n    self.assertIsInstance(res, dict)", "piece": "res = self.cache.get('test_key')"}
{"function_name": "test_save_float", "function_define": "    float_val = 1.345620002\n    res = self.cache.get('test_key')\n    self.assertEqual(res, float_val)", "piece": "res = self.cache.get('test_key')"}
{"function_name": "test_get_many", "function_define": "    self.cache.set('a', 1)\n    self.cache.set('b', 2)\n    self.cache.set('c', 3)", "piece": "self.cache.set('b', 2)"}
{"function_name": "test_incr", "function_define": "    self.cache.set('num', 1)\n    self.cache.incr('num')\n    res = self.cache.get('num')", "piece": "self.cache.incr('num')"}
{"function_name": "test_decr", "function_define": "    self.cache.set('num', 20)\n    self.cache.decr('num')\n    res = self.cache.get('num')", "piece": "self.cache.decr('num')"}
{"function_name": "test_version", "function_define": "    res = self.cache.get('keytest')\n    self.assertEqual(res, None)\n    self.assertEqual(res, 2)", "piece": "self.assertEqual(res, None)"}
{"function_name": "test_double_move", "function_define": "    course = '^>'\n    want = 3\n    got = houses.have_presents()", "piece": "want = 3"}
{"function_name": "test_backtrack", "function_define": "    course = '^v'\n    want = 2\n    got = houses.have_presents()", "piece": "want = 2"}
{"function_name": "test_get_nb_page", "function_define": "    assert nb_page == 2\n    assert nb_page == 2\n    assert nb_page == 2", "piece": "assert nb_page == 2"}
{"function_name": "get_api_data", "function_define": "    data_list = []\n    if not r.ok:\n    print(r.text)", "piece": "if not r.ok:"}
{"function_name": "make_track_dict", "function_define": "    data_list = self.get_api_data()\n    for d in data_list:\n    date = d['range']['date']", "piece": "for d in data_list:"}
{"function_name": "inc_progress_bar", "function_define": "    Incs the progrss by (1)\n    if size:\n    self.progress_bar.update(size)", "piece": "if size:"}
{"function_name": "paginator", "function_define": "    total = min(max_pages, total)\n    current = min(total, current)\n    if total <= 5:", "piece": "current = min(total, current)"}
{"function_name": "get_fallbacker", "function_define": "    value if something failes\n    Else: Value to be returnd\n    In case of any failure:", "piece": "Else: Value to be returnd"}
{"function_name": "clear_all_caches", "function_define": "    for name in dir(cls):\n    attribute = getattr(cls, name)\n    if isinstance(attribute, cls):", "piece": "attribute = getattr(cls, name)"}
{"function_name": "decorator", "function_define": "    for attempt in range(tries):\n    except exceptions:\n    if attempt == tries - 1:", "piece": "except exceptions:"}
{"function_name": "protegee", "function_define": "    for attempt in range(tries):\n    except exceptions:\n    if attempt == tries - 1:", "piece": "except exceptions:"}
{"function_name": "get_bns_score", "function_define": "    Returns:\n    score (float): bns score\n    score = None", "piece": "score (float): bns score"}
{"function_name": "get_word_list", "function_define": "    Given list of sentences\n    Returns:\n    words = []", "piece": "Returns:"}
{"function_name": "create_bns_score", "function_define": "    Returns:\n    for category in self.categories:\n    if category in word_dict:", "piece": "for category in self.categories:"}
{"function_name": "place_order", "function_define": "    if order.id not in self.blotter:\n    self.blotter[order.id] = order\n    if execute:", "piece": "self.blotter[order.id] = order"}
{"function_name": "get_by_name", "function_define": "    ONNX standard.\"\"\"\n    if len(inds) > 1:\n    elif len(inds) == 0:", "piece": "if len(inds) > 1:"}
{"function_name": "remove_urls", "function_define": "    Remove URLs from a text.\n    Parameters\n    text : str", "piece": "Parameters"}
{"function_name": "remove_stopwords", "function_define": "    Parameters\n    words : list\n    List of tokenized words.", "piece": "words : list"}
{"function_name": "to_lowercase", "function_define": "    Parameters\n    words : list\n    List of tokenized words.", "piece": "words : list"}
{"function_name": "remove_digits", "function_define": "    Parameters\n    words : list\n    List of tokenized words.", "piece": "words : list"}
{"function_name": "replace_numbers", "function_define": "    Parameters\n    words : list\n    List of words.", "piece": "words : list"}
{"function_name": "text_to_words", "function_define": "    Parameters\n    text : str\n    Text to process.", "piece": "text : str"}
{"function_name": "preprocess_words", "function_define": "    Parameters\n    words : list of str\n    List of words to preprocess.", "piece": "words : list of str"}
{"function_name": "preprocess_text", "function_define": "    Parameters\n    text : str\n    Text to preprocess.", "piece": "text : str"}
{"function_name": "_refresh_net", "function_define": "    start_time = time()\n    for tunnel in tunnels:\n    tunnel.records = []", "piece": "for tunnel in tunnels:"}
{"function_name": "_qm_to_bqm", "function_define": "    for v in qm.variables:\n    if v in integers:\n    if u in integers:", "piece": "if v in integers:"}
{"function_name": "cqm_to_bqm", "function_define": "    bias in the objective.\n    Returns:\n    A 2-tuple containing:", "piece": "Returns:"}
{"function_name": "add_constraint", "function_define": "    Examples:\n    See also:\n    elif isinstance(data, Iterable):", "piece": "See also:"}
{"function_name": "add_discrete", "function_define": "    Returns:\n    Label of the added constraint.\n    another discrete variable.", "piece": "Label of the added constraint."}
{"function_name": "add_variable", "function_define": "    variable: A variable label.\n    vartype:\n    Variable type. One of:", "piece": "vartype:"}
{"function_name": "set_objective", "function_define": "    Examples:\n    self.objective.quadratic.clear()\n    self.objective.set_linear(v, 0)", "piece": "self.objective.quadratic.clear()"}
{"function_name": "update_screen", "function_define": "    global board_layer_cache\n    board_layer = board_layer_cache\n    screen.blit(img, draw_pos)", "piece": "board_layer = board_layer_cache"}
{"function_name": "run_editor", "function_define": "    level_filename = None\n    board_layer_cache = None\n    if board is None:", "piece": "board_layer_cache = None"}
{"function_name": "refresh_caption", "function_define": "    if level_filename:\n    caption = level_filename\n    caption = '~ Unsaved Level ~'", "piece": "caption = level_filename"}
{"function_name": "simplify", "function_define": "    f = wlexpr(str(Func(exp)))\n    print(wmres)\n    res = parse(wmres)", "piece": "print(wmres)"}
{"function_name": "pil_loader", "function_define": "    path: Image path.\n    Returns:\n    Loaded PIL Image in rgb.", "piece": "Returns:"}
{"function_name": "submitinfo", "function_define": "    global nsip\n    global nsusername\n    nsip = self.ids.ns_ip.text", "piece": "global nsusername"}
{"function_name": "cleardata", "function_define": "    self.ids.ns_ip.text = ''\n    self.ids.ns_username.text = ''\n    self.ids.ns_password.text = ''", "piece": "self.ids.ns_username.text = ''"}
{"function_name": "MadsRegex", "function_define": "    except Exception as error:\n    print(errormessage)\n    except Exception as error:", "piece": "print(errormessage)"}
{"function_name": "MadsRegexPurge", "function_define": "    while i < 6:\n    except Exception as error:\n    print(errormessage)", "piece": "except Exception as error:"}
{"function_name": "make_testenv", "function_define": "    auction = eth_auction\n    token_contract = None\n    auction = token_auction", "piece": "token_contract = None"}
{"function_name": "to_ordinal", "function_define": "    self.verify_ordinal(value)\n    for key in self.ords:\n    if outword.endswith(key):", "piece": "for key in self.ords:"}
{"function_name": "log_metrics_dict", "function_define": "    Log a dictionary to a file.\n    for centrality in centralities:\n    for metric in METRICS_LIST:", "piece": "for centrality in centralities:"}
{"function_name": "run_batch", "function_define": "    Runs and logs a batch\n    if train:\n    for metric in METRICS_LIST:", "piece": "if train:"}
{"function_name": "lookup_address", "function_define": "    address = None\n    for item in self._index['key']:\n    if item['name'] == name:", "piece": "for item in self._index['key']:"}
{"function_name": "load_key", "function_define": "    if name not in self.list_keys():\n    raise KeyNotFoundError()\n    address = Address(entity)", "piece": "raise KeyNotFoundError()"}
{"function_name": "get_power_sum", "function_define": "    count = s - n ** p\n    print(count)\n    if count == 0:", "piece": "print(count)"}
{"function_name": "test_properties", "function_define": "    obj = FSDScraper(fsd_test_data)\n    dist = obj.districts[0]\n    assert res is not None", "piece": "dist = obj.districts[0]"}
{"function_name": "search_view", "function_define": "    except AlgoliaException as e:\n    message = str(e)\n    if 'does not exist' in message:", "piece": "message = str(e)"}
{"function_name": "getTargetMac", "function_define": "    if thisTarget == 'vcu118':\n    macTarget = macTarget.split(':')\n    lastmac = int(macTarget[-1], 16)", "piece": "macTarget = macTarget.split(':')"}
{"function_name": "buildFreeRTOS", "function_define": "    with getSetting('FreeRTOSLock'):\n    if buildDir is None:\n    defaultBuildDir = True", "piece": "if buildDir is None:"}
{"function_name": "importImage", "function_define": "    for ip in imagePaths:\n    elfData = fElf.read()\n    fElf.close()", "piece": "elfData = fElf.read()"}
{"function_name": "cleanDirectory", "function_define": "    for xFile in xFilesList:\n    if xFile.endswith(endsWith):\n    except Exception as exc:", "piece": "if xFile.endswith(endsWith):"}
{"function_name": "crossCompileUnix", "function_define": "    envLinux = []\n    dockerToolchainImage = None\n    dockerToolchainImage = None", "piece": "dockerToolchainImage = None"}
{"function_name": "plot_sentiment", "function_define": "    xs.append(x)\n    ys.append(y)\n    plt.legend(loc='best')", "piece": "ys.append(y)"}
{"function_name": "_select_actions", "function_define": "    valid_handles = list()\n    internal_state = dict()\n    interesting_handles = set()", "piece": "internal_state = dict()"}
{"function_name": "test_rfft_simple", "function_define": "    signal = numpy.arange(0, n_fft)\n    out = eml_audio.rfft(signal)\n    diff = out - ref", "piece": "out = eml_audio.rfft(signal)"}
{"function_name": "melfilter", "function_define": "    np = numpy\n    if fmax is None:\n    fmax = float(sr) / 2", "piece": "if fmax is None:"}
{"function_name": "melfilter_ref", "function_define": "    NFFT = n_fft\n    sample_rate = sr\n    nfilt = n_mels", "piece": "sample_rate = sr"}
{"function_name": "process_file", "function_define": "    global min_country, max_country\n    year = input('Enter the year: ')\n    while True:", "piece": "year = input('Enter the year: ')"}
{"function_name": "test_boyd_1", "function_define": "    g = 9.81\n    inlet_depth = 0.15\n    outlet_depth = 0.15", "piece": "inlet_depth = 0.15"}
{"function_name": "test_boyd_2", "function_define": "    g = 9.81\n    culvert_slope = 10\n    inlet_depth = 0.5", "piece": "culvert_slope = 10"}
{"function_name": "test_boyd_3", "function_define": "    g = 9.81\n    culvert_slope = 10\n    inlet_depth = 1.8", "piece": "culvert_slope = 10"}
{"function_name": "test_boyd_4", "function_define": "    g = 9.81\n    culvert_slope = 10\n    inlet_depth = 1.0", "piece": "culvert_slope = 10"}
{"function_name": "test_boyd_5", "function_define": "    g = 9.81\n    culvert_slope = 10\n    inlet_depth = 1.5", "piece": "culvert_slope = 10"}
{"function_name": "test_boyd_6", "function_define": "    g = 9.81\n    culvert_slope = 10\n    inlet_depth = 1.5", "piece": "culvert_slope = 10"}
{"function_name": "test_app_config", "function_define": "    config = app['config']\n    assert 'logging' in config\n    assert 'host' in config", "piece": "assert 'logging' in config"}
{"function_name": "__setstate__", "function_define": "    self.min_count = state[0]\n    self.include_UNK = state[1]\n    self.frozen = state[2]", "piece": "self.include_UNK = state[1]"}
{"function_name": "dispatch", "function_define": "    for active in entities:\n    if not events:\n    del index[active]", "piece": "if not events:"}
{"function_name": "trends_div", "function_define": "    context = get_status(request)\n    if not form.is_valid():\n    if metric == SUM:", "piece": "if not form.is_valid():"}
{"function_name": "user2solrReplace", "function_define": "    ret_val = query\n    pm = parent_rgx.search(query)\n    if pm is not None:", "piece": "pm = parent_rgx.search(query)"}
{"function_name": "open_chat", "function_define": "    sleep(2)\n    contact.click()\n    sleep(2)", "piece": "contact.click()"}
{"function_name": "send_media", "function_define": "    clip_button.click()\n    sleep(2)\n    attach_file.send_keys(media)", "piece": "sleep(2)"}
{"function_name": "test_pin_shorts", "function_define": "    if type == pyb.Pin.STD_PU:\n    type_inverted = pyb.Pin.STD_PD\n    type_inverted = pyb.Pin.STD_PU", "piece": "type_inverted = pyb.Pin.STD_PD"}
{"function_name": "_store_old_map", "function_define": "    tempfile = vim.eval('tempfile')\n    split_regex = re.compile('\\\\s+')\n    for line in open(tempfile, 'r'):", "piece": "split_regex = re.compile('\\\\s+')"}
{"function_name": "onbridge", "function_define": "    print(request.path)\n    context = {'username': username}\n    if 'walk' in request.GET:", "piece": "context = {'username': username}"}
{"function_name": "parse_generate", "function_define": "    lheo = ET.Element('lheo')\n    file_encoding = 'UTF-8'\n    sep = ','", "piece": "file_encoding = 'UTF-8'"}
{"function_name": "transaction_log", "function_define": "    if isinstance(kinds, str):\n    kinds = [kinds]\n    for kind in kinds:", "piece": "kinds = [kinds]"}
{"function_name": "uninstall_plugin", "function_define": "    Parameters\n    plugin : str\n    The name of the plugin.", "piece": "plugin : str"}
{"function_name": "Aritmetica", "function_define": "    if operacao == 'A':\n    for i in range(1, 11):\n    elif operacao == 'S':", "piece": "for i in range(1, 11):"}
{"function_name": "init_population", "function_define": "    for _ in range(n_population):\n    random.shuffle(cities)\n    tour[:] = cities", "piece": "random.shuffle(cities)"}
{"function_name": "crossover", "function_define": "    for i in range(idx):\n    child1.add(ind1[i])\n    child2.add(ind2[i])", "piece": "child1.add(ind1[i])"}
{"function_name": "handle_search", "function_define": "    query = message.data['query']\n    if summary:\n    self.speak_result()", "piece": "if summary:"}
{"function_name": "display_ddg", "function_define": "    if not can_use_gui(self.bus):\n    if image.startswith('/'):\n    self.gui['imgLink'] = image", "piece": "if image.startswith('/'):"}
{"function_name": "speak_result", "function_define": "    self.speak_dialog('thats all')\n    self.remove_context('DuckKnows')\n    self.idx = 0", "piece": "self.remove_context('DuckKnows')"}
{"function_name": "process_item", "function_define": "    type = int(item['type'])\n    sort = item['sort']\n    novelname = item['novelname']", "piece": "sort = item['sort']"}
{"function_name": "sram_traffic", "function_define": "    r2c = px_per_conv_window\n    e2 = E_h * E_w\n    e2m = num_ofmap_px", "piece": "e2 = E_h * E_w"}
{"function_name": "gen_filter_trace", "function_define": "    prefix = ''\n    for r in range(num_rows):\n    prefix += ', '", "piece": "for r in range(num_rows):"}
{"function_name": "gen_ifmap_trace", "function_define": "    postfix = ''\n    for c in range(num_cols):\n    postfix += ', '", "piece": "for c in range(num_cols):"}
{"function_name": "gen_trace_ofmap", "function_define": "    cycle = num_cols + cycle\n    if parallel_window > 1:\n    cycle += window_size", "piece": "if parallel_window > 1:"}
{"function_name": "state_change", "function_define": "    if mapped_entity != None:\n    if new == 'on':\n    self.turn_on(mapped_entity)", "piece": "if new == 'on':"}
{"function_name": "set_random_seeds", "function_define": "    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)", "piece": "np.random.seed(seed)"}
{"function_name": "test_curdir", "function_define": "    environ = self.environ\n    tmproot = self.tmproot\n    chdir(tmproot)", "piece": "tmproot = self.tmproot"}
{"function_name": "test_depends", "function_define": "    environ = this_environ.copy()\n    factory = MockFactory()\n    environ = this_environ.copy()", "piece": "factory = MockFactory()"}
{"function_name": "csv_test", "function_define": "    result = ''\n    for file_name in files:\n    for row in reader:", "piece": "for file_name in files:"}
{"function_name": "calcula_raizes", "function_define": "    delt = self.delta(a, b, c)\n    if delt == 0:\n    elif delt < 0:", "piece": "if delt == 0:"}
{"function_name": "args2body", "function_define": "    body = {self.resource: {}}\n    nsd = None\n    nsd = yaml.safe_load(f.read())", "piece": "nsd = None"}
{"function_name": "add_square_edges", "function_define": "    sw_bit = 1\n    se_bit = 2\n    ne_bit = 4", "piece": "se_bit = 2"}
{"function_name": "print_case", "function_define": "    print(f'  case {case_bits}:')\n    max_point_list_length = 1000\n    for hack in range(4):", "piece": "max_point_list_length = 1000"}
{"function_name": "SingleSoliton", "function_define": "    c ([Float]): Velocity.\n    x0 ([Float]): Offset.\n    Returns:", "piece": "x0 ([Float]): Offset."}
{"function_name": "as_command", "function_define": "    action: a callable object\n    Return: Command\n    cmd = Command(require_stdin)", "piece": "Return: Command"}
{"function_name": "question3", "function_define": "    df = get_df()\n    results = []\n    results.append(dist.km)", "piece": "results = []"}
{"function_name": "find_poster_Bane", "function_define": "    Bane_ID_er = int(temp2.id)\n    Bane_Poster = []\n    Bane_Poster.append(p.controlNr)", "piece": "Bane_Poster = []"}
{"function_name": "afgoer_poster", "function_define": "    postcoder = list(strak)\n    print(strak)\n    for x in range(len(postcoder)):", "piece": "print(strak)"}
{"function_name": "klargoer_poster", "function_define": "    NyPoster = {}\n    for y in range(len(Poster)):\n    postcoder_strak = list(strak)", "piece": "for y in range(len(Poster)):"}
{"function_name": "spline_points", "function_define": "    cross-sections of the fuselage\n    start = self.curve.start\n    end = self.curve.end", "piece": "start = self.curve.start"}
{"function_name": "handle_key", "function_define": "    if key in ('q', 'Q'):\n    raise urwid.ExitMainLoop()\n    global manager", "piece": "raise urwid.ExitMainLoop()"}
{"function_name": "_append_markup", "function_define": "    result = []\n    if isinstance(current, list):\n    result.extend(current)", "piece": "if isinstance(current, list):"}
{"function_name": "get_xsection", "function_define": "    energy = str(int(energy))\n    if proskey not in KPREDS:\n    kpred = KPREDS[key]", "piece": "if proskey not in KPREDS:"}
{"function_name": "distance", "function_define": "    GPIO.output(GPIO_TRIGGER, True)\n    time.sleep(1e-05)\n    GPIO.output(GPIO_TRIGGER, False)", "piece": "time.sleep(1e-05)"}
{"function_name": "_get_pages", "function_define": "    self.set_status('getting pages')\n    all_pages = {}\n    pages_cnt = 0", "piece": "all_pages = {}"}
{"function_name": "_download_pages", "function_define": "    c_page = 0\n    self._bookmarks[chapter] = []\n    pages = self._pages[chapter]", "piece": "self._bookmarks[chapter] = []"}
{"function_name": "_merge_pages", "function_define": "    for book in ch:\n    if len(book.keys()) == 1:\n    if not os.path.exists(filepath):", "piece": "if len(book.keys()) == 1:"}
{"function_name": "find_paths", "function_define": "    if visited is None:\n    visited = ['start']\n    paths = []", "piece": "visited = ['start']"}
{"function_name": "add_dependency", "function_define": "    if start not in self._forward:\n    self._forward[start] = set()\n    if end not in self._backward:", "piece": "self._forward[start] = set()"}
{"function_name": "read_one", "function_define": "    if habit is not None:\n    habit_schema = HabitSchema()\n    data = habit_schema.dump(habit)", "piece": "habit_schema = HabitSchema()"}
{"function_name": "migrate_files", "function_define": "    total = len(activities)\n    stepsize = 10\n    if (i + 1) % stepsize == 0:", "piece": "stepsize = 10"}
{"function_name": "equalize_logp", "function_define": "    cdf_v = []\n    cdf_c = []\n    for v in sorted(iterable):", "piece": "cdf_c = []"}
{"function_name": "startElement", "function_define": "    if name == 'Rel':\n    self.queryid = attrs['queryid']\n    self.spots = {}", "piece": "self.queryid = attrs['queryid']"}
{"function_name": "endElement", "function_define": "    if name == 'Rel':\n    query_img.show()\n    print(self.queryid)", "piece": "query_img.show()"}
{"function_name": "cyp_p_des", "function_define": "    if not file_path.endswith('/'):\n    file_path = file_path + '/'\n    if not out_path.endswith('/'):", "piece": "file_path = file_path + '/'"}
{"function_name": "merge_sorted_arr", "function_define": "    new_arr = []\n    if left[i] < right[j]:\n    new_arr.append(left[i])", "piece": "if left[i] < right[j]:"}
{"function_name": "merge_sort", "function_define": "    if len(arr) <= 2:\n    pivot = len(arr) // 2\n    left = merge_sort(arr[:pivot])", "piece": "pivot = len(arr) // 2"}
{"function_name": "_run_forever", "function_define": "    if delay > 0:\n    sleep(delay)\n    while True:", "piece": "sleep(delay)"}
{"function_name": "randomimage", "function_define": "    class Randomimage:\n    response = requests.get(URLS[2])\n    json_data = response.json()", "piece": "response = requests.get(URLS[2])"}
{"function_name": "randomthreeimage", "function_define": "    class Randomimage:\n    response = requests.get(URLS[3])\n    json_data = response.json()", "piece": "response = requests.get(URLS[3])"}
{"function_name": "listallsubbreeds", "function_define": "    for \"hound\" \"\"\"\n    response = requests.get(URLS[7])\n    json_data = response.json()", "piece": "response = requests.get(URLS[7])"}
{"function_name": "list_of_subbreed", "function_define": "    sub-breed \"afghan\" \"\"\"\n    response = requests.get(URLS[8])\n    json_data = response.json()", "piece": "response = requests.get(URLS[8])"}
{"function_name": "test_get_info", "function_define": "    resData = res.json()\n    assert res.status_code == 200\n    assert 'jwt' not in resData", "piece": "assert res.status_code == 200"}
{"function_name": "addKeyPress", "function_define": "    key_int (TYPE): Description\n    info (TYPE): Description\n    Returns:", "piece": "info (TYPE): Description"}
{"function_name": "getPoolItem", "function_define": "    pool (TYPE): Description\n    cls (TYPE): Description\n    if len(pool) > 0:", "piece": "cls (TYPE): Description"}
{"function_name": "orchestrate", "function_define": "    hither(destination)\n    yon(destination)\n    yon(destination)", "piece": "yon(destination)"}
{"function_name": "_get_syncpoints", "function_define": "    the source file.\n    if not name:\n    name = None", "piece": "if not name:"}
{"function_name": "add_label", "function_define": "    id = kwargs.get('id', None)\n    if label_name is not None:\n    if label:", "piece": "if label_name is not None:"}
{"function_name": "remove_label", "function_define": "    id = kwargs.get('id', None)\n    if label_name is not None:\n    if label:", "piece": "if label_name is not None:"}
{"function_name": "_get_vars", "function_define": "    for variable in fis.variables:\n    if par != 'type':\n    for variable in [fis.target]:", "piece": "if par != 'type':"}
{"function_name": "get_module_tasks", "function_define": "    tasks = {}\n    if module is None:\n    continue", "piece": "if module is None:"}
{"function_name": "print_results", "function_define": "    Print whether cat is in image\n    Returns:\n    if is_cat:", "piece": "Returns:"}
{"function_name": "example_usage", "function_define": "    cat_image_rec = CatImageRec()\n    cat_image_rec.load_model()\n    print_results(is_cat=is_cat)", "piece": "cat_image_rec.load_model()"}
{"function_name": "_set_reward_api", "function_define": "    reward = 1.0\n    ob = self._get_obs()\n    done = not notdone", "piece": "ob = self._get_obs()"}
{"function_name": "pytest_configure", "function_define": "    sys._called_from_pytest = True\n    if config.option.show_browser:\n    import django", "piece": "if config.option.show_browser:"}
{"function_name": "plot_barchart", "function_define": "    Parameters\n    prediction: filepath, mandatory\n    trainclassifier function.", "piece": "prediction: filepath, mandatory"}
{"function_name": "plot_bars", "function_define": "    np.random.seed(19680801)\n    ntimes_groups = list()\n    groups = list()", "piece": "ntimes_groups = list()"}
{"function_name": "count_parameters", "function_define": "    output = dict()\n    output[setting] = dict()\n    c = Counter(values)", "piece": "output[setting] = dict()"}
{"function_name": "paracheck", "function_define": "    output = dict()\n    total = float(len(f))\n    f = parameters['shape_features']", "piece": "total = float(len(f))"}
{"function_name": "rotate_one_geod", "function_define": "    alpha = -np.pi / 2\n    alpha += phi\n    beta += phi", "piece": "alpha += phi"}
{"function_name": "tesselate", "function_define": "    g0 = UpperGeodesic(-1, 1, 'r')\n    first = [g0, g1, g2]\n    for k in range(1, depth):", "piece": "first = [g0, g1, g2]"}
{"function_name": "get_messages", "function_define": "    result = dict()\n    current_key = None\n    line = line.strip()", "piece": "current_key = None"}
{"function_name": "swap_rows", "function_define": "    Parameters\n    Z : np.array\n    index row from Z", "piece": "Z : np.array"}
{"function_name": "partial_pivoting", "function_define": "    Parameters\n    Z : np.array\n    row : int", "piece": "Z : np.array"}
{"function_name": "solve_sys", "function_define": "    Parameters\n    X : list\n    list of x values", "piece": "X : list"}
{"function_name": "vandermond", "function_define": "    Parameters\n    X : list\n    list of x values", "piece": "X : list"}
{"function_name": "_RunProcessDump", "function_define": "    for m in mem_blocks:\n    procs = self.procs\n    session_id = s", "piece": "procs = self.procs"}
{"function_name": "cmdb_init", "function_define": "    for v in res.itervalues():\n    minion = v['id']\n    v['saltname'] = v['id']", "piece": "minion = v['id']"}
{"function_name": "server_create", "function_define": "    username = auth_info['username']\n    if '1' not in auth_info['r_id']:\n    data.update(server_info)", "piece": "if '1' not in auth_info['r_id']:"}
{"function_name": "server_select", "function_define": "    username = auth_info['username']\n    if '1' not in auth_info['r_id']:\n    where = data.get('where', None)", "piece": "if '1' not in auth_info['r_id']:"}
{"function_name": "role_update", "function_define": "    username = auth_info['username']\n    if '1' not in auth_info['r_id']:\n    where = data.get('where', None)", "piece": "if '1' not in auth_info['r_id']:"}
{"function_name": "server_delete", "function_define": "    username = auth_info['username']\n    if '1' not in auth_info['r_id']:\n    where = data.get('where', None)", "piece": "if '1' not in auth_info['r_id']:"}
{"function_name": "get_range", "function_define": "    if progress == 0:\n    if progress in range(1, 20):\n    if progress in range(20, 40):", "piece": "if progress in range(1, 20):"}
{"function_name": "_wrapper", "function_define": "    out = []\n    instance, prefix = args\n    with open(fname) as g:", "piece": "instance, prefix = args"}
{"function_name": "read_aln_file", "function_define": "    if extension == '.cram':\n    print('Indexing new BAM file')\n    print('Conversion successful')", "piece": "print('Indexing new BAM file')"}
{"function_name": "isolate_ig", "function_define": "    and only includes exons.\n    the discretion of the user.\n    call the function as follows:", "piece": "the discretion of the user."}
{"function_name": "writeGTF", "function_define": "    cols = inGTF.columns.tolist()\n    if len(cols) == 9:\n    if 'attribute' in cols:", "piece": "if len(cols) == 9:"}
{"function_name": "show_map", "function_define": "    by generate_random_map.\n    if slices is not None:\n    for s in slices:", "piece": "if slices is not None:"}
{"function_name": "_add_dependency", "function_define": "    missing = []\n    suggested = []\n    depend = DEPENDENCY.match(cran)", "piece": "suggested = []"}
{"function_name": "_load_changelog", "function_define": "    if changelog is not None:\n    version = self.version\n    prev_line = ''", "piece": "version = self.version"}
{"function_name": "_load_descr", "function_define": "    if desc is None:\n    errors = []\n    for line in desc:", "piece": "errors = []"}
{"function_name": "get_signatures", "function_define": "    Returns:\n    import inspect\n    assert args", "piece": "import inspect"}
{"function_name": "journal_cancel", "function_define": "    row_tot = row.monthly_payment\n    new_tot = cur_tot - row_tot\n    contract.cancel()", "piece": "new_tot = cur_tot - row_tot"}
{"function_name": "filterQuestion", "function_define": "    r0 = '[0-9]+'\n    import re\n    if len(content_list_sub) >= 2:", "piece": "import re"}
{"function_name": "serviceSxodim", "function_define": "    date = parameters.get('date')\n    city = parameters.get('city')\n    if date_period:", "piece": "city = parameters.get('city')"}
{"function_name": "beautifyWikiText", "function_define": "    total = 0\n    brackets = 0\n    str = ''", "piece": "brackets = 0"}
{"function_name": "serviceWeather", "function_define": "    if isWeather == '':\n    if status == 'ERROR':\n    d2 = datetime.today().date()", "piece": "if status == 'ERROR':"}
{"function_name": "localizeDay", "function_define": "    day = str(int(day))\n    if day == '3' or day == '23':\n    day = day + u'-\u0435'", "piece": "if day == '3' or day == '23':"}
{"function_name": "factorial_test", "function_define": "    results = []\n    with Timer() as t:\n    cy.factorial(500)", "piece": "with Timer() as t:"}
{"function_name": "integral_test", "function_define": "    results = []\n    for _ in tqdm(range(10)):\n    with Timer() as t:", "piece": "for _ in tqdm(range(10)):"}
{"function_name": "list_search_test", "function_define": "    results = []\n    seq.append(1)\n    for _ in tqdm(range(1000)):", "piece": "seq.append(1)"}
{"function_name": "load_data_point", "function_define": "    Parameters:\n    Outputs:\n    truth: a full cube", "piece": "Outputs:"}
{"function_name": "get_flipped", "function_define": "    flipped = []\n    for x in range(-1, 2):\n    for y in range(-1, 2):", "piece": "for x in range(-1, 2):"}
{"function_name": "get_children", "function_define": "    children = []\n    for move in moves:\n    child = Othello(self.board)", "piece": "for move in moves:"}
{"function_name": "get_state_value", "function_define": "    value = 0\n    for row in self.board:\n    for cell in row:", "piece": "for row in self.board:"}
{"function_name": "get_best_move", "function_define": "    given number of plies.\n    for move in moves:\n    if not move:", "piece": "for move in moves:"}
{"function_name": "get_type", "function_define": "    if isinstance(val, str):\n    elif isinstance(val, int):\n    elif isinstance(val, float):", "piece": "elif isinstance(val, int):"}
{"function_name": "insert_sql", "function_define": "    keys = ','.join(dic.keys())\n    extra = 0\n    if keys.find('bbox') >= 0:", "piece": "extra = 0"}
{"function_name": "prepare_params", "function_define": "    params = []\n    for val in vals:\n    if not isinstance(val, list):", "piece": "for val in vals:"}
{"function_name": "unpickle", "function_define": "    import cPickle\n    fo = open(file, 'rb')\n    dict = cPickle.load(fo)", "piece": "fo = open(file, 'rb')"}
{"function_name": "getScaledFactor", "function_define": "    factor = random.random() * 2\n    factor = min(maxScale, factor)\n    factor = max(minScale, factor)", "piece": "factor = min(maxScale, factor)"}
{"function_name": "partitionImage", "function_define": "    dims = im_arr.shape\n    numPixels = dims[0] * dims[1]\n    frontier = set()", "piece": "numPixels = dims[0] * dims[1]"}
{"function_name": "l2transform", "function_define": "    xmax, ymax, cols = im_arr.shape\n    for i in range(1, k + 1):\n    indices = which(partitions, i)", "piece": "for i in range(1, k + 1):"}
{"function_name": "manipulate_image", "function_define": "    Transformations:\n    Returns:\n    Manipulated image", "piece": "Returns:"}
{"function_name": "save_from_CIFAR", "function_define": "    images = unpickle('train')\n    red = images['data'][k][0:1024]\n    for i in range(0, 32):", "piece": "red = images['data'][k][0:1024]"}
{"function_name": "_get_xml_string", "function_define": "    if 'size' in dir(infile):\n    size = infile.size\n    size = infile.measure_size()", "piece": "size = infile.size"}
{"function_name": "_read_at", "function_define": "    infile.seek(pos)\n    dtype = np.dtype(ntype)\n    bp = dtype.itemsize", "piece": "dtype = np.dtype(ntype)"}
{"function_name": "_read_data", "function_define": "    if frame is None:\n    frame = 0\n    if dtype is None:", "piece": "frame = 0"}
{"function_name": "_read_frame", "function_define": "    if pos is None:\n    pos = infile.tell()\n    if dtype is None:", "piece": "pos = infile.tell()"}
{"function_name": "train_disc", "function_define": "    toggle_grad(self.disc, True)\n    self.disc.train()\n    self.disc_opt.zero_grad()", "piece": "self.disc.train()"}
{"function_name": "train_gen", "function_define": "    toggle_grad(self.disc, False)\n    self.disc.eval()\n    zb_joint.requires_grad_(True)", "piece": "self.disc.eval()"}
{"function_name": "_get_word_ngrams", "function_define": "    assert len(sentences) > 0\n    assert n > 0\n    words = set()", "piece": "assert n > 0"}
{"function_name": "_recon_lcs", "function_define": "    table = _lcs(x, y)\n    if i == 0 or j == 0:\n    elif x[i - 1] == y[j - 1]:", "piece": "if i == 0 or j == 0:"}
{"function_name": "_union_lcs", "function_define": "    LCS_u(r_i, C) = 4/5.\n    lcs_union = set()\n    combined_lcs_length = 0", "piece": "lcs_union = set()"}
{"function_name": "getConnection", "function_define": "    if time:\n    if date:\n    response = urllib.urlopen(url)", "piece": "if date:"}
{"function_name": "getDepartures", "function_define": "    if time:\n    if date:\n    response = urllib.urlopen(url)", "piece": "if date:"}
{"function_name": "exitFrame", "function_define": "    if self._frame is None:\n    self._enteredFrame = False\n    if self._framesElapsed == 0:", "piece": "self._enteredFrame = False"}
{"function_name": "stopWritingVideo", "function_define": "    self._videoFilename = None\n    self._videoEncoding = None\n    self._videoWriter = None", "piece": "self._videoEncoding = None"}
{"function_name": "_writeVideoFrame", "function_define": "    if not self.isWritingVideo:\n    if self._videoWriter is None:\n    if fps == 0.0:", "piece": "if self._videoWriter is None:"}
{"function_name": "processEvents", "function_define": "    keycode = cv2.waitKey(1)\n    keycode &= 255\n    self.keypressCallback(keycode)", "piece": "keycode &= 255"}
{"function_name": "hook_example", "function_define": "    import torch.nn as nn\n    import numpy as np\n    from PIL import Image", "piece": "import numpy as np"}
{"function_name": "cleaning", "function_define": "    df.dropna()\n    keeplist = \"?.!,'_-\"\n    import re", "piece": "keeplist = \"?.!,'_-\""}
{"function_name": "try_network", "function_define": "    t = torch.from_numpy(z)\n    v = Variable(t).cuda()\n    network = GanPair().cuda()", "piece": "v = Variable(t).cuda()"}
{"function_name": "load_and_play", "function_define": "    most_recent = files[-1]\n    results = np.load(most_recent)\n    synthesized = results", "piece": "results = np.load(most_recent)"}
{"function_name": "synthetic", "function_define": "    for i in range(100):\n    hz = [root]\n    for _ in range(0):", "piece": "hz = [root]"}
{"function_name": "ingest_and_train", "function_define": "    ingest()\n    network = GanPair()\n    t = torch.from_numpy(z)", "piece": "network = GanPair()"}
{"function_name": "get_magnitudes", "function_define": "    snds = list(Sound)\n    snd = choice(snds)\n    x = snd.decomposed", "piece": "snd = choice(snds)"}
{"function_name": "synthesize_block", "function_define": "    start = 0\n    for i, band in enumerate(bands):\n    stop = start + band", "piece": "for i, band in enumerate(bands):"}
{"function_name": "_get_elevation", "function_define": "    if srtm_data_object is None:\n    if elevation_m_asl is None:\n    elevation_m_asl = 0.0", "piece": "if elevation_m_asl is None:"}
{"function_name": "get_elevations", "function_define": "    N = number of points\n    sea level).\n    num_points = len(latitudes_deg)", "piece": "sea level)."}
{"function_name": "fib_series", "function_define": "    if num <= 2:\n    if 1 not in self.series:\n    self.series.append(1)", "piece": "if 1 not in self.series:"}
{"function_name": "test_deepcopy", "function_define": "    other_param.a = [1.0]\n    param_copy = param.deepcopy()\n    param.other_param.a[0] += 1", "piece": "param_copy = param.deepcopy()"}
{"function_name": "test_p_is_zero", "function_define": "    param = iap.Binomial(0)\n    sample = param.draw_sample()\n    assert sample.shape == tuple()", "piece": "sample = param.draw_sample()"}
{"function_name": "test_p_is_one", "function_define": "    param = iap.Binomial(1.0)\n    sample = param.draw_sample()\n    assert sample.shape == tuple()", "piece": "sample = param.draw_sample()"}
{"function_name": "test_p_is_tuple", "function_define": "    param = iap.Binomial((0.0, 1.0))\n    last_p = 0.5\n    diffs = []", "piece": "last_p = 0.5"}
{"function_name": "test_draw_sample", "function_define": "    param = iap.Beta(0.5, 0.5)\n    sample = param.draw_sample()\n    assert sample.shape == tuple()", "piece": "sample = param.draw_sample()"}
{"function_name": "test_min_size", "function_define": "    seen_components = [0, 0]\n    seen_pixels = [0, 0]\n    for _ in sm.xrange(100):", "piece": "seen_pixels = [0, 0]"}
{"function_name": "test_method", "function_define": "    seen = [0, 0]\n    for _ in sm.xrange(200):\n    if nb_in_between == 0:", "piece": "for _ in sm.xrange(200):"}
{"function_name": "test_add_floats", "function_define": "    sample = p.draw_sample()\n    samples = p.draw_samples((2, 3))\n    assert samples.dtype.kind == 'f'", "piece": "samples = p.draw_samples((2, 3))"}
{"function_name": "test_pairs", "function_define": "    continue\n    if base == 0 and exponent < 0:\n    continue", "piece": "if base == 0 and exponent < 0:"}
{"function_name": "checkrot", "function_define": "    if len(str1) == len(str2):\n    str3 = str1 + str1\n    ad = str3.__contains__(str2)", "piece": "str3 = str1 + str1"}
{"function_name": "convert_to_gantt", "function_define": "    whos = []\n    actions = []\n    begins = []", "piece": "actions = []"}
{"function_name": "parse_to_frame", "function_define": "    whos = []\n    actions = []\n    begins = []", "piece": "actions = []"}
{"function_name": "get_sort_key", "function_define": "    char = chr_map[t[0]]\n    index = int(t[t.rfind('-'):])\n    if sec_index != '':", "piece": "index = int(t[t.rfind('-'):])"}
{"function_name": "save_to_mat", "function_define": "    import scipy.io\n    if hasattr(self, 'Xprev'):\n    SaveVars['Xprev'] = self.Xprev", "piece": "if hasattr(self, 'Xprev'):"}
{"function_name": "read_npz", "function_define": "    if 'X' not in var_dict:\n    if 'doc_range' not in var_dict:\n    if nDocTotal is not None:", "piece": "if 'doc_range' not in var_dict:"}
{"function_name": "read_mat", "function_define": "    import scipy.io\n    if 'X' not in InDict:\n    if 'doc_range' not in InDict:", "piece": "if 'X' not in InDict:"}
{"function_name": "_check_dims", "function_define": "    assert self.X.ndim == 2\n    assert self.X.flags.c_contiguous\n    assert self.X.flags.owndata", "piece": "assert self.X.flags.c_contiguous"}
{"function_name": "get_text_summary", "function_define": "    if hasattr(self, 'summary'):\n    s = self.summary\n    s = 'GroupXData'", "piece": "s = self.summary"}
{"function_name": "make_subset", "function_define": "    Parameters\n    docMask : 1D array_like of ints\n    default=True", "piece": "docMask : 1D array_like of ints"}
{"function_name": "add_data", "function_define": "    Post Condition\n    if not self.dim == XDataObj.dim:\n    self.nObs += XDataObj.nObs", "piece": "if not self.dim == XDataObj.dim:"}
{"function_name": "run_strat_random", "function_define": "    between buying again.\n    CAUTION: this strat never wins\n    TRADE_CYCLE_DEFAULT_R = 300", "piece": "CAUTION: this strat never wins"}
{"function_name": "chunk_read", "function_define": "    if content_length is None:\n    total_size = 0\n    total_size = int(total_size)", "piece": "total_size = 0"}
{"function_name": "mms_orbit_plot", "function_define": "    plane = plane.lower()\n    coord = coord.lower()\n    if plane == 'xy':", "piece": "coord = coord.lower()"}
{"function_name": "_set_auth_tags", "function_define": "    if not user:\n    uid = getattr(user, 'pk', None)\n    if uname:", "piece": "uid = getattr(user, 'pk', None)"}
{"function_name": "process_request", "function_define": "    tracer = settings.TRACER\n    if settings.DISTRIBUTED_TRACING:\n    propagator = HTTPPropagator()", "piece": "if settings.DISTRIBUTED_TRACING:"}
{"function_name": "process_response", "function_define": "    span = _get_req_span(request)\n    if span:\n    span._remove_exc_info()", "piece": "if span:"}
{"function_name": "_modify_discord", "function_define": "    self._inject_cogs(cog)\n    self.client.add_cog = add_cog_2\n    self._eject_cogs(name)", "piece": "self.client.add_cog = add_cog_2"}
{"function_name": "teardown", "function_define": "    self.events.clear()\n    self._listeners.clear()\n    self._global_commands.clear()", "piece": "self._listeners.clear()"}
{"function_name": "slash_command", "function_define": "    Parameters\n    auto_sync : :class:`bool`\n    name : :class:`str`", "piece": "auto_sync : :class:`bool`"}
{"function_name": "_inject_cogs", "function_define": "    cog.slash_commands = []\n    cmd._inject_cog(cog)\n    cog.slash_commands.append(cmd)", "piece": "cmd._inject_cog(cog)"}
{"function_name": "_eject_cogs", "function_define": "    cog_names.remove(name)\n    except Exception:\n    for key in bad_keys:", "piece": "except Exception:"}
{"function_name": "edit_distance", "function_define": "    if len(s) == 0:\n    if len(t) == 0:\n    if (len(s), len(t)) in memo:", "piece": "if len(t) == 0:"}
{"function_name": "GetHostname", "function_define": "    host = None\n    if SystemConfiguration:\n    host = host.encode('utf-8')", "piece": "if SystemConfiguration:"}
{"function_name": "init_paramter", "function_define": "    self.beta = beta\n    self.iterations = iterations\n    self.rating_scale = rating_scale", "piece": "self.iterations = iterations"}
{"function_name": "weightgenerator", "function_define": "    Uw = np.transpose(Uw)\n    Hr = np.dot(Uw, Iw)\n    Hr = self.Hui * Hr", "piece": "Hr = np.dot(Uw, Iw)"}
{"function_name": "init_assumption", "function_define": "    print('Initializing...', end='')\n    self.init_weightgenerator()\n    for i in range(self.Unum):", "piece": "self.init_weightgenerator()"}
{"function_name": "copyedge", "function_define": "    new2old = template.nonzero()[0]\n    for i in range(desired):\n    tmp /= tmp.sum()", "piece": "for i in range(desired):"}
{"function_name": "evolution", "function_define": "    randnum = np.random.rand()\n    if randnum < self.beta:\n    self.addnode(1)", "piece": "if randnum < self.beta:"}
{"function_name": "__select_file", "function_define": "    Select config yaml from GUI.\n    root = tkinter.Tk()\n    root.withdraw()", "piece": "root = tkinter.Tk()"}
{"function_name": "gen_tree_graph", "function_define": "    fifo = []\n    root_id = str(root_node)\n    G.add_node(root_id)", "piece": "root_id = str(root_node)"}
{"function_name": "test_sell_filled", "function_define": "    bids = {BINANCE: [PRICE_BID]}\n    asks = {LIQUI: [PRICE_ASK]}\n    assert done is True", "piece": "asks = {LIQUI: [PRICE_ASK]}"}
{"function_name": "test_miss_sell", "function_define": "    bids = {BINANCE: [PRICE_BID]}\n    asks = {LIQUI: [PRICE_ASK]}\n    assert done is True", "piece": "asks = {LIQUI: [PRICE_ASK]}"}
{"function_name": "_predict", "function_define": "    hash_list = list()\n    score_list = list()\n    proc_manager.start()", "piece": "score_list = list()"}
{"function_name": "_sorted_score", "function_define": "    reverse = False\n    if self._eval_key == 'accuracy':\n    reverse = True", "piece": "if self._eval_key == 'accuracy':"}
{"function_name": "_set_as_", "function_define": "    if hasattr(v, '_utype'):\n    v = v._utype(v)\n    except (TypeError, ValueError):", "piece": "v = v._utype(v)"}
{"function_name": "_set_router_id", "function_define": "    if hasattr(v, '_utype'):\n    v = v._utype(v)\n    except (TypeError, ValueError):", "piece": "v = v._utype(v)"}
{"function_name": "reception", "function_define": "    while True:\n    if self.in_queue < self.ub:\n    self.in_queue += 1", "piece": "if self.in_queue < self.ub:"}
{"function_name": "customer", "function_define": "    eating_time = 0\n    while eating_time <= 0:\n    self.say_goodbye()", "piece": "while eating_time <= 0:"}
{"function_name": "plot_log", "function_define": "    plt.xlabel('time (minute)')\n    plt.ylabel('queue length')\n    plt.show()", "piece": "plt.ylabel('queue length')"}
{"function_name": "generate_svg", "function_define": "    if marked_nodes == []:\n    addfilenamestr = ''\n    add_command_str = ''", "piece": "addfilenamestr = ''"}
{"function_name": "get_graph_order", "function_define": "    Node2nextEntity = {}\n    Entity2nextNode = {}\n    for Entity_idx in node.input:", "piece": "Entity2nextNode = {}"}
{"function_name": "get_permutations", "function_define": "    get all permutations of list a\n    import itertools\n    for r in range(len(a) + 1):", "piece": "import itertools"}
{"function_name": "_get_risk_level", "function_define": "    conn = Conn(self['db_name'])\n    risk_level = len(instance_ids)\n    if instance_id in instance_ids:", "piece": "risk_level = len(instance_ids)"}
{"function_name": "load_from_db", "function_define": "    conn = Conn(self['db_name'])\n    if tmp_instance is None:\n    self['id'] = tmp_instance['id']", "piece": "if tmp_instance is None:"}
{"function_name": "_analysis_orders", "function_define": "    start_sequence: next sequence\n    orders = self._get_orders()\n    if len(orders) == 0:", "piece": "orders = self._get_orders()"}
{"function_name": "_settle_pnl", "function_define": "    total_fee: float = 0.0\n    liquidate_amount: int = 0\n    open_amount: int = 0", "piece": "liquidate_amount: int = 0"}
{"function_name": "test_file_hash", "function_define": "    if alg.startswith('xxh'):\n    pytest.importorskip('xxhash')\n    check_tiny_data(fname)", "piece": "pytest.importorskip('xxhash')"}
{"function_name": "get_interval", "function_define": "    now = time.time()\n    remaining = lose_date - now\n    interval = lose_date / 2", "piece": "remaining = lose_date - now"}
{"function_name": "power_light", "function_define": "    if pin not in [9, 10, 11]:\n    GPIO.output(pin, True)\n    time.sleep(1)", "piece": "GPIO.output(pin, True)"}
{"function_name": "collect_feats", "function_define": "    Returns:\n    feats = None\n    feats_dict = {}", "piece": "feats = None"}
{"function_name": "give_money", "function_define": "    if len(cellmates) > 1:\n    poorest_cellmate.wealth += 1\n    self.wealth -= 1", "piece": "poorest_cellmate.wealth += 1"}
{"function_name": "open_anything", "function_define": "    with standard methods.\n    input, URL or a string\n    if os.path.isfile(source):", "piece": "input, URL or a string"}
{"function_name": "set_cursor", "function_define": "    self.stream.seek(position, 0)\n    self._line = None\n    self._pos = 0", "piece": "self._line = None"}
{"function_name": "read_upto_char", "function_define": "    characters.\n    returned string\n    chars = [chars]", "piece": "returned string"}
{"function_name": "read_upto_block", "function_define": "    returned string\n    blocks = [blocks]\n    curpos = self.tell()", "piece": "blocks = [blocks]"}
{"function_name": "to_detect", "function_define": "    value = self.to_string(value)\n    parsed = locale.atof(value)\n    except ValueError:", "piece": "parsed = locale.atof(value)"}
{"function_name": "test_fuzzy", "function_define": "    within the vicinity.\"\"\"\n    cube.data[0, 1] = 1.0\n    cube.data[2, 3] = 0.5", "piece": "cube.data[0, 1] = 1.0"}
{"function_name": "test_masked_data", "function_define": "    cube.data[0, 1] = 1.0\n    cube.data[2, 3] = 1.0\n    cube.data[0, 4] = 10.0", "piece": "cube.data[2, 3] = 1.0"}
{"function_name": "loadlevel", "function_define": "    carts.empty()\n    gamedata['level'] = number\n    gamedata['coal'] = 0", "piece": "gamedata['level'] = number"}
{"function_name": "check_acme", "function_define": "    if self._acme_server_ok:\n    if self._acme_server_down:\n    self._acme_server_ok = True", "piece": "if self._acme_server_down:"}
{"function_name": "check_md", "function_define": "    domains = None\n    if isinstance(domain, list):\n    domains = domain", "piece": "if isinstance(domain, list):"}
{"function_name": "get_server_cert", "function_define": "    if proto is not None:\n    if ciphers is not None:\n    r = self.run(args)", "piece": "if ciphers is not None:"}
{"function_name": "get_meta", "function_define": "    assert r.exit_code == 0\n    assert r.response\n    assert r.response['header']", "piece": "assert r.response"}
{"function_name": "await_completion", "function_define": "    renewals = {}\n    names = names.copy()\n    while len(names) > 0:", "piece": "names = names.copy()"}
{"function_name": "await_renewal", "function_define": "    while len(names) > 0:\n    if time.time() >= try_until:\n    for name in names:", "piece": "if time.time() >= try_until:"}
{"function_name": "await_error", "function_define": "    while True:\n    if time.time() >= try_until:\n    time.sleep(0.1)", "piece": "if time.time() >= try_until:"}
{"function_name": "await_file", "function_define": "    while True:\n    if time.time() >= try_until:\n    if os.path.isfile(fpath):", "piece": "if time.time() >= try_until:"}
{"function_name": "get_ocsp_status", "function_define": "    stat = {}\n    if proto is not None:\n    if cipher is not None:", "piece": "if proto is not None:"}
{"function_name": "print_aligned", "function_define": "    if len(arr) == 0:\n    for i in arr:\n    name = i[0]", "piece": "for i in arr:"}
{"function_name": "set_options", "function_define": "    for o in options:\n    if '=' not in o:\n    k, v = o.split('=', 1)", "piece": "if '=' not in o:"}
{"function_name": "print_conf", "function_define": "    print('Core properties\\n')\n    print('')\n    print('Core options\\n')", "piece": "print('')"}
{"function_name": "test_album_infos", "function_define": "    if not album_timeline:\n    raise AssertionError()\n    if len(album_timeline) < 14:", "piece": "raise AssertionError()"}
{"function_name": "fitModel", "function_define": "    Y = xRet\n    X = sm.add_constant(X)\n    self.model = sm.OLS(Y, X)", "piece": "X = sm.add_constant(X)"}
{"function_name": "addPhoto", "function_define": "    if self.photowall_counter < 3:\n    print('ADD PHOTO')\n    options = QFileDialog.Options()", "piece": "print('ADD PHOTO')"}
{"function_name": "addPhotos", "function_define": "    print('ADD PHOTOS TO ALBUM')\n    options = QFileDialog.Options()\n    if files:", "piece": "options = QFileDialog.Options()"}
{"function_name": "addAudios", "function_define": "    print('ADD AUDIOS TO ALBUM')\n    options = QFileDialog.Options()\n    if file:", "piece": "options = QFileDialog.Options()"}
{"function_name": "save_array", "function_define": "    the last 2 dimenions.\n    Parameters\n    file: str", "piece": "Parameters"}
{"function_name": "_eval_result", "function_define": "    except Exception as e:\n    result['err_code'] = 1\n    result['error'] = str(e)", "piece": "result['err_code'] = 1"}
{"function_name": "lerp_line", "function_define": "    pts = []\n    for i in range(n + 1):\n    t = i / float(n)", "piece": "for i in range(n + 1):"}
{"function_name": "pole_to_lines", "function_define": "    lines = []\n    pts = lerp_line(pt0, pt1, n)\n    for pt in pts:", "piece": "pts = lerp_line(pt0, pt1, n)"}
{"function_name": "frame_to_lines", "function_define": "    Twc = inv_T(Tcw)\n    p000 = np.array([0.0, 0.0, 0.0])\n    p100 = np.array([1.0, 0.0, 0.0])", "piece": "p000 = np.array([0.0, 0.0, 0.0])"}
{"function_name": "create_scratch", "function_define": "    Create a scratch\n    data = ser.validated_data\n    arch = data.get('arch')", "piece": "data = ser.validated_data"}
{"function_name": "createListNode", "function_define": "    if not list_node:\n    head = ListNode(list_node[0])\n    p = head", "piece": "head = ListNode(list_node[0])"}
{"function_name": "close_db", "function_define": "    db = g.pop('db', None)\n    if db is not None:\n    db.close()", "piece": "if db is not None:"}
{"function_name": "add_recipe", "function_define": "    db = get_db()\n    db.commit()\n    db.commit()", "piece": "db.commit()"}
{"function_name": "read_raw_VALD", "function_define": "    for i, line in enumerate(lines):\n    if i < 2:\n    continue", "piece": "if i < 2:"}
{"function_name": "read_sun", "function_define": "    f = fits.getdata(path)\n    idx = (w1 <= w) & (w <= w2)\n    w, f = (w[idx], f[idx])", "piece": "idx = (w1 <= w) & (w <= w2)"}
{"function_name": "transformation", "function_define": "    s = StringIO(data)\n    data = pd.read_csv(s)\n    s = StringIO(data)", "piece": "data = pd.read_csv(s)"}
{"function_name": "test_mahalanobis", "function_define": "    x = rand(100)\n    A = rand(100, 100)\n    A = dot(A.transpose(), A)", "piece": "A = rand(100, 100)"}
{"function_name": "test_isclose", "function_define": "    a = xr.DataArray(a)\n    b = xr.DataArray(b)\n    if use_dask:", "piece": "b = xr.DataArray(b)"}
{"function_name": "test_repeat", "function_define": "    if object_type == 'Dataset':\n    obj = xr.merge([foo, bar])\n    obj = foo", "piece": "obj = xr.merge([foo, bar])"}
{"function_name": "test_file", "function_define": "    notifications = queue.Queue()\n    while len(expected) > 0:\n    chunk = notifications.get()", "piece": "while len(expected) > 0:"}
{"function_name": "test_memmap", "function_define": "    notifications = queue.Queue()\n    while len(expected) > 0:\n    chunk = notifications.get()", "piece": "while len(expected) > 0:"}
{"function_name": "test_http", "function_define": "    notifications = queue.Queue()\n    while len(expected) > 0:\n    chunk = notifications.get()", "piece": "while len(expected) > 0:"}
{"function_name": "test_xrootd", "function_define": "    pytest.importorskip('XRootD')\n    notifications = queue.Queue()\n    while len(expected) > 0:", "piece": "notifications = queue.Queue()"}
{"function_name": "fit_img_to", "function_define": "    h, w = img.shape[:2]\n    if h > w:\n    r = size / float(h)", "piece": "if h > w:"}
{"function_name": "cv_to_imgtk", "function_define": "    img_copy = img.copy()\n    b, g, r = cv2.split(img_copy)\n    img_rgb = cv2.merge((r, g, b))", "piece": "b, g, r = cv2.split(img_copy)"}
{"function_name": "selectFolder", "function_define": "    print(self.img_dir)\n    self.article_id += 1\n    page.tkraise()", "piece": "self.article_id += 1"}
{"function_name": "selectCSV", "function_define": "    if os.path.isdir(img_dir):\n    self.img_dir = img_dir\n    self.article_id += 1", "piece": "self.img_dir = img_dir"}
{"function_name": "on_key_pressed", "function_define": "    if e.char == '1':\n    self.current_gender_mode = 1\n    if e.char == '2':", "piece": "self.current_gender_mode = 1"}
{"function_name": "on_leftclick", "function_define": "    if self.article_id < 0:\n    image_boxed = image.copy()\n    top_mergin = 0", "piece": "image_boxed = image.copy()"}
{"function_name": "bmad_from_csv", "function_define": "    Example:\n    df = pandas.read_csv(csvfile)\n    if outfile:", "piece": "df = pandas.read_csv(csvfile)"}
{"function_name": "exec_system_func", "function_define": "    if function_name == '\u8df3\u8f6c\u5230URL':\n    result = selenium_util.get(arg)\n    elif function_name == '\u6d4f\u89c8\u5668\u524d\u8fdb':", "piece": "result = selenium_util.get(arg)"}
{"function_name": "round_function", "function_define": "    Ri ^= Ki\n    col = (30 & block) >> 1\n    Ri += block << lshift_val", "piece": "col = (30 & block) >> 1"}
{"function_name": "add_to_details", "function_define": "    external_user_details = {}\n    for message in messages:\n    msg_to = message['msg_to'][0]", "piece": "for message in messages:"}
{"function_name": "add_from_details", "function_define": "    external_user_details = {}\n    for message in messages:\n    msg_from = message['msg_from']", "piece": "for message in messages:"}
{"function_name": "sample_filter", "function_define": "    if target_lang in self.params:\n    param = self.params[target_lang]\n    param = self.params['en']", "piece": "param = self.params[target_lang]"}
{"function_name": "get_perplexity", "function_define": "    for line in doc.split('\\n'):\n    log_score = pp_model.score(line)\n    length = len(line.split()) + 1", "piece": "log_score = pp_model.score(line)"}
{"function_name": "test_invalid", "function_define": "    fields_from_data('abc')\n    fields_from_data(1)\n    fields_from_data(['abc'])", "piece": "fields_from_data(1)"}
{"function_name": "test_no_layer", "function_define": "    pf1 = MagicMock(spec=QgsField)\n    pf1.name.return_value = '1'\n    pf2 = MagicMock(spec=QgsField)", "piece": "pf1.name.return_value = '1'"}
{"function_name": "test_layer", "function_define": "    pf1 = MagicMock(spec=QgsField)\n    pf1.name.return_value = '1'\n    pf2 = MagicMock(spec=QgsField)", "piece": "pf1.name.return_value = '1'"}
{"function_name": "solve_6150a2bd", "function_define": "    Parameters: c = ARC test list\n    input_array = np.array(inputs)\n    tst_rslt = np.flip(input_array)", "piece": "input_array = np.array(inputs)"}
{"function_name": "solve_ce22a75a", "function_define": "    tst_rslt = np.array(inputs)\n    res = np.where(tst_rslt > 0)\n    for x in range(-1, 2):", "piece": "res = np.where(tst_rslt > 0)"}
{"function_name": "solve_1cf80156", "function_define": "    input_array = np.array(inputs)\n    column_minium = min(result[1])\n    column_maximum = max(result[1])", "piece": "column_minium = min(result[1])"}
{"function_name": "show_result", "function_define": "    print('Input')\n    print(x)\n    print('Correct output')", "piece": "print(x)"}
{"function_name": "build_arch", "function_define": "    env = self.get_recipe_env(arch)\n    if not exists(app_mk):\n    if not exists(app_setup):", "piece": "if not exists(app_mk):"}
{"function_name": "set_configs", "function_define": "    self.reset()\n    except ValueError:\n    assert width > 0", "piece": "except ValueError:"}
{"function_name": "generate_action", "function_define": "    if g_arg != i_arg:\n    self.uid = self.uid + 1\n    if action.name in self.unames:", "piece": "self.uid = self.uid + 1"}
{"function_name": "variance_system", "function_define": "    variance_system = []\n    for field in self.fields:\n    error = self.fields[field].error", "piece": "for field in self.fields:"}
{"function_name": "epsilon_system", "function_define": "    epsilon_system = []\n    for field in self.fields:\n    error = self.fields[field].error", "piece": "for field in self.fields:"}
{"function_name": "std_system", "function_define": "    Comment:\n    if self._std_system is not None:\n    std_system = []", "piece": "if self._std_system is not None:"}
{"function_name": "metric_system", "function_define": "    metric_system = []\n    if j < i:\n    continue", "piece": "if j < i:"}
{"function_name": "in_metric", "function_define": "    full_system_in_metric = []\n    for system in systems:\n    if system is None:", "piece": "for system in systems:"}
{"function_name": "set_closure", "function_define": "    self._closure.update(closure)\n    self._system_in_metric = None\n    self._system_in_diffusion = None", "piece": "self._system_in_metric = None"}
{"function_name": "internal_closure", "function_define": "    closure = {}\n    skewness_closure = {}\n    closure.update(skewness_closure)", "piece": "skewness_closure = {}"}
{"function_name": "get_covariance", "function_define": "    mf1 = self.fields[f1]\n    mf2 = self.fields[f2]\n    cf1 = mf1.coordinates", "piece": "mf2 = self.fields[f2]"}
{"function_name": "check_univariate", "function_define": "    univariates = {}\n    for term in expectations:\n    if univariate is not None:", "piece": "for term in expectations:"}
{"function_name": "_apply_closure", "function_define": "    if self.closure == {}:\n    closed_system = []\n    for equation in system:", "piece": "closed_system = []"}
{"function_name": "unclosed_terms", "function_define": "    unclosed_terms = set()\n    for system in systems:\n    for equation in system:", "piece": "for system in systems:"}
{"function_name": "is_univariate", "function_define": "    functions = set()\n    for derivative in derivatives:\n    if len(functions) == 1:", "piece": "for derivative in derivatives:"}
{"function_name": "as_sequence", "function_define": "    sequence = []\n    if alpha_i > 0:\n    sequence += alpha_i * [x_i]", "piece": "if alpha_i > 0:"}
{"function_name": "all_of_degree", "function_define": "    Description\n    import numpy as np\n    start[0] = derivative_order", "piece": "import numpy as np"}
{"function_name": "_add_tree_level", "function_define": "    self._degree += 1\n    degree = self._degree\n    level = {}", "piece": "degree = self._degree"}
{"function_name": "closure_by_order", "function_define": "    order = order + 1\n    if self._order < order:\n    factorial = 1", "piece": "if self._order < order:"}
{"function_name": "test_encode", "function_define": "    print(result)\n    print(url)\n    self.assertEqual(result, url)", "piece": "print(url)"}
{"function_name": "send_dmx", "function_define": "    self.__port.write(chr(0))\n    self.__port.write(chr(0))\n    self.__port.write(buf)", "piece": "self.__port.write(chr(0))"}
{"function_name": "parse_models", "function_define": "    if 'models' in model_list:\n    models = model_list['models']\n    for item in models:", "piece": "models = model_list['models']"}
{"function_name": "calculateWeights", "function_define": "    for i in range(numI):\n    influenceNew.append(i)\n    weightsNew.append(0.0)", "piece": "influenceNew.append(i)"}
{"function_name": "setWeights", "function_define": "    OpenMayaAnim.MFnSkinCluster,\n    OpenMaya.MDagPath,\n    OpenMaya.MFn.kMeshVertComponent,", "piece": "OpenMaya.MDagPath,"}
{"function_name": "_parse_response", "function_define": "    raise_errors was set to True\n    if not self._raise_errors:\n    content = response.content", "piece": "if not self._raise_errors:"}
{"function_name": "_api_request", "function_define": "    data = None\n    if 'payload' in kwargs:\n    data = kwargs['payload']", "piece": "if 'payload' in kwargs:"}
{"function_name": "_make_file_dict", "function_define": "    if isinstance(f, dict):\n    file_obj = f['file']\n    if 'filename' in f:", "piece": "file_obj = f['file']"}
{"function_name": "customer_create", "function_define": "    if not data:\n    data = {}\n    if locale:", "piece": "data = {}"}
{"function_name": "score_partitions", "function_define": "    score = F1()\n    pred = set(pred.splits)\n    target = set(target.splits)", "piece": "pred = set(pred.splits)"}
{"function_name": "RBF_unit_test", "function_define": "    import matplotlib.pyplot as plt\n    import time\n    lo = -10.0", "piece": "import time"}
{"function_name": "_opt_smooth", "function_define": "    K = self.rbf(K)\n    K -= np.eye(K.shape[0]) * x\n    nodes = None", "piece": "K -= np.eye(K.shape[0]) * x"}
{"function_name": "_fit_one", "function_define": "    self.rbfis_by_dim = []\n    for dim in range(y.shape[1]):\n    rbfi.fit(X, y[:, dim])", "piece": "for dim in range(y.shape[1]):"}
{"function_name": "convert_size", "function_define": "    if size_bytes == 0:\n    p = math.pow(1024, i)\n    s = round(size_bytes / p, 2)", "piece": "p = math.pow(1024, i)"}
{"function_name": "is_port_in_use", "function_define": "    sock = None\n    sock.settimeout(1)\n    sock.connect((host, int(port)))", "piece": "sock.settimeout(1)"}
{"function_name": "compress_tar", "function_define": "    current_path = Path.cwd()\n    os.chdir(input_path)\n    for f in files:", "piece": "os.chdir(input_path)"}
{"function_name": "decompress_tar", "function_define": "    if not output_path:\n    tf.extractall(str(output_path))\n    tf.close()", "piece": "tf.extractall(str(output_path))"}
{"function_name": "map_write", "function_define": "    while True:\n    item = stream_in.readline()\n    except UnicodeDecodeError:", "piece": "item = stream_in.readline()"}
{"function_name": "get_file_handler", "function_define": "    Parameters\n    config : list, required\n    strict : boolean, optional", "piece": "config : list, required"}
{"function_name": "is_ready", "function_define": "    Parameters\n    fc : FileCollection, optional\n    be visited.", "piece": "fc : FileCollection, optional"}
{"function_name": "load_variables", "function_define": "    includes a `pandoc` dictionary.\n    includes a `manubot` dictionary.\n    metadata = {}", "piece": "includes a `manubot` dictionary."}
{"function_name": "write_csl_json", "function_define": "    if not path:\n    path = pathlib.Path(path)\n    write_file.write('\\n')", "piece": "path = pathlib.Path(path)"}
{"function_name": "best_variance", "function_define": "    n = len(data)\n    sum_sq = 0\n    for x in data:", "piece": "sum_sq = 0"}
{"function_name": "run_rule", "function_define": "    if task_rule is None:\n    res = rule(*args)\n    if provider is None:", "piece": "res = rule(*args)"}
{"function_name": "test_eval_str", "function_define": "    expr = (x + y) * 3\n    assert eval_str(1) == '1'\n    print(eval_str(-x))", "piece": "assert eval_str(1) == '1'"}
{"function_name": "test_numbers", "function_define": "    x = symbol('x', 'real')\n    y = symbol('x', 'int')\n    assert eval(str(expr)) == expr", "piece": "y = symbol('x', 'int')"}
{"function_name": "test_scope", "function_define": "    dtypes = {'sin': 'int'}\n    with raises(ValueError):\n    exprify('sin + 1', dtypes)", "piece": "with raises(ValueError):"}
{"function_name": "delete_all", "function_define": "    if self.authenticated:\n    pipeline.execute()\n    flask.session.clear()", "piece": "pipeline.execute()"}
{"function_name": "spiralsol", "function_define": "    m = len(matrix)\n    if m == 0:\n    n = len(matrix[0])", "piece": "if m == 0:"}
{"function_name": "guess_can_read", "function_define": "    Parameters\n    file_path: str\n    Path to netCDF4 file", "piece": "file_path: str"}
{"function_name": "write_attrs", "function_define": "    if self._root is None:\n    self._check_node(group_path)\n    self._root.attrs.update(attrs)", "piece": "self._check_node(group_path)"}
{"function_name": "_select_node", "function_define": "    StoreNotOpenError\n    If the store is closed\n    if self._root is None:", "piece": "If the store is closed"}
{"function_name": "_check_node", "function_define": "    StoreNotOpenError\n    If the store is closed\n    KeyError", "piece": "If the store is closed"}
{"function_name": "ll_merge", "function_define": "    curr_B = list_B.head\n    curr_A = list_A.head\n    temp_C = None", "piece": "curr_A = list_A.head"}
{"function_name": "__auth_to_etree", "function_define": "    if not self.mpi:\n    if self.mpi:\n    if self.tss_info:", "piece": "if self.mpi:"}
{"function_name": "_compute_reward", "function_define": "    info = {}\n    info['right_hand'] = hand_pos[0]\n    info['left_hand'] = hand_pos[1]", "piece": "info['right_hand'] = hand_pos[0]"}
{"function_name": "send_niko_list", "function_define": "    if category in 'ranking':\n    elif category in 'news':\n    send_list = []", "piece": "elif category in 'news':"}
{"function_name": "test_boundaries", "function_define": "    property.\n    shape.boundaries = (360, 830)\n    self.assertEqual(shape.end, 830)", "piece": "shape.boundaries = (360, 830)"}
{"function_name": "test_values", "function_define": "    property.\n    msds = self._msds.copy()\n    msds.values = msds.values + 10", "piece": "msds = self._msds.copy()"}
{"function_name": "GetProcessByPID", "function_define": "    p = psutil.Process(pid)\n    p_create_time = p.create_time()\n    except Exception:", "piece": "p_create_time = p.create_time()"}
{"function_name": "processExists", "function_define": "    if node_id is None:\n    node_id = self.node_id\n    if pid is None:", "piece": "node_id = self.node_id"}
{"function_name": "BlockOnProcess", "function_define": "    if node_id is None:\n    node_id = self.node_id\n    if pid is None:", "piece": "node_id = self.node_id"}
{"function_name": "__wait_procs", "function_define": "    before = time.time()\n    after = before\n    alive = procs", "piece": "after = before"}
{"function_name": "__signal_procs", "function_define": "    for c in procs:\n    cmd = self.runAsRoot(cmd)\n    ret = self.CallAtHost(cmd)", "piece": "cmd = self.runAsRoot(cmd)"}
{"function_name": "GetProcessByName", "function_define": "    processlist = []\n    p = psutil.Process(pid)\n    if p.name == name:", "piece": "p = psutil.Process(pid)"}
{"function_name": "fix_rotation", "function_define": "    img_copy = img.copy()\n    rows, cols = img.shape\n    img = cv.medianBlur(img, 3)", "piece": "rows, cols = img.shape"}
{"function_name": "extract_ply", "function_define": "    with open(src, 'rb') as infile:\n    clean_verts = []\n    for vert in vertices:", "piece": "clean_verts = []"}
{"function_name": "extract_npz", "function_define": "    data = np.load(smal_npz)\n    keys = list(data.keys())\n    out = {}", "piece": "keys = list(data.keys())"}
{"function_name": "get_smal_data", "function_define": "    data = extract_npz(smal_npz)\n    pose_data = data['pose']\n    n_frames = len(pose_data)", "piece": "pose_data = data['pose']"}
{"function_name": "identify", "function_define": "    self.end = end\n    self.side = side\n    self.name = f'{end} {side}'", "piece": "self.side = side"}
{"function_name": "set_frame", "function_define": "    if f < self.frame_start:\n    elif f == self.frame_start:\n    ax.add_patch(self)", "piece": "elif f == self.frame_start:"}
{"function_name": "plot_pressure", "function_define": "    if n_frames is None:\n    data = self.pressure_data\n    n_frames = self.n_frames", "piece": "data = self.pressure_data"}
{"function_name": "GraphHistograms", "function_define": "    histFiles = MakeSeq(histFiles)\n    if not outFile:\n    assert len(histFiles) == 1", "piece": "if not outFile:"}
{"function_name": "GraphCumulPlots", "function_define": "    histFiles = MakeSeq(histFiles)\n    if not outFile:\n    assert len(histFiles) == 1", "piece": "if not outFile:"}
{"function_name": "findTableFiles", "function_define": "    tables = MakeSeq(tables)\n    scen2sfxs = dict(scen2sfxs)\n    depends_on = []", "piece": "scen2sfxs = dict(scen2sfxs)"}
{"function_name": "gatherCausalStat", "function_define": "    if getio:\n    for r in snpStatFile:\n    if r[posCol] == CAUSAL_POS:", "piece": "for r in snpStatFile:"}
{"function_name": "getBlocks", "function_define": "    for r in condsFile:\n    if r[condName]:\n    yield replicaRows", "piece": "if r[condName]:"}
{"function_name": "makeResult", "function_define": "    for scen in ourScens:\n    lastReplica = None\n    lastReplicaResult = None", "piece": "lastReplica = None"}
{"function_name": "_prepare_fc", "function_define": "    if self.dropout == 0:\n    self.new_fc = None\n    std = 0.001", "piece": "self.new_fc = None"}
{"function_name": "get_augmentation", "function_define": "    if self.modality == 'RGB':\n    if flip:\n    print('#' * 20, 'NO FLIP!!!')", "piece": "if flip:"}
{"function_name": "create_server", "function_define": "    Creates the GRPC server.\n    self.check_port(self.port)\n    self.server.start()", "piece": "self.check_port(self.port)"}
{"function_name": "check_port", "function_define": "    s.bind(('localhost', port))\n    except socket.error:\n    finally:", "piece": "except socket.error:"}
{"function_name": "exchange", "function_define": "    message = UnityMessageProto()\n    message.header.status = 200\n    if output.header.status != 200:", "piece": "message.header.status = 200"}
{"function_name": "getSegType", "function_define": "    m_type = np.uint64\n    if mid < 2 ** 8:\n    m_type = np.uint8", "piece": "if mid < 2 ** 8:"}
{"function_name": "seg2Count", "function_define": "    sm = seg.max()\n    if sm == 0:\n    if sm > 1:", "piece": "if sm == 0:"}
{"function_name": "removeSeg", "function_define": "    sm = seg.max()\n    did = did[did <= sm]\n    if invert:", "piece": "did = did[did <= sm]"}
{"function_name": "remove_small", "function_define": "    if thres > 0:\n    if bid is None:\n    bid = uid[uc < thres]", "piece": "if bid is None:"}
{"function_name": "label_chunk", "function_define": "    seg = [None] * numC\n    for zi in range(numC):\n    sys.stdout.flush()", "piece": "for zi in range(numC):"}
{"function_name": "getLevelDiff", "function_define": "    h = {0: 0, 1: 0}\n    level = 0\n    populateDiff(root, level, h)", "piece": "level = 0"}
{"function_name": "populateDiff", "function_define": "    if root == None:\n    l = level % 2\n    h[l] += root.data", "piece": "l = level % 2"}
{"function_name": "update_port", "function_define": "    sec_group.ports.discard(port)\n    sec_group.ports.add(port)\n    port.update(port_dict)", "piece": "sec_group.ports.add(port)"}
{"function_name": "_add_flow", "function_define": "    dl_type = kwargs.get('dl_type')\n    create_reg_numbers(kwargs)\n    if isinstance(dl_type, int):", "piece": "create_reg_numbers(kwargs)"}
{"function_name": "create_post", "function_define": "    title = request.form['title']\n    content = request.form['editor']\n    author = session.get('username')", "piece": "content = request.form['editor']"}
{"function_name": "draw_segment", "function_define": "    r1, g1, b1, a1 = self.color1\n    r2, g2, b2, a2 = self.color2\n    r3, g3, b3, a3 = self.color3", "piece": "r2, g2, b2, a2 = self.color2"}
{"function_name": "draw_happy_face", "function_define": "    self.draw_face(ctx)\n    y0 = 20 - 4 * valence\n    y1 = 26 + 4 * valence", "piece": "y0 = 20 - 4 * valence"}
{"function_name": "draw_munchy_face", "function_define": "    self.draw_face(ctx)\n    ctx.arc(16, 16, 8, PI, 2 * PI)\n    ctx.close_path()", "piece": "ctx.arc(16, 16, 8, PI, 2 * PI)"}
{"function_name": "draw_face", "function_define": "    self.draw_segment(ctx)\n    ctx.arc(8, 8, 4, 0, PI * 2)\n    ctx.arc(24, 8, 4, 0, PI * 2)", "piece": "ctx.arc(8, 8, 4, 0, PI * 2)"}
{"function_name": "test_lock", "function_define": "    dut.add(intr_1)\n    dut.add(intr_2)\n    yield intr_1.cyc.eq(1)", "piece": "dut.add(intr_2)"}
{"function_name": "test_stall", "function_define": "    dut.add(intr_1)\n    dut.add(intr_2)\n    yield intr_1.cyc.eq(1)", "piece": "dut.add(intr_2)"}
{"function_name": "test_roundrobin", "function_define": "    dut.add(intr_1)\n    dut.add(intr_2)\n    dut.add(intr_3)", "piece": "dut.add(intr_2)"}
{"function_name": "sim_test", "function_define": "    yield intr_1.cyc.eq(1)\n    yield intr_2.cyc.eq(0)\n    yield intr_3.cyc.eq(1)", "piece": "yield intr_2.cyc.eq(0)"}
{"function_name": "test_altitude_ok", "function_define": "    fields = src_fields.copy()\n    fields['altitude'] = 9000\n    School.parse_obj(fields)", "piece": "fields['altitude'] = 9000"}
{"function_name": "get_robot", "function_define": "    robot = None\n    for r in robots.values():\n    if r.name == name:", "piece": "for r in robots.values():"}
{"function_name": "open_serial", "function_define": "    a = b'b'\n    while a != b'a':\n    a = self.serial.read()", "piece": "while a != b'a':"}
{"function_name": "reconnect", "function_define": "    self.serial.write(b'3')\n    msg = b'0'\n    while msg != b'1':", "piece": "msg = b'0'"}
{"function_name": "fly_mode", "function_define": "    print('Selecting Fly Mode...')\n    self.serial.write(b'F')\n    msg = b'0'", "piece": "self.serial.write(b'F')"}
{"function_name": "run_mode", "function_define": "    print('Selecting Run Mode...')\n    self.serial.write(b'R')\n    msg = b'0'", "piece": "self.serial.write(b'R')"}
{"function_name": "set_throttle", "function_define": "    if value > 255:\n    self.throttle = 255\n    elif value < 0:", "piece": "self.throttle = 255"}
{"function_name": "set_pitch", "function_define": "    if value > 255:\n    self.pitch = 255\n    elif value < 0:", "piece": "self.pitch = 255"}
{"function_name": "set_roll", "function_define": "    if value > 255:\n    self.roll = 255\n    elif value < 0:", "piece": "self.roll = 255"}
{"function_name": "update_payload", "function_define": "    self.serial.write(b'4')\n    payload = bytearray(9)\n    payload[0] = b'8'", "piece": "payload = bytearray(9)"}
{"function_name": "mock_argv", "function_define": "    Build argv for test.\n    argv = [command]\n    if kwargs.get('verbose', None):", "piece": "argv = [command]"}
{"function_name": "test_verbose", "function_define": "    Test different verbosity levels.\n    client = rc.RefstackClient(args)\n    client._prep_test()", "piece": "client = rc.RefstackClient(args)"}
{"function_name": "test_user_query", "function_define": "    mock_input.return_value = 'n'\n    cli_args = self.mock_argv()\n    cli_args.remove('-y')", "piece": "cli_args = self.mock_argv()"}
{"function_name": "test_run_tempest", "function_define": "    default configuration.\n    client = rc.RefstackClient(args)\n    self.mock_data()", "piece": "client = rc.RefstackClient(args)"}
{"function_name": "test_failed_run", "function_define": "    client = rc.RefstackClient(args)\n    self.mock_data()\n    client.test()", "piece": "self.mock_data()"}
{"function_name": "test_list", "function_define": "    client = rc.RefstackClient(args)\n    mock_results = MagicMock()\n    client.list()", "piece": "mock_results = MagicMock()"}
{"function_name": "render_2D", "function_define": "    Parameters\n    img_scale (list[float])\n    objects (list[sl.ObjectData])", "piece": "img_scale (list[float])"}
{"function_name": "test_export_kml", "function_define": "    routes = []\n    exp.export_kml()\n    os.remove('test.kml')", "piece": "exp.export_kml()"}
{"function_name": "_create_user", "function_define": "    full_name, and password.\n    if not email:\n    if not username:", "piece": "if not email:"}
{"function_name": "add_case", "function_define": "    request_data['status'] = True\n    TestCase.insert(filtered_data)\n    except BaseException as e:", "piece": "TestCase.insert(filtered_data)"}
{"function_name": "copy_case", "function_define": "    if not res:\n    new_case_data = res\n    new_case_data.pop('_id')", "piece": "new_case_data = res"}
{"function_name": "update_case", "function_define": "    except BaseException as e:\n    if update_response['n'] == 0:\n    except BaseException as e:", "piece": "if update_response['n'] == 0:"}
{"function_name": "_fetch_history", "function_define": "    return_batch = {}\n    while True:\n    return_batch = {}", "piece": "while True:"}
{"function_name": "create_variant", "function_define": "    string `value` and `scope`.\n    the datatype xsd:string.\n    if value is None:", "piece": "the datatype xsd:string."}
{"function_name": "drop_non_rep", "function_define": "    out = []\n    for sub_ls in ls:\n    if len(sub_ls) > 1:", "piece": "for sub_ls in ls:"}
{"function_name": "get_probe_2", "function_define": "    given time frame.\n    default = 'filtered_links_dated'\n    inputs = (table, source, target)", "piece": "default = 'filtered_links_dated'"}
{"function_name": "set_urls", "function_define": "    self.find_links_strict(cursor)\n    except AttributeError:\n    self.find_links(cursor)", "piece": "except AttributeError:"}
{"function_name": "seconds_to_human", "function_define": "    seconds (int): Seconds.\n    Returns:\n    if seconds == 0:", "piece": "Returns:"}
{"function_name": "CurSelect", "function_define": "    if curr_case == 0:\n    app = App(handler)\n    app.on_execute()", "piece": "app = App(handler)"}
{"function_name": "load_generations", "function_define": "    global curr_case\n    curr_case = 0\n    listNodes.delete(0, END)", "piece": "curr_case = 0"}
{"function_name": "catch_errors", "function_define": "    if func is None:\n    res = func(*args, **kwargs)\n    traceback.print_exc()", "piece": "res = func(*args, **kwargs)"}
{"function_name": "debugLocal", "function_define": "    if func is None:\n    if event == 'return':\n    sig = signature(func)", "piece": "if event == 'return':"}
{"function_name": "enter_hook", "function_define": "    self.setCursor(Qt.ArrowCursor)\n    if widgets is None:\n    for wid in widgets:", "piece": "if widgets is None:"}
{"function_name": "addColor", "function_define": "    new_pixmap = QPixmap(pix)\n    painter = QPainter()\n    painter.begin(new_pixmap)", "piece": "painter = QPainter()"}
{"function_name": "validImage", "function_define": "    valid = True\n    Image.open(file_path).verify()\n    valid = False", "piece": "Image.open(file_path).verify()"}
{"function_name": "loadImage", "function_define": "    if fileName:\n    print(fileName)\n    self.file = fileName", "piece": "print(fileName)"}
{"function_name": "classifyFunction", "function_define": "    json_file.close()\n    print('Loaded model from disk')\n    path2 = self.file", "piece": "print('Loaded model from disk')"}
{"function_name": "trainingFunction", "function_define": "    model = Sequential()\n    model.add(BatchNormalization())\n    model.add(BatchNormalization())", "piece": "model.add(BatchNormalization())"}
{"function_name": "get_position", "function_define": "    self.get_data_lock.acquire()\n    progress = self.position.keys()\n    for position in data.positions:", "piece": "progress = self.position.keys()"}
{"function_name": "get_pose", "function_define": "    name = data.name\n    pose = Pose()\n    found = False", "piece": "pose = Pose()"}
{"function_name": "setFilename", "function_define": "    self.file_name = file_name\n    stream = open(file_name, mode)\n    for old_message in self.buffer:", "piece": "stream = open(file_name, mode)"}
{"function_name": "sha3_512", "function_define": "    plain = plain.encode()\n    hash = hashlib.sha3_512(plain)\n    hash = str(hash.hexdigest())", "piece": "hash = hashlib.sha3_512(plain)"}
{"function_name": "dict_to_base64", "function_define": "    obj = obj.encode('utf-8')\n    obj = base64.b64encode(obj)\n    obj = obj.decode('utf-8')", "piece": "obj = base64.b64encode(obj)"}
{"function_name": "base64_to_dict", "function_define": "    text = base64.b64decode(text)\n    text = text.decode('utf-8')\n    obj = json.loads(text)", "piece": "text = text.decode('utf-8')"}
{"function_name": "max_index", "function_define": "    data_index = pickle.load(f)\n    max_val = -1000000000.0\n    for i in range(len(data_index)):", "piece": "max_val = -1000000000.0"}
{"function_name": "count_data", "function_define": "    image_cnt = 0\n    imgs = imgs.cuda()\n    preds = m.predict_quantize(imgs)", "piece": "imgs = imgs.cuda()"}
{"function_name": "post_submit", "function_define": "    data = request.json\n    channel = data['channel_name']\n    if user is None:", "piece": "channel = data['channel_name']"}
{"function_name": "get_tier_1", "function_define": "    clips = []\n    if clip.is_tier_1:\n    clips.append(clip.as_dict)", "piece": "if clip.is_tier_1:"}
{"function_name": "get_tier_2", "function_define": "    clips = []\n    if clip.is_tier_2:\n    clips.append(clip.as_dict)", "piece": "if clip.is_tier_2:"}
{"function_name": "plus_one", "function_define": "    n = len(digits)\n    for i in range(n - 1, -1, -1):\n    if digits[idx] == 9:", "piece": "for i in range(n - 1, -1, -1):"}
{"function_name": "create_file_type", "function_define": "    if not filetype:\n    filetype = get_filetype(path)\n    except KeyError:", "piece": "filetype = get_filetype(path)"}
{"function_name": "get_filetype", "function_define": "    extension = filepath.suffix[1:]\n    extension = ''\n    if len(tokenized_path) > 1:", "piece": "extension = ''"}
{"function_name": "from_csv", "function_define": "    Imports PDEntries from a csv.\n    Returns:\n    entries = list()", "piece": "Returns:"}
{"function_name": "zoom_bbox", "function_define": "    bbox\u3092scale\u500d\u3059\u308b\n    x, y, w, h = bbox\n    x = x * scale", "piece": "x, y, w, h = bbox"}
{"function_name": "zoom_img", "function_define": "    img\u3092scale\u500d\u3057\u305f\u753b\u50cf\u3092\u8fd4\u3059\u3002\n    oh, ow = img.shape[:2]\n    new_h = int(oh * scale)", "piece": "oh, ow = img.shape[:2]"}
{"function_name": "load_shape", "function_define": "    img = self.read_image(fpath)\n    except AttributeError as e:\n    continue", "piece": "except AttributeError as e:"}
{"function_name": "std_normalize", "function_define": "    l_mean = img.mean()\n    l_var = img.var()\n    img = img + 1.0", "piece": "l_var = img.var()"}
{"function_name": "global_std_norm", "function_define": "    mean_sum, std_sum = (0, 0)\n    for i, img in enumerate(images):\n    mean_sum = img.mean()", "piece": "for i, img in enumerate(images):"}
{"function_name": "norm_path", "function_define": "    retvals = []\n    if isinstance(pathes, str):\n    pathes = [pathes]", "piece": "if isinstance(pathes, str):"}
{"function_name": "get_nx_library", "function_define": "    GPU_MODE\u306b\u5fdc\u3058\u305fnx\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u53d6\u5f97\u3057\u8fd4\u3059\n    if self.gpu_mode:\n    nx = cuda.cupy", "piece": "if self.gpu_mode:"}
{"function_name": "cut_rect", "function_define": "    ox = x + width\n    oy = y + height\n    if x + width > img_w:", "piece": "oy = y + height"}
{"function_name": "centroid", "function_define": "    x, y, w, h = bbox\n    cx = x + w / 2\n    cy = y + h / 2", "piece": "cx = x + w / 2"}
{"function_name": "get_centroid", "function_define": "    if len(bboxes) == 0:\n    sum_x, sum_y = (0, 0)\n    for bbox in bboxes:", "piece": "sum_x, sum_y = (0, 0)"}
{"function_name": "ave_bboxes", "function_define": "    bboxes\u306e\u5e73\u5747\u306e\u5e45\u3001\u9ad8\u3055\u3092\u7b97\u51fa\n    n_bboxes = len(bboxes)\n    sum_w, sum_h = (0, 0)", "piece": "n_bboxes = len(bboxes)"}
{"function_name": "padding_rect", "function_define": "    height x width\u30b5\u30a4\u30ba\u306e\u753b\u50cf\u3092\u8fd4\u3059\u3002\n    dx = max(width - img_w, 0)\n    dy = max(height - img_h, 0)", "piece": "dx = max(width - img_w, 0)"}
{"function_name": "_resize_cv", "function_define": "    inter\u3067\u306f\u3001\u88dc\u5b8c\u6280\u8853\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n    cv2.INTER_NEAREST   : \u6700\u8fd1\u508d\u88dc\u9593\n    if aspect:", "piece": "cv2.INTER_NEAREST   : \u6700\u8fd1\u508d\u88dc\u9593"}
{"function_name": "_resize_pil", "function_define": "    inter\u3067\u306f\u3001\u88dc\u5b8c\u6280\u8853\u3092\u6307\u5b9a\u3067\u304d\u308b\u3002\n    PIL.Image.ANTIALIAS\n    PIL.Image.NEAREST", "piece": "PIL.Image.ANTIALIAS"}
{"function_name": "_resize_image_cv", "function_define": "    h, w = target_shape\n    ih, iw = img.shape[:2]\n    if aspect == False:", "piece": "ih, iw = img.shape[:2]"}
{"function_name": "resize_images", "function_define": "    h, w = target_shape\n    for crop_i, img in images:\n    except cv2.error as e:", "piece": "for crop_i, img in images:"}
{"function_name": "resize_with_crop", "function_define": "    if not self.is_grayscale(img):\n    img = self.color2gray(img)\n    orig_shape = img.shape", "piece": "img = self.color2gray(img)"}
{"function_name": "_blur_image_cv", "function_define": "    ave_square = (25, 25)\n    sigma_x = 1\n    if use_gaussian:", "piece": "sigma_x = 1"}
{"function_name": "get_files", "function_define": "    ext=None\u306e\u5834\u5408\u306f\u5168\u30d5\u30a1\u30a4\u30eb\u3092\u8fd4\u3059\u3002\n    if isinstance(ext, str):\n    ext = [ext.strip()]", "piece": "if isinstance(ext, str):"}
{"function_name": "get_dirs", "function_define": "    path\u914d\u4e0b\u306e\uff08path\u3092\u542b\u3080\uff09\u5168\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8fd4\u3059\u3002\n    dir_list = []\n    for d in dirs:", "piece": "dir_list = []"}
{"function_name": "search_file", "function_define": "    dirname\u914d\u4e0b\u306b\u30d5\u30a1\u30a4\u30ebfn\u304c\u3042\u308c\u3070\u3001\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u8fd4\u3059\u3002\n    for d in self.get_dirs(dirname):\n    fpath = os.path.join(d, fn)", "piece": "for d in self.get_dirs(dirname):"}
{"function_name": "display_box", "function_define": "    x, y, w, h = box\n    ox, oy = (x + w, y + h)\n    if debug:", "piece": "ox, oy = (x + w, y + h)"}
{"function_name": "transparent", "function_define": "    color\u3067\u6307\u5b9a\u3057\u305f\u5024\u4ee5\u4e0a\u306b\u660e\u308b\u3044\u30d4\u30af\u30bb\u30eb\u3092\u900f\u660e\u306b\u3059\u308b\u3002\n    for x in range(0, w):\n    for y in range(0, h):", "piece": "for x in range(0, w):"}
{"function_name": "split_image", "function_define": "    imgs = []\n    w = self.width(img)\n    h = self.height(img)", "piece": "w = self.width(img)"}
{"function_name": "random_overlay", "function_define": "    False\u306e\u5834\u5408\u3001\u5168\u4f53\u304c\u30aa\u30fc\u30d0\u30fc\u30ec\u30a4\u3055\u308c\u308b\u4f4d\u7f6e\u304c\u9078\u629e\u3055\u308c\u308b\u3002\n    bg_h, bg_w = bg.shape[:2]\n    it_h, it_w = item.shape[:2]", "piece": "bg_h, bg_w = bg.shape[:2]"}
{"function_name": "points2box", "function_define": "    p1, p2\u306e2\u70b9\u3092\u8986\u3046\u77e9\u5f62\u9818\u57df\u3092box\u5f62\u5f0f\u3067\u8fd4\u3059\u3002\n    x1, y1 = p1\n    x2, y2 = p2", "piece": "x1, y1 = p1"}
{"function_name": "union_box", "function_define": "    x = min(a_x, b_x)\n    y = min(a_y, b_y)\n    ox = max(a_ox, b_ox)", "piece": "y = min(a_y, b_y)"}
{"function_name": "bboxes_by_cls", "function_define": "    bboxes_by_cls = {}\n    if not cla in bboxes_by_cls:\n    bboxes_by_cls[cla] = [bbox]", "piece": "if not cla in bboxes_by_cls:"}
{"function_name": "predicts2answers", "function_define": "    for cla in classes:\n    if cla in ans_by_cls:\n    cla_a_bboxes = ans_by_cls[cla]", "piece": "if cla in ans_by_cls:"}
{"function_name": "show_accuracy", "function_define": "    if cla in accuracy:\n    lblstr = VOCDataset.labels[cla]\n    acc = accuracy[cla]", "piece": "lblstr = VOCDataset.labels[cla]"}
{"function_name": "precision", "function_define": "    precision: \u4e88\u6e2c\u306e\u3046\u3061\u3001\u4f55\u5272\u304c\u6b63\u89e3\u3060\u3063\u305f\u304b\uff1f\u306e\u5272\u5408\u3044\n    if n_preds > 0:\n    precision = 0.0", "piece": "if n_preds > 0:"}
{"function_name": "_accuracy_report", "function_define": "    lbl_otherwise = n_classes + 1\n    judge, pred = (False, None)\n    pred = lbl_p", "piece": "judge, pred = (False, None)"}
{"function_name": "max_iou_pos", "function_define": "    maxiou, max_i = (0.0, -1)\n    iou = self.box_iou(box, box_i)\n    if iou > maxiou:", "piece": "iou = self.box_iou(box, box_i)"}
{"function_name": "random_hsv_trans", "function_define": "    hsv_image[:, :, 1] *= sat_scale\n    hsv_image[:, :, 2] *= val_scale\n    hsv_image[hsv_image < 0] = 0", "piece": "hsv_image[:, :, 2] *= val_scale"}
{"function_name": "generate_samples", "function_define": "    scales = [0.3, 0.5, 0.7]\n    angles = [0, 10, 180, 350]\n    bboxes_for_a_sample = []", "piece": "angles = [0, 10, 180, 350]"}
{"function_name": "shift_bbox", "function_define": "    x, y, w, h = bbox\n    sx, sy = point\n    if reverse:", "piece": "sx, sy = point"}
{"function_name": "boxes2bboxes", "function_define": "    box\u306e\u30ea\u30b9\u30c8boxes\u304b\u3089bbox\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u8fd4\u3059\u3002\n    bboxes = []\n    for box in boxes:", "piece": "bboxes = []"}
{"function_name": "bboxes2boxes", "function_define": "    bbox\u306e\u30ea\u30b9\u30c8bboxes\u304b\u3089box\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db\u3057\u3066\u8fd4\u3059\u3002\n    boxes = []\n    for bbox in bboxes:", "piece": "boxes = []"}
{"function_name": "generate_sample", "function_define": "    bboxes_for_a_sample = []\n    for box in not_rois:\n    if crop_ratio is not None:", "piece": "for box in not_rois:"}
{"function_name": "box_distance", "function_define": "    box1, box2\u306e\u8ddd\u96e2\u3092\u7b97\u51fa\n    p1 = self.centroid(bbox1)\n    p2 = self.centroid(bbox2)", "piece": "p1 = self.centroid(bbox1)"}
{"function_name": "min_dist_x", "function_define": "    direction = -1\n    direction = 1\n    i = sides.argmin()", "piece": "direction = 1"}
{"function_name": "min_dist_y", "function_define": "    direction = -1\n    direction = 1\n    i = sides.argmin()", "piece": "direction = 1"}
{"function_name": "limb_pair_id", "function_define": "    id_f, id_t = (ids[f], ids[t])\n    if id_f > id_t:\n    tmp = id_f", "piece": "if id_f > id_t:"}
{"function_name": "get_frame_bbox", "function_define": "    origin_shape_w = 3264\n    origin_shape_h = 4352\n    origin_flame_x = 236", "piece": "origin_shape_h = 4352"}
{"function_name": "copy_with_exif", "function_define": "    Exif\u60c5\u5831\u3068\u3068\u3082\u306b\u753b\u50cf\u30b3\u30d4\u30fc\u3092\u5b9f\u65bd\u3059\u308b\n    im = Image.open(from_img_fpath)\n    exif = im._getexif()", "piece": "im = Image.open(from_img_fpath)"}
{"function_name": "copy_exif", "function_define": "    Exif\u7b49\u30e1\u30bf\u30c7\u30fc\u30bf\u306e\u30b3\u30d4\u30fc\n    src.read()\n    dst.read()", "piece": "src.read()"}
{"function_name": "copy_exif_by_pil", "function_define": "    Exif\u60c5\u5831\u3092\u5bfe\u8c61\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306b\u8ffd\u52a0\u3059\u308b\u3002\n    if not exif_bytes:\n    im = Image.open(to_img_fpath)", "piece": "if not exif_bytes:"}
{"function_name": "dump_exif", "function_define": "    im = Image.open(img_fpath)\n    exif = im._getexif()\n    except AttributeError:", "piece": "exif = im._getexif()"}
{"function_name": "rotate_bbox", "function_define": "    bbox\u3092\u6307\u5b9a\u306e\u89d2\u5ea6\u3067\u56de\u8ee2\u3055\u305b\u308b\u3002\n    if rotate == 90:\n    elif rotate == 180:", "piece": "if rotate == 90:"}
{"function_name": "get_contours", "function_define": "    if resize_w and resize_h:\n    if save_src:\n    self.segment_src = src", "piece": "if save_src:"}
{"function_name": "contour_center", "function_define": "    M = cv2.moments(contour)\n    cx = int(M['m10'] / M['m00'])\n    cy = int(M['m01'] / M['m00'])", "piece": "cx = int(M['m10'] / M['m00'])"}
{"function_name": "determine_color", "function_define": "    red is 255, 0, 0\n    yellow is 255, 255, 0\n    green is 0, 255, 0", "piece": "yellow is 255, 255, 0"}
{"function_name": "manage_helper", "function_define": "    with api.step.nest('helper'):\n    api.step.close_non_nest_step()\n    except api.step.StepFailure:", "piece": "api.step.close_non_nest_step()"}
{"function_name": "run_helper", "function_define": "    manager.\n    helper_manager = None\n    helper_manager = None", "piece": "helper_manager = None"}
{"function_name": "storemessage", "function_define": "    if not hasattr(tbot, 'seen'):\n    tbot.seen = dict()\n    tbot.messages = dict()", "piece": "tbot.seen = dict()"}
{"function_name": "chunk_iter", "function_define": "    For example you can do\n    print('{} {}'.format(a, b))\n    iterable - Some iterable", "piece": "print('{} {}'.format(a, b))"}
{"function_name": "conductance_calc", "function_define": "    while preloaded_dict:\n    if main_prompt == '1':\n    elif main_prompt == '2':", "piece": "if main_prompt == '1':"}
{"function_name": "knn_plot", "function_define": "    plt.figure(figsize=(10, 10))\n    color = ['red', 'blue']\n    for label in np.unique(y):", "piece": "color = ['red', 'blue']"}
{"function_name": "dispatch_to_hpc", "function_define": "    data = request.get_json()\n    if result:\n    except BaseException as ex:", "piece": "if result:"}
{"function_name": "policy_update", "function_define": "    is_policy_changed = False\n    while not it.finished:\n    s1, s2 = it.multi_index", "piece": "while not it.finished:"}
{"function_name": "policy_iteration", "function_define": "    self.policy_evaluation()\n    while self.policy_update():\n    self.policy_evaluation()", "piece": "while self.policy_update():"}
{"function_name": "setup_log", "function_define": "    run_day = '%02d' % run_time.day\n    if not os.path.isdir(log_dir):\n    os.mkdir(log_dir)", "piece": "if not os.path.isdir(log_dir):"}
{"function_name": "end_training", "function_define": "    coord.request_stop()\n    coord.join(threads)\n    sess.close()", "piece": "coord.join(threads)"}
{"function_name": "homo_train", "function_define": "    tf.reset_default_graph()\n    batch_size = 64\n    max_prot_len = 243", "piece": "batch_size = 64"}
{"function_name": "bijective_dict", "function_define": "    ret = {}\n    for key, val in src.items():\n    ret[key] = val", "piece": "for key, val in src.items():"}
{"function_name": "test_serializer", "function_define": "    user = mixer.blend('auth.User')\n    data = {}\n    data = {'email': user.email}", "piece": "data = {}"}
{"function_name": "on_initialize", "function_define": "    sizer1.Add(sizer2, 0, wx.EXPAND)\n    sizer1.Add((5, 5), 0)\n    sizer1.Fit(self)", "piece": "sizer1.Add((5, 5), 0)"}
{"function_name": "addTextToItems", "function_define": "    target = self.components.fldURL\n    text = target.text\n    items = target.items", "piece": "text = target.text"}
{"function_name": "on_goURL_command", "function_define": "    target = self.components.fldURL\n    text = target.text.strip()\n    text = 'http://' + text", "piece": "text = target.text.strip()"}
{"function_name": "miss_ssl", "function_define": "    if str(dns_type) == '1':\n    except JumpOutFuckingClick2:\n    click.echo('<_@,@_<2')", "piece": "except JumpOutFuckingClick2:"}
{"function_name": "txt2dict", "function_define": "    doc = {}\n    depth = 0\n    depth_pointer = {}", "piece": "depth = 0"}
{"function_name": "find_type", "function_define": "    if text[0] == '#':\n    header = text.split(' ')[0]\n    if text[0] == ('-' or '*'):", "piece": "header = text.split(' ')[0]"}
{"function_name": "dfs_topsort", "function_define": "    found_cycle = [False]\n    for u in graph:\n    if color[u] == 'white':", "piece": "for u in graph:"}
{"function_name": "dfs_visit", "function_define": "    if found_cycle[0]:\n    color[u] = 'gray'\n    for v in graph[u]:", "piece": "color[u] = 'gray'"}
{"function_name": "has_hamiltonian", "function_define": "    print(graph_sorted)\n    cur_node = graph_sorted[i]\n    next_node = graph_sorted[i + 1]", "piece": "cur_node = graph_sorted[i]"}
{"function_name": "create_X", "function_define": "    if len(x.shape) > 1:\n    x = np.ravel(x)\n    y = np.ravel(y)", "piece": "x = np.ravel(x)"}
{"function_name": "get_ave_data", "function_define": "    countries = []\n    if isinstance(country_s, list):\n    for country in country_s:", "piece": "if isinstance(country_s, list):"}
{"function_name": "get_spots", "function_define": "    spots = []\n    res = requests.get(request_url)\n    result = json.loads(res.text)", "piece": "res = requests.get(request_url)"}
{"function_name": "carousel_view", "function_define": "    if len(spots) <= 0:\n    elif len(spots) > 10:\n    spots = random.sample(spots, 10)", "piece": "elif len(spots) > 10:"}
{"function_name": "videoAnnotate", "function_define": "    inFile = cv2.VideoCapture(vin)\n    if inFile.isOpened() == False:\n    imgCnt = 0", "piece": "if inFile.isOpened() == False:"}
{"function_name": "get_station", "function_define": "    Returns:\n    action = 'Station'\n    headers = {}", "piece": "action = 'Station'"}
{"function_name": "get_station_id", "function_define": "    Arguments:\n    Returns:\n    all_stations = get_station()", "piece": "Returns:"}
{"function_name": "get_fare", "function_define": "    Arguments:\n    departure {str} -- \u51fa\u767c\u8eca\u7ad9id\n    destination {str} -- \u5230\u9054\u8eca\u7ad9id", "piece": "departure {str} -- \u51fa\u767c\u8eca\u7ad9id"}
{"function_name": "get_timetable", "function_define": "    Arguments:\n    no {str} -- \u6307\u5b9a\u8eca\u6b21\n    action = 'GeneralTimetable'", "piece": "no {str} -- \u6307\u5b9a\u8eca\u6b21"}
{"function_name": "get_seat", "function_define": "    if not id:\n    headers = {}\n    logger.info(r)", "piece": "headers = {}"}
{"function_name": "libraries", "function_define": "    Parameters\n    value_list = list(value)\n    value_set = set(value_list)", "piece": "value_list = list(value)"}
{"function_name": "top_instance", "function_define": "    Parameters\n    if self.top_instance:\n    top = Instance()", "piece": "if self.top_instance:"}
{"function_name": "set_top_instance", "function_define": "    Parameters\n    top = Instance()\n    top.reference = instance", "piece": "top = Instance()"}
{"function_name": "add_library", "function_define": "    Parameters\n    library - Library\n    position - int, (default None)", "piece": "library - Library"}
{"function_name": "remove_library", "function_define": "    Parameters\n    library - Library\n    The library to be removed.", "piece": "library - Library"}
{"function_name": "_clone_rip", "function_define": "    for lib in self._libraries:\n    for defin in lib._definitions:\n    new_ref = set()", "piece": "for defin in lib._definitions:"}
{"function_name": "write_text", "function_define": "    for helping with this!\n    space = font.size(' ')[0]\n    self.last_position = position", "piece": "space = font.size(' ')[0]"}
{"function_name": "terminate_intro", "function_define": "    self.break_from_draw = True\n    master = {'players': []}\n    for score in self.scores:", "piece": "master = {'players': []}"}
{"function_name": "backprop", "function_define": "    m = len(x)\n    bias_2_grad = np.sum(err) / m\n    seq = np.swapaxes(x, 0, 1)", "piece": "bias_2_grad = np.sum(err) / m"}
{"function_name": "_getAllFirstSet", "function_define": "    self.first = {}\n    for nt in self.nt_symbols:\n    for nt in self.nt_symbols:", "piece": "for nt in self.nt_symbols:"}
{"function_name": "_getAllFollowSet", "function_define": "    self.follow = {}\n    for nt in self.nt_symbols:\n    self.follow[nt] = set()", "piece": "for nt in self.nt_symbols:"}
{"function_name": "_getAllItems", "function_define": "    self.items = []\n    self.start_items = {}\n    for nt in self.nt_symbols:", "piece": "self.start_items = {}"}
{"function_name": "_buildNFA", "function_define": "    n = eNFA(accept_any=False)\n    vis = []\n    assert len(s) == 1", "piece": "vis = []"}
{"function_name": "PrepareParser", "function_define": "    assert self.start_symbol\n    self.start_symbol = '__BEGIN__'\n    self._getAllFirstSet()", "piece": "self.start_symbol = '__BEGIN__'"}
{"function_name": "_removeEpsilon", "function_define": "    to_remove = []\n    for c in root.children:\n    if self._removeEpsilon(c):", "piece": "for c in root.children:"}
{"function_name": "count_digits", "function_define": "    count = 0\n    for _, outputs in parse(lines):\n    for output in outputs:", "piece": "for _, outputs in parse(lines):"}
{"function_name": "__iadd__", "function_define": "    Returns:\n    Wavefunction: self\n    self.ax_plus_y(1.0, wfn)", "piece": "Wavefunction: self"}
{"function_name": "empty_copy", "function_define": "    Returns:\n    out = Wavefunction()\n    out._norb = self._norb", "piece": "out = Wavefunction()"}
{"function_name": "_apply_array", "function_define": "    h[i, j]a_i^+ a_j|Psi>\n    array (numpy.array): numpy array\n    Returns:", "piece": "array (numpy.array): numpy array"}
{"function_name": "_apply_diagonal", "function_define": "    Returns:\n    out = copy.deepcopy(self)\n    out.ax_plus_y(hamil.e_0(), self)", "piece": "out = copy.deepcopy(self)"}
{"function_name": "_number_sectors", "function_define": "    not spin complete\n    Returns:\n    norb = self.norb()", "piece": "Returns:"}
{"function_name": "print_wfn", "function_define": "    if fmt == 'occ':\n    astring = int(iastring)\n    bstring = int(ibstring)", "piece": "astring = int(iastring)"}
{"function_name": "time_evolve", "function_define": "    Returns:\n    if self._conserve_number:\n    if hamil.conserve_number():", "piece": "if self._conserve_number:"}
{"function_name": "_evolve_diagonal", "function_define": "    Returns:\n    self is returned.\n    if inplace:", "piece": "self is returned."}
{"function_name": "expectationValue", "function_define": "    Returns:\n    if brawfn:\n    if isinstance(ops, str):", "piece": "if brawfn:"}
{"function_name": "_apply_few_nbody", "function_define": "    Returns:\n    out = None\n    if out is None:", "piece": "out = None"}
{"function_name": "_compute_rdm", "function_define": "    Returns:\n    assert rank > 0\n    assert rank < 5", "piece": "assert rank > 0"}
{"function_name": "_print_format", "function_define": "    if fmt == 'occ':\n    astring = int(iastring)\n    bstring = int(ibstring)", "piece": "astring = int(iastring)"}
{"function_name": "transpose_matrix", "function_define": "    Returns:\n    ndim = low.shape[0]\n    lowt = copy.deepcopy(low)", "piece": "ndim = low.shape[0]"}
{"function_name": "process_matrix", "function_define": "    Returns:\n    ndim = low.shape[0]\n    unitmat = numpy.identity(ndim)", "piece": "ndim = low.shape[0]"}
{"function_name": "_string_format", "function_define": "    iastring (int): alpha string\n    ibstring (int): alpha string\n    Returns:", "piece": "ibstring (int): alpha string"}
{"function_name": "build_occ_value", "function_define": "    corresponding to flipped bits\n    while bstr:\n    if bstr & 1:", "piece": "while bstr:"}
{"function_name": "_fetch_events", "function_define": "    while True:\n    self._fetch_event()\n    self._process_event()", "piece": "self._fetch_event()"}
{"function_name": "_process_event", "function_define": "    self._write_event_to_database()\n    except DatabaseLockedError as e:\n    except Exception as e:", "piece": "except DatabaseLockedError as e:"}
{"function_name": "_safe_log", "function_define": "    if self._shutdown_requested():\n    if rate_limit_allowed <= 0:\n    elif rate_limit_allowed == 1:", "piece": "if rate_limit_allowed <= 0:"}
{"function_name": "train_loop", "function_define": "    for epoch in range(2):\n    optimizer.zero_grad()\n    loss = gaze_loss + action_loss", "piece": "optimizer.zero_grad()"}
{"function_name": "_compute", "function_define": "    if type(word) is str:\n    word = [word]\n    for div in (0, 1):", "piece": "word = [word]"}
{"function_name": "test_gen_gtkw", "function_define": "    dump_file = 'debug.ghw'\n    extra_top = 'top'\n    assert len(signals) > 1", "piece": "extra_top = 'top'"}
{"function_name": "dict2table", "function_define": "    table_data = [header]\n    for d in list_of_dict:\n    row = []", "piece": "for d in list_of_dict:"}
{"function_name": "sizeof_fmt", "function_define": "    if suffix == 'B':\n    scale = 1024.0\n    scale = 1000.0", "piece": "scale = 1024.0"}
{"function_name": "get_op_stats", "function_define": "    outputs = (outputs,)\n    valid_flag = False\n    for _type in _dict:", "piece": "valid_flag = False"}
{"function_name": "sum_op_stats", "function_define": "    total_flops_num = 0\n    for d in flops:\n    for d in flops:", "piece": "for d in flops:"}
{"function_name": "sum_param_stats", "function_define": "    for d in params:\n    for d in params:\n    d['ratio'] = ratio", "piece": "for d in params:"}
{"function_name": "module_stats", "function_define": "    has_inputs = False\n    if inputs is not None:\n    has_inputs = True", "piece": "if inputs is not None:"}
{"function_name": "update_stats", "function_define": "    if len(self._exit_codes) >= 5:\n    self._exit_codes.pop(0)\n    if len(self._run_times) >= 5:", "piece": "self._exit_codes.pop(0)"}
{"function_name": "test_ids", "function_define": "    data_base.put(DEMO)\n    result = data_base.get_ids()\n    data_base.put(DEMO2)", "piece": "result = data_base.get_ids()"}
{"function_name": "test_get_all", "function_define": "    data_base.put(DEMO)\n    result = data_base.get_all()\n    data_base.put(DEMO2)", "piece": "result = data_base.get_all()"}
{"function_name": "zero_to_end", "function_define": "    if list_merge[i] == 0:\n    del list_merge[i]\n    list_merge.append(0)", "piece": "del list_merge[i]"}
{"function_name": "move_left", "function_define": "    global list_merge\n    for line in map:\n    list_merge = line", "piece": "for line in map:"}
{"function_name": "move_right", "function_define": "    global list_merge\n    for line in map:\n    list_merge = line[::-1]", "piece": "for line in map:"}
{"function_name": "move_down", "function_define": "    square_matrix_transpose()\n    move_right()\n    square_matrix_transpose()", "piece": "move_right()"}
{"function_name": "return_event_day", "function_define": "    r = requests.Session()\n    type = 0\n    if event_type == 'event':", "piece": "type = 0"}
{"function_name": "call_validate", "function_define": "    if challenge is None:\n    challenge.call_validate(client)\n    if not wait:", "piece": "challenge.call_validate(client)"}
{"function_name": "raise_error", "function_define": "    error_details = []\n    if 'error' in challenge.data:\n    error_details.append(msg)", "piece": "if 'error' in challenge.data:"}
{"function_name": "deactivate", "function_define": "    Deactivates this authorization.\n    if self.status != 'valid':\n    if client.version == 1:", "piece": "if self.status != 'valid':"}
{"function_name": "makecache", "function_define": "    args: List[str] = ['makecache']\n    if fast:\n    args.append('fast')", "piece": "if fast:"}
{"function_name": "copy_image", "function_define": "    src = '%s/%s' % (src, name)\n    dest = '%s/%s' % (export, name)\n    for img in images:", "piece": "dest = '%s/%s' % (export, name)"}
{"function_name": "to_export", "function_define": "    print('Exporting...', end=' ')\n    path = '%s/%s' % (export, name)\n    if not os.path.exists(path):", "piece": "path = '%s/%s' % (export, name)"}
{"function_name": "CheckPairSum", "function_define": "    n = len(Arr)\n    dict_of_numbers = [0] * 1000\n    for i in range(n):", "piece": "dict_of_numbers = [0] * 1000"}
{"function_name": "create_bs_task", "function_define": "    TaskTable.del_with_task(task)\n    with session_scope() as sm:\n    if CQ_Config.IDB_DEBUG == '1':", "piece": "with session_scope() as sm:"}
{"function_name": "create_ts_task", "function_define": "    TaskTable.del_with_task(task)\n    with session_scope() as sm:\n    tasklist = []", "piece": "with session_scope() as sm:"}
{"function_name": "block_model", "function_define": "    commutative_op_nodes = []\n    for tree in self.trees:\n    if union is None:", "piece": "for tree in self.trees:"}
{"function_name": "build_program", "function_define": "    for i in range(len(self.trees)):\n    for x in self.model.keys():\n    tree = self.trees[t_idx]", "piece": "for x in self.model.keys():"}
{"function_name": "pid_exists", "function_define": "    if pid == 0:\n    os.kill(pid, 0)\n    except OSError as err:", "piece": "os.kill(pid, 0)"}
{"function_name": "boot_time", "function_define": "    path = '%s/stat' % _procfs_path\n    with open(path, 'rb') as f:\n    for line in f:", "piece": "with open(path, 'rb') as f:"}
{"function_name": "remove_html", "function_define": "    Parameters\n    content: :class:`str`\n    if not content:", "piece": "content: :class:`str`"}
{"function_name": "importances", "function_define": "    print(f'PARAMETERS:')\n    n, p = X.shape\n    for i in range(n_trials):", "piece": "n, p = X.shape"}
{"function_name": "importances_", "function_define": "    all_start = timer()\n    if n_jobs > 1 or n_jobs == -1:\n    total_impact = np.sum(impacts)", "piece": "if n_jobs > 1 or n_jobs == -1:"}
{"function_name": "pdp_importances", "function_define": "    an importance dataframe\n    I = I.set_index('Feature')\n    if normalize:", "piece": "I = I.set_index('Feature')"}
{"function_name": "threeSum", "function_define": "    result = set()\n    two_sum = -nums[i]\n    cache = set()", "piece": "two_sum = -nums[i]"}
{"function_name": "blackify", "function_define": "    if not os.path.exists('.git'):\n    if not merge_base:\n    for commit in commits:", "piece": "if not merge_base:"}
{"function_name": "put_detail", "function_define": "    supported.\n    at PATCH.\n    request.method = 'POST'", "piece": "at PATCH."}
{"function_name": "patch_detail", "function_define": "    for key in request.POST:\n    data[key] = request.POST[key]\n    request.POST = data", "piece": "data[key] = request.POST[key]"}
{"function_name": "generate_anchors", "function_define": "    option : SSDAnchorOptions\n    anchors = []\n    layer_id = 0", "piece": "anchors = []"}
{"function_name": "decode_bboxes", "function_define": "    wi, hi : NN input shape\n    Version 0.8.3.1:\n    options: {", "piece": "Version 0.8.3.1:"}
{"function_name": "featurize", "function_define": "    if feat_spec.sep_token_extra:\n    special_tokens_count = 4\n    maybe_extra_sep = []", "piece": "special_tokens_count = 4"}
{"function_name": "example2", "function_define": "    DIM = 100\n    POINTS = 20000\n    t0 = time.time()", "piece": "POINTS = 20000"}
{"function_name": "is_legal_point", "function_define": "    x, y = p\n    all_ok = True\n    if p not in terrset.decor_tiles:", "piece": "all_ok = True"}
{"function_name": "update_img", "function_define": "    bitcoins = bitcoin.get_bitcoin()\n    f = urllib.request.urlopen(icon)\n    infos = bitcoins + ' ' + weath", "piece": "f = urllib.request.urlopen(icon)"}
{"function_name": "task_order_by", "function_define": "    col = getattr(Task, col)\n    if direction == 'desc':\n    col = col.desc()", "piece": "if direction == 'desc':"}
{"function_name": "download_pwr", "function_define": "    if proxy is not None:\n    f = urllib.request.urlopen(url)\n    data = f.read()", "piece": "f = urllib.request.urlopen(url)"}
{"function_name": "_fetch_url", "function_define": "    r = urllib\n    data = r.read()\n    self.f = io.StringIO(data)", "piece": "data = r.read()"}
{"function_name": "_read_symbol", "function_define": "    dividends = []\n    rawsymbol = self.f.read(16)\n    if rawsymbol == b'':", "piece": "rawsymbol = self.f.read(16)"}
{"function_name": "radiator", "function_define": "    if request.method == 'GET':\n    if 'source' in request.GET:\n    set_server(request, source)", "piece": "if 'source' in request.GET:"}
{"function_name": "cleanup_text", "function_define": "    text = str(record[1])\n    words = text.split(' ')\n    lmtzr = WordNetLemmatizer()", "piece": "words = text.split(' ')"}
{"function_name": "slash_cog", "function_define": "    Add a command to a cog\n    Parameters\n    name : str, optional", "piece": "Parameters"}
{"function_name": "countServers", "function_define": "    rows = defaultdict(set)\n    cols = defaultdict(set)\n    m = len(grid)", "piece": "cols = defaultdict(set)"}
{"function_name": "create_session", "function_define": "    process = None\n    Queue = None\n    import multiprocessing", "piece": "Queue = None"}
{"function_name": "iter_updates", "function_define": "    while True:\n    if self._queue.qsize == 0:\n    time.sleep(1)", "piece": "if self._queue.qsize == 0:"}
{"function_name": "infogain", "function_define": "    info_gains = zeros(x.shape[1])\n    cl = unique(y)\n    for i in range(len(cl)):", "piece": "cl = unique(y)"}
{"function_name": "load_predictions", "function_define": "    pred_list = []\n    if file_name.endswith('.pt'):\n    pred_list.extend(preds)", "piece": "if file_name.endswith('.pt'):"}
{"function_name": "nthUglyNumber", "function_define": "    t2, t3, t5 = (0, 0, 0)\n    for i in range(n - 1):\n    to_add = min(a2, a3, a5)", "piece": "for i in range(n - 1):"}
{"function_name": "paginate", "function_define": "    except PageNotAnInteger:\n    users = paginator.page(1)\n    except EmptyPage:", "piece": "users = paginator.page(1)"}
{"function_name": "normalize_tags", "function_define": "    if isinstance(tags, Tag):\n    tags = frozenset([tags])\n    elif tags is None:", "piece": "tags = frozenset([tags])"}
{"function_name": "without_tags", "function_define": "    instances therein.\n    to_remove = normalize_tags(tags)\n    new_tags = self.tags - to_remove", "piece": "to_remove = normalize_tags(tags)"}
{"function_name": "upd_cfPars", "function_define": "    if cfPars_d is None:\n    cfPars_d = self.cfPars_d\n    pars_lib = dict()", "piece": "cfPars_d = self.cfPars_d"}
{"function_name": "copy_datafiles", "function_define": "    if logger is None:\n    logger = self.logger\n    if out_dir is None:", "piece": "logger = self.logger"}
{"function_name": "typeset_df", "function_define": "    if logger is None:\n    logger = self.logger\n    d = dict()", "piece": "logger = self.logger"}
{"function_name": "build_candidates", "function_define": "    if logger is None:\n    logger = self.logger\n    log = logger.getChild('bcan')", "piece": "logger = self.logger"}
{"function_name": "cf_append_subdir", "function_define": "    if logger is None:\n    logger = self.logger\n    if cf_fp is None:", "piece": "logger = self.logger"}
{"function_name": "cross_entropy", "function_define": "    y: \u6b63\u786e\u7684\u6807\u7b7e\uff08\u6807\u91cf\u5f62\u5f0f\uff0c\u4e0d\u662f one-hot \u5f62\u5f0f\uff09\n    loss: \u635f\u5931\n    dpred\uff1a\u635f\u5931\u5bf9\u8f93\u5165\u7684\u5bfc\u6570", "piece": "loss: \u635f\u5931"}
{"function_name": "hinge_loss", "function_define": "    scores: scores \u4e3a\u6700\u540e\u5168\u8fde\u63a5\u5c42\u7684\u8f93\u51fa\u7ed3\u679c\n    y: \u6b63\u786e\u7684\u6807\u7b7e\uff08\u6807\u91cf\u5f62\u5f0f\uff0c\u4e0d\u662f one-hot \u5f62\u5f0f\uff09\n    loss: \u635f\u5931", "piece": "y: \u6b63\u786e\u7684\u6807\u7b7e\uff08\u6807\u91cf\u5f62\u5f0f\uff0c\u4e0d\u662f one-hot \u5f62\u5f0f\uff09"}
{"function_name": "set_material", "function_define": "    user attribute at the same time.\n    Arguments:\n    attrs = sg_node.GetAttributes()", "piece": "Arguments:"}
{"function_name": "on_success_task", "function_define": "    if retval:\n    stop = now()\n    if task_log:", "piece": "stop = now()"}
{"function_name": "_create_task_log", "function_define": "    task_input = []\n    if task_args:\n    if task_kwargs:", "piece": "if task_args:"}
{"function_name": "make_template", "function_define": "    have the following properties:\n    if you make a mistake.\n    couldn't reuse the variable.", "piece": "if you make a mistake."}
{"function_name": "_call_func", "function_define": "    if self._variables_created:\n    if self._variables_created:\n    self._variables_created = True", "piece": "if self._variables_created:"}
{"function_name": "add_flow", "function_define": "    ofproto = datapath.ofproto\n    parser = datapath.ofproto_parser\n    datapath.send_msg(mod)", "piece": "parser = datapath.ofproto_parser"}
{"function_name": "is_entry_valid", "function_define": "    is_valid = True\n    country_code = item[0]\n    name = item[1]", "piece": "country_code = item[0]"}
{"function_name": "deleteDuplicates", "function_define": "    pre = prehead\n    curr = head\n    post = head.next", "piece": "curr = head"}
{"function_name": "generate_score", "function_define": "    for technique in data.values():\n    if not len(step['Procedure']):\n    continue", "piece": "if not len(step['Procedure']):"}
{"function_name": "setDataSets", "function_define": "    if datadict is None:\n    if sortedNames is None:\n    self.sortedNames = sortedNames", "piece": "if sortedNames is None:"}
{"function_name": "exportAllData", "function_define": "    if preffix is None:\n    if not outputdir:\n    self.accept()", "piece": "if not outputdir:"}
{"function_name": "updateText", "function_define": "    if key is None:\n    header = '# DATASET= '\n    body = ''", "piece": "header = '# DATASET= '"}
{"function_name": "preTrain", "function_define": "    BUFFER_SIZE = 100000\n    BATCH_SIZE = 32\n    GAMMA = 0.99", "piece": "BATCH_SIZE = 32"}
{"function_name": "get_height", "function_define": "    height = 0\n    while node is not None:\n    height += 1", "piece": "while node is not None:"}
{"function_name": "solution2", "function_define": "    node_to_correct = node1\n    if height1 < height2:\n    node_to_correct = node2", "piece": "if height1 < height2:"}
{"function_name": "ExtendTaskGraph", "function_define": "    if job is None:\n    job_key = job.key\n    if overlap:", "piece": "job_key = job.key"}
{"function_name": "UpdateTask", "function_define": "    if not task:\n    if new_state:\n    task.status = new_state", "piece": "if new_state:"}
{"function_name": "Evaluate", "function_define": "    a traversal of the graph.\n    if job is None:\n    accumulator = {}", "piece": "if job is None:"}
{"function_name": "convert_weights", "function_define": "    ret = {}\n    ret[dst + '/weights'] = src_w\n    if src + '.norm.weight' in d:", "piece": "ret[dst + '/weights'] = src_w"}
{"function_name": "_convert_conv", "function_define": "    ret[dst + '/weights'] = src_w\n    if src + '.norm.weight' in d:\n    if src + '_offset.weight' in d:", "piece": "if src + '.norm.weight' in d:"}
{"function_name": "get_box_indices", "function_define": "    idx_ymin = idx_xmin + 1\n    idx_xmax = idx_xmin + 2\n    idx_ymax = idx_xmin + 3", "piece": "idx_xmax = idx_xmin + 2"}
{"function_name": "new_file", "function_define": "    filo = open(filo_name, 'a')\n    header = '\\t'.join(labels)\n    filo.writelines([header + '\\n'])", "piece": "header = '\\t'.join(labels)"}
{"function_name": "move_to_target", "function_define": "    if self.has_reached_target():\n    self.move_down()\n    self.move_up()", "piece": "self.move_down()"}
{"function_name": "_flip_digit", "function_define": "    for letter in binary_string:\n    if letter not in ['0', '1']:\n    flip_dict = {'0': '1', '1': '0'}", "piece": "if letter not in ['0', '1']:"}
{"function_name": "restartBot", "function_define": "    print('[ INFO ] BOT RESETTED')\n    backupData()\n    python = sys.executable", "piece": "backupData()"}
{"function_name": "backupData", "function_define": "    backup = settings\n    backup = read\n    except Exception as error:", "piece": "backup = read"}
{"function_name": "get_selection", "function_define": "    if not args:\n    errors = []\n    selection = []", "piece": "errors = []"}
{"function_name": "sample_history", "function_define": "    n = len(user_session)\n    sep = int(state_ratio * n)\n    if not state_nums:", "piece": "sep = int(state_ratio * n)"}
{"function_name": "write_csv", "function_define": "    for user_histo in users_session:\n    for i in range(len(states)):\n    state_str = '|'.join(states[i])", "piece": "for i in range(len(states)):"}
{"function_name": "load_assets", "function_define": "    if files:\n    for file in files:\n    mimetype = get_mimetype(file)", "piece": "for file in files:"}
{"function_name": "get_hist", "function_define": "    hist = {}\n    for i in cmt:\n    if i == -1:", "piece": "for i in cmt:"}
{"function_name": "sample_task", "function_define": "    pairs = []\n    scores = []\n    knn = base[i][0]", "piece": "scores = []"}
{"function_name": "sample_parallel", "function_define": "    import multiprocessing\n    import tqdm\n    pool = multiprocessing.Pool(16)", "piece": "import tqdm"}
{"function_name": "mediator", "function_define": "    create(output, args)\n    pairs = raw_pairs[sel, :]\n    scores = pair_pred[sel]", "piece": "pairs = raw_pairs[sel, :]"}
{"function_name": "parseDocblock", "function_define": "    docblock = Docblock()\n    docblock.end_line = end_line - 1\n    docblock.file = file", "piece": "docblock.end_line = end_line - 1"}
{"function_name": "backward", "function_define": "    for var in ctx.bp_inputs:\n    inputs.append(var)\n    outputs = ctx.bp_outputs", "piece": "inputs.append(var)"}
{"function_name": "compareFunc", "function_define": "    z = conv3x3(x, K)\n    z = F.relu(z)\n    z = -convt3x3(z, K)", "piece": "z = F.relu(z)"}
{"function_name": "stalemate", "function_define": "    global grid\n    for x in Xcoords:\n    for y in Ycoords:", "piece": "for x in Xcoords:"}
{"function_name": "drawAvocado", "function_define": "    global sceneParent\n    global avocado\n    arena.add_object(avocado)", "piece": "global avocado"}
{"function_name": "draw_hud", "function_define": "    global reds\n    global blues\n    global draws", "piece": "global blues"}
{"function_name": "delete_cubes", "function_define": "    for x in Xcoords:\n    for y in Ycoords:\n    delete_cube(x, y)", "piece": "for y in Ycoords:"}
{"function_name": "animate_win", "function_define": "    animateAvocado()\n    time.sleep(5)\n    delete_cubes()", "piece": "time.sleep(5)"}
{"function_name": "animate_loss", "function_define": "    animateAvocado2()\n    time.sleep(5)\n    delete_cubes()", "piece": "time.sleep(5)"}
{"function_name": "guac_callback", "function_define": "    global counter\n    if evt.type == 'mousedown':\n    color = redblue[counter % 2]", "piece": "if evt.type == 'mousedown':"}
{"function_name": "test_one_grouper", "function_define": "    groupby = GroupBy(['group'])\n    gridsize = 50\n    ngroups = df['group'].nunique()", "piece": "gridsize = 50"}
{"function_name": "createWordList", "function_define": "    n = len(x)\n    while i < n:\n    if judge(x[i][0]) == False:", "piece": "while i < n:"}
{"function_name": "createTable", "function_define": "    start = time.time()\n    thu = thulac.thulac()\n    print('begin!')", "piece": "thu = thulac.thulac()"}
{"function_name": "update_viewer", "function_define": "    Keyword arguments:\n    rgbt = [1.0, 0.0, 0.0, 0.5]\n    for i in range(4):", "piece": "rgbt = [1.0, 0.0, 0.0, 0.5]"}
{"function_name": "get_next_foot", "function_define": "    epsilon = 0.0\n    t1 -= 2 * epsilon\n    t0 -= epsilon", "piece": "t1 -= 2 * epsilon"}
{"function_name": "show_attention", "function_define": "    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    fig.colorbar(cax)", "piece": "ax = fig.add_subplot(111)"}
{"function_name": "find_orbit", "function_define": "    planets = []\n    if current_planet in moons:\n    planets.append(planet)", "piece": "if current_planet in moons:"}
{"function_name": "find_route", "function_define": "    if start in visited:\n    visited.append(start)\n    if to in planets_in_center:", "piece": "visited.append(start)"}
{"function_name": "to_json_dict", "function_define": "    owned = False\n    if o.count() > 0:\n    result['owned'] = True", "piece": "if o.count() > 0:"}
{"function_name": "test_debug", "function_define": "    from datetime import timedelta\n    print(access_token)\n    print(decoded_access_token)", "piece": "print(access_token)"}
{"function_name": "Coxnnet_pipeline", "function_define": "    in_features_one = x1.shape[1]\n    if mod2 != 'None':\n    net.train()", "piece": "if mod2 != 'None':"}
{"function_name": "set_spanmode", "function_define": "    pltf = platform.system()\n    if pltf == 'Windows':\n    elif pltf == 'Linux':", "piece": "if pltf == 'Windows':"}
{"function_name": "pre_setup", "function_define": "    set_logger(hparams)\n    set_gpu(hparams)\n    set_seed(hparams)", "piece": "set_gpu(hparams)"}
{"function_name": "load_state", "function_define": "    weight.data = new_weight.data\n    weight.data.requires_grad_()\n    bias.data = new_bias.data", "piece": "weight.data.requires_grad_()"}
{"function_name": "get_lines", "function_define": "    if resp.status_code == 200:\n    logger.error(resp.text)\n    raise ApiException(resp.text)", "piece": "logger.error(resp.text)"}
{"function_name": "get_locations", "function_define": "    if resp.status_code == 200:\n    logger.error(resp.text)\n    raise ApiException(resp.text)", "piece": "logger.error(resp.text)"}
{"function_name": "post_line", "function_define": "    if resp.status_code == 200:\n    logger.error(resp.text)\n    raise ApiException(resp.text)", "piece": "logger.error(resp.text)"}
{"function_name": "post_bus", "function_define": "    if resp.status_code == 200:\n    logger.error(resp.text)\n    raise ApiException(resp.text)", "piece": "logger.error(resp.text)"}
{"function_name": "post_location", "function_define": "    if resp.status_code == 200:\n    logger.error(resp.text)\n    raise ApiException(resp.text)", "piece": "logger.error(resp.text)"}
{"function_name": "build_filter", "function_define": "    n = len(sock_path)\n    if n > UNIX_PATH_MAX:\n    raise ValueError('invalid path')", "piece": "if n > UNIX_PATH_MAX:"}
{"function_name": "parse_event", "function_define": "    global packet_count\n    packet_count += 1\n    event += PACKET_SIZE", "piece": "packet_count += 1"}
{"function_name": "hex_print", "function_define": "    line = '{:04x}'.format(i)\n    line += '  '\n    line += '  '", "piece": "line += '  '"}
{"function_name": "hex_output", "function_define": "    print_header(packet, data)\n    print('error')\n    hex_print(data)", "piece": "print('error')"}
{"function_name": "pcap_output", "function_define": "    ts = time.time()\n    ts_sec = int(ts)\n    ts_usec = int(ts % 1 * 10 ** 6)", "piece": "ts_sec = int(ts)"}
{"function_name": "get_adm_pops", "function_define": "    Returns:\n    adm_df = pd.read_csv(path_adm)\n    adm_df = pd.read_csv(path_adm)", "piece": "adm_df = pd.read_csv(path_adm)"}
{"function_name": "_chk_asarray", "function_define": "    if axis is None:\n    a = np.ravel(a)\n    outaxis = 0", "piece": "a = np.ravel(a)"}
{"function_name": "_chk2_asarray", "function_define": "    if axis is None:\n    a = np.ravel(a)\n    b = np.ravel(b)", "piece": "a = np.ravel(a)"}
{"function_name": "ttest_1samp", "function_define": "    population mean, `popmean`.\n    Parameters\n    a : array_like", "piece": "Parameters"}
{"function_name": "ttest_ind", "function_define": "    Parameters\n    a, b : array_like\n    axis : int, optional", "piece": "a, b : array_like"}
{"function_name": "ttest_rel", "function_define": "    Parameters\n    a, b : array_like\n    t : float or array", "piece": "a, b : array_like"}
{"function_name": "test_formats", "function_define": "    config = base_config()\n    config.end_date = '2020-01-16'\n    config.results_dir = tmp_path", "piece": "config.end_date = '2020-01-16'"}
{"function_name": "test_write_freq", "function_define": "    config = base_config()\n    config.end_date = '2020-01-15'\n    config.results_dir = tmp_path", "piece": "config.end_date = '2020-01-15'"}
{"function_name": "test_points", "function_define": "    bc = base_config()\n    bc.end_date = '2020-01-15 00:00'\n    config = bc.copy()", "piece": "bc.end_date = '2020-01-15 00:00'"}
{"function_name": "test_variables", "function_define": "    bc = base_config()\n    bc.end_date = '2020-01-15 00:00'\n    config = bc.copy()", "piece": "bc.end_date = '2020-01-15 00:00'"}
{"function_name": "update_history", "function_define": "    used to fit the model\n    model_metadata = dict()\n    print(model_metadata)", "piece": "model_metadata = dict()"}
{"function_name": "plot_trees", "function_define": "    fn = feature_names\n    cn = target_names\n    for index in range(0, 5):", "piece": "cn = target_names"}
{"function_name": "interface", "function_define": "    request = Request()\n    request.platform = PLATFORM\n    request.user_id = user_id", "piece": "request.platform = PLATFORM"}
{"function_name": "AsyncSession", "function_define": "    retries (int): number of retries\n    Returns:\n    session = FuturesSession()", "piece": "Returns:"}
{"function_name": "carPooling", "function_define": "    trips = np.array(trips)\n    if max(trips[:, 0]) > capacity:\n    end = max(trips[:, 2])", "piece": "if max(trips[:, 0]) > capacity:"}
{"function_name": "parsed_input", "function_define": "    separator = all_input.index('')\n    rules = {}\n    rule_id = rule.split(': ')[0]", "piece": "rules = {}"}
{"function_name": "extract_weight", "function_define": "    blockId = 0\n    for m in self.model.modules():\n    blockId += 1", "piece": "for m in self.model.modules():"}
{"function_name": "trace_model", "function_define": "    self.eval_prep()\n    module = imagenet_resnet50()\n    with torch.no_grad():", "piece": "module = imagenet_resnet50()"}
{"function_name": "evaluate_setup", "function_define": "    interceptHandleList = []\n    weightList = []\n    layerNameList = []", "piece": "weightList = []"}
{"function_name": "validation", "function_define": "    test_loss = 0\n    test_accuracy = 0\n    model.eval()", "piece": "test_accuracy = 0"}
{"function_name": "validate_values", "function_define": "    if len(values) != 5:\n    for v in values:\n    if type(v) != float:", "piece": "for v in values:"}
{"function_name": "test_CreateDummy", "function_define": "    File.CreateDummy(target, 1024)\n    File.Delete(target)\n    File.CreateDummy(target, 4096)", "piece": "File.Delete(target)"}
{"function_name": "test_mk_rm", "function_define": "    d = File(target)\n    self.assertEqual(target, d.Path)\n    d.mk('A/a.txt')", "piece": "self.assertEqual(target, d.Path)"}
{"function_name": "test_mk_dummy", "function_define": "    d = File(target)\n    self.assertTrue(d.Stat is None)\n    d.mk_dummy(1024)", "piece": "self.assertTrue(d.Stat is None)"}
{"function_name": "test_mk_rm_raise", "function_define": "    d = File(target)\n    d.mk('/tmp/work/A')\n    d.rm('/tmp/work/A')", "piece": "d.mk('/tmp/work/A')"}
{"function_name": "test_cp_single", "function_define": "    d = File(target)\n    self.assertEqual(target, d.Path)\n    self.assertEqual(target, d.Path)", "piece": "self.assertEqual(target, d.Path)"}
{"function_name": "test_cp_tree", "function_define": "    d = File(target)\n    self.assertEqual(target, d.Path)\n    self.assertEqual(target, d.Path)", "piece": "self.assertEqual(target, d.Path)"}
{"function_name": "test_mv_single", "function_define": "    d = File(target)\n    self.assertEqual(target, d.Path)\n    self.assertEqual(target, d.Path)", "piece": "self.assertEqual(target, d.Path)"}
{"function_name": "test_mv_tree", "function_define": "    d = File(target)\n    self.assertEqual(target, d.Path)\n    d.mk('B/b.txt')", "piece": "self.assertEqual(target, d.Path)"}
{"function_name": "__MakeDummy", "function_define": "    if os.path.isfile(path):\n    os.remove(path)\n    with open(path, 'wb') as f:", "piece": "os.remove(path)"}
{"function_name": "test_GetSize", "function_define": "    File.CreateDummy(path_a, 1024)\n    File.CreateDummy(path_b, 2048)\n    File.CreateDummy(path_c, 3072)", "piece": "File.CreateDummy(path_b, 2048)"}
{"function_name": "test_Size", "function_define": "    s = File(target_dummy)\n    s.mk_dummy(1024)\n    self.assertEqual(1024, s.Size)", "piece": "s.mk_dummy(1024)"}
{"function_name": "test_Mode", "function_define": "    s = File(target_root)\n    s.Mode = 511\n    self.assertEqual(16895, s.Mode)", "piece": "s.Mode = 511"}
{"function_name": "test_Modified", "function_define": "    s = File(target_root)\n    epoch, dt = s.Modified\n    self.assertTrue(dt1 != dt)", "piece": "epoch, dt = s.Modified"}
{"function_name": "test_Accessed", "function_define": "    s = File(target_root)\n    epoch, dt = s.Accessed\n    self.assertTrue(dt1 != dt)", "piece": "epoch, dt = s.Accessed"}
{"function_name": "test_ChangedMeta", "function_define": "    s = File(target_root)\n    print(s.ChangedMeta)\n    print(s.Created)", "piece": "print(s.ChangedMeta)"}
{"function_name": "load_func", "function_define": "    for i in range(10):\n    with open(filename, 'rb') as f:\n    reloaded = cpickle.load(f)", "piece": "with open(filename, 'rb') as f:"}
{"function_name": "plot_publish", "function_define": "    keys if not provided.\n    if not targets:\n    plugins = api.discover()", "piece": "if not targets:"}
{"function_name": "plot_plugin", "function_define": "    keys if not provided.\n    source = ''.join(source).strip()\n    lineno -= 1", "piece": "source = ''.join(source).strip()"}
{"function_name": "IPSignificance", "function_define": "    JetPt = row['Jet.PT']\n    JetEta = row['Jet.Eta']\n    JetPhi = row['Jet.Phi']", "piece": "JetEta = row['Jet.Eta']"}
{"function_name": "TrackSource", "function_define": "    JetPt = row['Jet.PT']\n    JetEta = row['Jet.Eta']\n    JetPhi = row['Jet.Phi']", "piece": "JetEta = row['Jet.Eta']"}
{"function_name": "histplot", "function_define": "    bin_widths = np.diff(bins)\n    errors = np.sqrt(counts)\n    rel_errors = errors / counts", "piece": "errors = np.sqrt(counts)"}
{"function_name": "get_suffix", "function_define": "    suffix = str(width)\n    if height is not None:\n    suffix += 'x%s' % height", "piece": "if height is not None:"}
{"function_name": "get_svg_info", "function_define": "    fp.seek(0)\n    width = int(svg.attrib['width'])\n    except (ValueError, KeyError):", "piece": "width = int(svg.attrib['width'])"}
{"function_name": "get_image_info", "function_define": "    head = fp.read(32)\n    fp.seek(0)\n    if len(head) < 24:", "piece": "fp.seek(0)"}
{"function_name": "find_imagemagick", "function_define": "    if BUNDLE_BIN_PATH is not None:\n    if os.name == 'nt':\n    executable += '.exe'", "piece": "if os.name == 'nt':"}
{"function_name": "process_image", "function_define": "    resize_key = str(width)\n    if height is not None:\n    resize_key += 'x' + str(height)", "piece": "if height is not None:"}
{"function_name": "make_thumbnail", "function_define": "    of an artifact.\n    if format == 'unknown':\n    report_height = height", "piece": "if format == 'unknown':"}
{"function_name": "altitude", "function_define": "    if val is not None:\n    except LookupError:\n    if ref == 1:", "piece": "except LookupError:"}
{"function_name": "search_domains", "function_define": "    response.check_errors()\n    domains = list()\n    for r in response.data.items:", "piece": "domains = list()"}
{"function_name": "scroll_domains", "function_define": "    response.check_errors()\n    domains = list()\n    for r in response.data.items:", "piece": "domains = list()"}
{"function_name": "search_ip", "function_define": "    response.check_errors()\n    ips = list()\n    for r in response.data.items:", "piece": "ips = list()"}
{"function_name": "scroll_ip", "function_define": "    response.check_errors()\n    ips = list()\n    for r in response.data.items:", "piece": "ips = list()"}
{"function_name": "search_cve", "function_define": "    response.check_errors()\n    cve_list = list()\n    for r in response.data.items:", "piece": "cve_list = list()"}
{"function_name": "scroll_cve", "function_define": "    response.check_errors()\n    cve_list = list()\n    for r in response.data.items:", "piece": "cve_list = list()"}
{"function_name": "search_emails", "function_define": "    response.check_errors()\n    emails = list()\n    for r in response.data.items:", "piece": "emails = list()"}
{"function_name": "scroll_emails", "function_define": "    response.check_errors()\n    emails = list()\n    for r in response.data.items:", "piece": "emails = list()"}
{"function_name": "tokenize_sexpr", "function_define": "    filename = '?'\n    f = io.StringIO(text)\n    lexer = SExpressionLexer()", "piece": "f = io.StringIO(text)"}
{"function_name": "parse_sexpr", "function_define": "    values = []\n    self.consume('(')\n    while self.peek != ')':", "piece": "self.consume('(')"}
{"function_name": "tokenize", "function_define": "    chunks = create_chunks(f)\n    if token.typ == 'string':\n    token.val = token.val[1:-1]", "piece": "if token.typ == 'string':"}
{"function_name": "lex_sexpr", "function_define": "    c = self.next_char()\n    if c is None:\n    if c == '(':", "piece": "if c is None:"}
{"function_name": "lex_atom", "function_define": "    while True:\n    c = self.next_char()\n    if c is None:", "piece": "c = self.next_char()"}
{"function_name": "lex_line_comment", "function_define": "    while True:\n    c = self.next_char()\n    if c is None or c in '\\n\\r':", "piece": "c = self.next_char()"}
{"function_name": "lex_string", "function_define": "    while True:\n    if self.accept('\\\\'):\n    self.next_char(eof=False)", "piece": "if self.accept('\\\\'):"}
{"function_name": "loss_report", "function_define": "    fig, ax = plt.subplots()\n    ax.set_xlabel = 'epochs'\n    ax.set_ylabel = 'loss'", "piece": "ax.set_xlabel = 'epochs'"}
{"function_name": "get_input_res", "function_define": "    data: xarray Dataset\n    Input GEOS-Chem dataset\n    Returns:", "piece": "Input GEOS-Chem dataset"}
{"function_name": "call_make_grid", "function_define": "    res: str or int\n    gridtype: str\n    Keyword Args (optional):", "piece": "gridtype: str"}
{"function_name": "get_grid_extents", "function_define": "    data: xarray Dataset or dict\n    edges (optional): bool\n    Default value: True", "piece": "edges (optional): bool"}
{"function_name": "get_vert_grid", "function_define": "    dataset: xarray Dataset\n    A GEOS-Chem output dataset\n    Keyword Args (optional):", "piece": "A GEOS-Chem output dataset"}
{"function_name": "get_ind_of_pres", "function_define": "    dataset: xarray Dataset\n    GEOS-Chem dataset\n    pres: int or float", "piece": "GEOS-Chem dataset"}
{"function_name": "make_grid_LL", "function_define": "    llres: str\n    Keyword Args (optional):\n    Returns:", "piece": "Keyword Args (optional):"}
{"function_name": "make_grid_CS", "function_define": "    csres: int\n    Returns:\n    csgrid = csgrid_GMAO(csres)", "piece": "Returns:"}
{"function_name": "make_grid_SG", "function_define": "    csres: int\n    stretch_factor: float\n    stretch factor of target grid", "piece": "stretch_factor: float"}
{"function_name": "calc_delta_lon", "function_define": "    Parameters\n    lon_edge: float\n    Width of each cell, degrees East", "piece": "lon_edge: float"}
{"function_name": "csgrid_GMAO", "function_define": "    Parameters\n    res: cubed-sphere Resolution\n    CS = CSGrid(res, offset=offset)", "piece": "res: cubed-sphere Resolution"}
{"function_name": "rotate_sphere_3D", "function_define": "    around the requested axis.\n    cos_ang = np.cos(rot_ang)\n    sin_ang = np.sin(rot_ang)", "piece": "cos_ang = np.cos(rot_ang)"}
{"function_name": "test_main_noop", "function_define": "    f = tmpdir.join('f.py')\n    f.write('x = 5\\n')\n    assert main((f.strpath,)) == 0", "piece": "f.write('x = 5\\n')"}
{"function_name": "leaf_cells", "function_define": "    self._leaf_cells.clear()\n    for cell in self.base_cells:\n    self._leaf_cells += cell.leaves", "piece": "for cell in self.base_cells:"}
{"function_name": "top_leaf_cells", "function_define": "    leaf_cells = []\n    for cell in self.top_base_cells:\n    leaf_cells += cell.top_leaves", "piece": "for cell in self.top_base_cells:"}
{"function_name": "top_coords", "function_define": "    all_xs = []\n    all_ys = []\n    for leaf in cell.leaves:", "piece": "all_ys = []"}
{"function_name": "bottom_coords", "function_define": "    all_xs = []\n    all_ys = []\n    for leaf in cell.leaves:", "piece": "all_ys = []"}
{"function_name": "right_coords", "function_define": "    all_xs = []\n    all_ys = []\n    for leaf in cell.leaves:", "piece": "all_ys = []"}
{"function_name": "left_coords", "function_define": "    all_xs = []\n    all_ys = []\n    for leaf in cell.leaves:", "piece": "all_ys = []"}
{"function_name": "corner_coords", "function_define": "    all_xs = []\n    all_ys = []\n    xs, ys = cell.corner_coords", "piece": "all_ys = []"}
{"function_name": "get_samples", "function_define": "    all_xs = []\n    all_ys = []\n    x = self.x_start + i * dx", "piece": "all_ys = []"}
{"function_name": "check_all_noise", "function_define": "    for audio_file in test_audio:\n    for noise_file in noise_files:\n    except AssertionError:", "piece": "for noise_file in noise_files:"}
{"function_name": "calc_start_end", "function_define": "    start_end = list()\n    noise_start = 0.0\n    while noise_end < noise_len:", "piece": "noise_start = 0.0"}
{"function_name": "get_sparql_query", "function_define": "    date_selector = ' ?obsDate'\n    if date:\n    date_selector = ''", "piece": "if date:"}
{"function_name": "unary_nd", "function_define": "    eps = 0.0001\n    if isinstance(x, np.ndarray):\n    nd_grad = np.zeros(x.shape)", "piece": "if isinstance(x, np.ndarray):"}
{"function_name": "check_equivalent", "function_define": "    if isinstance(A, (tuple, list)):\n    for a, b in zip(A, B):\n    check_equivalent(a, b)", "piece": "for a, b in zip(A, B):"}
{"function_name": "dist_projection", "function_define": "    lb = b.floor().long()\n    ub = b.ceil().long()\n    if self.use_cuda:", "piece": "ub = b.ceil().long()"}
{"function_name": "norm_yoshida", "function_define": "    Parameters\n    param : pd.Series or Dict\n    single parameter set", "piece": "param : pd.Series or Dict"}
{"function_name": "norm_sws", "function_define": "    Parameters\n    param : pd.Series or Dict\n    single parameter set", "piece": "param : pd.Series or Dict"}
{"function_name": "norm_spn", "function_define": "    Parameters\n    param : pd.Series or Dict\n    single parameter set", "piece": "param : pd.Series or Dict"}
{"function_name": "load_two_bifur", "function_define": "    p: Path = Path.cwd().parents[0]\n    start = 1000 - diff\n    end = 1000 + diff + 1", "piece": "start = 1000 - diff"}
{"function_name": "calc_cal", "function_define": "    the all parameter sets.\n    Parameters\n    filename: str", "piece": "Parameters"}
{"function_name": "scan_dirs", "function_define": "    import os\n    for e in os.scandir(path):\n    if e.is_file():", "piece": "for e in os.scandir(path):"}
{"function_name": "profile_function", "function_define": "    profiler = cProfile.Profile()\n    profiling_data = io.StringIO()\n    profiler.enable()", "piece": "profiling_data = io.StringIO()"}
{"function_name": "greedy_k", "function_define": "    Returns:\n    best_solution = []\n    print('G = ' + str(g_solution))", "piece": "best_solution = []"}
{"function_name": "middleware", "function_define": "    host = request.get_host()\n    host = host.split(':')[1]\n    subdomain = host.split('.')[0]", "piece": "host = host.split(':')[1]"}
{"function_name": "model_class", "function_define": "    tmpdir.chdir()\n    class Model:\n    self.kind = kind", "piece": "class Model:"}
{"function_name": "describe_create", "function_define": "    instance.__mapper__.create()\n    instance.__mapper__.create()\n    with expect.raises(TypeError):", "piece": "instance.__mapper__.create()"}
{"function_name": "describe_find", "function_define": "    instance.__mapper__.create()\n    instance.__mapper__.create()\n    with expect.raises(TypeError):", "piece": "instance.__mapper__.create()"}
{"function_name": "describe_match", "function_define": "    expect(len(matches)) == 1\n    instance = matches[0]\n    expect(instance.kind) == 'spam'", "piece": "instance = matches[0]"}
{"function_name": "describe_load", "function_define": "    instance.__mapper__.create()\n    utilities.load(instance)\n    with expect.raises(TypeError):", "piece": "utilities.load(instance)"}
{"function_name": "describe_save", "function_define": "    utilities.save(instance)\n    instance.__mapper__.create()\n    utilities.save(instance)", "piece": "instance.__mapper__.create()"}
{"function_name": "describe_delete", "function_define": "    utilities.delete(instance)\n    with expect.raises(TypeError):\n    utilities.delete(Mock)", "piece": "with expect.raises(TypeError):"}
{"function_name": "with_string", "function_define": "    expect(len(matches)) == 1\n    instance = matches[0]\n    expect(instance.kind) == 'egg'", "piece": "instance = matches[0]"}
{"function_name": "with_self_string", "function_define": "    expect(len(matches)) == 1\n    instance = matches[0]\n    expect(instance.kind) == 'spam'", "piece": "instance = matches[0]"}
{"function_name": "test_epoch", "function_define": "    with torch.no_grad():\n    for metric in metrics:\n    metric.reset()", "piece": "for metric in metrics:"}
{"function_name": "get_cfgInfo", "function_define": "    cp.read(ModuleObj.get_cmpPath())\n    keys = cp.options('GPIO_FREQ')\n    for key in keys:", "piece": "keys = cp.options('GPIO_FREQ')"}
{"function_name": "gen_cFile", "function_define": "    gen_str = ''\n    gen_str += self.fill_cFile()\n    fp.write(gen_str)", "piece": "gen_str += self.fill_cFile()"}
{"function_name": "gen_specFiles", "function_define": "    self.gen_pinFunc()\n    self.gen_pinCtrl()\n    self.gen_scpUsage()", "piece": "self.gen_pinCtrl()"}
{"function_name": "gen_pinFunc", "function_define": "    gen_str = ''\n    fp.write(gen_str)\n    fp.close()", "piece": "fp.write(gen_str)"}
{"function_name": "gen_pinCtrl", "function_define": "    gen_str = ''\n    fp.write(gen_str)\n    fp.close()", "piece": "fp.write(gen_str)"}
{"function_name": "gen_scpUsage", "function_define": "    gen_str = ''\n    gen_str += self.fill_cFile()\n    fp.write(gen_str)", "piece": "gen_str += self.fill_cFile()"}
{"function_name": "gen_mapDtsi", "function_define": "    gen_str = ''\n    fp.write(gen_str)\n    fp.close()", "piece": "fp.write(gen_str)"}
{"function_name": "fill_hFile", "function_define": "    temp_list = []\n    num = value.get_smtNum()\n    if num in temp_list or num < 0:", "piece": "num = value.get_smtNum()"}
{"function_name": "fill_cFile", "function_define": "    gen_str = ''\n    continue\n    if value.get_eintMode():", "piece": "continue"}
{"function_name": "fill_dtsiFile", "function_define": "    gen_str = '&pio {\\n\\n'\n    mode = value.get_defMode()\n    if self.__gpio_column_enable:", "piece": "mode = value.get_defMode()"}
{"function_name": "timefile2netcdf", "function_define": "    NetCDF tms file.\n    import time, calendar\n    if file_text[-4:] != '.txt':", "piece": "import time, calendar"}
{"function_name": "write_obj", "function_define": "    import os.path\n    if ext == '.obj':\n    FN = filename", "piece": "if ext == '.obj':"}
{"function_name": "_count_data_rows", "function_define": "    lines = 0\n    last_pos = 0\n    lines += 1", "piece": "last_pos = 0"}
{"function_name": "check_alarm_desc", "function_define": "    if not alarm_desc:\n    if redis.ttl(key) > 0:\n    except BaseException:", "piece": "if redis.ttl(key) > 0:"}
{"function_name": "add_order", "function_define": "    dish_price = add_sub_menu.price\n    dish.save()\n    get_dishes = Dish.objects.all()", "piece": "dish.save()"}
{"function_name": "home_delivery", "function_define": "    if request.method == 'POST':\n    if home_form.is_valid():\n    homes.save()", "piece": "if home_form.is_valid():"}
{"function_name": "mail_order", "function_define": "    user = Order.objects.get(pk=pk)\n    name = user.user\n    email_send = user.user_email", "piece": "name = user.user"}
{"function_name": "encode_node", "function_define": "    Node record format:\n    Total: 13 bytes\n    assert label_id >= 0", "piece": "Total: 13 bytes"}
{"function_name": "encode_label", "function_define": "    Label record format:\n    Total: 5 bytes\n    assert dynamic_id >= 0", "piece": "Total: 5 bytes"}
{"function_name": "encode_property", "function_define": "    Property record format:\n    Total: 13 bytes\n    assert key_id >= 0", "piece": "Total: 13 bytes"}
{"function_name": "list_databases", "function_define": "    if not databases:\n    print('no databases')\n    for db in databases:", "piece": "print('no databases')"}
{"function_name": "start_game", "function_define": "    first = self.players[0]\n    self.bot_game()\n    if first.player_type == 'bot':", "piece": "self.bot_game()"}
{"function_name": "human_game", "function_define": "    self.UI.wn.onclick(None)\n    pos = self.get_position(x, y)\n    player = self.players[0]", "piece": "pos = self.get_position(x, y)"}
{"function_name": "bot_game", "function_define": "    every time.\n    while None in self.board:\n    self.end_game(self.players[0])", "piece": "while None in self.board:"}
{"function_name": "human_bot_game", "function_define": "    self.UI.wn.onclick(None)\n    for player in self.players:\n    self.take_turn(player, usr_pos)", "piece": "for player in self.players:"}
{"function_name": "bot_take_turn", "function_define": "    the minimax algorithm.\n    self.minimax_calls = 0\n    self.take_turn(player, pos)", "piece": "self.minimax_calls = 0"}
{"function_name": "end_game", "function_define": "    if winner == 'tie':\n    self.ties += 1\n    msg = 'Tie Game'", "piece": "self.ties += 1"}
{"function_name": "dns_test", "function_define": "    protocol = 'UDP'\n    if use_tcp:\n    protocol = 'TCP'", "piece": "if use_tcp:"}
{"function_name": "_resize_img", "function_define": "    img - image as numpy array (cv2)\n    size = img.shape\n    max_dim = max(size)", "piece": "size = img.shape"}
{"function_name": "generate_comment", "function_define": "    print('generating comments ...')\n    gen_comments = []\n    text_similarities = []", "piece": "gen_comments = []"}
{"function_name": "getDataFile", "function_define": "    if mustExist:\n    if not os.path.isfile(file):\n    file = ''", "piece": "if not os.path.isfile(file):"}
{"function_name": "_container_data", "function_define": "    fs = None\n    for sp in pools:\n    fs = sp.get(self._id)", "piece": "for sp in pools:"}
{"function_name": "check_and_repair", "function_define": "    while job.running:\n    time.sleep(10)\n    result = job.get()", "piece": "time.sleep(10)"}
{"function_name": "get_initial", "function_define": "    type_id = self.kwargs['type_id']\n    key = self.kwargs['key']\n    except Exception:", "piece": "key = self.kwargs['key']"}
{"function_name": "make_lineage", "function_define": "    assert child\n    assert parent\n    assert name", "piece": "assert parent"}
{"function_name": "interpreter", "function_define": "    raise ValueError(msg)\n    cle = dic_masques['cle'].cle\n    salle = personnage.salle", "piece": "cle = dic_masques['cle'].cle"}
{"function_name": "setup_axes", "function_define": "    fig.add_axes(ax)\n    ax.set_ylim(0, 20)\n    ax.set_xlim(0, 1.5)", "piece": "ax.set_ylim(0, 20)"}
{"function_name": "dataset_list", "function_define": "    Parameters\n    data_path : str\n    Base path for the datasets", "piece": "data_path : str"}
{"function_name": "dataset_factory", "function_define": "    Parameters\n    dataset_class_name : str\n    Class name", "piece": "dataset_class_name : str"}
{"function_name": "audio_files", "function_define": "    Parameters\n    filelist : list\n    File list with absolute paths", "piece": "filelist : list"}
{"function_name": "audio_file_count", "function_define": "    Parameters\n    filecount : int\n    Number of audio files", "piece": "filecount : int"}
{"function_name": "meta_count", "function_define": "    Parameters\n    meta_item_count : int\n    Meta data item count", "piece": "meta_item_count : int"}
{"function_name": "error_meta", "function_define": "    Parameters\n    IOError:\n    audio error meta file not found.", "piece": "IOError:"}
{"function_name": "error_meta_count", "function_define": "    Parameters\n    meta_item_count : int\n    Meta data item count", "piece": "meta_item_count : int"}
{"function_name": "fold_count", "function_define": "    Parameters\n    fold_count : int\n    Number of folds", "piece": "fold_count : int"}
{"function_name": "event_labels", "function_define": "    Parameters\n    labels : list\n    labels.sort()", "piece": "labels : list"}
{"function_name": "audio_tags", "function_define": "    Parameters\n    labels : list\n    tags = []", "piece": "labels : list"}
{"function_name": "audio_tag_count", "function_define": "    Parameters\n    audio_tag_count : int\n    Number of unique audio tags", "piece": "audio_tag_count : int"}
{"function_name": "_get_filelist", "function_define": "    Parameters\n    exclude_dirs : list of str\n    Default value \"[]\"", "piece": "exclude_dirs : list of str"}
{"function_name": "file_meta", "function_define": "    Parameters\n    filename : str\n    File name", "piece": "filename : str"}
{"function_name": "file_error_meta", "function_define": "    Parameters\n    filename : str\n    File name", "piece": "filename : str"}
{"function_name": "synthesize", "function_define": "    if self.log_system_progress:\n    os.makedirs(mixture_path)\n    os.makedirs(mixture_audio_path)", "piece": "os.makedirs(mixture_path)"}
{"function_name": "_after_extract", "function_define": "    Parameters\n    finally:\n    annotation_file_handle.close()", "piece": "finally:"}
{"function_name": "progress_hook", "function_define": "    last_b = [0]\n    b  : int, optional\n    bsize  : int, optional", "piece": "b  : int, optional"}
{"function_name": "versions", "function_define": "    if len(list1) < len(list2):\n    if i > list2[index]:\n    elif i < list2[index]:", "piece": "if i > list2[index]:"}
{"function_name": "test_onehot_auto", "function_define": "    strategy1 = None\n    strategy2 = None\n    strategy3 = None", "piece": "strategy2 = None"}
{"function_name": "test_sea_level", "function_define": "    expected_h = 0.0\n    expected_T = _C2K(15)\n    expected_p = sp.constants.atm", "piece": "expected_T = _C2K(15)"}
{"function_name": "dict_to_hdf", "function_define": "    to a .hdf5 file\n    with h5py.File(fname, 'w') as f:\n    for key, val in d.iteritems():", "piece": "with h5py.File(fname, 'w') as f:"}
{"function_name": "hdf_to_dict", "function_define": "    with h5py.File(fname, 'r') as f:\n    if isinstance(val, h5py.Group):\n    d[key] = _load_to_dict(val)", "piece": "if isinstance(val, h5py.Group):"}
{"function_name": "test_hdfio", "function_define": "    dict_to_hdf(f.name, d)\n    d2 = hdf_to_dict(f.name)\n    self.assertItemsEqual(d, d2)", "piece": "d2 = hdf_to_dict(f.name)"}
{"function_name": "_dict_to_group", "function_define": "    for key, val in d.iteritems():\n    if isinstance(val, dict):\n    grp = root.create_group(key)", "piece": "if isinstance(val, dict):"}
{"function_name": "_load_to_dict", "function_define": "    if isinstance(val, h5py.Group):\n    d[key] = _load_to_dict(val)\n    d[key] = val.value", "piece": "d[key] = _load_to_dict(val)"}
{"function_name": "getConfig", "function_define": "    if os.getenv('env') == 'prod':\n    print('active config : prod')\n    print('active config : dev')", "piece": "print('active config : prod')"}
{"function_name": "NetworkScannner", "function_define": "    if len(self.ip) == 0:\n    network = '192.168.100.1/24'\n    network = self.ip + '/24'", "piece": "network = '192.168.100.1/24'"}
{"function_name": "sensorCheck", "function_define": "    if userNear == True:\n    if self.state == 'on':\n    self.turn_on()", "piece": "if self.state == 'on':"}
{"function_name": "regularBehaviour", "function_define": "    if userNear == True:\n    if self.state == 'on':\n    self.turn_on()", "piece": "if self.state == 'on':"}
{"function_name": "detect_type", "function_define": "    if name in number_names:\n    if name == 'options':\n    if name == 'config':", "piece": "if name == 'options':"}
{"function_name": "expand_region", "function_define": "    begin = region.begin()\n    end = region.end()\n    for x in range(num_lines):", "piece": "end = region.end()"}
{"function_name": "try_import_name", "function_define": "    if not paths:\n    paths = [name + '.js']\n    if paths:", "piece": "paths = [name + '.js']"}
{"function_name": "show_lint_output", "function_define": "    lines = output.splitlines()\n    current_file = None\n    for line in lines:", "piece": "current_file = None"}
{"function_name": "thread_target", "function_define": "    global abort_search\n    for repo in repos:\n    for name in files:", "piece": "for repo in repos:"}
{"function_name": "on_loaded", "function_define": "    to = entry['to']\n    to_region = to\n    new_view.sel().clear()", "piece": "to_region = to"}
{"function_name": "move_figure", "function_define": "    if backend == 'TkAgg':\n    elif backend == 'WXAgg':\n    window.SetPosition((x, y))", "piece": "elif backend == 'WXAgg':"}
{"function_name": "get_source_code", "function_define": "    code = ''\n    with open(get_file(), 'r') as f:\n    file = f.readlines()", "piece": "with open(get_file(), 'r') as f:"}
{"function_name": "__take_longuest", "function_define": "    id_to_move = 0\n    max_step = 0\n    id_to_move = s.globals['id']", "piece": "max_step = 0"}
{"function_name": "edit_035_for_ASP", "function_define": "    asp_id = record['001'].value()\n    if '003' in record:\n    tcn_source = record['040']['a']", "piece": "if '003' in record:"}
{"function_name": "osd_tree", "function_define": "    for k, v in loaded_json.items():\n    if v == 'true':\n    loaded_json[k] = True", "piece": "if v == 'true':"}
{"function_name": "osd_status_check", "function_define": "    except TypeError:\n    for k, v in loaded_json.items():\n    if v == 'true':", "piece": "for k, v in loaded_json.items():"}
{"function_name": "catch_osd_errors", "function_define": "    report them back to the user.\n    full = status.get('full', False)\n    if osds > up_osds:", "piece": "full = status.get('full', False)"}
{"function_name": "create_osd", "function_define": "    if dmcrypt:\n    args.append('--dmcrypt')\n    if storetype == 'bluestore':", "piece": "args.append('--dmcrypt')"}
{"function_name": "disk_zap", "function_define": "    hostname = args.host\n    for disk in args.disk:\n    if not disk or not hostname:", "piece": "for disk in args.disk:"}
{"function_name": "disk_list", "function_define": "    command = ['fdisk', '-l']\n    for hostname in args.host:\n    for line in out:", "piece": "for hostname in args.host:"}
{"function_name": "osd_list", "function_define": "    for hostname in args.host:\n    if args.debug:\n    distro.conn.exit()", "piece": "if args.debug:"}
{"function_name": "make_disk", "function_define": "    Manage disks on a remote host.\n    disk_parser.required = True\n    parser.set_defaults(func=disk)", "piece": "disk_parser.required = True"}
{"function_name": "is_supported", "function_define": "    global _supported\n    if _supported is not None:\n    import lupa", "piece": "if _supported is not None:"}
{"function_name": "run_in_sandbox", "function_define": "    if result is not True:\n    ok, res = result\n    raise lupa.LuaError(res)", "piece": "ok, res = result"}
{"function_name": "lua2python", "function_define": "    are returned as lupa wrappers.\n    if depth <= 0:\n    if isinstance(obj, dict):", "piece": "if depth <= 0:"}
{"function_name": "python2lua", "function_define": "    can't access otherwise.\n    if depth <= 0:\n    if isinstance(obj, PyResult):", "piece": "if depth <= 0:"}
{"function_name": "update_hr", "function_define": "    instance = workitem.instance\n    if leaverequest.reason_denial:\n    raise Exception('date error')", "piece": "if leaverequest.reason_denial:"}
{"function_name": "shutdown", "function_define": "    self.active = False\n    self.exit.set()\n    if self.thread:", "piece": "self.exit.set()"}
{"function_name": "get_svg_settings", "function_define": "    get_arg = self.request.args.get\n    add_rect = ''\n    width = get_arg('width') or 100", "piece": "add_rect = ''"}
{"function_name": "add_arrow", "function_define": "    if color is None:\n    color = line.get_color()\n    xdata = line.get_xdata()", "piece": "color = line.get_color()"}
{"function_name": "evaluation_main", "function_define": "    class object\n    print(individual_with_name_dict)\n    print('AGGREGATING RESULTS')", "piece": "print(individual_with_name_dict)"}
{"function_name": "update_doctypes", "function_define": "    for f in dt.fields:\n    print(f.parent, f.fieldname)\n    f.fieldtype = 'Text Editor'", "piece": "print(f.parent, f.fieldname)"}
{"function_name": "get_site_info", "function_define": "    domain = None\n    if not company:\n    if company:", "piece": "if not company:"}
{"function_name": "youtube_search", "function_define": "    videos = []\n    videos.append(search_result)\n    except Exception:", "piece": "videos.append(search_result)"}
{"function_name": "fred_crawler", "function_define": "    fname = series + 'txt'\n    with open(fname, 'wb') as f:\n    f.write(r.content)", "piece": "with open(fname, 'wb') as f:"}
{"function_name": "get_loader", "function_define": "    Parameters\n    dataset : gnnff.data.Celldata\n    dataset of cell.", "piece": "dataset : gnnff.data.Celldata"}
{"function_name": "test_reset_index", "function_define": "    dbs[10] = 1\n    dbs[10] = 0\n    assert not dbs[10]", "piece": "dbs[10] = 0"}
{"function_name": "test_resize", "function_define": "    dbs.resize(20)\n    assert len(dbs) == 20\n    dbs[8] = 1", "piece": "assert len(dbs) == 20"}
{"function_name": "test_clear", "function_define": "    dbs[10] = 1\n    dbs.clear()\n    assert len(dbs) == 0", "piece": "dbs.clear()"}
{"function_name": "publish_manifest", "function_define": "    manifest_json = yaml.load(f)\n    except Exception:\n    yaml.dump(manifest_json, f)", "piece": "except Exception:"}
{"function_name": "getTitle", "function_define": "    html = urlopen(url)\n    except HTTPError as e:\n    title = bsObj.h1", "piece": "except HTTPError as e:"}
{"function_name": "PrepareTreeData", "function_define": "    m = date[0:2]\n    d = date[3:5]\n    y = date[-4:]", "piece": "d = date[3:5]"}
{"function_name": "map_date", "function_define": "    m = date[0:2]\n    d = date[3:5]\n    y = date[-4:]", "piece": "d = date[3:5]"}
{"function_name": "xnmt_evaluate", "function_define": "    is_multi = False\n    if isinstance(ref_file, str):\n    elif len(ref_file) == 1:", "piece": "if isinstance(ref_file, str):"}
{"function_name": "draw_polygon", "function_define": "    ret = img.copy()\n    poly = img.copy()\n    h, w = poly.shape[:2]", "piece": "poly = img.copy()"}
{"function_name": "draw_polygons", "function_define": "    ret = img.copy()\n    for polygon in polygons:\n    ret = draw_polygon(ret, polygon)", "piece": "for polygon in polygons:"}
{"function_name": "inheritance", "function_define": "    ret = copy.deepcopy(x)\n    pos = np.random.randint(len(x))\n    ret[pos:] = y[pos:]", "piece": "pos = np.random.randint(len(x))"}
{"function_name": "run_main", "function_define": "    sys.exit(main(sys.argv))\n    except Exception as e:\n    sys.exit(1)", "piece": "except Exception as e:"}
{"function_name": "train_imitator", "function_define": "    actions = gameplay_df['action']\n    learning_rate = 0.05\n    momentum = 0.1", "piece": "learning_rate = 0.05"}
{"function_name": "install_node", "function_define": "    Download and install algod.\n    os_type = os_util.get_os_type()\n    if channel == 'test':", "piece": "os_type = os_util.get_os_type()"}
{"function_name": "getAllCameras", "function_define": "    cameras = []\n    if isinstance(node, Camera):\n    cameras.append(node)", "piece": "if isinstance(node, Camera):"}
{"function_name": "setActiveCamera", "function_define": "    camera = self.findCamera(name)\n    if self._active_camera:\n    self._active_camera = camera", "piece": "if self._active_camera:"}
{"function_name": "_onFileChanged", "function_define": "    if modified_nodes:\n    self._reload_message.hide()\n    self._reload_message.show()", "piece": "self._reload_message.hide()"}
{"function_name": "_reloadNodes", "function_define": "    if action != 'reload':\n    self._reload_message.hide()\n    for node in nodes:", "piece": "self._reload_message.hide()"}
{"function_name": "write_css", "function_define": "    if len(images) > 0:\n    if idx < len(images):\n    file.write(',\\n')", "piece": "if idx < len(images):"}
{"function_name": "test_hex", "function_define": "    hex_ = decimal_to_hex(value)\n    number = hex_to_decimal(hex_)\n    self.assertEqual(number, value)", "piece": "number = hex_to_decimal(hex_)"}
{"function_name": "textEncoder", "function_define": "    lookUpDictionary = {}\n    lookupValue = 1\n    for textVector in textVectors:", "piece": "lookupValue = 1"}
{"function_name": "data_repartition", "function_define": "    folders = []\n    if zord == 'main_zord':\n    for classe in classes:", "piece": "if zord == 'main_zord':"}
{"function_name": "weighter", "function_define": "    maximum = max(folders)\n    class_weight = {}\n    for i, el in enumerate(folders):", "piece": "class_weight = {}"}
{"function_name": "one4all_labeller", "function_define": "    obj_map = []\n    folders = listdir_nohidden(path)\n    for folder in folders:", "piece": "folders = listdir_nohidden(path)"}
{"function_name": "labeller", "function_define": "    path += '/train_set'\n    err_compt = 0\n    for classe in classes_names:", "piece": "err_compt = 0"}
{"function_name": "label_reader", "function_define": "    f = open('../files/labels.txt')\n    lines = f.readlines()\n    rep = {}", "piece": "lines = f.readlines()"}
{"function_name": "int_labeller", "function_define": "    dic = label_reader(label)\n    f.write(str(integer_labels))\n    f.close()", "piece": "f.write(str(integer_labels))"}
{"function_name": "int_reader", "function_define": "    txt = f.read()\n    dic = {}\n    nb_found = 0", "piece": "dic = {}"}
{"function_name": "remove_comments", "function_define": "    Comment */\n    s = match.group(0)\n    if s[0] == '/':", "piece": "s = match.group(0)"}
{"function_name": "grid_cell_to_xy", "function_define": "    if not 0 <= pos <= num_cells:\n    x = pos // grid_size\n    y = pos % grid_size", "piece": "x = pos // grid_size"}
{"function_name": "get_snippage", "function_define": "    key = self.request.get('key')\n    if not key:\n    snippage = None", "piece": "if not key:"}
{"function_name": "increment_views", "function_define": "    snippage = db.get(key)\n    snippage.views += 1\n    snippage.put()", "piece": "snippage.views += 1"}
{"function_name": "plot_loss", "function_define": "    plt.figure()\n    plt.xlim(0, n_iter)\n    plt.xlabel('iteration')", "piece": "plt.xlim(0, n_iter)"}
{"function_name": "calcular_tamanio", "function_define": "    global r_width, r_height\n    r_width = width * 0.6\n    r_height = height * 0.9", "piece": "r_width = width * 0.6"}
{"function_name": "create_workspace", "function_define": "    session = self.create_session()\n    session.add(new_workspace)\n    session.commit()", "piece": "session.add(new_workspace)"}
{"function_name": "delete_workspace", "function_define": "    session = self.create_session()\n    if workspace is None:\n    workspace.active = False", "piece": "if workspace is None:"}
{"function_name": "upsert_node", "function_define": "    session = self.create_session()\n    if 'id' in node_dict:\n    n.active = False", "piece": "if 'id' in node_dict:"}
{"function_name": "upsert_edge", "function_define": "    session = self.create_session()\n    from_node_id = edge_data['from']\n    to_node_id = edge_data['to']", "piece": "from_node_id = edge_data['from']"}
{"function_name": "min_smaller_max", "function_define": "    min_p = data['min_percentile']\n    max_p = data['max_percentile']\n    if min_p >= max_p:", "piece": "max_p = data['max_percentile']"}
{"function_name": "refresh_views", "function_define": "    adapter = self.adapter\n    item_mapping = self.item_mapping\n    item_mapping[i] = item", "piece": "item_mapping = self.item_mapping"}
{"function_name": "set_items", "function_define": "    adapter = self.adapter\n    adapter.setItemCount(len(items))\n    adapter.notifyDataSetChanged()", "piece": "adapter.setItemCount(len(items))"}
{"function_name": "set_arrangement", "function_define": "    ctx = self.get_context()\n    d = self.declaration\n    reverse = False", "piece": "d = self.declaration"}
{"function_name": "recycle_view", "function_define": "    d = self.declaration\n    d.index = position\n    d.index = -1", "piece": "d.index = position"}
{"function_name": "check_heap", "function_define": "    iterations = 1000\n    for _ in range(iterations):\n    if reverse:", "piece": "for _ in range(iterations):"}
{"function_name": "sparse_to_tuple", "function_define": "    sparse_mx = sparse_mx.tocoo()\n    values = sparse_mx.data\n    shape = sparse_mx.shape", "piece": "values = sparse_mx.data"}
{"function_name": "parse_index_file", "function_define": "    index = []\n    for line in open(filename):\n    index.append(int(line.strip()))", "piece": "for line in open(filename):"}
{"function_name": "process_feature", "function_define": "    dic = {}\n    with open(dic_p, 'r') as f:\n    for line in f:", "piece": "with open(dic_p, 'r') as f:"}
{"function_name": "load_pdata", "function_define": "    objects = []\n    for i in xrange(len(names)):\n    if dataset_str == 'citeseer':", "piece": "for i in xrange(len(names)):"}
{"function_name": "show_type", "function_define": "    if t == 'string':\n    elif t == 'character':\n    elif t == 'boolean':", "piece": "elif t == 'character':"}
{"function_name": "capdl_sorter", "function_define": "    translator does.\n    if isinstance(obj, Frame):\n    elif isinstance(obj, Untyped):", "piece": "if isinstance(obj, Frame):"}
{"function_name": "recurse_structs", "function_define": "    struct = attribute.type\n    structs = []\n    structs.append((struct, values))", "piece": "structs = []"}
{"function_name": "energy_func_std", "function_define": "    Parameters:\n    related to descriptors.\n    k1 = descr1_red.shape[0]", "piece": "related to descriptors."}
{"function_name": "grad_energy_std", "function_define": "    Parameters:\n    related to descriptors.\n    k1 = descr1_red.shape[0]", "piece": "related to descriptors."}
{"function_name": "test_nesting", "function_define": "    async def f1():\n    async def f2():\n    self.assertEqual(result, 42)", "piece": "async def f2():"}
{"function_name": "test_contextvars", "function_define": "    var = ContextVar('var')\n    var.set(0)\n    async def set_val():", "piece": "var.set(0)"}
{"function_name": "get_proposal", "function_define": "    random.shuffle(vegetables)\n    for v in vegetables:\n    garden.execute()", "piece": "for v in vegetables:"}
{"function_name": "textset_yielder", "function_define": "    id, txt = line.split('\\t', 1)\n    print(line)\n    yield (id, txt)", "piece": "print(line)"}
{"function_name": "textset_to_srp", "function_define": "    an SRP collection as a block.\n    import SRP\n    hasher = SRP.SRP(dim=dim)", "piece": "import SRP"}
{"function_name": "repair_file", "function_define": "    if self.mode != 'a':\n    self._preload_metadata()\n    self.nrows = 0", "piece": "self._preload_metadata()"}
{"function_name": "_rewrite_header", "function_define": "    are stored.)\n    self.file.seek(0)\n    self.file.seek(0, 2)", "piece": "self.file.seek(0)"}
{"function_name": "batch_yielder", "function_define": "    yielding.\n    labels = [None] * size\n    j = i % size", "piece": "labels = [None] * size"}
{"function_name": "to_matrix", "function_define": "    labels = []\n    labels.append(id)\n    if unit_length:", "piece": "labels.append(id)"}
{"function_name": "_read_row_name", "function_define": "    buffer = []\n    while True:\n    ch = self.file.read(1)", "piece": "while True:"}
{"function_name": "_regex_search", "function_define": "    self._build_offset_lookup()\n    values.sort()\n    for i, k in values:", "piece": "values.sort()"}
{"function_name": "find_prefix", "function_define": "    to prefix.\n    self.file.flush()\n    assert sep == self._prefix_sep", "piece": "self.file.flush()"}
{"function_name": "_read_binary_row", "function_define": "    binary_len = self.binary_len\n    self.pos = self.file.tell()\n    if self.slice_and_dice:", "piece": "self.pos = self.file.tell()"}
{"function_name": "MakeBoundingBox", "function_define": "    newbox = BoundingBoxXYZ()\n    newbox.Max = max.ToXyz()\n    newbox.Min = min.ToXyz()", "piece": "newbox.Max = max.ToXyz()"}
{"function_name": "construct_mst", "function_define": "    visited = []\n    adj_mat = self.adj_mat\n    vertices = adj_mat.shape[0]", "piece": "adj_mat = self.adj_mat"}
{"function_name": "generate_hat", "function_define": "    if url == None:\n    os.mkdir(os.getcwd() + '/temp/')\n    print('making dir here')", "piece": "os.mkdir(os.getcwd() + '/temp/')"}
{"function_name": "generate_nuzzle", "function_define": "    retpath = 'fpath'\n    box_author = (360, 130)\n    box_mentioned = (690, 45)", "piece": "box_author = (360, 130)"}
{"function_name": "play_roll", "function_define": "    spaces, scores, turn = state\n    new_score = score + new_space\n    new_spaces = list(spaces)", "piece": "new_score = score + new_space"}
{"function_name": "createList", "function_define": "    for i in fruitsList:\n    print('Value : ', i)\n    fruitsList.append('kiwi')", "piece": "print('Value : ', i)"}
{"function_name": "_init_window", "function_define": "    self.setWindowTitle(self.title)\n    self._create_layout()\n    vbox = QVBoxLayout()", "piece": "self._create_layout()"}
{"function_name": "_create_layout", "function_define": "    hbox_layout = QHBoxLayout()\n    btn_soccer.setMinimumHeight(40)\n    btn_tennis.setMinimumHeight(40)", "piece": "btn_soccer.setMinimumHeight(40)"}
{"function_name": "train_init", "function_define": "    loss_fn = self.loss_fn_creator()\n    if self.device is not None:\n    self.model.to(self.device)", "piece": "if self.device is not None:"}
{"function_name": "action_start", "function_define": "    chat_id = message.chat.id\n    name += ' {}'.format(last_name)\n    menu = '/start'", "piece": "name += ' {}'.format(last_name)"}
{"function_name": "action_help", "function_define": "    chat_id = message.chat.id\n    name += ' {}'.format(last_name)\n    menu = '/help'", "piece": "name += ' {}'.format(last_name)"}
{"function_name": "action_testbot", "function_define": "    chat_id = message.chat.id\n    name += ' {}'.format(last_name)\n    menu = '/testbot'", "piece": "name += ' {}'.format(last_name)"}
{"function_name": "action_about", "function_define": "    chat_id = message.chat.id\n    name += ' {}'.format(last_name)\n    menu = '/about'", "piece": "name += ' {}'.format(last_name)"}
{"function_name": "action_date", "function_define": "    chat_id = message.chat.id\n    name += ' {}'.format(last_name)\n    menu = '/date'", "piece": "name += ' {}'.format(last_name)"}
{"function_name": "kirim_file", "function_define": "    chat_id = message.chat.id\n    name += ' {}'.format(last_name)\n    menu = 'send document'", "piece": "name += ' {}'.format(last_name)"}
{"function_name": "echo_message", "function_define": "    usermsg = message.text\n    name += ' {}'.format(last_name)\n    menu = 'default'", "piece": "name += ' {}'.format(last_name)"}
{"function_name": "sort_data", "function_define": "    new_data = []\n    for message in data:\n    new_data.append(message)", "piece": "for message in data:"}
{"function_name": "test_gini_coeff", "function_define": "    G = 1 / (2*a - 1)\n    G = 1 - 2**(-1/a)\n    n = 10000", "piece": "G = 1 - 2**(-1/a)"}
{"function_name": "test_rank_size", "function_define": "    a Pareto distribution.\n    should be a straight line.\n    of the size of the distribution.", "piece": "should be a straight line."}
{"function_name": "flatDirectory", "function_define": "    for file in listdir(dir):\n    fileName = join(dir, file)\n    if isdir(fileName):", "piece": "fileName = join(dir, file)"}
{"function_name": "insert_customer", "function_define": "    conn = self.create_connection()\n    c = conn.cursor()\n    conn.commit()", "piece": "c = conn.cursor()"}
{"function_name": "read_all", "function_define": "    conn = self.create_connection()\n    c = conn.cursor()\n    c.execute(query)", "piece": "c = conn.cursor()"}
{"function_name": "update_table", "function_define": "    conn = self.create_connection()\n    c = conn.cursor()\n    conn.commit()", "piece": "c = conn.cursor()"}
{"function_name": "delete_table", "function_define": "    conn = self.create_connection()\n    c = conn.cursor()\n    c.execute(query)", "piece": "c = conn.cursor()"}
{"function_name": "get_impfuzzy", "function_define": "    impstrs = []\n    exts = ['ocx', 'sys', 'dll']\n    if isinstance(entry.dll, bytes):", "piece": "exts = ['ocx', 'sys', 'dll']"}
{"function_name": "aggregator", "function_define": "    out = dict()\n    out['magic'] = magic_sig\n    fformat = arch = None", "piece": "out['magic'] = magic_sig"}
{"function_name": "setup_platform", "function_define": "    name = config.get(CONF_NAME)\n    request = requests.get(address)\n    request.encoding = 'utf-8'", "piece": "request = requests.get(address)"}
{"function_name": "_render_rows", "function_define": "    width = 10\n    for row in self.rows:\n    if w > width:", "piece": "for row in self.rows:"}
{"function_name": "_render_cols", "function_define": "    height = self.font_size * 2\n    x, y = self.insert\n    width, _ = self.size", "piece": "x, y = self.insert"}
{"function_name": "_set_label", "function_define": "    v = round(v, 2)\n    except Exception:\n    if show_value == 'latex':", "piece": "except Exception:"}
{"function_name": "check_image", "function_define": "    global exe_directory\n    global total_sprites_tmc\n    global total_sprites_wasteful", "piece": "global total_sprites_tmc"}
{"function_name": "get_serve_uri", "function_define": "    eth = config.get('eth', 'eth1')\n    if rest_host.endswith('/'):\n    rest_host = rest_host[:-1]", "piece": "if rest_host.endswith('/'):"}
{"function_name": "sequence_slicer", "function_define": "    allele_count = {}\n    allele_count[allele] = 0\n    allele_length = len(allele)", "piece": "allele_count[allele] = 0"}
{"function_name": "find_match", "function_define": "    sameness = 0\n    sameness += 1\n    match = str(person_values[0])", "piece": "sameness += 1"}
{"function_name": "test_set", "function_define": "    assert len(self.store) == 0\n    assert 'test' not in self.store\n    for value in ('', [], {}):", "piece": "assert 'test' not in self.store"}
{"function_name": "test_set_get", "function_define": "    assert len(self.store) == 0\n    assert 'test' not in self.store\n    assert 'test' in self.store", "piece": "assert 'test' not in self.store"}
{"function_name": "print_result", "function_define": "    reset_parser()\n    test_data = [(img.flatten(),)]\n    parameters_file = self.args.w", "piece": "test_data = [(img.flatten(),)]"}
{"function_name": "cacheable", "function_define": "    if kwargs.get('overwrite'):\n    if update_with:\n    if not result:", "piece": "if update_with:"}
{"function_name": "now_playing_info", "function_define": "    global sp, playlist_uri_to_name\n    track = sp.currently_playing()\n    if not track:", "piece": "track = sp.currently_playing()"}
{"function_name": "fetch_playlists", "function_define": "    if memory_playlists_cache:\n    if content:\n    formatted_playlists = []", "piece": "if content:"}
{"function_name": "play_track", "function_define": "    global sp\n    if 'tracks' in result:\n    logger.info('got tracks result')", "piece": "if 'tracks' in result:"}
{"function_name": "get_vserver", "function_define": "    Checks if vserver exists.\n    True if vserver found\n    False if vserver is not found", "piece": "True if vserver found"}
{"function_name": "modify_vserver", "function_define": "    if allowed_protocols:\n    if aggr_list:\n    for aggr in self.aggr_list:", "piece": "if aggr_list:"}
{"function_name": "make_move", "function_define": "    response = ['']\n    while response[0] != 'bestmove':\n    chosen = response[1]", "piece": "while response[0] != 'bestmove':"}
{"function_name": "check_diagonal", "function_define": "    Parameters\n    diagonal : `int`\n    The value to check.", "piece": "diagonal : `int`"}
{"function_name": "check_trilist", "function_define": "    Parameters\n    shape : `menpo.shape.TriMesh`\n    The transform object.", "piece": "shape : `menpo.shape.TriMesh`"}
{"function_name": "check_scales", "function_define": "    Parameters\n    The value to check.\n    The scales in a list.", "piece": "The value to check."}
{"function_name": "check_callable", "function_define": "    Parameters\n    n_scales : `int`\n    The number of scales.", "piece": "n_scales : `int`"}
{"function_name": "check_max_iters", "function_define": "    Parameters\n    The value to check.\n    n_scales : `int`", "piece": "The value to check."}
{"function_name": "check_sampling", "function_define": "    Parameters\n    The value to check.\n    n_scales : `int`", "piece": "The value to check."}
{"function_name": "check_model", "function_define": "    the provided base `class`.\n    Parameters\n    model : `class`", "piece": "Parameters"}
{"function_name": "check_graph", "function_define": "    Parameters\n    The graph argument to check.\n    param_name : `str`", "piece": "The graph argument to check."}
{"function_name": "load_scenes", "function_define": "    with open(path, 'r') as f:\n    result = []\n    for line in f:", "piece": "result = []"}
{"function_name": "equalize", "function_define": "    x_max = img.max()\n    s = img.size\n    h = np.zeros(256)", "piece": "s = img.size"}
{"function_name": "render_values", "function_define": "    text = Text()\n    if i > 0:\n    text.append(' \u00b7 ')", "piece": "if i > 0:"}
{"function_name": "GetSegmentOfUrl", "function_define": "    if not url:\n    if not prefix:\n    if not prefix.endswith('/'):", "piece": "if not prefix:"}
{"function_name": "sendMessages", "function_define": "    if not isFlood:\n    self.connectToWhatsapp()\n    self.verifyTime()", "piece": "self.connectToWhatsapp()"}
{"function_name": "sendFlood", "function_define": "    self.connectToWhatsapp()\n    self.verifyTime()\n    for _ in range(0, times):", "piece": "self.verifyTime()"}
{"function_name": "_define_fields_", "function_define": "    if total_bits != declared_bits:\n    cls['_named_fields_'] = []\n    cls['_layout_'] = OrderedDict()", "piece": "cls['_named_fields_'] = []"}
{"function_name": "bits_repr", "function_define": "    fields = []\n    if omit_padding:\n    names = self._named_fields_", "piece": "if omit_padding:"}
{"function_name": "test_definition", "function_define": "    x = bs(1, 2)\n    self.assertEqual(x.a, 1)\n    self.assertEqual(x.b, 2)", "piece": "self.assertEqual(x.a, 1)"}
{"function_name": "test_misuse", "function_define": "    bs(1, 2, b=3)\n    x = bs()\n    x.a = -1", "piece": "x = bs()"}
{"function_name": "takeCommand", "function_define": "    r = sr.Recognizer()\n    with sr.Microphone() as source:\n    print('Listening...')", "piece": "with sr.Microphone() as source:"}
{"function_name": "myCompare", "function_define": "    x = x.partition('a')[0]\n    y = y.partition('a')[0]\n    x = int(x)", "piece": "y = y.partition('a')[0]"}
{"function_name": "test_invalid_set", "function_define": "    msg = self.msg_cls()\n    msg.a = '123'\n    msg.a = 2 ** 70", "piece": "msg.a = '123'"}
{"function_name": "any_stock", "function_define": "    X = df.iloc[:, [1, 2, 3]]\n    y = df.iloc[:, [4]]\n    reg.fit(X, y)", "piece": "y = df.iloc[:, [4]]"}
{"function_name": "funcPoint", "function_define": "    siteNo = siteNoLst[iP]\n    dfPLst = list()\n    rmseLst = list()", "piece": "dfPLst = list()"}
{"function_name": "_handle_row", "function_define": "    text = row['text']\n    if text is None:\n    urls = extract_urls(text)", "piece": "if text is None:"}
{"function_name": "p_attribute", "function_define": "    p2 = self.sanitize_literal(p[2])\n    if p[3].value:\n    kind = p[3].kind", "piece": "if p[3].value:"}
{"function_name": "p_attribute_num", "function_define": "    if p[3].value:\n    kind = p[3].kind\n    path = [f'{p[2]}'] + p[3].path", "piece": "kind = p[3].kind"}
{"function_name": "_shuffle", "function_define": "    random.Random(0).shuffle(index)\n    random.Random(0).shuffle(index)\n    self.X_test = self.X_test[index]", "piece": "random.Random(0).shuffle(index)"}
{"function_name": "string_tokens", "function_define": "    for t in self._tokens:\n    if hasattr(t, 'string_tokens'):\n    yield from t.string_tokens", "piece": "if hasattr(t, 'string_tokens'):"}
{"function_name": "create_playlist", "function_define": "    form = PlaylistForm()\n    if request.method == 'POST':\n    if form.is_valid():", "piece": "if request.method == 'POST':"}
{"function_name": "update_playlist", "function_define": "    if request.method == 'POST':\n    if form.is_valid():\n    form.save()", "piece": "if form.is_valid():"}
{"function_name": "delete_playlist", "function_define": "    if request.method == 'POST':\n    playlist.delete()\n    context = {'item': playlist}", "piece": "playlist.delete()"}
{"function_name": "get_playlists", "function_define": "    if response.status_code != 200:\n    playlists_list = []\n    id = playlist_json['id']", "piece": "playlists_list = []"}
{"function_name": "get_songs", "function_define": "    if response.status_code != 200:\n    songs_list = []\n    for song_json in songs_dict:", "piece": "songs_list = []"}
{"function_name": "waitInfo", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "runStatus", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "repeatTriggerSet", "function_define": "    Parameters:\n    if result != RESULT_SUCCESS:\n    raise self.dwf.exception()", "piece": "if result != RESULT_SUCCESS:"}
{"function_name": "repeatTriggerGet", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "repeatInfo", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "repeatSet", "function_define": "    Parameters:\n    if result != RESULT_SUCCESS:\n    raise self.dwf.exception()", "piece": "if result != RESULT_SUCCESS:"}
{"function_name": "repeatGet", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "repeatStatus", "function_define": "    Running/Wait state cycles.\n    Parameters:\n    Returns:", "piece": "Parameters:"}
{"function_name": "masterSet", "function_define": "    Parameters:\n    Specify -1 to set all channels.\n    if result != RESULT_SUCCESS:", "piece": "Specify -1 to set all channels."}
{"function_name": "masterGet", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "triggerSourceSet", "function_define": "    Parameters:\n    if result != RESULT_SUCCESS:\n    raise self.dwf.exception()", "piece": "if result != RESULT_SUCCESS:"}
{"function_name": "triggerSourceGet", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "triggerSlopeSet", "function_define": "    Parameters:\n    if result != RESULT_SUCCESS:\n    raise self.dwf.exception()", "piece": "if result != RESULT_SUCCESS:"}
{"function_name": "triggerSlopeGet", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "idleInfo", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "limitationInfo", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "limitationSet", "function_define": "    Parameters:\n    if result != RESULT_SUCCESS:\n    raise self.dwf.exception()", "piece": "if result != RESULT_SUCCESS:"}
{"function_name": "limitationGet", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "nodeInfo", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "nodeEnableSet", "function_define": "    Parameters:\n    enable (bool): The enable flag.\n    if result != RESULT_SUCCESS:", "piece": "enable (bool): The enable flag."}
{"function_name": "nodeEnableGet", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "nodeFunctionInfo", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "nodeFunctionSet", "function_define": "    Parameters:\n    if result != RESULT_SUCCESS:\n    raise self.dwf.exception()", "piece": "if result != RESULT_SUCCESS:"}
{"function_name": "nodeFunctionGet", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "nodeFrequencySet", "function_define": "    Parameters:\n    if result != RESULT_SUCCESS:\n    raise self.dwf.exception()", "piece": "if result != RESULT_SUCCESS:"}
{"function_name": "nodeFrequencyGet", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "nodeAmplitudeSet", "function_define": "    Parameters:\n    if result != RESULT_SUCCESS:\n    raise self.dwf.exception()", "piece": "if result != RESULT_SUCCESS:"}
{"function_name": "nodeAmplitudeGet", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "nodeOffsetInfo", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "nodeOffsetSet", "function_define": "    Parameters:\n    if result != RESULT_SUCCESS:\n    raise self.dwf.exception()", "piece": "if result != RESULT_SUCCESS:"}
{"function_name": "nodeOffsetGet", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "nodeSymmetryInfo", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "nodeSymmetrySet", "function_define": "    Parameters:\n    if result != RESULT_SUCCESS:\n    raise self.dwf.exception()", "piece": "if result != RESULT_SUCCESS:"}
{"function_name": "nodeSymmetryGet", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "nodePhaseInfo", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "nodePhaseSet", "function_define": "    Parameters:\n    if result != RESULT_SUCCESS:\n    raise self.dwf.exception()", "piece": "if result != RESULT_SUCCESS:"}
{"function_name": "nodePhaseGet", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "nodeDataInfo", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "nodeDataSet", "function_define": "    Parameters:\n    data (np.ndarray): The data.\n    if result != RESULT_SUCCESS:", "piece": "data (np.ndarray): The data."}
{"function_name": "nodePlayStatus", "function_define": "    Parameters:\n    Returns:\n    if result != RESULT_SUCCESS:", "piece": "Returns:"}
{"function_name": "nodePlayData", "function_define": "    Parameters:\n    if result != RESULT_SUCCESS:\n    raise self.dwf.exception()", "piece": "if result != RESULT_SUCCESS:"}
{"function_name": "enableSet", "function_define": "    Warning:\n    Parameters:\n    if result != RESULT_SUCCESS:", "piece": "Parameters:"}
{"function_name": "enableGet", "function_define": "    Warning:\n    Parameters:\n    Returns:", "piece": "Parameters:"}
{"function_name": "functionInfo", "function_define": "    Warning:\n    Returns:\n    Parameters:", "piece": "Returns:"}
{"function_name": "functionSet", "function_define": "    Warning:\n    Parameters:\n    if result != RESULT_SUCCESS:", "piece": "Parameters:"}
{"function_name": "functionGet", "function_define": "    Warning:\n    Parameters:\n    Returns:", "piece": "Parameters:"}
{"function_name": "frequencyInfo", "function_define": "    Warning:\n    Parameters:\n    Returns:", "piece": "Parameters:"}
{"function_name": "frequencySet", "function_define": "    Warning:\n    Parameters:\n    if result != RESULT_SUCCESS:", "piece": "Parameters:"}
{"function_name": "frequencyGet", "function_define": "    Warning:\n    Parameters:\n    Returns:", "piece": "Parameters:"}
{"function_name": "amplitudeInfo", "function_define": "    Warning:\n    Parameters:\n    Returns:", "piece": "Parameters:"}
{"function_name": "amplitudeSet", "function_define": "    Warning:\n    Parameters:\n    if result != RESULT_SUCCESS:", "piece": "Parameters:"}
{"function_name": "amplitudeGet", "function_define": "    Warning:\n    Parameters:\n    Returns:", "piece": "Parameters:"}
{"function_name": "offsetInfo", "function_define": "    Warning:\n    Parameters:\n    Returns:", "piece": "Parameters:"}
{"function_name": "offsetSet", "function_define": "    Warning:\n    Parameters:\n    if result != RESULT_SUCCESS:", "piece": "Parameters:"}
{"function_name": "offsetGet", "function_define": "    Warning:\n    Parameters:\n    Returns:", "piece": "Parameters:"}
{"function_name": "symmetryInfo", "function_define": "    Warning:\n    Parameters:\n    Returns:", "piece": "Parameters:"}
{"function_name": "symmetrySet", "function_define": "    Warning:\n    Parameters:\n    if result != RESULT_SUCCESS:", "piece": "Parameters:"}
{"function_name": "symmetryGet", "function_define": "    Warning:\n    Parameters:\n    Returns:", "piece": "Parameters:"}
{"function_name": "phaseInfo", "function_define": "    Warning:\n    Parameters:\n    Returns:", "piece": "Parameters:"}
{"function_name": "phaseSet", "function_define": "    Warning:\n    Parameters:\n    if result != RESULT_SUCCESS:", "piece": "Parameters:"}
{"function_name": "phaseGet", "function_define": "    Warning:\n    Parameters:\n    Returns:", "piece": "Parameters:"}
{"function_name": "dataInfo", "function_define": "    Warning:\n    Parameters:\n    Returns:", "piece": "Parameters:"}
{"function_name": "playStatus", "function_define": "    Warning:\n    Parameters:\n    Returns:", "piece": "Parameters:"}
{"function_name": "playData", "function_define": "    Warning:\n    Parameters:\n    if result != RESULT_SUCCESS:", "piece": "Parameters:"}
{"function_name": "get_cifar10", "function_define": "    nb_classes = 10\n    batch_size = 64\n    input_shape = (3072,)", "piece": "batch_size = 64"}
{"function_name": "get_mnist", "function_define": "    nb_classes = 10\n    batch_size = 128\n    input_shape = (784,)", "piece": "batch_size = 128"}
{"function_name": "get_dbtt", "function_define": "    Y = 'CD delta sigma'\n    data.set_x_features(X)\n    data.set_y_feature(Y)", "piece": "data.set_x_features(X)"}
{"function_name": "compile_model", "function_define": "    Returns:\n    a compiled network.\n    nb_layers = network['nb_layers']", "piece": "a compiled network."}
{"function_name": "train_and_score", "function_define": "    if dataset == 'cifar10':\n    elif dataset == 'mnist':\n    elif dataset == 'dbtt':", "piece": "elif dataset == 'mnist':"}
{"function_name": "scrapeWeb", "function_define": "    all_news = []\n    for x in range(1, halaman + 1):\n    for post in posts:", "piece": "for x in range(1, halaman + 1):"}
{"function_name": "on_touchstrip", "function_define": "    in Push2.touchstrip.\n    arguments:\n    Examples:", "piece": "arguments:"}
{"function_name": "trigger_action", "function_define": "    action_name = args[0]\n    new_args = [self]\n    if len(args) > 1:", "piece": "new_args = [self]"}
{"function_name": "configure_midi", "function_define": "    been configured.\n    if not skip_midi_out:\n    self.configure_midi_out()", "piece": "if not skip_midi_out:"}
{"function_name": "on_midi_message", "function_define": "    current_time = time.time()\n    if active_sensing_was_none:\n    action_taken = func(message)", "piece": "if active_sensing_was_none:"}
{"function_name": "generateTable", "function_define": "    Parameters\n    klass : ArmiObject subclass\n    app : App, optional", "piece": "klass : ArmiObject subclass"}
{"function_name": "reset_timer", "function_define": "    while True:\n    if reset_timer_seconds > 0:\n    reset_timer_seconds -= 1", "piece": "if reset_timer_seconds > 0:"}
{"function_name": "get_bluetooth", "function_define": "    server_socket.bind(('', 1))\n    server_socket.listen(1)\n    while True:", "piece": "server_socket.listen(1)"}
{"function_name": "send_serial", "function_define": "    global angles\n    while True:\n    c = c.encode('utf-8')", "piece": "while True:"}
{"function_name": "read_serial", "function_define": "    while True:\n    if arduino.readable():\n    val = arduino.readline()", "piece": "if arduino.readable():"}
{"function_name": "ParseClass", "function_define": "    if not node.is_definition():\n    class_name = node.type.spelling\n    classdef = {}", "piece": "class_name = node.type.spelling"}
{"function_name": "FindTypes", "function_define": "    if classdef is not None:\n    classes.append(classdef)\n    for c in node.get_children():", "piece": "classes.append(classdef)"}
{"function_name": "ExtractClasses", "function_define": "    ast_path = './fe.ast'\n    DumpAst(path, ast_path)\n    tu = index.read(ast_path)", "piece": "DumpAst(path, ast_path)"}
{"function_name": "get_values", "function_define": "    global temperature\n    global humidity\n    humidity = 0", "piece": "global humidity"}
{"function_name": "test_get_tags", "function_define": "    gt = admin.get('/api/v1/tags')\n    for x in range(3):\n    gt = admin.get('/api/v1/tags')", "piece": "for x in range(3):"}
{"function_name": "compress", "function_define": "    sio = cStringIO.StringIO()\n    f.write(s)\n    f.close()", "piece": "f.write(s)"}
{"function_name": "outputfilter", "function_define": "    filter.pass_on()\n    if not filter.req.sent_bodyct:\n    s = filter.read()", "piece": "if not filter.req.sent_bodyct:"}
{"function_name": "test_nfsim", "function_define": "    Monomer('A', ['a'])\n    Monomer('B', ['b'])\n    Parameter('ksynthA', 100)", "piece": "Monomer('B', ['b'])"}
{"function_name": "test_bng_error", "function_define": "    Parameter('A_0', 100)\n    Initial(A(a='s1'), A_0)\n    Parameter('kf', 1)", "piece": "Initial(A(a='s1'), A_0)"}
{"function_name": "test_multistate", "function_define": "    Parameter('k1', 100)\n    Parameter('A_0', 200)\n    generate_equations(model)", "piece": "Parameter('A_0', 200)"}
{"function_name": "test_multibonds", "function_define": "    Monomer('A', ['a'])\n    Monomer('B', ['b'])\n    Parameter('k1', 100)", "piece": "Monomer('B', ['b'])"}
{"function_name": "get_seg_masks", "function_define": "    det_labels (Tensor): shape (n, )\n    img_shape (Tensor): shape (3, )\n    ori_shape: original image size", "piece": "img_shape (Tensor): shape (3, )"}
{"function_name": "getOutSpeed", "function_define": "    nowTime = data['time']\n    nowData = {}\n    self.before[host] = data", "piece": "nowData = {}"}
{"function_name": "setup_ui", "function_define": "    self.resize(1080, 640)\n    vlay_1 = QVBoxLayout(self)\n    self.plugin_sorter.hide()", "piece": "vlay_1 = QVBoxLayout(self)"}
{"function_name": "tag_outdated", "function_define": "    current = item.version\n    latest = project_info.version\n    continue", "piece": "latest = project_info.version"}
{"function_name": "eventFilter", "function_define": "    event.accept()\n    if event.type() == QEvent.Drop:\n    md = event.mimeData()", "piece": "if event.type() == QEvent.Drop:"}
{"function_name": "_toggle_sorter", "function_define": "    if show:\n    self.plugin_sorter.show()\n    self.plugin_sorter.hide()", "piece": "self.plugin_sorter.show()"}
{"function_name": "_toggle_status", "function_define": "    if show:\n    self.stdout_text.show()\n    self.stdout_text.hide()", "piece": "self.stdout_text.show()"}
{"function_name": "_show_error", "function_define": "    rep.setWindowFlags(Qt.Sheet)\n    rep.layout.addWidget(close)\n    rep.plugin_combo.hide()", "piece": "rep.layout.addWidget(close)"}
{"function_name": "check_backward", "function_define": "    x = chainer.Variable(x_data)\n    y = self.l(x)\n    y.backward()", "piece": "y = self.l(x)"}
{"function_name": "scrape_all", "function_define": "    self._url_func = url_func\n    self._local_dir = local_dir\n    os.makedirs(self._local_dir)", "piece": "self._local_dir = local_dir"}
{"function_name": "scrape_one", "function_define": "    s = requests.Session()\n    if target_url is None:\n    if self._need_redirect:", "piece": "if target_url is None:"}
{"function_name": "process_all", "function_define": "    self._local_dir = output_dir\n    os.makedirs(self._local_dir)\n    if len(target_names) is not 0:", "piece": "os.makedirs(self._local_dir)"}
{"function_name": "host_fuse", "function_define": "    fs = MemoryFileSystem()\n    fs.touch('/mounted/testfile')\n    run(fs, '/mounted/', mountdir)", "piece": "fs.touch('/mounted/testfile')"}
{"function_name": "goblint_files", "function_define": "    html_table += '  <tr>\\n'\n    for column in header:\n    html_table += '  </tr>\\n'", "piece": "for column in header:"}
{"function_name": "relative", "function_define": "    and so on.\n    params = {}\n    if 'frequency' in params:", "piece": "params = {}"}
{"function_name": "write_json", "function_define": "    name = filename.split('.')[0]\n    with open(jsonfile1, 'w+') as f:\n    f.write('')", "piece": "with open(jsonfile1, 'w+') as f:"}
{"function_name": "pair_filter", "function_define": "    swaps_of_pair = {}\n    if taker_coin == 'All':\n    elif maker_coin == 'All':", "piece": "if taker_coin == 'All':"}
{"function_name": "gui_filter", "function_define": "    swaps_of_gui = {}\n    if 'gui' in swap_data:\n    gui = str(swap_data['gui'])", "piece": "if 'gui' in swap_data:"}
{"function_name": "get_valid_guis", "function_define": "    valid_guis = []\n    if 'gui' in swap_data:\n    gui_type = str(swap_data['gui'])", "piece": "if 'gui' in swap_data:"}
{"function_name": "levenshtein", "function_define": "    two strings.\"\"\"\n    s1 = list(sa)\n    n, ns1 = (ns[0], ns[1:])", "piece": "s1 = list(sa)"}
{"function_name": "toTimeBlock", "function_define": "    if currentTimeProvider is None:\n    if self._duration == 0:\n    if newHour > 23:", "piece": "if self._duration == 0:"}
{"function_name": "renew_database", "function_define": "    if data_operation == 'add':\n    if not hypothesis_text:\n    except KeyError:", "piece": "if not hypothesis_text:"}
{"function_name": "from_wifkey", "function_define": "    assert len(vch) in (33, 34)\n    if vch[0] != WIF_PREFIX:\n    k = vch[1:33]", "piece": "if vch[0] != WIF_PREFIX:"}
{"function_name": "cam_visual", "function_define": "    cam = cam - np.min(cam)\n    cam = cam / np.max(cam)\n    cam_img = np.uint8(255 * cam)", "piece": "cam = cam / np.max(cam)"}
{"function_name": "secondary_menu", "function_define": "    pages = []\n    if calling_page:\n    if len(pages) == 0:", "piece": "if calling_page:"}
{"function_name": "sentence_hidden", "function_define": "    args = parser.parse_args()\n    length = input_ids.shape[0]\n    print(output_hidden)", "piece": "length = input_ids.shape[0]"}
{"function_name": "create_logger", "function_define": "    f_handler.setLevel(logging.INFO)\n    logger.addHandler(f_handler)\n    logger.addHandler(s_handler)", "piece": "logger.addHandler(f_handler)"}
{"function_name": "test_generation", "function_define": "    for k in range(10):\n    teststring = 'test%s' % k\n    g.write(teststring)", "piece": "teststring = 'test%s' % k"}
{"function_name": "proc_data", "function_define": "    Out_X = []\n    Out_Y = []\n    Cat2Y = {}", "piece": "Out_Y = []"}
{"function_name": "single_rnn_cell", "function_define": "    if unit_type == 'lstm':\n    elif unit_type == 'gru':\n    if dropout > 0.0:", "piece": "elif unit_type == 'gru':"}
{"function_name": "rnn_decoding", "function_define": "    answer: includes GO and EOS\n    answer_length: includes EOS\n    if mode in ['train', 'greedy']:", "piece": "answer_length: includes EOS"}
{"function_name": "B_matrix", "function_define": "    N = self.N\n    pures = self.B_pures(T)\n    for i in range(N):", "piece": "pures = self.B_pures(T)"}
{"function_name": "dB_dT_matrix", "function_define": "    N = self.N\n    pures = self.dB_dT_pures(T)\n    for i in range(N):", "piece": "pures = self.dB_dT_pures(T)"}
{"function_name": "d2B_dT2_matrix", "function_define": "    N = self.N\n    pures = self.d2B_dT2_pures(T)\n    for i in range(N):", "piece": "pures = self.d2B_dT2_pures(T)"}
{"function_name": "to_TP_zs", "function_define": "    new.T = T\n    new.P = P\n    new.zs = zs", "piece": "new.P = P"}
{"function_name": "__initVariable", "function_define": "    self.idGs = None\n    self.names = None\n    self.gPoints = None", "piece": "self.names = None"}
{"function_name": "__initUI", "function_define": "    self.gTable = CGPointsSelTable()\n    self.pTable = CPPointsSelTable()\n    vbox = QVBoxLayout()", "piece": "self.pTable = CPPointsSelTable()"}
{"function_name": "setGroundPoints", "function_define": "    self.idGs = ids\n    self.names = names\n    self.gPoints = points", "piece": "self.names = names"}
{"function_name": "__addPoint", "function_define": "    if idx in self.idPs:\n    pos = self.idGs.index(idx)\n    name = self.names[pos]", "piece": "pos = self.idGs.index(idx)"}
{"function_name": "__deletePoint", "function_define": "    if idx == self.currentID:\n    self.currentID = -1\n    pos = self.idPs.index(idx)", "piece": "self.currentID = -1"}
{"function_name": "setErrors", "function_define": "    self.pErrors = pErrors\n    self.gErrors = gErrors\n    if pErrors is not None:", "piece": "self.gErrors = gErrors"}
{"function_name": "save_img", "function_define": "    if outPath == 'MEM':\n    paths = []\n    shape = data.shape", "piece": "paths = []"}
{"function_name": "get_raster_info", "function_define": "    num_bands = len(ret['bands'])\n    except KeyError:\n    nodata = -9999", "piece": "except KeyError:"}
{"function_name": "new_user", "function_define": "    a = '\u8bf7\u8f93\u5165\u7528\u6237\u540d\uff1a'\n    while True:\n    name = input(a)", "piece": "while True:"}
{"function_name": "old_user", "function_define": "    a = '\u8bf7\u8f93\u5165\u7528\u6237\u540d\uff1a'\n    while True:\n    name = input(a)", "piece": "while True:"}
{"function_name": "test_valid_json", "function_define": "    text = '{\"text\": \"Sample json\"}'\n    test = FakeTestObject(resp)\n    signal = valid_content(test)", "piece": "test = FakeTestObject(resp)"}
{"function_name": "handle_batch", "function_define": "    outputs = model(inputs)\n    total_loss = sum(losses)\n    losses.append(total_loss)", "piece": "total_loss = sum(losses)"}
{"function_name": "parseConfigList", "function_define": "    takes precedent.\n    Returns:\n    readOK = []", "piece": "Returns:"}
{"function_name": "parseIni", "function_define": "    file (str): config file to parse\n    Defaults to False.\n    kwargs: ignored", "piece": "Defaults to False."}
{"function_name": "parseToml", "function_define": "    file (str): config file to parse\n    Defaults to False.\n    kwargs: ignored", "piece": "Defaults to False."}
{"function_name": "parseJson", "function_define": "    file (str): config file to parse\n    Defaults to False.\n    kwargs: ignored", "piece": "Defaults to False."}
{"function_name": "parse_thesaurus", "function_define": "    for d in dlist:\n    synonyms = d.find_all('a')\n    for s in synonyms:", "piece": "synonyms = d.find_all('a')"}
{"function_name": "comp_length_ring", "function_define": "    Parameters\n    self : LamSquirrelCage\n    A LamSquirrelCage object", "piece": "self : LamSquirrelCage"}
{"function_name": "get_file_digest", "function_define": "    h = sha256()\n    with open(path, mode='rb') as b:\n    h.update(b.read())", "piece": "with open(path, mode='rb') as b:"}
{"function_name": "insert_fit", "function_define": "    Parameters\n    session    database session\n    session.add(dbfit)", "piece": "session    database session"}
{"function_name": "random_crop", "function_define": "    imgs: shape (B,C,H,W)\n    out: output size (e.g. 84)\n    n, c, h, w = imgs.shape", "piece": "out: output size (e.g. 84)"}
{"function_name": "test_valid_token", "function_define": "    mock_response.status_code = 200\n    mock_response.encoding = 'utf-8'\n    self.assertEqual(s, 200)", "piece": "mock_response.encoding = 'utf-8'"}
{"function_name": "_is_seqtype", "function_define": "    elif hasattr(sequence, 'seq'):\n    sequence = sequence.seq._data\n    except AttributeError:", "piece": "sequence = sequence.seq._data"}
{"function_name": "configure_state", "function_define": "    safe_interval_nodes = []\n    node.parent = None\n    for i in range(time, max_len):", "piece": "node.parent = None"}
{"function_name": "create_path", "function_define": "    path = [node]\n    while node.parent != stop:\n    while i > 0:", "piece": "while node.parent != stop:"}
{"function_name": "get_path", "function_define": "    queue = Queue()\n    dict_safe_interval_nodes = {}\n    max_len = 0", "piece": "dict_safe_interval_nodes = {}"}
{"function_name": "printMatrix", "function_define": "    for row in mat:\n    for elem in row:\n    print(str(elem), end=' ')", "piece": "for elem in row:"}
{"function_name": "generate_pent", "function_define": "    result = 1\n    for i in count(1):\n    yield result", "piece": "for i in count(1):"}
{"function_name": "get_min_diff", "function_define": "    pents = set()\n    possible = set()\n    minimal = inf", "piece": "possible = set()"}
{"function_name": "add_block", "function_define": "    ip = request.remote_addr\n    data = request.get_json() or {}\n    block = data.get('block')", "piece": "data = request.get_json() or {}"}
{"function_name": "get_block", "function_define": "    Get block by height/idx\n    chain = tc.get_chain()\n    if height >= len(chain):", "piece": "chain = tc.get_chain()"}
{"function_name": "get_state_data", "function_define": "    if state == 'India':\n    state = 'Total'\n    print(state)", "piece": "state = 'Total'"}
{"function_name": "check_state", "function_define": "    state_split = state.split(' ')\n    if state not in states:\n    if len(closest_match) < 1:", "piece": "if state not in states:"}
{"function_name": "check_district", "function_define": "    if district not in districts:\n    if len(closest_match) < 1:\n    if len(closest_match) < 1:", "piece": "if len(closest_match) < 1:"}
{"function_name": "test_garch", "function_define": "    fresids = resids ** 2.0\n    sresids = np.sign(resids)\n    sigma2_numba = sigma2.copy()", "piece": "sresids = np.sign(resids)"}
{"function_name": "test_harch", "function_define": "    sigma2_python = sigma2.copy()\n    sigma2_numba = sigma2.copy()\n    mod_resids = resids.copy()", "piece": "sigma2_numba = sigma2.copy()"}
{"function_name": "test_arch", "function_define": "    sigma2_python = sigma2.copy()\n    sigma2_numba = sigma2.copy()\n    mod_resids = resids.copy()", "piece": "sigma2_numba = sigma2.copy()"}
{"function_name": "test_garch_no_q", "function_define": "    fresids = resids ** 2.0\n    sresids = np.sign(resids)\n    sigma2_python = sigma2.copy()", "piece": "sresids = np.sign(resids)"}
{"function_name": "test_garch_no_p", "function_define": "    fresids = resids ** 2.0\n    sresids = np.sign(resids)\n    sigma2_python = sigma2.copy()", "piece": "sresids = np.sign(resids)"}
{"function_name": "test_garch_no_o", "function_define": "    fresids = resids ** 2.0\n    sresids = np.sign(resids)\n    sigma2_python = sigma2.copy()", "piece": "sresids = np.sign(resids)"}
{"function_name": "test_garch_arch", "function_define": "    backcast = self.backcast\n    fresids = resids ** 2.0\n    sresids = np.sign(resids)", "piece": "fresids = resids ** 2.0"}
{"function_name": "test_bounds", "function_define": "    sigma2_python = sigma2.copy()\n    sigma2_python = sigma2.copy()\n    fresids = resids ** 2.0", "piece": "sigma2_python = sigma2.copy()"}
{"function_name": "test_egarch", "function_define": "    nobs = self.nobs\n    p = o = q = 1\n    backcast = 0.0", "piece": "p = o = q = 1"}
{"function_name": "call_callback", "function_define": "    r = None\n    retry = self.retries\n    while retry > 0:", "piece": "retry = self.retries"}
{"function_name": "fdstat_plot", "function_define": "    plt.grid()\n    for key in data.keys():\n    data[key][0].sort()", "piece": "for key in data.keys():"}
{"function_name": "command_check", "function_define": "    sock.send(command_packet)\n    print(expected_response)\n    print(response)", "piece": "print(expected_response)"}
{"function_name": "add_extra_keys", "function_define": "    if 'photowall' in data:\n    photowall = data['photowall']\n    keys.append('administration')", "piece": "photowall = data['photowall']"}
{"function_name": "render_template", "function_define": "    if verbose:\n    data = json.load(f_json)\n    if is_pelican:", "piece": "data = json.load(f_json)"}
{"function_name": "get_account_info", "function_define": "    Get account information.\n    reference\n    info = tmp_req.get('data', None)", "piece": "reference"}
{"function_name": "_test_touch_elem", "function_define": "    elemA = Element('a/b/c', 1)\n    elemB = Element('x/y/z', 2)\n    elemC = Element('a/b/c', 3)", "piece": "elemB = Element('x/y/z', 2)"}
{"function_name": "_test_view_layer", "function_define": "    elemA = Element('a/b/c', 1)\n    elemB = Element('x/y/z', 2)\n    elemC = Element('a/b/c', 3)", "piece": "elemB = Element('x/y/z', 2)"}
{"function_name": "moving_average", "function_define": "    Moving Average for an Array.\n    Parameters\n    x: Array Vector", "piece": "Parameters"}
{"function_name": "pooledVar", "function_define": "    Pooled Variance of two samples.\n    Parameters\n    x, y : 1 dimensional array_like", "piece": "Parameters"}
{"function_name": "move_ptr_left", "function_define": "    if self.ptr == 0:\n    self.array.insert(0, 0)\n    self.ptr -= 1", "piece": "self.array.insert(0, 0)"}
{"function_name": "read_output_file", "function_define": "    if ref_filename:\n    for line in ref_file:\n    ref_seq = line.strip()", "piece": "for line in ref_file:"}
{"function_name": "test_hook", "function_define": "    hook = mocker.MagicMock()\n    event = 'test'\n    session = Session()", "piece": "event = 'test'"}
{"function_name": "build_streams", "function_define": "    streams_all = []\n    for o in range(0, self.streams):\n    streams_all.append(s1)", "piece": "for o in range(0, self.streams):"}
{"function_name": "test_basic_cont", "function_define": "    pps = self.pps\n    duration = 0.1\n    golden = pps * duration", "piece": "duration = 0.1"}
{"function_name": "test_stress_tx", "function_define": "    for i in range(0, 100):\n    except STLError as e:\n    assert False, '{0}'.format(e)", "piece": "except STLError as e:"}
{"function_name": "test_pcap_remote", "function_define": "    master = self.tx_port\n    slave = master ^ 1\n    self.c.clear_stats()", "piece": "slave = master ^ 1"}
{"function_name": "test_tx_from_rx", "function_define": "    test TX packets from the RX core\n    tx_capture_id = None\n    rx_capture_id = None", "piece": "tx_capture_id = None"}
{"function_name": "test_bpf", "function_define": "    test BPF filters\n    tx_capture_id = None\n    rx_capture_id = None", "piece": "tx_capture_id = None"}
{"function_name": "on_heartbeat", "function_define": "    We expected the data to have:\n    valid_beat = False\n    valid_beat = True", "piece": "valid_beat = False"}
{"function_name": "on_request_vote", "function_define": "    We expected the data to have:\n    if candidate_term > self.term:\n    self.term = candidate_term", "piece": "if candidate_term > self.term:"}
{"function_name": "parse_ballot", "function_define": "    An example of the data:\n    True, {\"vote_granted\": True}\n    if type(ballot) != tuple:", "piece": "True, {\"vote_granted\": True}"}
{"function_name": "make_plot", "function_define": "    plt.figure()\n    itm = export_dict.items()\n    itm = sorted(itm, reverse=True)", "piece": "itm = export_dict.items()"}
{"function_name": "make_world", "function_define": "    world = World()\n    world.dim_c = 2\n    num_agents = 3", "piece": "world.dim_c = 2"}
{"function_name": "allStoresContext", "function_define": "    stores_data = {}\n    stores = Store.objects.all()\n    for store in stores:", "piece": "stores = Store.objects.all()"}
{"function_name": "KDEbounded", "function_define": "    Returns:\n    Other references:\n    if np.isnan(bandwidth):", "piece": "Other references:"}
{"function_name": "distribution_exp", "function_define": "    SUPPORT: y,  y>= 0\n    the Geometric distribution.\n    EXAMPLES:", "piece": "the Geometric distribution."}
{"function_name": "validateParam", "function_define": "    Returns:\n    import math\n    condLogical = True", "piece": "import math"}
{"function_name": "checkParamsNum", "function_define": "    Returns:\n    proceed = True\n    proceed = False", "piece": "proceed = True"}
{"function_name": "_resolve_cplex", "function_define": "    if env is None:\n    if env.has_cplex:\n    env.check_cplex_version()", "piece": "if env.has_cplex:"}
{"function_name": "new_engine", "function_define": "    self._ensure_cplex_resolved(env)\n    kwargs = {}\n    if self._cplex_engine_type:", "piece": "kwargs = {}"}
{"function_name": "write_input", "function_define": "    Write radex.inp file parameters\n    Parameters\n    temperature : float", "piece": "Parameters"}
{"function_name": "call_radex", "function_define": "    if debug:\n    print('Command:', cmd)\n    if result != 0:", "piece": "print('Command:', cmd)"}
{"function_name": "parse_outfile", "function_define": "    with open(filename, 'r') as f:\n    alllines = f.readlines()\n    if len(data_list) == 0:", "piece": "alllines = f.readlines()"}
{"function_name": "set_params", "function_define": "    if species is not None:\n    self.species = species\n    if deltav is not None:", "piece": "self.species = species"}
{"function_name": "_set_parameters", "function_define": "    if hasattr(self.deltav, 'to'):\n    self.radex.freq.fmin = 0\n    if not hasattr(self, 'miniter'):", "piece": "self.radex.freq.fmin = 0"}
{"function_name": "datapath", "function_define": "    if PYVERSION == 3:\n    except TypeError as ex:\n    self.radex.setup.radat[:] = ''", "piece": "except TypeError as ex:"}
{"function_name": "temperature", "function_define": "    if hasattr(tkin, 'to'):\n    elif tkin is None:\n    if tkin <= 0 or tkin > 10000.0:", "piece": "elif tkin is None:"}
{"function_name": "column_per_bin", "function_define": "    if hasattr(col, 'to'):\n    self.radex.cphys.cdmol = col\n    if not self._is_locked:", "piece": "self.radex.cphys.cdmol = col"}
{"function_name": "abundance", "function_define": "    self._abundance = abund\n    if not self._is_locked:\n    self._lock_param('density')", "piece": "if not self._is_locked:"}
{"function_name": "run_radex", "function_define": "    Parameters\n    silent: bool\n    reuse_last: bool", "piece": "silent: bool"}
{"function_name": "get_synthspec", "function_define": "    Parameters\n    fmin : `~astropy.units.Quantity`\n    fmax : `~astropy.units.Quantity`", "piece": "fmin : `~astropy.units.Quantity`"}
{"function_name": "run_process", "function_define": "    results = []\n    pool = Pool()\n    for name in data_types:", "piece": "pool = Pool()"}
{"function_name": "digDirectory", "function_define": "    fileList = []\n    for item in os.scandir(path):\n    fileList.append(item)", "piece": "for item in os.scandir(path):"}
{"function_name": "hashFile", "function_define": "    hasher = hashlib.sha256()\n    with open(filePath, 'rb') as f:\n    buf = f.read()", "piece": "with open(filePath, 'rb') as f:"}
{"function_name": "getHashes", "function_define": "    hashData = {}\n    for file in fileList:\n    fileHash = hashFile(file.path)", "piece": "for file in fileList:"}
{"function_name": "handleRemoteRepo", "function_define": "    if urlRegex.match(url):\n    print('Repo found, cloning...')\n    shutil.rmtree(clonedRepoPath)", "piece": "print('Repo found, cloning...')"}
{"function_name": "displayList", "function_define": "    print('[')\n    for element in aList:\n    print('  {}'.format(element))", "piece": "for element in aList:"}
{"function_name": "formatText", "function_define": "    result = []\n    line = line.rstrip()\n    if len(line) <= width:", "piece": "line = line.rstrip()"}
{"function_name": "inferIndentation", "function_define": "    gaps = []\n    start = -1\n    for i, c in enumerate(line):", "piece": "start = -1"}
{"function_name": "test_enqueue", "function_define": "    if enqueue_task and routing_key:\n    if enqueue_task:\n    if force_update:", "piece": "if enqueue_task:"}
{"function_name": "calc_losses", "function_define": "    if 'images' not in data:\n    all_bboxes = data.get('bbox')\n    all_focals = data['focal']", "piece": "all_bboxes = data.get('bbox')"}
{"function_name": "vis_step", "function_define": "    if 'images' not in data:\n    if idx is None:\n    print(idx)", "piece": "if idx is None:"}
{"function_name": "parse_pages", "function_define": "    Whats the point of ignore?\n    page_num = ''\n    qualifier = None", "piece": "page_num = ''"}
{"function_name": "parse_volume", "function_define": "    volume number.\n    vol_num = ''\n    if volume:", "piece": "vol_num = ''"}
{"function_name": "url_decode", "function_define": "    rather than using urllib.parse()\n    s = match.group(0)\n    if s[0] != '%' or len(s) != 3:", "piece": "s = match.group(0)"}
{"function_name": "match_int", "function_define": "    if ref_str:\n    if isinstance(ref_str, list):\n    ref_str = ref_str[0]", "piece": "if isinstance(ref_str, list):"}
{"function_name": "match_year", "function_define": "    if len(match) == 1:\n    elif len(match) > 1:\n    if match:", "piece": "elif len(match) > 1:"}
{"function_name": "roman2int", "function_define": "    result = 0\n    while True:\n    if idx == len(roman_value):", "piece": "while True:"}
{"function_name": "extract_tag", "function_define": "    as well as the extracted tag\n    if not refstr:\n    if greedy:", "piece": "if not refstr:"}
{"function_name": "get_feature", "function_define": "    useFlip = True\n    if useFlip:\n    for item in buffer:", "piece": "if useFlip:"}
{"function_name": "get_feature_dict", "function_define": "    fe_dict = {}\n    key = each.split('.')[0]\n    fe_dict[key] = features[i]", "piece": "key = each.split('.')[0]"}
{"function_name": "predict_features", "function_define": "    s = time.time()\n    fstart = 0\n    buffer = []", "piece": "fstart = 0"}
{"function_name": "lysearch", "function_define": "    import lyricsgenius\n    geniustoken = '<KEY>'\n    songname = songname.split('/')", "piece": "geniustoken = '<KEY>'"}
{"function_name": "execute_action", "function_define": "    except Exception as e:\n    obj = storeable_object.data\n    if self.delete_obj:", "piece": "obj = storeable_object.data"}
{"function_name": "keyboard", "function_define": "    if key < 255:\n    key = chr(key)\n    if action == 1:", "piece": "key = chr(key)"}
{"function_name": "get_profile", "function_define": "    Send the request 'get_request'.\n    if activity_details is None:\n    if message.dotted_path == '':", "piece": "if activity_details is None:"}
{"function_name": "RetryOnException", "function_define": "    with 1 second.\n    For example:\n    wait = 1", "piece": "For example:"}
{"function_name": "Decorator", "function_define": "    wait = 1\n    except exc_type as exc:\n    time.sleep(wait)", "piece": "except exc_type as exc:"}
{"function_name": "_set_filtered", "function_define": "    YANG Description: Filter Type\n    if hasattr(v, '_utype'):\n    v = v._utype(v)", "piece": "if hasattr(v, '_utype'):"}
{"function_name": "_set_prefix", "function_define": "    if hasattr(v, '_utype'):\n    v = v._utype(v)\n    except (TypeError, ValueError):", "piece": "v = v._utype(v)"}
{"function_name": "_set_key", "function_define": "    if hasattr(v, '_utype'):\n    v = v._utype(v)\n    except (TypeError, ValueError):", "piece": "v = v._utype(v)"}
{"function_name": "replace_value", "function_define": "    print(f'{key}:')\n    print('\\r   ', end='')\n    if new_value == 'd':", "piece": "print('\\r   ', end='')"}
{"function_name": "update_config", "function_define": "    if verbose:\n    replace_value(config, key)\n    print('-' * 20)", "piece": "replace_value(config, key)"}
{"function_name": "dataset_zoo", "function_define": "    in each sequence.\n    the training subset.\n    Returns:", "piece": "the training subset."}
{"function_name": "test_connection", "function_define": "    print(c.modules.sys)\n    c.execute('x = 5')\n    c.close()", "piece": "c.execute('x = 5')"}
{"function_name": "register_pages", "function_define": "    Parameters\n    data : dataset.Dataset\n    server :", "piece": "data : dataset.Dataset"}
{"function_name": "_ParseSymbolPage", "function_define": "    Returns a list of headers.\n    headers = set()\n    all_headers = set()", "piece": "headers = set()"}
{"function_name": "_ParseIndexPage", "function_define": "    symbols = []\n    variant = None\n    if symbol_tt:", "piece": "variant = None"}
{"function_name": "_GetSymbols", "function_define": "    given namespace.\n    Returns a list of Symbols.\n    results = []", "piece": "Returns a list of Symbols."}
{"function_name": "GetSymbols", "function_define": "    symbols = []\n    finally:\n    pool.terminate()", "piece": "finally:"}
{"function_name": "create_temp_dict", "function_define": "    temp_dict = {}\n    if i == int(i):\n    key = ' ' + str(int(i)) + '\u00b0C'", "piece": "if i == int(i):"}
{"function_name": "load_file", "function_define": "    load_f = yaml.safe_load\n    load_f = json.load\n    with open(f, 'r') as fp:", "piece": "load_f = json.load"}
{"function_name": "send_websocket", "function_define": "    if not producer:\n    kwargs['producer'] = producer\n    publish_with_producer(**kwargs)", "piece": "kwargs['producer'] = producer"}
{"function_name": "send_email", "function_define": "    data.update(**extra)\n    assert r.status == status_code\n    await worker.run_check()", "piece": "assert r.status == status_code"}
{"function_name": "send_sms", "function_define": "    data.update(**extra)\n    assert r.status == 201\n    await worker.run_check()", "piece": "assert r.status == 201"}
{"function_name": "cellular_bars", "function_define": "    plt.figure(figsize=(9, 5))\n    ax = plt.gca()\n    bar.set_hatch(pat)", "piece": "ax = plt.gca()"}
{"function_name": "cc_scatter", "function_define": "    plt.rcParams['font.size'] = 32\n    msize = 200\n    ax.invert_xaxis()", "piece": "msize = 200"}
{"function_name": "data_matrix", "function_define": "    np.random.seed(seed)\n    U = np.random.randn(m, k)\n    V = np.random.randn(n, k)", "piece": "U = np.random.randn(m, k)"}
{"function_name": "prepare_features", "function_define": "    tokens = []\n    if include_CLS_token:\n    for token in tokens_a:", "piece": "if include_CLS_token:"}
{"function_name": "query_expert", "function_define": "    if self._bot_died:\n    if self.bot is None:\n    except Exception as _:", "piece": "if self.bot is None:"}
{"function_name": "next_task", "function_define": "    if self.length <= 0:\n    if self.deterministic_sampling:\n    self.env.reset()", "piece": "if self.deterministic_sampling:"}
{"function_name": "triton_pipeline", "function_define": "    op_dict = {}\n    results_dir = '/results/'\n    data_dir = '/data/'", "piece": "results_dir = '/results/'"}
{"function_name": "_test_data_types", "function_define": "    origin.data_format = 'JSON'\n    target.table_name = table_name\n    origin >> converter >> target", "piece": "target.table_name = table_name"}
{"function_name": "test_state_copy", "function_define": "    r = rng()\n    relations = toy_dataset(defn)\n    s2 = copy.copy(s1)", "piece": "relations = toy_dataset(defn)"}
{"function_name": "call_service", "function_define": "    self.log_buffer.seek(0)\n    self.log_buffer.truncate()\n    con = self.connection", "piece": "self.log_buffer.truncate()"}
{"function_name": "matrixTests", "function_define": "    row_limit = 50\n    col_limit = 50\n    rows_dim_is_dynamic = i == 'D'", "piece": "col_limit = 50"}
{"function_name": "test_eigen", "function_define": "    T = ['double']\n    for t in T:\n    for i in N:", "piece": "for t in T:"}
{"function_name": "yield_cases", "function_define": "    for group in cases:\n    queries = group['query']\n    if type(queries) is str:", "piece": "queries = group['query']"}
{"function_name": "test_cases", "function_define": "    if xfail:\n    pytest.xfail()\n    res = city_idx[query]", "piece": "pytest.xfail()"}
{"function_name": "_to_edge_list", "function_define": "    Parameters\n    G : Graph object.\n    edges = G.edges(data='weight')", "piece": "G : Graph object."}
{"function_name": "create_members", "function_define": "    for line in lines:\n    if line.find('@') > 0:\n    line = line.replace('\"', '')", "piece": "if line.find('@') > 0:"}
{"function_name": "get_group_names", "function_define": "    groups = get_groups(org_id)\n    ret = []\n    for group in groups:", "piece": "ret = []"}
{"function_name": "karmaload", "function_define": "    global karma_val\n    global karma_num\n    load_val.close()", "piece": "global karma_num"}
{"function_name": "karmasave", "function_define": "    global karma_val\n    global karma_num\n    save_val.close()", "piece": "global karma_num"}
{"function_name": "karmadown", "function_define": "    except IndexError:\n    chat(message)\n    if karma_down in karma_val:", "piece": "chat(message)"}
{"function_name": "karmarank", "function_define": "    except IndexError:\n    chat(message)\n    if rank in karma_val:", "piece": "chat(message)"}
{"function_name": "topkarma", "function_define": "    for x, y in top_results:\n    message = y + ': ' + str(x)\n    chat(message)", "piece": "message = y + ': ' + str(x)"}
{"function_name": "bottomkarma", "function_define": "    for x, y in top_results:\n    message = y + ': ' + str(x)\n    chat(message)", "piece": "message = y + ': ' + str(x)"}
{"function_name": "weathercheck", "function_define": "    req = requests.get(url)\n    chat(message)\n    logging.warning(message)", "piece": "chat(message)"}
{"function_name": "astronomycheck", "function_define": "    req = requests.get(url)\n    logging.critical(message)\n    astronomy_output = req.text", "piece": "logging.critical(message)"}
{"function_name": "quakecheck", "function_define": "    logging.critical(message)\n    quake_output = req.text\n    global quake_id", "piece": "quake_output = req.text"}
{"function_name": "stravacheck", "function_define": "    logging.critical(message)\n    strava_output = req.text\n    global strava_id", "piece": "strava_output = req.text"}
{"function_name": "dictionarycheck", "function_define": "    except IndexError:\n    chat(message)\n    except socket.timeout:", "piece": "chat(message)"}
{"function_name": "stockcheck", "function_define": "    except IndexError:\n    chat(message)\n    ticker = stock.upper()", "piece": "chat(message)"}
{"function_name": "read_vault_files", "function_define": "    if not config.vault_file_list:\n    secrets = {}\n    with open(file, 'r') as f:", "piece": "secrets = {}"}
{"function_name": "keypress", "function_define": "    if event.key == ' ':\n    self.curAxis += 1\n    self.curSlice = 0", "piece": "self.curAxis += 1"}
{"function_name": "makePlot", "function_define": "    ax = self.fig.gca()\n    ax.set_aspect('equal')\n    ax.set_xlabel(labels[1])", "piece": "ax.set_aspect('equal')"}
{"function_name": "setBands", "function_define": "    if band_list is not None:\n    if len(band_list) > self.bands:\n    self.band_list = band_list", "piece": "if len(band_list) > self.bands:"}
{"function_name": "getArray", "function_define": "    Returns:\n    np.ndarray: data's ndarray.\n    if self._src_data is not None:", "piece": "np.ndarray: data's ndarray."}
{"function_name": "_getInfo", "function_define": "    if self._src_data is not None:\n    d_img = self._getNumpy()\n    d_shape = d_img.shape", "piece": "d_img = self._getNumpy()"}
{"function_name": "_getNumpy", "function_define": "    ima = np.load(self.path)\n    if self.band_list is not None:\n    band_array = []", "piece": "if self.band_list is not None:"}
{"function_name": "_getAarray", "function_define": "    if window is not None:\n    if self.band_list is None:\n    if window is None:", "piece": "if self.band_list is None:"}
{"function_name": "_getBlock", "function_define": "    xoff, yoff = start_loc\n    xsize, ysize = block_size\n    if xoff + xsize > self.width:", "piece": "xsize, ysize = block_size"}
{"function_name": "run_single_full", "function_define": "    FNULL = open(os.devnull, 'w')\n    args = file + filename + flags\n    conn = None", "piece": "args = file + filename + flags"}
{"function_name": "run_batch_fuzzy", "function_define": "    fuzzy_p = FuzzyParser()\n    all_runs = []\n    target.close()", "piece": "all_runs = []"}
{"function_name": "run_single_fuzzy", "function_define": "    start_time_fuzzy = time.time()\n    process_and_parse(filename)\n    end_time_fuzzy = time.time()", "piece": "process_and_parse(filename)"}
{"function_name": "stat_run", "function_define": "    target.close()\n    all_runs_fuzzy = 0\n    if verbose:", "piece": "all_runs_fuzzy = 0"}
{"function_name": "batch_run", "function_define": "    all_runs_fuzzy = 0\n    if verbose:\n    print('PURE PARSING')", "piece": "if verbose:"}
{"function_name": "crawl_dirs", "function_define": "    runs = 20\n    if '-runs' in argv:\n    multi = 1", "piece": "if '-runs' in argv:"}
{"function_name": "map_file", "function_define": "    Loops through csv file\n    values < 0 mean 'infinite'\n    first column is the time stamp", "piece": "values < 0 mean 'infinite'"}
{"function_name": "upload_data", "function_define": "    file_name = 'temp.bak'\n    ipfs_hash = ipfs_res['Hash']\n    remove(file_name)", "piece": "ipfs_hash = ipfs_res['Hash']"}
{"function_name": "getAbsAppRoot", "function_define": "    Return absolute root dir.\n    global FILE_SYS_ENCODING\n    if not FILE_SYS_ENCODING:", "piece": "global FILE_SYS_ENCODING"}
{"function_name": "l0gurobi", "function_define": "    except ModuleNotFoundError:\n    model = Model()\n    n = x.shape[0]", "piece": "model = Model()"}
{"function_name": "execute_node", "function_define": "    node = self.onnx_node\n    inp = context[node.input[0]]\n    if mode == 'cppsim':", "piece": "inp = context[node.input[0]]"}
{"function_name": "bram_estimation", "function_define": "    W = self.get_instream_width()\n    if W == 1:\n    elif W == 2:", "piece": "if W == 1:"}
{"function_name": "oddsOfWinning", "function_define": "    n = 1000\n    p[0][0] = 1\n    for i in range(n - 1):", "piece": "p[0][0] = 1"}
{"function_name": "superTuple", "function_define": "    dct = {}\n    nargs = len(attributes)\n    if len(args) != nargs:", "piece": "nargs = len(attributes)"}
{"function_name": "add_command", "function_define": "    self.commands.append(command)\n    if execute:\n    command.execute()", "piece": "if execute:"}
{"function_name": "_get_streams", "function_define": "    streams = {}\n    for url in res['urls']:\n    parsed = urlparse(url)", "piece": "for url in res['urls']:"}
{"function_name": "Read_file", "function_define": "    contents = file.read()\n    file.close()\n    except FileNotFoundError:", "piece": "file.close()"}
{"function_name": "make_lowercase", "function_define": "    string_rebuild = ''\n    for each in ascii_interp:\n    each = int(each)", "piece": "for each in ascii_interp:"}
{"function_name": "Count_Lines_Fast", "function_define": "    f = open(file_name, 'rb')\n    lines = 0\n    buf_size = 1024 * 1024", "piece": "lines = 0"}
{"function_name": "get_filters", "function_define": "    length_band = band_low.size()[0]\n    b = None if b == 0 else b\n    self.filt_low[a:b] = band_low", "piece": "b = None if b == 0 else b"}
{"function_name": "initialization", "function_define": "    if torch.cuda.is_available():\n    if self.trainable:\n    if self.kernel_size % 2 == 0:", "piece": "if self.trainable:"}
{"function_name": "_build_aea", "function_define": "    except Exception as e:\n    logger.error(str(e))\n    sys.exit(1)", "piece": "logger.error(str(e))"}
{"function_name": "_run_aea", "function_define": "    aea.start()\n    except KeyboardInterrupt:\n    except Exception as e:", "piece": "except KeyboardInterrupt:"}
{"function_name": "uploadmoh", "function_define": "    global pub_updated\n    global updated_servers\n    global current_file", "piece": "global updated_servers"}
{"function_name": "fillClass", "function_define": "    testString = open(self.url, 'r')\n    testString = testString.read()\n    if dateMatch:", "piece": "testString = testString.read()"}
{"function_name": "config_romx", "function_define": "    tool_rev = eval(tool_rev)\n    tool_rev = 0\n    dsp_flavor = eval(dsp_flavor)", "piece": "tool_rev = 0"}
{"function_name": "get_entities", "function_define": "    dep_type = []\n    doc = nlp(a)\n    for i in doc:", "piece": "doc = nlp(a)"}
{"function_name": "get_user_profile", "function_define": "    if not user:\n    if profile:\n    user.profile = UserProfile()", "piece": "if profile:"}
{"function_name": "root_dir", "function_define": "    while True:\n    if len(current_dir.parts) == 1:\n    current_dir = current_dir.parent", "piece": "if len(current_dir.parts) == 1:"}
{"function_name": "get_strategy", "function_define": "    strategy = None\n    if mode == 'cpu':\n    elif mode == 'gpu':", "piece": "if mode == 'cpu':"}
{"function_name": "_train_step", "function_define": "    with tf.GradientTape() as tape:\n    losses = []\n    loss = tf.add_n(losses)", "piece": "losses = []"}
{"function_name": "__tfrecord", "function_define": "    Parameter\n    is_training: boolean tensor\n    is_source: boolean value", "piece": "is_training: boolean tensor"}
{"function_name": "__build_graph", "function_define": "    image_src, label_src = ([], [])\n    image_src.append(_image_src)\n    label_src.append(_label_src)", "piece": "image_src.append(_image_src)"}
{"function_name": "load_args", "function_define": "    args = parser.parse_args()\n    if args.height % MAP_SCALE != 0:\n    if args.width % MAP_SCALE != 0:", "piece": "if args.height % MAP_SCALE != 0:"}
{"function_name": "prepare_ref", "function_define": "    sys.exit(1)\n    without_ext = root_ext_pair[0]\n    ext = root_ext_pair[1]", "piece": "without_ext = root_ext_pair[0]"}
{"function_name": "get_documents", "function_define": "    next_chunk_id = nr + index_start\n    d = Document()\n    d.id = i", "piece": "d = Document()"}
{"function_name": "test_snapshot", "function_define": "    total_docs = 0\n    for i in range(nr_shards):\n    total_docs += docs_this_shard", "piece": "for i in range(nr_shards):"}
{"function_name": "setup_entry", "function_define": "    device.connect(host)\n    except DysonException:\n    if is_discovery:", "piece": "except DysonException:"}
{"function_name": "test_timestamps", "function_define": "    print('=' * 72)\n    print('TIC %d' % starid)\n    time_tpf = hdu[1].data['TIME']", "piece": "print('TIC %d' % starid)"}
{"function_name": "test_sclk2jd", "function_define": "    print('=' * 72)\n    with TESS_SPICE() as knl:\n    desired = 1468.416666534158", "piece": "with TESS_SPICE() as knl:"}
{"function_name": "test_spice", "function_define": "    with TESS_SPICE() as knl:\n    print('=' * 72)\n    print('TIC %d' % starid)", "piece": "print('=' * 72)"}
{"function_name": "kl_divergence", "function_define": "    if deterministic:\n    mu = new_actor(obs)\n    mu_old = old_actor(obs)", "piece": "mu = new_actor(obs)"}
{"function_name": "blocking_Send", "function_define": "    for orders in matches:\n    orderTime = orders[0]\n    orderCustomer = orders[1]", "piece": "orderTime = orders[0]"}
{"function_name": "hypercube_optim", "function_define": "    except ValueError:\n    for i in range(self.dim):\n    hypercube = hypercube.T", "piece": "for i in range(self.dim):"}
{"function_name": "optimization", "function_define": "    arg_min = np.argmin(gen)\n    min_value = gen[arg_min]\n    min_x = self.points[arg_min]", "piece": "min_value = gen[arg_min]"}
{"function_name": "min_norm", "function_define": "    except ValueError:\n    for i in range(self.dim):\n    hypercube = hypercube.T", "piece": "for i in range(self.dim):"}
{"function_name": "list_infos", "function_define": "    for info_name in infos:\n    info = infos[info_name]\n    if not info:", "piece": "info = infos[info_name]"}
{"function_name": "create_code", "function_define": "    result = []\n    while True:\n    uuid_id = uuid.uuid1()", "piece": "while True:"}
{"function_name": "sticker_detect", "function_define": "    print(\"Processing image : {0}\n    mkdir(mkpath)\n    save_path = mkpath + '/'", "piece": "mkdir(mkpath)"}
{"function_name": "segmentation", "function_define": "    image = cv2.imread(image_file)\n    if file_size > 5.0:\n    orig = image.copy()", "piece": "if file_size > 5.0:"}
{"function_name": "encoding_folder", "function_define": "    dic = []\n    path = 'images/' + path\n    print(path)", "piece": "path = 'images/' + path"}
{"function_name": "unpackEpisodes", "function_define": "    conn = sqlite3.connect(dbPath)\n    c = conn.cursor()\n    episodeList = []", "piece": "c = conn.cursor()"}
{"function_name": "moveFiles", "function_define": "    showDir = '/media/hdd1/tv/'\n    for item in newMediaitems:\n    if episode['subtitles']:", "piece": "for item in newMediaitems:"}
{"function_name": "findVerified", "function_define": "    episodes = unpackEpisodes()\n    if episodes:\n    for episode in episodes:", "piece": "if episodes:"}
{"function_name": "_keystrokes", "function_define": "    for char in self._text:\n    for ks in char:\n    yield ks", "piece": "for ks in char:"}
{"function_name": "_state_input", "function_define": "    if event.type == 'pause':\n    self._notify('on_pause')\n    elif event.type == 'undo':", "piece": "self._notify('on_pause')"}
{"function_name": "_state_pause", "function_define": "    if self._pause_history:\n    self._notify('on_unpause')\n    self._state_input(event)", "piece": "self._notify('on_unpause')"}
{"function_name": "_state_end", "function_define": "    if event.type == 'restart':\n    self._reset()\n    self._notify('on_restart')", "piece": "self._reset()"}
{"function_name": "keywords", "function_define": "    if '$self' in data:\n    if __sessions__.is_set():\n    print('No session opened')", "piece": "if __sessions__.is_set():"}
{"function_name": "complete", "function_define": "    if state < len(cmds):\n    if state < len(mods):\n    if text.startswith('~'):", "piece": "if state < len(mods):"}
{"function_name": "gen_clusters", "function_define": "    tup = ()\n    for m in means:\n    data = np.concatenate(tup)", "piece": "for m in means:"}
{"function_name": "make_pts", "function_define": "    pts = []\n    for pos in data:\n    pts.append(Point(pos))", "piece": "for pos in data:"}
{"function_name": "get_extr_x", "function_define": "    min_x = float('inf')\n    max_x = -float('inf')\n    for obj in self.data:", "piece": "max_x = -float('inf')"}
{"function_name": "get_extr_y", "function_define": "    min_y = float('inf')\n    max_y = -float('inf')\n    for obj in self.data:", "piece": "max_y = -float('inf')"}
{"function_name": "expand_point", "function_define": "    self.get_neighbours(idx)\n    self.get_core_dist(idx)\n    self.data[idx].processed = True", "piece": "self.get_core_dist(idx)"}
{"function_name": "append_seed", "function_define": "    for n_tup in neighbours:\n    continue\n    seed_list.insert(idx, n_tup[0])", "piece": "continue"}
{"function_name": "reach_plot", "function_define": "    for idx in self.main_list:\n    f, ax = plt.subplots()\n    ax.bar(x, y)", "piece": "f, ax = plt.subplots()"}
{"function_name": "print_reach_dist", "function_define": "    for idx in self.main_list:\n    print(idx)\n    print(self.data[idx].reach_dist)", "piece": "print(idx)"}
{"function_name": "get_num_clusters", "function_define": "    clusters = []\n    up = True\n    top, bottom = (-1, -1)", "piece": "up = True"}
{"function_name": "proc_down", "function_define": "    bad_inrow = 0\n    begin_idx = idx\n    while idx < len(self.main_list):", "piece": "begin_idx = idx"}
{"function_name": "filter_downs", "function_define": "    del_idx = []\n    del_idx.append(idx)\n    elif obj[1] < glob_mib:", "piece": "del_idx.append(idx)"}
{"function_name": "untokenize", "function_define": "    raw: Raw string.\n    return_mask: Flag to return mask\n    Returns:", "piece": "return_mask: Flag to return mask"}
{"function_name": "find_positions", "function_define": "    mask: Mask for tokens.\n    Returns:\n    List of positions of tokens.", "piece": "Returns:"}
{"function_name": "inverse_removing", "function_define": "    Returns:\n    String without removed tokens.\n    if not self.force_order:", "piece": "String without removed tokens."}
{"function_name": "derive_key", "function_define": "    assert None != salt\n    assert isinstance(key_len, int)\n    assert key_len > 0", "piece": "assert isinstance(key_len, int)"}
{"function_name": "iostats_get_path", "function_define": "    if os.path.exists(device):\n    st = os.stat(device)\n    if not stat.S_ISBLK(st.st_mode):", "piece": "st = os.stat(device)"}
{"function_name": "iostats_stats", "function_define": "    ret = OrderedDict()\n    for d in devices:\n    ret[d] = iostats_device_stats(d)", "piece": "for d in devices:"}
{"function_name": "print_next", "function_define": "    stats = self.next()\n    indent += '  '\n    d = os.path.basename(d)", "piece": "indent += '  '"}
{"function_name": "_getname", "function_define": "    artist = ''\n    if index == 0:\n    artist += singer['name']", "piece": "if index == 0:"}
{"function_name": "leipziglk", "function_define": "    print('Getting', url)\n    assert url\n    soup = get_soup(url)", "piece": "assert url"}
{"function_name": "read_list", "function_define": "    beacons = list()\n    with open(fn) as f:\n    num = int(match.group(1))", "piece": "with open(fn) as f:"}
{"function_name": "all_transforms", "function_define": "    gener = [ROTX, ROTY, ROTZ]\n    trans = set(gener)\n    count = 0", "piece": "trans = set(gener)"}
{"function_name": "match_beacons", "function_define": "    for bt in beacons_test:\n    for br in beacons_ref:\n    deltas = subvec(bt, br)", "piece": "for br in beacons_ref:"}
{"function_name": "log_item", "function_define": "    self.n_crawled += 1\n    domain = get_domain(item['url'])\n    self.domains.add(domain)", "piece": "domain = get_domain(item['url'])"}
{"function_name": "ds_union", "function_define": "    root1 = ds_find(ar, bus1)\n    root2 = ds_find(ar, bus2)\n    if root1 == root2:", "piece": "root2 = ds_find(ar, bus2)"}
{"function_name": "ds_create", "function_define": "    for i in range(len(switch_bus)):\n    continue\n    bus1 = switch_bus[i]", "piece": "continue"}
{"function_name": "fill_bus_lookup", "function_define": "    for i in range(len(bus_index)):\n    bus_lookup[bus_index[i]] = i\n    for b in bus_index:", "piece": "bus_lookup[bus_index[i]] = i"}
{"function_name": "_build_bus_ppc", "function_define": "    mode = net['_options']['mode']\n    nr_xward = len(net.xward)\n    nr_trafo3w = len(net.trafo3w)", "piece": "nr_xward = len(net.xward)"}
{"function_name": "_get_motor_pq", "function_define": "    tab = net['motor']\n    cos_phi = tab['cos_phi'].values\n    s_mvar = p_mw / cos_phi", "piece": "cos_phi = tab['cos_phi'].values"}
{"function_name": "_add_c_to_ppc", "function_define": "    ppc['bus'][:, C_MAX] = 1.1\n    ppc['bus'][:, C_MIN] = 1.0\n    if len(lv_buses) > 0:", "piece": "ppc['bus'][:, C_MIN] = 1.0"}
{"function_name": "save_result", "function_define": "    file_name = 'output.txt'\n    f = open(file_name, 'w+')\n    f.write(text)", "piece": "f = open(file_name, 'w+')"}
{"function_name": "asym_encryption", "function_define": "    key = None\n    shift_count = 0\n    if cipher_no == 10:", "piece": "shift_count = 0"}
{"function_name": "cal_batch_loss", "function_define": "    start = 0\n    batch_loss_list = []\n    for i in range(batch_size):", "piece": "batch_loss_list = []"}
{"function_name": "_set_result", "function_define": "    future.set_result(cb())\n    except Exception as error:\n    future.set_exception(error)", "piece": "except Exception as error:"}
{"function_name": "__anext__", "function_define": "    future = asyncio.Future()\n    except StopIteration:\n    except Exception as e:", "piece": "except StopIteration:"}
{"function_name": "_deserialize", "function_define": "    error = None\n    error = err\n    fmt = self.format", "piece": "error = err"}
{"function_name": "refresh_token", "function_define": "    if self.osf:\n    if resp.status_code != 200:\n    resp_obj = json.loads(resp.text)", "piece": "if resp.status_code != 200:"}
{"function_name": "api_post", "function_define": "    if retries <= 0:\n    post_headers = self.headers\n    resp = {'status_code': 0}", "piece": "post_headers = self.headers"}
{"function_name": "api_post_bulk", "function_define": "    if retries <= 0:\n    post_headers = self.headers\n    resp = {'status_code': 0}", "piece": "post_headers = self.headers"}
{"function_name": "api_delete", "function_define": "    if retries <= 0:\n    delete_headers = self.headers\n    resp = {'status_code': 0}", "piece": "delete_headers = self.headers"}
{"function_name": "agent_checkin", "function_define": "    if body is None:\n    if isinstance(body, dict):\n    body = json.dumps(body)", "piece": "if isinstance(body, dict):"}
{"function_name": "create_document", "function_define": "    if body is None:\n    if isinstance(body, dict):\n    body = json.dumps(body)", "piece": "if isinstance(body, dict):"}
{"function_name": "pushFileDataToDb", "function_define": "    numRows = len(dataRows)\n    if numRows == 0:\n    continue", "piece": "if numRows == 0:"}
{"function_name": "highest_value", "function_define": "    if start != None:\n    if start.data > traversal:\n    traversal = start.data", "piece": "if start.data > traversal:"}
{"function_name": "lowest_value", "function_define": "    if start != None:\n    if start.data < traversal:\n    traversal = start.data", "piece": "if start.data < traversal:"}
{"function_name": "entropy_rate", "function_define": "    if len(self.pi) > 1:\n    pi = self.pi[0]\n    for i in range(self.__size):", "piece": "pi = self.pi[0]"}
{"function_name": "is_absorbing", "function_define": "    transient_indices = set()\n    progress = True\n    unknown_states = None", "piece": "progress = True"}
{"function_name": "is_regular", "function_define": "    d = np.diagonal(self.__p)\n    nz = np.count_nonzero(d)\n    if nz > 0:", "piece": "nz = np.count_nonzero(d)"}
{"function_name": "is_reversible", "function_define": "    if len(self.pi) > 1:\n    pi = self.pi[0]\n    x = pi[:, np.newaxis] * self.__p", "piece": "pi = self.pi[0]"}
{"function_name": "kemeny_constant", "function_define": "    fm = self.fundamental_matrix\n    if fm is None:\n    if fm.size == 1:", "piece": "if fm is None:"}
{"function_name": "mixing_rate", "function_define": "    if self.__slem is None:\n    mr = None\n    mr = -1.0 / np.log(self.__slem)", "piece": "mr = None"}
{"function_name": "relaxation_rate", "function_define": "    if self.__slem is None:\n    rr = None\n    rr = 1.0 / self.spectral_gap", "piece": "rr = None"}
{"function_name": "spectral_gap", "function_define": "    if self.__slem is None:\n    sg = None\n    sg = 1.0 - self.__slem", "piece": "sg = None"}
{"function_name": "mixing_time", "function_define": "    except Exception as e:\n    if cutoff_type == 'traditional':\n    cutoff = 0.25", "piece": "if cutoff_type == 'traditional':"}
{"function_name": "next_state", "function_define": "    rng = create_rng(seed)\n    except Exception as e:\n    if not output_index:", "piece": "except Exception as e:"}
{"function_name": "to_graph", "function_define": "    multi = validate_boolean(multi)\n    except Exception as e:\n    if multi:", "piece": "except Exception as e:"}
{"function_name": "to_sub_chain", "function_define": "    except Exception as e:\n    if error_message is not None:\n    raise ValueError(error_message)", "piece": "if error_message is not None:"}
{"function_name": "birth_death", "function_define": "    except Exception as e:\n    if p.shape[0] != q.shape[0]:\n    if not np.all(q + p <= 1.0):", "piece": "if p.shape[0] != q.shape[0]:"}
{"function_name": "fit_function", "function_define": "    except Exception as e:\n    if error_message is not None:\n    raise ValueError(error_message)", "piece": "if error_message is not None:"}
{"function_name": "from_dictionary", "function_define": "    d = validate_dictionary(d)\n    except Exception as e:\n    size = len(states)", "piece": "except Exception as e:"}
{"function_name": "from_graph", "function_define": "    graph = validate_graph(graph)\n    except Exception as e:\n    states = list(graph.nodes)", "piece": "except Exception as e:"}
{"function_name": "from_matrix", "function_define": "    m = validate_matrix(m)\n    except Exception as e:\n    p = np.copy(m)", "piece": "except Exception as e:"}
{"function_name": "gamblers_ruin", "function_define": "    except Exception as e:\n    p, _ = gamblers_ruin(size, w)\n    mc = MarkovChain(p, states)", "piece": "p, _ = gamblers_ruin(size, w)"}
{"function_name": "identity", "function_define": "    except Exception as e:\n    p = np.eye(size, dtype=float)\n    mc = MarkovChain(p, states)", "piece": "p = np.eye(size, dtype=float)"}
{"function_name": "proj_nearby", "function_define": "    projective = True\n    max_length = {'train': 20}\n    lr = 0.0001", "piece": "max_length = {'train': 20}"}
{"function_name": "proj_distant", "function_define": "    projective = True\n    max_length = {'train': 20}\n    lr = 0.0001", "piece": "max_length = {'train': 20}"}
{"function_name": "run_eval", "function_define": "    runner = Runner()\n    if not compute_loss:\n    if compute_loss:", "piece": "if not compute_loss:"}
{"function_name": "finetune", "function_define": "    if max_length is None:\n    max_length = {}\n    for wh in samples:", "piece": "max_length = {}"}
{"function_name": "compute_loss", "function_define": "    mask = state['batch']['mask']\n    ppt_loss /= mask.size(0)\n    state['loss'] = loss", "piece": "ppt_loss /= mask.size(0)"}
{"function_name": "build_vocab", "function_define": "    pretrained transformer, or from\n    instances directly.\n    if from_transformer:", "piece": "instances directly."}
{"function_name": "w_intmask", "function_define": "    import sys\n    n &= sys.maxsize * 2 + 1\n    if n > sys.maxsize:", "piece": "n &= sys.maxsize * 2 + 1"}
{"function_name": "test_int_mod", "function_define": "    import sys\n    from __pypy__ import intop\n    assert intop.int_mod(41, 3) == 2", "piece": "from __pypy__ import intop"}
{"function_name": "test_int_lshift", "function_define": "    import sys\n    from __pypy__ import intop\n    if sys.maxsize == 2 ** 31 - 1:", "piece": "from __pypy__ import intop"}
{"function_name": "test_uint_rshift", "function_define": "    import sys\n    from __pypy__ import intop\n    if sys.maxsize == 2 ** 31 - 1:", "piece": "from __pypy__ import intop"}
{"function_name": "stopAnimation", "function_define": "    if self.m_timerId != -1:\n    self.killTimer(self.m_timerId)\n    self.m_timerId = -1", "piece": "self.killTimer(self.m_timerId)"}
{"function_name": "update_health", "function_define": "    global last_health, cur_health\n    last_health = health\n    cur_health += health", "piece": "last_health = health"}
{"function_name": "update_hedons", "function_define": "    global last_hedons, cur_hedons\n    last_hedons = hedons\n    cur_hedons += hedons", "piece": "last_hedons = hedons"}
{"function_name": "perform_activity", "function_define": "    result_health = 0\n    result_hedons = 0\n    duration = minutes", "piece": "result_hedons = 0"}
{"function_name": "get_tokenizer", "function_define": "    if args.task == 'amp':\n    elif args.task == 'tfbind':\n    alphabet = ['A', 'C', 'T', 'G']", "piece": "elif args.task == 'tfbind':"}
{"function_name": "get_cam_network", "function_define": "    Parameters\n    name: str\n    the name of the network.", "piece": "name: str"}
{"function_name": "upsample_feature", "function_define": "    output = SparseConvNetTensor()\n    output.metadata = hr.metadata\n    lr_start_index = 0", "piece": "output.metadata = hr.metadata"}
{"function_name": "compare_sparse", "function_define": "    if x.features.is_cuda:\n    cL = cL.cuda()\n    cR = cR.cuda()", "piece": "cL = cL.cuda()"}
{"function_name": "checkpoint_save", "function_define": "    model.cpu()\n    if use_cuda:\n    model.cuda()", "piece": "if use_cuda:"}
{"function_name": "output_json", "function_define": "    if 'message' not in data:\n    if current_app.debug:\n    settings.setdefault('indent', 4)", "piece": "if current_app.debug:"}
{"function_name": "onAdvEvent", "function_define": "    htmltext = event\n    st = player.getQuestState(qn)\n    if not st:", "piece": "st = player.getQuestState(qn)"}
{"function_name": "toBinaryString", "function_define": "    ret = []\n    for c in text:\n    if c == 'F' or c == 'L':", "piece": "for c in text:"}
{"function_name": "github_api", "function_define": "    text = None\n    for app in apps:\n    text = api_call.read().decode()", "piece": "for app in apps:"}
{"function_name": "create_from_api", "function_define": "    info = github_api(dummy.api_url)\n    merged = info['merged']\n    if info['state'] != 'closed':", "piece": "merged = info['merged']"}
{"function_name": "run_flann", "function_define": "    start = timeit.default_timer()\n    data = sparse_data[0].toarray()\n    stop = timeit.default_timer()", "piece": "data = sparse_data[0].toarray()"}
{"function_name": "read_quotes", "function_define": "    for security in securities:\n    sleep(1.1)\n    except URLError as ex:", "piece": "sleep(1.1)"}
{"function_name": "get_distance", "function_define": "    if len(tmp) != 0:\n    i = tmp[0]\n    if 'm' in sentence[i]:", "piece": "i = tmp[0]"}
{"function_name": "get_order", "function_define": "    if len(tmp) != 0:\n    i = tmp[0]\n    if sentence[i] == '\u6b21':", "piece": "i = tmp[0]"}
{"function_name": "get_direction", "function_define": "    if len(tmp) != 0:\n    i = tmp[0]\n    direction = sentence[i]", "piece": "i = tmp[0]"}
{"function_name": "get_action", "function_define": "    if len(tmp) != 0:\n    i = tmp[0]\n    action = sentence[i]", "piece": "i = tmp[0]"}
{"function_name": "get_condition", "function_define": "    if len(tmp) != 0:\n    i = tmp[0]\n    condition = sentence[i]", "piece": "i = tmp[0]"}
{"function_name": "plot_time_shot", "function_define": "    fg = plt.figure()\n    ax = fg.add_subplot(111)\n    if arg == 'rho_eq':", "piece": "ax = fg.add_subplot(111)"}
{"function_name": "plot_scalar_data", "function_define": "    fg = plt.figure()\n    ax = fg.add_subplot(111)\n    lw = 1.0", "piece": "ax = fg.add_subplot(111)"}
{"function_name": "clearConsole", "function_define": "    command = 'clear'\n    if os.name in ('nt', 'dos'):\n    command = 'cls'", "piece": "if os.name in ('nt', 'dos'):"}
{"function_name": "convertCsv", "function_define": "    row_to_process = 0\n    account_name = None\n    account_type = None", "piece": "account_name = None"}
{"function_name": "load_toy_4", "function_define": "    cl1_y = np.array([0] * n)\n    cl2_y = np.array([1] * n)\n    cl3_y = np.array([2] * n)", "piece": "cl2_y = np.array([1] * n)"}
{"function_name": "dump_pickle", "function_define": "    with open(path, 'wb') as f:\n    pickle.dump(data, f)\n    except Exception as e:", "piece": "pickle.dump(data, f)"}
{"function_name": "load_pickle", "function_define": "    with open(path, 'rb') as f:\n    data = pickle.load(f)\n    except Exception as e:", "piece": "data = pickle.load(f)"}
{"function_name": "get_stream", "function_define": "    with self.input as input_stream:\n    yield proc.stdout\n    proc.communicate()", "piece": "yield proc.stdout"}
{"function_name": "setregval", "function_define": "    global largestSeen\n    regs[reg] = val\n    largestSeen = val", "piece": "regs[reg] = val"}
{"function_name": "hdf_to_csv", "function_define": "    for file in files:\n    chanIDs = rf['DYNAMIC DATA']\n    channel_vals = {}", "piece": "chanIDs = rf['DYNAMIC DATA']"}
{"function_name": "hdf_to_json", "function_define": "    for file in files:\n    chanIDs = rf['DYNAMIC DATA']\n    channel_vals = {}", "piece": "chanIDs = rf['DYNAMIC DATA']"}
{"function_name": "to_chunks", "function_define": "    chunks: List[bytes] = []\n    chunk = raw[i:i + chunk_size]\n    chunks.append(chunk)", "piece": "chunk = raw[i:i + chunk_size]"}
{"function_name": "wl_bt_ratings", "function_define": "    first = Rating(MU, SIGMA)\n    omega = dict()\n    delta = dict()", "piece": "omega = dict()"}
{"function_name": "wl_pl_ratings", "function_define": "    first = Rating(MU, SIGMA)\n    if Aq.most_common()[0][0] != 1:\n    print('Found tied ranks')", "piece": "if Aq.most_common()[0][0] != 1:"}
{"function_name": "decode_obj", "function_define": "    if isinstance(obj, unicode):\n    elif isinstance(obj, bytes):\n    if force_encoding is not None:", "piece": "elif isinstance(obj, bytes):"}
{"function_name": "_load_ckpt", "function_define": "    if ckpt_path is not None:\n    ckpt = torch.load(ckpt_path)\n    if self._config.is_train:", "piece": "ckpt = torch.load(ckpt_path)"}
{"function_name": "_log_test", "function_define": "    if self._config.is_train:\n    for k, v in ep_info.items():\n    if vids is not None:", "piece": "for k, v in ep_info.items():"}
{"function_name": "_evaluate", "function_define": "    env = self._env_eval\n    vids = []\n    ob = env.reset()", "piece": "vids = []"}
{"function_name": "_create_frame", "function_define": "    color = (200, 200, 200)\n    frame = env.render('rgb_array')\n    if self._config.record_caption:", "piece": "frame = env.render('rgb_array')"}
{"function_name": "le_textos", "function_define": "    Returns:\n    textos = []\n    while texto:", "piece": "textos = []"}
{"function_name": "separa_sentencas", "function_define": "    Arguments:\n    texto {[type]} -- [description]\n    Returns:", "piece": "texto {[type]} -- [description]"}
{"function_name": "separa_palavras", "function_define": "    Arguments:\n    frase {[str]} -- [Uma frase]\n    Returns:", "piece": "frase {[str]} -- [Uma frase]"}
{"function_name": "avalia_textos", "function_define": "    Arguments:\n    textos {[list]} -- [description]\n    ass_cp {[list]} -- [description]", "piece": "textos {[list]} -- [description]"}
{"function_name": "add_process", "function_define": "    process.asr_model = asr_model\n    self.db.session.add(process)\n    self.db.session.flush()", "piece": "self.db.session.add(process)"}
{"function_name": "update_process", "function_define": "    if status is not None:\n    process.status = status\n    if progress is not None:", "piece": "process.status = status"}
{"function_name": "get_report", "function_define": "    if email is not None:\n    processes = processes.all()\n    durations = {}", "piece": "processes = processes.all()"}
{"function_name": "test_set_ssl", "function_define": "    ctx = SSL.Context()\n    conn = SSL.Connection(ctx)\n    self.sslbio.set_ssl(conn)", "piece": "conn = SSL.Connection(ctx)"}
{"function_name": "printPath", "function_define": "    result = ''\n    for i in range(len(path)):\n    result = result + str(path[i])", "piece": "for i in range(len(path)):"}
{"function_name": "readGraph", "function_define": "    edgeList = []\n    count = 0\n    with open(name) as f:", "piece": "count = 0"}
{"function_name": "clusteringMethod", "function_define": "    if name == 'Louvain':\n    k = len(np.unique(listResult))\n    elif name == 'LouvainK':", "piece": "k = len(np.unique(listResult))"}
{"function_name": "plotMethod", "function_define": "    plt.close()\n    df = pd.read_csv(labelname)\n    print(ari)", "piece": "df = pd.read_csv(labelname)"}
{"function_name": "pre_order", "function_define": "    if self.data is not None:\n    yield self.data\n    if self.left:", "piece": "yield self.data"}
{"function_name": "in_order", "function_define": "    if self.left:\n    yield data\n    if self.data is not None:", "piece": "yield data"}
{"function_name": "post_order", "function_define": "    if self.left:\n    yield data\n    if self.right:", "piece": "yield data"}
{"function_name": "_rotate_left", "function_define": "    new_root = subtree.right\n    left = new_root.left\n    new_root.left = subtree", "piece": "left = new_root.left"}
{"function_name": "_rotate_right", "function_define": "    new_root = subtree.left\n    right = new_root.right\n    new_root.right = subtree", "piece": "right = new_root.right"}
{"function_name": "_term_handler", "function_define": "    self._the_end(True)\n    self._sig_term_received = True\n    self._on_interrupt_once()", "piece": "self._sig_term_received = True"}
{"function_name": "sanitise_fasta", "function_define": "    out = []\n    errors = []\n    for seq in seqs:", "piece": "errors = []"}
{"function_name": "get_filings_url", "function_define": "    except JSONDecodeError:\n    response_cik = payload['cik']\n    except KeyError:", "piece": "response_cik = payload['cik']"}
{"function_name": "setmode_pin", "function_define": "    id = id % 8\n    if mode == OUTPUT:\n    if mode == PULLUP:", "piece": "if mode == OUTPUT:"}
{"function_name": "preselection", "function_define": "    preselection_passed = False\n    if cnstr1:\n    if include_physical_constraints:", "piece": "if cnstr1:"}
{"function_name": "add_connection", "function_define": "    con = Connection(key, **values)\n    session.add(con)\n    session.commit()", "piece": "session.add(con)"}
{"function_name": "restore_data", "function_define": "    obj_id = self.toplevel_obj.id\n    if 'self' in data_ids:\n    task_id = 'restore_geometry'", "piece": "if 'self' in data_ids:"}
{"function_name": "__remove_polys", "function_define": "    subobjs = self._subobjs\n    verts = subobjs['vert']\n    old_count = self._data_row_count", "piece": "verts = subobjs['vert']"}
{"function_name": "__restore_polys", "function_define": "    subobjs = self._subobjs\n    verts = subobjs['vert']\n    old_count = self._data_row_count", "piece": "verts = subobjs['vert']"}
{"function_name": "getListByTitle", "function_define": "    sql = simpleToolSql('url')\n    print(res)\n    sql.close()", "piece": "print(res)"}
{"function_name": "getListFromSql", "function_define": "    sql = simpleToolSql('url')\n    print(res)\n    sql.close()", "piece": "print(res)"}
{"function_name": "updateUrl", "function_define": "    sql = simpleToolSql('url')\n    print(res)\n    sql.close()", "piece": "print(res)"}
{"function_name": "get_img_src_args", "function_define": "    src_kwargs = {}\n    img_attrs = {}\n    for k, v in kwargs.items():", "piece": "img_attrs = {}"}
{"function_name": "bf_image", "function_define": "    src_attr = 'src'\n    if lazy:\n    src_attr = 'data-src'", "piece": "if lazy:"}
{"function_name": "split_index", "function_define": "    idx = list(range(len))\n    final_list = []\n    for i in range(K):", "piece": "final_list = []"}
{"function_name": "k_fold_index", "function_define": "    split = split_index(K, len)\n    val = split[fold]\n    train = []", "piece": "val = split[fold]"}
{"function_name": "stat_dataset", "function_define": "    for img, target in dataset:\n    for k in target['labels']:\n    stats[class_ids[int(k)]] += 1", "piece": "for k in target['labels']:"}
{"function_name": "unique_enhancers", "function_define": "    Parameters\n    fname : str\n    PyRanges object with enhancers", "piece": "fname : str"}
{"function_name": "distance_weight", "function_define": "    is set to 0.\n    Parameters\n    promoter.", "piece": "Parameters"}
{"function_name": "enhancer2gene", "function_define": "    Parameters\n    peak_pr : PyRanges object\n    up : int, optional", "piece": "peak_pr : PyRanges object"}
{"function_name": "run_network", "function_define": "    Parameters\n    binding : str\n    tfs : list, optional", "piece": "binding : str"}
{"function_name": "test_SortedSet", "function_define": "    S = SortedSet()\n    self.assertEqual(len(S), 0)\n    S.add(1)", "piece": "self.assertEqual(len(S), 0)"}
{"function_name": "start_gbm", "function_define": "    y: 0-1 classification targets\n    Returns:\n    p = y.mean()", "piece": "Returns:"}
{"function_name": "update_leaves", "function_define": "    y: 0-1 classification targets\n    r: the current pseudo-residual\n    Returns:", "piece": "r: the current pseudo-residual"}
{"function_name": "update_residual", "function_define": "    added to the working response.\n    y: 0-1 classification targets\n    Returns:", "piece": "y: 0-1 classification targets"}
{"function_name": "get_batch", "function_define": "    state_t0_batch = list()\n    state_t1_batch = list()\n    action_batch = list()", "piece": "state_t1_batch = list()"}
{"function_name": "get_token", "function_define": "    Create authentication token.\n    ca_url: full url of CA server\n    ca_path: path to ca folder", "piece": "ca_url: full url of CA server"}
{"function_name": "get_ca_bin_paths", "function_define": "    ca_path = Path(ca_path)\n    step = None\n    step_ca = None", "piece": "step = None"}
{"function_name": "_create_ca", "function_define": "    import os\n    pki_dir = ca_path / CA_PKI_DIR\n    f.write(password)", "piece": "pki_dir = ca_path / CA_PKI_DIR"}
{"function_name": "scan_and_respond", "function_define": "    del creds.PASSWORD\n    last_comment = ''\n    while True:", "piece": "last_comment = ''"}
{"function_name": "draw_lines", "function_define": "    detection.\n    extrapolated_lines = []\n    if left_lane.size != 1:", "piece": "extrapolated_lines = []"}
{"function_name": "display_imgs", "function_define": "    if len(labels) > 0:\n    assert len(img_list) > 0\n    cmap = None", "piece": "assert len(img_list) > 0"}
{"function_name": "query_items", "function_define": "    x_additional_headers = None\n    if login_with_auth:\n    login_as_internal(login_as)", "piece": "if login_with_auth:"}
{"function_name": "test_json_media", "function_define": "    dump = {'life': 42}\n    resp.media = dump\n    assert r.json() == dump", "piece": "resp.media = dump"}
{"function_name": "test_background", "function_define": "    import time\n    time.sleep(3)\n    api.text = 'ok'", "piece": "time.sleep(3)"}
{"function_name": "make_clusters", "function_define": "    clusters = []\n    for i in xrange(len(g.grid)):\n    for m in xrange(len(g.grid[i])):", "piece": "for i in xrange(len(g.grid)):"}
{"function_name": "_test_get_value", "function_define": "    contact_field.value = None\n    for value, expected in tests:\n    contact_field.value = value", "piece": "for value, expected in tests:"}
{"function_name": "test_set_value", "function_define": "    contact_field.set_value(None)\n    contact_field.set_value('\u2603')\n    contact_field.set_value('hello')", "piece": "contact_field.set_value('\u2603')"}
{"function_name": "_call_objs", "function_define": "    e = Executor(collection=c)\n    e.execute('t3')\n    eq_(kwargs, {'foo': 'bar'})", "piece": "e.execute('t3')"}
{"function_name": "get_frame", "function_define": "    Returns:\n    The frame as a numpy array.\n    frames = []", "piece": "The frame as a numpy array."}
{"function_name": "take_exposure", "function_define": "    methods when video is desired.\n    can be used to disable timeout.\n    Returns:", "piece": "can be used to disable timeout."}
{"function_name": "_enum_common", "function_define": "    results = []\n    while True:\n    request = l_getreq(idx)", "piece": "while True:"}
{"function_name": "_set_format", "function_define": "    assert not self.started\n    fmt.fmt.pix.bytesperline = 0\n    fmt.fmt.pix.pixelformat = fourcc", "piece": "fmt.fmt.pix.bytesperline = 0"}
{"function_name": "_setup_buffers", "function_define": "    assert not self.started\n    assert len(self.bufmaps) == 0\n    assert reqbuf.count > 0", "piece": "assert len(self.bufmaps) == 0"}
{"function_name": "_dump_init", "function_define": "    self.dump_idx = 0\n    while True:\n    os.makedirs(self.dump_dir)", "piece": "while True:"}
{"function_name": "_dump_one", "function_define": "    self.dump_idx += 1\n    with open(file_path, 'wb') as f:\n    f.write(jpeg)", "piece": "with open(file_path, 'wb') as f:"}
{"function_name": "_get_available", "function_define": "    Sample return date:\n    keys = ['name', 'version']\n    updates = rexp.findall(out)", "piece": "keys = ['name', 'version']"}
{"function_name": "update_all", "function_define": "    is returned.\n    CLI Example:\n    if not to_update:", "piece": "CLI Example:"}
{"function_name": "list_downloads", "function_define": "    CLI Example:\n    outfiles = []\n    for f in files:", "piece": "outfiles = []"}
{"function_name": "download_all", "function_define": "    are now downloaded.\n    CLI Example:\n    for name in to_download:", "piece": "CLI Example:"}
{"function_name": "make_canvas", "function_define": "    top = tk.Tk()\n    canvas.pack()\n    canvas.xview_scroll(6, 'units')", "piece": "canvas.pack()"}
{"function_name": "test_from_jax", "function_define": "    for i in range(10):\n    for i in range(4):\n    for j in range(2):", "piece": "for i in range(4):"}
{"function_name": "global_alignment", "function_define": "    for i in range(1, len1 + 1):\n    s[i][0] = -i * penalty\n    for j in range(1, len2 + 1):", "piece": "s[i][0] = -i * penalty"}
{"function_name": "mid_column_score", "function_define": "    s[0][1] = -penalty\n    backtrack = [0] * (len(v) + 1)\n    for i in range(0, len(v) + 1):", "piece": "backtrack = [0] * (len(v) + 1)"}
{"function_name": "set_sum_two", "function_define": "    for a in A:\n    for b in B:\n    C.append(a + b)", "piece": "for b in B:"}
{"function_name": "set_sum_list", "function_define": "    S = Omega[0]\n    for i in range(1, len(Omega)):\n    S = set_sum_two(S, Omega[i])", "piece": "for i in range(1, len(Omega)):"}
{"function_name": "lp_dominate", "function_define": "    With LP in White & Clark\n    if len(U) == 0:\n    S = len(w)", "piece": "if len(U) == 0:"}
{"function_name": "dec_dominate", "function_define": "    if len(U) == 0:\n    S = len(w)\n    d = cvx.Variable()", "piece": "S = len(w)"}
{"function_name": "lex_less", "function_define": "    if w is None:\n    for i in range(len(u)):\n    if u[i] > w[i]:", "piece": "for i in range(len(u)):"}
{"function_name": "best_point", "function_define": "    w = None\n    for i in range(len(U)):\n    u = U[i]", "piece": "for i in range(len(U)):"}
{"function_name": "get_prefix", "function_define": "    if text:\n    for prefix in prefixes.keys():\n    if prefix in text.upper():", "piece": "for prefix in prefixes.keys():"}
{"function_name": "lookAtMatrix", "function_define": "    Lookat Matrix (aim/target)\n    mx = normalize(cross(up, mz))\n    my = normalize(cross(mz, mx))", "piece": "mx = normalize(cross(up, mz))"}
{"function_name": "matrixToRotation", "function_define": "    singular = sy < 1e-06\n    if not singular:\n    x = math.atan2(R[2][1], R[2][2])", "piece": "if not singular:"}
{"function_name": "quickSort", "function_define": "    if p <= q:\n    r = self.partition(nums, p, q)\n    if r == k - 1:", "piece": "r = self.partition(nums, p, q)"}
{"function_name": "create_ds", "function_define": "    if not mol_dbs:\n    mol_dbs = ['HMDB-v4']\n    if not adducts:", "piece": "mol_dbs = ['HMDB-v4']"}
{"function_name": "test_delete_ds", "function_define": "    db = DB(sm_config['db'])\n    ds_id = '2000-01-01'\n    ds_man.delete(ds)", "piece": "ds_id = '2000-01-01'"}
{"function_name": "test_add_ds", "function_define": "    db = DB(sm_config['db'])\n    ds_id = '2000-01-01'\n    ds_name = 'ds_name'", "piece": "ds_id = '2000-01-01'"}
{"function_name": "test_update_ds", "function_define": "    ds_id = '2000-01-01'\n    mol_db_mock.name = 'HMDB'\n    ds_man.update(ds)", "piece": "mol_db_mock.name = 'HMDB'"}
{"function_name": "is_mtz_file", "function_define": "    magic number.\"\"\"\n    with open(filename, 'rb') as fh:\n    magic = fh.read(4)", "piece": "with open(filename, 'rb') as fh:"}
{"function_name": "auto_logfiler", "function_define": "    if not working_directory:\n    number = _get_number()\n    if executable[-4:] == '.bat':", "piece": "number = _get_number()"}
{"function_name": "chef_monocarp", "function_define": "    T.sort()\n    for i in range(2 * n + 1):\n    DP[0][i] = 0", "piece": "for i in range(2 * n + 1):"}
{"function_name": "_cache_get", "function_define": "    Parameters\n    key : object\n    if key in _SymbolCache:", "piece": "key : object"}
{"function_name": "__init_cached__", "function_define": "    Parameters\n    key : object\n    It must be hashable.", "piece": "key : object"}
{"function_name": "scale_loss", "function_define": "    yield loss\n    cached_grads = []\n    if self._loss_idx > 0:", "piece": "cached_grads = []"}
{"function_name": "test_forward", "function_define": "    vocab_size = 10\n    sequence_len = 20\n    batch = 32", "piece": "sequence_len = 20"}
{"function_name": "reduce_vectors", "function_define": "    xlocs = ensure_row_vect(xlocs)\n    ylocs = ensure_row_vect(ylocs)\n    if np.round(norm1, 14) == 0:", "piece": "ylocs = ensure_row_vect(ylocs)"}
{"function_name": "dispGeometry", "function_define": "    if r == 0:\n    import matplotlib.pyplot as plt\n    nsites = len(self.xlocs)", "piece": "import matplotlib.pyplot as plt"}
{"function_name": "get_unique_sites", "function_define": "    if latt_vect1_mult.size == 0:\n    if latt_vect2_mult.size == 0:\n    xrav = xx.ravel()", "piece": "if latt_vect2_mult.size == 0:"}
{"function_name": "get_phase_mat", "function_define": "    phase_mat:\n    nsites = xdist_matrix.shape[0]\n    for ii in range(0, nsites):", "piece": "nsites = xdist_matrix.shape[0]"}
{"function_name": "_zero_grad", "function_define": "    for x in [Q, K]:\n    if x.grad is not None:\n    x.grad[...] = 0", "piece": "if x.grad is not None:"}
{"function_name": "test_correctness", "function_define": "    L = 3000\n    S = 3000\n    self._zero_grad(weights, values)", "piece": "S = 3000"}
{"function_name": "climb_stairs", "function_define": "    n: number of steps of staircase\n    Returns:\n    if n == 1:", "piece": "Returns:"}
{"function_name": "_create_majors", "function_define": "    majors = json.load(majors_file)\n    for major in majors:\n    major_entry = Major(name=major)", "piece": "for major in majors:"}
{"function_name": "_create_minors", "function_define": "    minors = json.load(minors_file)\n    for minor in minors:\n    minor_entry = Minor(name=minor)", "piece": "for minor in minors:"}
{"function_name": "_create_courses", "function_define": "    for course in courses:\n    course_entry.save()\n    except IntegrityError:", "piece": "course_entry.save()"}
{"function_name": "get_msgs", "function_define": "    while True:\n    msg = sub.recv()\n    if not msg:", "piece": "msg = sub.recv()"}
{"function_name": "connect_loop", "function_define": "    while True:\n    sub.connect(EDDN_ADDR)\n    get_msgs(sub, args)", "piece": "sub.connect(EDDN_ADDR)"}
{"function_name": "_cleanup", "function_define": "    ok, resp = fn(*args, **kwargs)\n    except Exception as e:\n    ok, resp = (False, e)", "piece": "except Exception as e:"}
{"function_name": "_download_file", "function_define": "    ix = url.rfind('?')\n    if ix != -1:\n    url = url[:ix]", "piece": "if ix != -1:"}
{"function_name": "_download_dir", "function_define": "    if depth == 0:\n    info(f'Processing URL `{url}`')\n    if not resp.ok:", "piece": "info(f'Processing URL `{url}`')"}
{"function_name": "center3d", "function_define": "    Centers the viewport to TLOC.\n    exp += '{\\n'\n    exp += '    $pt[3] = 1.0;\\n'", "piece": "exp += '{\\n'"}
{"function_name": "createTloc", "function_define": "    mc.refresh(force=True)\n    cursorPos = QtGui.QCursor.pos()\n    widgetHeight = widget.height()", "piece": "cursorPos = QtGui.QCursor.pos()"}
{"function_name": "elaborate", "function_define": "    m = Module()\n    m.d.sync += self.o_stb.eq(0)\n    stb_past = Signal(1)", "piece": "m.d.sync += self.o_stb.eq(0)"}
{"function_name": "test_chgdetector", "function_define": "    i_data = Signal(32, reset=0)\n    o_stb = Signal(1, reset=0)\n    o_data = Signal(32, reset=0)", "piece": "o_stb = Signal(1, reset=0)"}
{"function_name": "save_form", "function_define": "    user = request.user\n    instance.author = user\n    instance.modified_by = user", "piece": "instance.author = user"}
{"function_name": "update_db", "function_define": "    self.ensure_notempty()\n    cursor = self.conn.cursor()\n    result = cursor.fetchone()", "piece": "cursor = self.conn.cursor()"}
{"function_name": "ensure_notempty", "function_define": "    cursor = self.conn.cursor()\n    stmt = 'SELECT * FROM config'\n    cursor.execute(stmt)", "piece": "stmt = 'SELECT * FROM config'"}
{"function_name": "test_list_ddl", "function_define": "    cursor = con.cursor()\n    result = list(cursor)\n    assert result == []", "piece": "result = list(cursor)"}
{"function_name": "test_cursor_iter", "function_define": "    cur = con.cursor()\n    next(cur)\n    cur.execute('select 1')", "piece": "next(cur)"}
{"function_name": "open_many", "function_define": "    con = []\n    for i in range(3):\n    if cleanup:", "piece": "for i in range(3):"}
{"function_name": "dot_muncher", "function_define": "    undefined = _DIGITS[notfound]\n    iterator = iter(text)\n    while True:", "piece": "iterator = iter(text)"}
{"function_name": "test_bt_types", "function_define": "    lis = []\n    lis.apppend(self)\n    dic = {}", "piece": "lis.apppend(self)"}
{"function_name": "filter_clips", "function_define": "    for clip in clips:\n    clip['video_url'] = vid_id\n    for stat in unnecessary_stats:", "piece": "clip['video_url'] = vid_id"}
{"function_name": "downloadfile", "function_define": "    r = s.get(url)\n    if chunk:\n    f.write(chunk)", "piece": "if chunk:"}
{"function_name": "step_2_post", "function_define": "    first_blog = Blog.get_by_id(1)\n    first_blog.save()\n    if 'refresh' in request.forms:", "piece": "first_blog.save()"}
{"function_name": "compile_all", "function_define": "    if not out:\n    out = 'out/latex/' + exam\n    exam_data = get_exam(exam=exam)", "piece": "out = 'out/latex/' + exam"}
{"function_name": "runCommand", "function_define": "    output = ''\n    for line in p.stdout:\n    output += line", "piece": "for line in p.stdout:"}
{"function_name": "output_profiles", "function_define": "    if not pid:\n    if not all_instrumented_files:\n    growth_rate = 0.0", "piece": "if not all_instrumented_files:"}
{"function_name": "process_text", "function_define": "    text = text.lower()\n    words = text.split()\n    if stopwords:", "piece": "words = text.split()"}
{"function_name": "process_dataset", "function_define": "    if verbose:\n    print('\\nCleaning text...')\n    if verbose:", "piece": "print('\\nCleaning text...')"}
{"function_name": "_generate", "function_define": "    msg['Event'] = event_name\n    if event_name == 'DoCompletion':\n    if event_name == 'Goto':", "piece": "if event_name == 'DoCompletion':"}
{"function_name": "_return_buffer", "function_define": "    msg['IsFullList'] = False\n    if self._use_textdiffer:\n    cached_buffer = []", "piece": "if self._use_textdiffer:"}
{"function_name": "_assert_no_diff", "function_define": "    assert not ignore_order\n    value_processor = None\n    prev_name = prev_value = None", "piece": "value_processor = None"}
{"function_name": "_expand_cursor", "function_define": "    if sort:\n    for result in returned:\n    result.pop('_id', None)", "piece": "for result in returned:"}
{"function_name": "_scrub_kwargs", "function_define": "    scrubbed_kwargs = kwargs.copy()\n    for kw in keywords_to_scrub:\n    scrubbed_kwargs.pop(kw, None)", "piece": "for kw in keywords_to_scrub:"}
{"function_name": "add_hoist", "function_define": "    tokens: List[str] = auth.copy()\n    app.HOIST_AUTH = tokens\n    app.HOIST_WRAPPER = self", "piece": "app.HOIST_AUTH = tokens"}
{"function_name": "add_socket", "function_define": "    sock = app.HOIST_SOCKETS[route]\n    for i in sock.connect:\n    await websocket.accept()", "piece": "for i in sock.connect:"}
{"function_name": "merge_clusters", "function_define": "    for cluster_set in cluster_sets:\n    clusters = sorted(cluster_set)\n    cluster_id = clusters[0]", "piece": "clusters = sorted(cluster_set)"}
{"function_name": "get_s_exons", "function_define": "    cluster2updated_data = {}\n    if movements:\n    if disintegration:", "piece": "if movements:"}
{"function_name": "get_s_exon_msas", "function_define": "    s_exon_msas = dict()\n    msa_files = os.listdir(msa_path)\n    for msa_file in msa_files:", "piece": "msa_files = os.listdir(msa_path)"}
{"function_name": "create_week", "function_define": "    if request.is_ajax():\n    day = start\n    weekend = set([5, 6])", "piece": "day = start"}
{"function_name": "create_month", "function_define": "    if request.is_ajax():\n    month = date.today().month\n    year = date.today().year", "piece": "month = date.today().month"}
{"function_name": "create_twelve", "function_define": "    if request.is_ajax():\n    if fake_end.weekday() != 4:\n    end = fake_end", "piece": "if fake_end.weekday() != 4:"}
{"function_name": "query_lastrow_id", "function_define": "    with con:\n    cur = con.cursor()\n    cur.execute(sql)", "piece": "cur = con.cursor()"}
{"function_name": "check_bb_flag", "function_define": "    rows = self.query(sql_string)\n    bb_flag = rows[0][0]\n    bb_flag = 0", "piece": "bb_flag = rows[0][0]"}
{"function_name": "check_sell_flag", "function_define": "    sell_initiate = False\n    rows = self.query(sql_string)\n    sell_flag = rows[0][0]", "piece": "rows = self.query(sql_string)"}
{"function_name": "_setupLogging", "function_define": "    Setup event logging.\n    self._loggingPrefix = 'Refin '\n    logger = EventLogger()", "piece": "self._loggingPrefix = 'Refin '"}
{"function_name": "compate_output", "function_define": "    goods = 0\n    if out_1 == out_2:\n    goods += 1", "piece": "if out_1 == out_2:"}
{"function_name": "test_normalise", "function_define": "    image = image.astype(np.uint16)\n    xp = Backend.get_xp_module()\n    aprint(f'Error = {error}')", "piece": "xp = Backend.get_xp_module()"}
{"function_name": "testExecute", "function_define": "    s = Gaffer.ScriptNode()\n    s['plane'] = GafferScene.Plane()\n    s.save()", "piece": "s['plane'] = GafferScene.Plane()"}
{"function_name": "testWaitForImage", "function_define": "    s = Gaffer.ScriptNode()\n    s['plane'] = GafferScene.Plane()\n    s['render']['task'].execute()", "piece": "s['plane'] = GafferScene.Plane()"}
{"function_name": "testImageOutput", "function_define": "    s = Gaffer.ScriptNode()\n    s['plane'] = GafferScene.Plane()\n    c = Gaffer.Context()", "piece": "s['plane'] = GafferScene.Plane()"}
{"function_name": "testResolution", "function_define": "    s = Gaffer.ScriptNode()\n    s['render']['task'].execute()\n    s['render']['task'].execute()", "piece": "s['render']['task'].execute()"}
{"function_name": "testRenderRegion", "function_define": "    s = Gaffer.ScriptNode()\n    s['render']['task'].execute()\n    s['render']['task'].execute()", "piece": "s['render']['task'].execute()"}
{"function_name": "testTwoRenders", "function_define": "    sphere = GafferScene.Sphere()\n    errors = []\n    with Gaffer.Context() as c:", "piece": "errors = []"}
{"function_name": "testTraceSets", "function_define": "    sphere = GafferScene.Sphere()\n    group = GafferScene.Group()\n    set1 = GafferScene.Set()", "piece": "group = GafferScene.Group()"}
{"function_name": "testAdaptors", "function_define": "    sphere = GafferScene.Sphere()\n    sphere = GafferScene.Sphere()\n    render['task'].execute()", "piece": "sphere = GafferScene.Sphere()"}
{"function_name": "testLightFilters", "function_define": "    s = Gaffer.ScriptNode()\n    s['gobo'].loadShader('gobo')\n    s['group'] = GafferScene.Group()", "piece": "s['gobo'].loadShader('gobo')"}
{"function_name": "testAbortRaises", "function_define": "    s = Gaffer.ScriptNode()\n    s['plane'] = GafferScene.Plane()\n    s['shader'].loadShader('image')", "piece": "s['plane'] = GafferScene.Plane()"}
{"function_name": "testOSLShaders", "function_define": "    purple = GafferOSL.OSLShader()\n    green = GafferOSL.OSLShader()\n    mix = GafferOSL.OSLShader()", "piece": "green = GafferOSL.OSLShader()"}
{"function_name": "executeFrame", "function_define": "    with Gaffer.Context() as c:\n    c.setFrame(frame)\n    render['task'].execute()", "piece": "c.setFrame(frame)"}
{"function_name": "say_text", "function_define": "    OpenJTalk\u3092\u4f7f\u3063\u3066\u767a\u8a71\u3059\u308b\u3002\n    data = f.read()\n    io.send(ip, port, data)", "piece": "data = f.read()"}
{"function_name": "play_wav", "function_define": "    with open(wav_file, 'rb') as f:\n    data = f.read()\n    io.send(ip, port, data)", "piece": "data = f.read()"}
{"function_name": "put_placeholders", "function_define": "    inout_obj = get_inout_obj(obj)\n    if inout_obj is not None:\n    assert level == 0", "piece": "if inout_obj is not None:"}
{"function_name": "_update_mpi_args", "function_define": "    self.n_processes = n_processes\n    for name, value in args.items():\n    assert name.endswith('_layout')", "piece": "for name, value in args.items():"}
{"function_name": "_prepare_inputs", "function_define": "    inputs = []\n    args = {}\n    if arg_config:", "piece": "args = {}"}
{"function_name": "make_task", "function_define": "    global call_id_counter\n    call_id_counter += 1\n    call_id = call_id_counter", "piece": "call_id_counter += 1"}
{"function_name": "_override_arg", "function_define": "    result = None\n    if instance_attr is default:\n    result = proposal", "piece": "if instance_attr is default:"}
{"function_name": "save_to_file", "function_define": "    logger.info('Save to file...')\n    self.subtype = 'RegularSurface'\n    self.classname = 'surface'", "piece": "self.subtype = 'RegularSurface'"}
{"function_name": "_data_process", "function_define": "    These subfields are:\n    self._data_process_name()\n    self._data_process_context()", "piece": "self._data_process_name()"}
{"function_name": "_display_process", "function_define": "    as None/null.\n    visualized.\n    self._display_process_name()", "piece": "visualized."}
{"function_name": "_verify_path", "function_define": "    abspath = path.resolve()\n    if not dryrun:\n    if path.parent.exists():", "piece": "if not dryrun:"}
{"function_name": "read_formfactor", "function_define": "    for line in f:\n    if self.element in line:\n    ff_str = line[0:]", "piece": "if self.element in line:"}
{"function_name": "DefineAdder", "function_define": "    T = m.UInt(N)\n    class Adder(m.Circuit):\n    name = 'Adder{}'.format(N)", "piece": "class Adder(m.Circuit):"}
{"function_name": "connectRooms", "function_define": "    except Room.DoesNotExist:\n    if direction == 'n':\n    self.north = destinationRoomID", "piece": "if direction == 'n':"}
{"function_name": "enterNewRoom", "function_define": "    if type(command) == str:\n    if command == 'n':\n    print('We cannot go north')", "piece": "if command == 'n':"}
{"function_name": "binarize", "function_define": "    h, w = img.shape[:2]\n    if verbose:\n    f, ax = plt.subplots(2, 3)", "piece": "if verbose:"}
{"function_name": "dechiffrer", "function_define": "    retour = ''\n    ab1 = ab\n    for car in chaine_morse:", "piece": "ab1 = ab"}
{"function_name": "check_product", "function_define": "    if 'number' in new_values:\n    num = new_values['number']\n    n = int(num)", "piece": "num = new_values['number']"}
{"function_name": "initializer", "function_define": "    setattr(self, name, arg)\n    if not hasattr(self, name):\n    if default is not None:", "piece": "if not hasattr(self, name):"}
{"function_name": "buildQueryStr", "function_define": "    query = '?'\n    isFirstParam = True\n    if paramValue is not None:", "piece": "isFirstParam = True"}
{"function_name": "readConfFile", "function_define": "    if not os.path.exists(confFile):\n    execfile(confFile, g, l)\n    except Exception:", "piece": "execfile(confFile, g, l)"}
{"function_name": "getUnitType", "function_define": "    if multiplier == 1:\n    unitType = 'KiB'\n    elif multiplier == 2:", "piece": "unitType = 'KiB'"}
{"function_name": "train_model", "function_define": "    print('samples ', len(data))\n    for d in data:\n    x.append(np.stack(tmp, axis=2))", "piece": "for d in data:"}
{"function_name": "finished", "function_define": "    total = time.time() - started\n    output = '\\n'\n    except NameError:", "piece": "output = '\\n'"}
{"function_name": "selectCandidateB", "function_define": "    if len(sortedCL) == 0:\n    alpha = config.alpha\n    minCost = sortedCL[0].greedyCost", "piece": "alpha = config.alpha"}
{"function_name": "selectCandidateD", "function_define": "    if len(sortedCL) == 0:\n    alpha = config.alpha\n    minCost = sortedCL[0].cost", "piece": "alpha = config.alpha"}
{"function_name": "score_subjects", "function_define": "    df = self.data\n    mean_row = df_temp.mean(axis=1)\n    for i, m in enumerate(mean_row):", "piece": "mean_row = df_temp.mean(axis=1)"}
{"function_name": "write_config", "function_define": "    self.parser.write(cfgfile)\n    cfgfile.close()\n    except Exception:", "piece": "cfgfile.close()"}
{"function_name": "calc_sleeptime", "function_define": "    global minimum_boot_time\n    if sleeptime < 10:\n    sleeptime = int(val / 2)", "piece": "if sleeptime < 10:"}
{"function_name": "state_handler", "function_define": "    while True:\n    event = (yield)\n    f(*args, event=event, **kwargs)", "piece": "event = (yield)"}
{"function_name": "add_state", "function_define": "    raise ValueError()\n    raise TypeError()\n    if state.name in self.states:", "piece": "raise TypeError()"}
{"function_name": "func_wrapper", "function_define": "    while True:\n    event = (yield)\n    f(*args, event=event, **kwargs)", "piece": "event = (yield)"}
{"function_name": "state_b_handler", "function_define": "    if event == 'GOTO_C':\n    fsm.transition_to(STATE_C)\n    elif event == 'GOTO_A':", "piece": "fsm.transition_to(STATE_C)"}
{"function_name": "state_c_handler", "function_define": "    if event == 'GOTO_A':\n    fsm.transition_to(STATE_A)\n    elif event == 'END':", "piece": "fsm.transition_to(STATE_A)"}
{"function_name": "run_event_list", "function_define": "    fsm.start()\n    for event in event_list:\n    fsm.dispatch_event(event)", "piece": "for event in event_list:"}
{"function_name": "write_file", "function_define": "    new_file = open(filename, 'a')\n    for item in the_list:\n    new_file.write('%s\\n' % item)", "piece": "for item in the_list:"}
{"function_name": "rewrite_file", "function_define": "    Delete and write again\n    delete_file(filename)\n    write_file(filename, the_list)", "piece": "delete_file(filename)"}
{"function_name": "generateURL", "function_define": "    if self.__id:\n    stringBuilder += self.__id\n    self.__parameterCount += 1", "piece": "stringBuilder += self.__id"}
{"function_name": "_validateURL", "function_define": "    if parameters is not None:\n    for parameter in parameters:\n    if char in parameterValue:", "piece": "for parameter in parameters:"}
{"function_name": "generateHTMLlink", "function_define": "    fp = open(outfile, 'w')\n    print(urlString)\n    fp.write(urlString)", "piece": "print(urlString)"}
{"function_name": "generateHTMLpage", "function_define": "    generates a html page given\n    fp = open(outfile, 'w')\n    count = 1", "piece": "fp = open(outfile, 'w')"}
{"function_name": "csv2Lists", "function_define": "    csvLists = []\n    next(readCSV, None)\n    for row in readCSV:", "piece": "next(readCSV, None)"}
{"function_name": "saveQRCodeSVG", "function_define": "    buffer = io.BytesIO()\n    objectQRCode.svg(buffer)\n    print(list(buffer.getvalue()))", "piece": "objectQRCode.svg(buffer)"}
{"function_name": "saveQRCodePNG", "function_define": "    buffer = io.BytesIO()\n    objectQRCode.png(buffer)\n    print(list(buffer.getvalue()))", "piece": "objectQRCode.png(buffer)"}
{"function_name": "webcam_detection", "function_define": "    face_locations = []\n    face_encodings = []\n    face_names = []", "piece": "face_encodings = []"}
{"function_name": "report_concat", "function_define": "    machine_temp = []\n    machines = []\n    if file.endswith('.json'):", "piece": "machines = []"}
{"function_name": "space_count", "function_define": "    spc = ''\n    for x in range(l):\n    spc = spc + ' '", "piece": "for x in range(l):"}
{"function_name": "generate_result", "function_define": "    list_1 = []\n    list_2 = []\n    count = 0", "piece": "list_2 = []"}
{"function_name": "map_column_type", "function_define": "    if property_type is URLProperty:\n    int(value)\n    except (ValueError, TypeError):", "piece": "int(value)"}
{"function_name": "update_source", "function_define": "    Scenarios:\n    session = self.Session()\n    session.commit()", "piece": "session = self.Session()"}
{"function_name": "get_supplier", "function_define": "    session = self.Session()\n    except NoResultFound:\n    finally:", "piece": "except NoResultFound:"}
{"function_name": "test_create_host", "function_define": "    assert 'status' in actual\n    assert 'status' in expected\n    del actual['status']", "piece": "assert 'status' in expected"}
{"function_name": "test_delete_host", "function_define": "    expected = None\n    with allure.step('Delete host'):\n    assert actual == expected", "piece": "with allure.step('Delete host'):"}
{"function_name": "update_script", "function_define": "    if f.read(2) != b'#!':\n    f.seek(0)\n    lines = list(f)", "piece": "f.seek(0)"}
{"function_name": "update_pyc", "function_define": "    with open(filename, 'rb') as f:\n    magic = f.read(MAGIC_LENGTH)\n    code = marshal.load(f)", "piece": "magic = f.read(MAGIC_LENGTH)"}
{"function_name": "_update_pth_file", "function_define": "    with open(pth_filename) as f:\n    lines = f.readlines()\n    changed = False", "piece": "lines = f.readlines()"}
{"function_name": "remove_local", "function_define": "    if os.path.exists(local_dir):\n    debug('D {}'.format(local_dir))\n    shutil.rmtree(local_dir)", "piece": "debug('D {}'.format(local_dir))"}
{"function_name": "update_paths", "function_define": "    for lib_dir in venv.lib_dirs:\n    update_pycs(lib_dir, new_path)\n    remove_local(venv.path)", "piece": "update_pycs(lib_dir, new_path)"}
{"function_name": "get_orig_path", "function_define": "    virtualenv\n    for line in activate:\n    if line.startswith(possible):", "piece": "for line in activate:"}
{"function_name": "_handle_sub", "function_define": "    text = match.group()\n    start, end = match.span()\n    g_start, g_end = match.span(1)", "piece": "start, end = match.span()"}
{"function_name": "parse_file2lines", "function_define": "    lines = []\n    with open(filename) as f:\n    lines = f.readlines()", "piece": "with open(filename) as f:"}
{"function_name": "align_simaligner", "function_define": "    moden = 'itermax'\n    for lang in langs:\n    if lang in ['de', 'cs']:", "piece": "for lang in langs:"}
{"function_name": "parse_json", "function_define": "    result = ''\n    if data:\n    jsns = json.loads(data)[0]", "piece": "if data:"}
{"function_name": "campo_pot", "function_define": "    puntos = self.marker\n    v_pot = 0\n    for i in range(0, len(puntos)):", "piece": "v_pot = 0"}
{"function_name": "convert_vect", "function_define": "    vx = lineal * math.cos(angular)\n    vy = lineal * math.sin(angular)\n    v = np.array([vx, vy, 0.0])", "piece": "vy = lineal * math.sin(angular)"}
{"function_name": "_choose_device", "function_define": "    dev = to.device('cpu')\n    if 'TVO_GPU' in os.environ:\n    dev = to.device(f'cuda:{gpu_n}')", "piece": "if 'TVO_GPU' in os.environ:"}
{"function_name": "minSwaps", "function_define": "    n = len(grid)\n    rows = [0 for _ in range(n)]\n    for i in range(n):", "piece": "rows = [0 for _ in range(n)]"}
{"function_name": "solveQuestion", "function_define": "    total = 0\n    while total < value:\n    total = 4 * n * n - 4 * n + 1", "piece": "while total < value:"}
{"function_name": "get_support_K", "function_define": "    assert config['K'] == 1\n    K = config['K'] + 1\n    K = config['K'] + 1", "piece": "K = config['K'] + 1"}
{"function_name": "count_tokens", "function_define": "    token_counter = dict()\n    for word in vocabulary:\n    token_counter[word] = 0", "piece": "for word in vocabulary:"}
{"function_name": "w2v_embed", "function_define": "    for token in tokens:\n    if token in model:\n    total += model[token]", "piece": "if token in model:"}
{"function_name": "load_games", "function_define": "    selection = self.get_selection()\n    self.liststore.clear()\n    self.liststore.clear()", "piece": "self.liststore.clear()"}
{"function_name": "row_activated", "function_define": "    rec, ply = self.get_record(path)\n    if rec is None:\n    self.gamemodel = GameModel()", "piece": "if rec is None:"}
{"function_name": "test_bool", "function_define": "    res = t.Bool().check(True)\n    self.assertEqual(res, True)\n    res = t.Bool().check(False)", "piece": "self.assertEqual(res, True)"}
{"function_name": "test_call", "function_define": "    if value != 'foo':\n    trafaret = t.Call(validator)\n    res = trafaret.check('foo')", "piece": "trafaret = t.Call(validator)"}
{"function_name": "test_old_keys", "function_define": "    class OldKey(object):\n    data = value.pop('testkey')\n    yield ('testkey', data)", "piece": "data = value.pop('testkey')"}
{"function_name": "test_base3", "function_define": "    res = trafaret.check({'foo': 4})\n    trafaret.allow_extra('*')\n    trafaret.ignore_extra('fooz')", "piece": "trafaret.allow_extra('*')"}
{"function_name": "test_email", "function_define": "    res = t.Email().check('<EMAIL>')\n    self.assertEqual(res, '<EMAIL>')\n    self.assertEqual(res, True)", "piece": "self.assertEqual(res, '<EMAIL>')"}
{"function_name": "test_enum", "function_define": "    res = trafaret.check('foo')\n    res = trafaret.check(1)\n    res = extract_error(trafaret, 2)", "piece": "res = trafaret.check(1)"}
{"function_name": "test_float_repr", "function_define": "    res = t.Float()\n    res = t.Float(gte=1)\n    res = t.Float(lte=10)", "piece": "res = t.Float(gte=1)"}
{"function_name": "test_int", "function_define": "    res = repr(t.Int())\n    self.assertEqual(res, '<Int>')\n    res = t.Int().check(5)", "piece": "self.assertEqual(res, '<Int>')"}
{"function_name": "test_key", "function_define": "    default = lambda: 1\n    default = lambda: None\n    self.assertEqual(res, [])", "piece": "default = lambda: None"}
{"function_name": "test_list_meta", "function_define": "    res = t.List[t.Int]\n    res = t.List[t.Int, 1:]\n    res = t.List[:10, t.Int]", "piece": "res = t.List[t.Int, 1:]"}
{"function_name": "test_meta_res", "function_define": "    res = (t.Int > 5).check(10)\n    self.assertEqual(res, 10)\n    res = (t.Int < 3).check(1)", "piece": "self.assertEqual(res, 10)"}
{"function_name": "test_str_bool", "function_define": "    res = t.StrBool().check(1)\n    self.assertEqual(res, True)\n    res = t.StrBool().check(0)", "piece": "self.assertEqual(res, True)"}
{"function_name": "test_meta", "function_define": "    self.assertEqual(res, 6)\n    self.assertEqual(res, '4.0')\n    res = t.Int | t.String", "piece": "self.assertEqual(res, '4.0')"}
{"function_name": "test_type", "function_define": "    res = t.Type(int)\n    c = t.Type[int]\n    res = c.check(1)", "piece": "c = t.Type[int]"}
{"function_name": "test_subclass", "function_define": "    res = t.Subclass(type)\n    c = t.Subclass[type]\n    class Type(type):", "piece": "c = t.Subclass[type]"}
{"function_name": "draw_caizi_nn", "function_define": "    de = EdgeBrush('-->', ax)\n    ude = EdgeBrush('---', ax)\n    da, db = (0.8, 1.0)", "piece": "ude = EdgeBrush('---', ax)"}
{"function_name": "del_by_1", "function_define": "    st1 = st1.lower()\n    assert len(st1) - len(st2) == 1\n    except AssertionError:", "piece": "assert len(st1) - len(st2) == 1"}
{"function_name": "insert_by_one", "function_define": "    import string\n    st1 = st1.lower()\n    st2 = st2.lower()", "piece": "st1 = st1.lower()"}
{"function_name": "replace_by_one", "function_define": "    st1 = st1.lower()\n    st2 = st2.lower()\n    except AssertionError:", "piece": "st2 = st2.lower()"}
{"function_name": "dummy_filelist", "function_define": "    root_file.touch()\n    first_dir = tmp_path / 'first'\n    first_dir.mkdir()", "piece": "first_dir = tmp_path / 'first'"}
{"function_name": "okPressed", "function_define": "    if i_apply.data:\n    self.m_config.userWantsToQuit()\n    self.m_HSubscriber.unregister()", "piece": "self.m_config.userWantsToQuit()"}
{"function_name": "test_add_link", "function_define": "    yield from self.test_create()\n    relation = 'relation_type'\n    title = 'title'", "piece": "relation = 'relation_type'"}
{"function_name": "test_list_filter", "function_define": "    docs = (doc_1, doc_2, doc_3)\n    for doc in docs:\n    yield from self._create(*doc)", "piece": "for doc in docs:"}
{"function_name": "generator_fn", "function_define": "    layers = tf.contrib.layers\n    framework = tf.contrib.framework\n    with f1, f2:", "piece": "framework = tf.contrib.framework"}
{"function_name": "discriminator_fn", "function_define": "    layers = tf.contrib.layers\n    framework = tf.contrib.framework\n    net = layers.flatten(net)", "piece": "framework = tf.contrib.framework"}
{"function_name": "provide_data", "function_define": "    slim = tf.contrib.slim\n    reader = tf.TFRecordReader\n    image, = provider.get(['image'])", "piece": "reader = tf.TFRecordReader"}
{"function_name": "_make_col_name", "function_define": "    og_col_name = col_name\n    while col_name in cols:\n    col_name = f'{og_col_name}.{c}'", "piece": "while col_name in cols:"}
{"function_name": "is_retraining", "function_define": "    self._refresh_analysis()\n    if not training:\n    self._refresh_analysis()", "piece": "if not training:"}
{"function_name": "make_prediction", "function_define": "    if not self.has_trained_model:\n    data_file = io.StringIO()\n    data_file.seek(0)", "piece": "data_file = io.StringIO()"}
{"function_name": "get_session_form", "function_define": "    form.is_valid()\n    del session[form_class.__name__]\n    form = form_class(**kwargs)", "piece": "del session[form_class.__name__]"}
{"function_name": "dict_pack", "function_define": "    pack = []\n    for data in data_tuple:\n    index = 0", "piece": "for data in data_tuple:"}
{"function_name": "get_page", "function_define": "    except PageNotAnInteger:\n    page = paginator.page(1)\n    except EmptyPage:", "piece": "page = paginator.page(1)"}
{"function_name": "__pull_repo", "function_define": "    folder = None\n    start_sha = None\n    if exists:", "piece": "start_sha = None"}
{"function_name": "callback_left_0", "function_define": "    self.t0 = time.time()\n    except CvBridgeError as e:\n    print(e)", "piece": "except CvBridgeError as e:"}
{"function_name": "ball_tracking", "function_define": "    self.ball_cand_box = []\n    image_ori = image.copy()\n    for i in range(len(stats)):", "piece": "image_ori = image.copy()"}
{"function_name": "robot_tracking", "function_define": "    self.robot_box = []\n    image_ori = image.copy()\n    img = np.ascontiguousarray(img)", "piece": "image_ori = image.copy()"}
{"function_name": "check_iou", "function_define": "    no_ball_box = []\n    centroid_ball = []\n    if len(robot_box) < 1:", "piece": "centroid_ball = []"}
{"function_name": "get_depth_height", "function_define": "    cx = 320\n    cy = 160\n    focal_length = 343.159", "piece": "cy = 160"}
{"function_name": "draw_point_court", "function_define": "    real_pix_point_list = []\n    predict_pix_point_list = []\n    landing_point_list = []", "piece": "predict_pix_point_list = []"}
{"function_name": "check_ball_seq", "function_define": "    global save_flag\n    disappear_cnt += 1\n    if disappear_cnt == 5:", "piece": "disappear_cnt += 1"}
{"function_name": "initnodes", "function_define": "    for row in range(self.size):\n    for col in range(self.size):\n    node = Node(row, col)", "piece": "for col in range(self.size):"}
{"function_name": "fillgrid", "function_define": "    for j, node in enumerate(row):\n    if custom[i][j] != 0:\n    node.original = True", "piece": "if custom[i][j] != 0:"}
{"function_name": "solve_smart", "function_define": "    to_solve = self.copy()\n    unique = {'solved_once': False}\n    best_nodes = []", "piece": "unique = {'solved_once': False}"}
{"function_name": "make_puzzle", "function_define": "    if not self.is_valid:\n    puzzle = self.copy()\n    cur_diff = 0", "piece": "puzzle = self.copy()"}
{"function_name": "gather_best_node", "function_define": "    best_nodes = []\n    for node in sudoku.nodes:\n    if not node.value == 0:", "piece": "for node in sudoku.nodes:"}
{"function_name": "executeFill", "function_define": "    to_solve.print(to_solve)\n    if node is None:\n    random.shuffle(options)", "piece": "if node is None:"}
{"function_name": "showHistory", "function_define": "    train history\ub97c \uadf8\ub798\ud504\ub85c \ub098\ud0c0\ub0c4\n    if self.history == None:\n    print('\ud83d\udc08  \ud559\uc2b5\ub0b4\uc5ed\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.')", "piece": "if self.history == None:"}
{"function_name": "ajax_request", "function_define": "    status_code = 200\n    except Http404:\n    status_code = 404", "piece": "except Http404:"}
{"function_name": "decode_fixed", "function_define": "    results = {}\n    self.p += length\n    for bits in bitslist:", "piece": "self.p += length"}
{"function_name": "decode_variable", "function_define": "    results = {}\n    r = self.decode_fixed(fixed)\n    results.update(r)", "piece": "r = self.decode_fixed(fixed)"}
{"function_name": "decode_compound", "function_define": "    indicator_octets = 0\n    indicator_octetslen = 0\n    while True:", "piece": "indicator_octetslen = 0"}
{"function_name": "decode_explicit", "function_define": "    length = self.bytes[self.p]\n    results = {}\n    self.p += length", "piece": "results = {}"}
{"function_name": "funkcija", "function_define": "    self.pro\u010ditaj(JS.FUNCTION)\n    ime = self.pro\u010ditaj(JS.IME)\n    self.pro\u010ditaj(JS.O_OTV)", "piece": "ime = self.pro\u010ditaj(JS.IME)"}
{"function_name": "removeFeatures", "function_define": "    for feature in features:\n    if feature in list:\n    list.remove(feature)", "piece": "if feature in list:"}
{"function_name": "set_info", "function_define": "    Is it behavioral training?\n    what is the run number?\n    what is the subject_id?", "piece": "what is the run number?"}
{"function_name": "get_runfile_info", "function_define": "    gets info for the run\n    Returns:\n    self.run_info = {}", "piece": "Returns:"}
{"function_name": "start_timer", "function_define": "    Returns:\n    t0           : the start time\n    self.timer_info = {}", "piece": "t0           : the start time"}
{"function_name": "show_scoreboard", "function_define": "    feedback_all = []\n    for obj in taskObjs:\n    t_name = obj.name", "piece": "for obj in taskObjs:"}
{"function_name": "init_run", "function_define": "    initializing the run:\n    getting run file\n    starting the timer", "piece": "getting run file"}
{"function_name": "simulate_fmri", "function_define": "    MR_settings.update(**kwargs)\n    globalClock = core.Clock()\n    output = u'vol    onset key\\n'", "piece": "globalClock = core.Clock()"}
{"function_name": "test_struct_tag", "function_define": "    tag1 = TypeTag('Struct', tag1)\n    tag2 = TypeTag('Struct', tag2)\n    tag1s = tag1.serialize()", "piece": "tag2 = TypeTag('Struct', tag2)"}
{"function_name": "include_content", "function_define": "    from cms.models import Content\n    except Exception as e:\n    page = None", "piece": "except Exception as e:"}
{"function_name": "take_turn", "function_define": "    start = time.time()\n    depth = 2\n    best_move = None", "piece": "depth = 2"}
{"function_name": "__minimax", "function_define": "    if depth == 0:\n    if maximizing:\n    heuristic = 0", "piece": "if maximizing:"}
{"function_name": "_check_table", "function_define": "    logger.info(check_table_sql)\n    table_row = rs.fetchone()[0]\n    if not table_row:", "piece": "table_row = rs.fetchone()[0]"}
{"function_name": "unittest", "function_define": "    zipname = '../TestData/test.zip'\n    loader = PathLoader()\n    loader.load(path)", "piece": "loader = PathLoader()"}
{"function_name": "obj_load", "function_define": "    V, Vi = ([], [])\n    with open(filename) as f:\n    for line in f.readlines():", "piece": "with open(filename) as f:"}
{"function_name": "test_files", "function_define": "    dest = 'test_api_file'\n    f = open(dest, 'rb')\n    f.close()", "piece": "f = open(dest, 'rb')"}
{"function_name": "_gen_data", "function_define": "    for word in words2:\n    type_ = self.get_word_type(word)\n    result[type_].append(word)", "piece": "type_ = self.get_word_type(word)"}
{"function_name": "from_factory", "function_define": "    inputs = []\n    arguments = []\n    run_id = cls.generate_id(client)", "piece": "arguments = []"}
{"function_name": "to_stream_repr", "function_define": "    stream_repr = []\n    for input_ in self.inputs:\n    if input_.mapped_to:", "piece": "for input_ in self.inputs:"}
{"function_name": "add_subprocess", "function_define": "    process_order = 0\n    if self.subprocesses:\n    sp = self.subprocesses[i - 1]", "piece": "if self.subprocesses:"}
{"function_name": "from_jsonld", "function_define": "    if isinstance(data, cls):\n    if not isinstance(data, dict):\n    raise ValueError(data)", "piece": "if not isinstance(data, dict):"}
{"function_name": "gateway_url", "function_define": "    gateway_name = 'gateway_spark'\n    host = 'vm-75109.lal.in2p3.fr'\n    port = 8443", "piece": "host = 'vm-75109.lal.in2p3.fr'"}
{"function_name": "kthSmallest", "function_define": "    medians = []\n    for i in range(len(nums)):\n    self.add(nums[i], i, k)", "piece": "for i in range(len(nums)):"}
{"function_name": "play_next_hand", "function_define": "    dealer = player_table[0]\n    if my_bid_turn() == 1:\n    elif my_bid_turn() == 2:", "piece": "if my_bid_turn() == 1:"}
{"function_name": "deal_my_hand", "function_define": "    tmplist = []\n    while len(tmplist) < 13:\n    tmpcard = draw_card()", "piece": "while len(tmplist) < 13:"}
{"function_name": "_init_bilinear", "function_define": "    shape = arr.shape\n    f = np.ceil(shape[3] / 2.0)\n    for i in range(np.prod(shape)):", "piece": "f = np.ceil(shape[3] / 2.0)"}
{"function_name": "_init_weight", "function_define": "    shape = arr.shape\n    hw_scale = 1.0\n    if len(shape) > 2:", "piece": "hw_scale = 1.0"}
{"function_name": "discount_rewards", "function_define": "    reward_shape = rewards.shape\n    if len(reward_shape) == 1:\n    running_add = 0", "piece": "if len(reward_shape) == 1:"}
{"function_name": "getStockData", "function_define": "    global stock_codes\n    code_name_price = []\n    df_len = len(df)", "piece": "code_name_price = []"}
{"function_name": "__selectWindow", "function_define": "    x = rect.width() // 8\n    y = rect.height() // 2\n    if choice == 'W':", "piece": "y = rect.height() // 2"}
{"function_name": "withdraw", "function_define": "    row_pos = []\n    if direction == 'B':\n    direction = '\u4e70\u5165'", "piece": "if direction == 'B':"}
{"function_name": "setFlags", "function_define": "    global is_start, is_ordered\n    if is_start is False:\n    is_ordered = [1] * NUM_OF_STOCKS", "piece": "if is_start is False:"}
{"function_name": "updateControls", "function_define": "    if is_start:\n    if actual_code:\n    if is_ordered[row] == 1:", "piece": "if actual_code:"}
{"function_name": "hrs_order_plot", "function_define": "    start_date: date\n    end_date: date\n    df = pd.read_sql(sql, db.engine)", "piece": "end_date: date"}
{"function_name": "set_path_and_utc", "function_define": "    c = db_conn.cursor()\n    c.execute(\"SET timezone='utc'\")\n    c.close()", "piece": "c.execute(\"SET timezone='utc'\")"}
{"function_name": "obj_hook", "function_define": "    if isinstance(d, dict):\n    if 'duration' in d:\n    if self.hook:", "piece": "if 'duration' in d:"}
{"function_name": "package_data", "function_define": "    data for package `pkg`.\n    data = []\n    for root in roots:", "piece": "data = []"}
{"function_name": "update_data", "function_define": "    self.tree.focus('')\n    self.select_change(None)\n    self.users = {}", "piece": "self.select_change(None)"}
{"function_name": "select_change", "function_define": "    if self.tree.focus() == '':\n    username = self.tree.focus()\n    self.allow_read.set(allow_read)", "piece": "username = self.tree.focus()"}
{"function_name": "afn_de_arquivo", "function_define": "    nome = first_line[0]\n    estados = definicao[0]\n    simbolos = definicao[1]", "piece": "estados = definicao[0]"}
{"function_name": "para_AFD", "function_define": "    q.append(self.estado_inicial)\n    estado_morto = 'QM'\n    for simbolo in self.simbolos:", "piece": "estado_morto = 'QM'"}
{"function_name": "run_with_smplify", "function_define": "    Returns:\n    all_init_smpls = []\n    all_opt_smpls = []", "piece": "all_init_smpls = []"}
{"function_name": "handle_red_up_1", "function_define": "    Handle IR / button event.\n    Type hints:\n    if button_state:", "piece": "Type hints:"}
{"function_name": "handle_blue_up_1", "function_define": "    Handle IR / button event.\n    Type hints:\n    if button_state:", "piece": "Type hints:"}
{"function_name": "handle_red_up_2", "function_define": "    Handle IR / button event.\n    Type hints:\n    if button_state:", "piece": "Type hints:"}
{"function_name": "handle_blue_up_2", "function_define": "    Handle IR / button event.\n    Type hints:\n    if button_state:", "piece": "Type hints:"}
{"function_name": "handle_up_button", "function_define": "    Handle IR / button event.\n    Type hints:\n    if button_state:", "piece": "Type hints:"}
{"function_name": "handle_shutdown", "function_define": "    Type hints:\n    if button_state:\n    dc.running = False", "piece": "if button_state:"}
{"function_name": "username", "function_define": "    first = 'arvind'\n    last = 'KARIR'\n    yob = str(1234)", "piece": "last = 'KARIR'"}
{"function_name": "test_email2img", "function_define": "    email = p.get('EMAIL')\n    color_mode = 'RGBA'\n    background_color = (0, 0, 0, 0)", "piece": "color_mode = 'RGBA'"}
{"function_name": "testEquals", "function_define": "    readme1 = 'README 1'\n    readme2 = 'README 2'\n    incremental1.readme = readme1", "piece": "readme2 = 'README 2'"}
{"function_name": "testSetMetadata", "function_define": "    with pytest.raises(ValueError):\n    with pytest.raises(ValueError):\n    entityName = 'subject'", "piece": "with pytest.raises(ValueError):"}
{"function_name": "testQueryNifti", "function_define": "    if queryValue.dtype.char == 'S':\n    assert queryValue == exactValue\n    FIELD = 'dim'", "piece": "assert queryValue == exactValue"}
{"function_name": "backpropagate", "function_define": "    for node in search_path[::-1]:\n    node.value_sum += value\n    node.visit_count += 1", "piece": "node.value_sum += value"}
{"function_name": "run_mcts", "function_define": "    reach a leaf node.\n    node = self.root\n    search_path = [node]", "piece": "node = self.root"}
{"function_name": "select_action", "function_define": "    Select action.\n    node = self.root\n    actions = self.actions", "piece": "node = self.root"}
{"function_name": "ucb_score", "function_define": "    Calculate UCB score.\n    prior_score = pb_c * child.prior\n    if child.visit_count > 0:", "piece": "prior_score = pb_c * child.prior"}
{"function_name": "is_holiday_name", "function_define": "    name = None\n    if date.month == 1:\n    if date.day == 1:", "piece": "if date.month == 1:"}
{"function_name": "year_holidays", "function_define": "    date = datetime.date(year, 1, 1)\n    output = []\n    while date.year == year:", "piece": "output = []"}
{"function_name": "month_holidays", "function_define": "    output = []\n    while date.month == month:\n    name = is_holiday_name(date)", "piece": "while date.month == month:"}
{"function_name": "holidays", "function_define": "    output = []\n    while start_date <= end_date:\n    if name is not None:", "piece": "while start_date <= end_date:"}
{"function_name": "_week_day", "function_define": "    if week < 1 or week > 5:\n    if weekday < 1 or weekday > 7:\n    days = []", "piece": "if weekday < 1 or weekday > 7:"}
{"function_name": "find_maximums", "function_define": "    max_indices = []\n    for i in range(t.shape[0] - 1):\n    max_indices.append(i)", "piece": "for i in range(t.shape[0] - 1):"}
{"function_name": "k_offset", "function_define": "    if not k % 2 == 0:\n    unwrapped = unwrapped - math.pi\n    if unwrapped[0] < -6:", "piece": "unwrapped = unwrapped - math.pi"}
{"function_name": "_parse_url", "function_define": "    tcp://<hostname/url>:<port>\n    parse error raised\n    if len(no_protocol_stub) < 2:", "piece": "parse error raised"}
{"function_name": "_start_tunnel", "function_define": "    Starts ssh tunnel\n    from zmq import ssh\n    if keyfile:", "piece": "from zmq import ssh"}
{"function_name": "generic_msg", "function_define": "    or error message\n    if not connected:\n    if send_bytes:", "piece": "if not connected:"}
{"function_name": "_print_mutants", "function_define": "    f_pdb = open(pdbFL, 'r')\n    structure = [l for l in f_pdb]\n    f_pdb.close()", "piece": "structure = [l for l in f_pdb]"}
{"function_name": "download_videos", "function_define": "    if not output_dir.exists():\n    output_dir.mkdir()\n    video_url = obs['video_url_hd']", "piece": "output_dir.mkdir()"}
{"function_name": "root_pdf", "function_define": "    while data is None:\n    file = p.pdf(data)\n    file_data = BytesIO()", "piece": "file = p.pdf(data)"}
{"function_name": "dense_forward", "function_define": "    features = [input]\n    new_features = layer(features)\n    features.append(new_features)", "piece": "new_features = layer(features)"}
{"function_name": "read_images", "function_define": "    key, path = arg\n    width = tf.cast(width, tf.int32)\n    if print_warning:", "piece": "width = tf.cast(width, tf.int32)"}
{"function_name": "generator", "function_define": "    keys = ['file_id']\n    vals = [file_id]\n    for data_type in data_types:", "piece": "vals = [file_id]"}
{"function_name": "_label_fun", "function_define": "    data_raw = tf.io.read_file(path)\n    label_shape = tf.shape(label)\n    if args.aspect > 0.0:", "piece": "label_shape = tf.shape(label)"}
{"function_name": "_image_fun", "function_define": "    data_raw = tf.io.read_file(path)\n    image_encoding = data_raw\n    image_shape = tf.shape(image)", "piece": "image_encoding = data_raw"}
{"function_name": "dense_crf", "function_define": "    h = predict_probs.shape[0]\n    w = predict_probs.shape[1]\n    d = densecrf.DenseCRF2D(w, h, 2)", "piece": "w = predict_probs.shape[1]"}
{"function_name": "_transform_img", "function_define": "    oimg = Image.open(impath)\n    assert str(oimg.mode) == 'RGBA'\n    x, y = oimg.size", "piece": "assert str(oimg.mode) == 'RGBA'"}
{"function_name": "train_loop_begin", "function_define": "    train_loss_metric.reset_states()\n    for metric in metrics:\n    metric.reset_states()", "piece": "for metric in metrics:"}
{"function_name": "append_buffer", "function_define": "    self.next_idx += 1\n    self.if_full = True\n    self.next_idx = 0", "piece": "self.if_full = True"}
{"function_name": "extend_buffer", "function_define": "    size = len(other)\n    next_idx = self.next_idx + size\n    if next_idx > self.max_len:", "piece": "next_idx = self.next_idx + size"}
{"function_name": "updateViews", "function_define": "    viewDictionnary = {}\n    if widget.visible:\n    subDictionnary = {}", "piece": "if widget.visible:"}
{"function_name": "cylinder", "function_define": "    Demo Example 2 - Cylinder\n    target = start + target_vec\n    center = start + center_vec", "piece": "target = start + target_vec"}
{"function_name": "speed_test", "function_define": "    finish = start + vector\n    robot.linear_move_poll(start)\n    start_time = time.clock()", "piece": "robot.linear_move_poll(start)"}
{"function_name": "demo_mode", "function_define": "    tcp_client = TcpClientR3()\n    tcp_client.connect()\n    robot.boot()", "piece": "tcp_client.connect()"}
{"function_name": "load_status_loop", "function_define": "    if self.pause_at_start != 'no':\n    self.pause_on()\n    self.loaded_callback()", "piece": "self.pause_on()"}
{"function_name": "wait_for_start", "function_define": "    if self.wait_count < 20:\n    self.wait_count += 1\n    if self.previous_player != None:", "piece": "self.wait_count += 1"}
{"function_name": "show_status_loop", "function_define": "    if self.pause_at_end == 'yes':\n    if position > self.length - 300:\n    self.pause_on()", "piece": "if position > self.length - 300:"}
{"function_name": "app_exit", "function_define": "    for vp in self.vp_list:\n    vp.terminate()\n    self.root.destroy()", "piece": "vp.terminate()"}
{"function_name": "play_show3", "function_define": "    self.logger.log('start show 3')\n    self.logger.log('load 3')\n    self.vp_list.append(self.od3)", "piece": "self.logger.log('load 3')"}
{"function_name": "play_show4", "function_define": "    self.logger.log('start show 4')\n    self.logger.log('load 5')\n    self.vp_list.append(self.od5)", "piece": "self.logger.log('load 5')"}
{"function_name": "end5_callback", "function_define": "    if status == 'pause_at_end':\n    self.logger.log('loading 6')\n    self.vp_list.append(self.od6)", "piece": "self.logger.log('loading 6')"}
{"function_name": "play_show5", "function_define": "    self.logger.log('start show 5')\n    self.play_show1()\n    self.play_show2()", "piece": "self.play_show1()"}
{"function_name": "get_lang_by_type", "function_define": "    if lang_type == 'Lektor PL':\n    if lang_type == 'Dubbing PL':\n    if lang_type == 'Napisy PL':", "piece": "if lang_type == 'Dubbing PL':"}
{"function_name": "get_jobid_array", "function_define": "    payload = request.json\n    jobs = list()\n    for job in payload:", "piece": "jobs = list()"}
{"function_name": "format_duration", "function_define": "    ms = math.ceil(seconds * 1000.0)\n    seconds, ms = divmod(ms, 1000)\n    parts = []", "piece": "seconds, ms = divmod(ms, 1000)"}
{"function_name": "removepy", "function_define": "    if not names:\n    if ext == '.py':\n    names[idx] = basename", "piece": "if ext == '.py':"}
{"function_name": "clear_caches", "function_define": "    for mod in sys.modules.values():\n    del mod.__warningregistry__\n    if stream is not None:", "piece": "del mod.__warningregistry__"}
{"function_name": "insert_iterative", "function_define": "    newnode = Node(val)\n    curr = root\n    prev = None", "piece": "curr = root"}
{"function_name": "smallest", "function_define": "    curr = root\n    while curr.left is not None:\n    curr = curr.left", "piece": "while curr.left is not None:"}
{"function_name": "search_iterative", "function_define": "    while root != None:\n    if root.val > val:\n    root = root.left", "piece": "if root.val > val:"}
{"function_name": "preorder", "function_define": "    if root is None:\n    print(root.val, end=' ')\n    preorder(root.left)", "piece": "print(root.val, end=' ')"}
{"function_name": "postorder", "function_define": "    if root is None:\n    preorder(root.left)\n    preorder(root.right)", "piece": "preorder(root.left)"}
{"function_name": "test_exclude_nan", "function_define": "    test_array[1, 1, :] = 1\n    data = dict(density=test_array)\n    ad = ds.all_data()", "piece": "data = dict(density=test_array)"}
{"function_name": "test_equal", "function_define": "    test_array[1, 1, :] = 2.0\n    test_array[2, 1, :] = 3.0\n    data = dict(density=test_array)", "piece": "test_array[2, 1, :] = 3.0"}
{"function_name": "_remove_patterns", "function_define": "    for glob_pattern in patterns:\n    if glob_pattern.startswith('*'):\n    pattern = '{}$'.format(pattern)", "piece": "if glob_pattern.startswith('*'):"}
{"function_name": "test_neg_order", "function_define": "    error_code = 6500\n    self.run_cbq_query(window_query)\n    except CBQError as ex:", "piece": "self.run_cbq_query(window_query)"}
{"function_name": "test_neg_frame", "function_define": "    error_code = 6500\n    self.run_cbq_query(window_query)\n    except CBQError as ex:", "piece": "self.run_cbq_query(window_query)"}
{"function_name": "get_example_job", "function_define": "    j = Job()\n    j.user = user\n    j.wsid = wsid", "piece": "j.user = user"}
{"function_name": "is_timestamp", "function_define": "    Otherwise, return False.\n    datetime.fromtimestamp(ts)\n    except ValueError:", "piece": "datetime.fromtimestamp(ts)"}
{"function_name": "perm_adapter", "function_define": "    ret_perms = []\n    for ws in perms_req:\n    response = requests.Response()", "piece": "for ws in perms_req:"}
{"function_name": "_adjust_param", "function_define": "    adjust k & m through 4 steps:\n    otherwise we're done.\n    in every loop, m = m * 2", "piece": "otherwise we're done."}
{"function_name": "__contains__", "function_define": "    if not isinstance(msg, str):\n    msg = str(msg)\n    positions = []", "piece": "msg = str(msg)"}
{"function_name": "comprobarBorde", "function_define": "    if x == 0 or y == 0:\n    if x == filas - 1:\n    if y == columnas - 1:", "piece": "if x == filas - 1:"}
{"function_name": "minimaDistancia", "function_define": "    minimaDistancia = 999999999999\n    xmin = 999999999999\n    ymin = 999999999999", "piece": "xmin = 999999999999"}
{"function_name": "mmt_api_import", "function_define": "    if name is None:\n    while job['progress'] != 1.0:\n    time.sleep(1)", "piece": "while job['progress'] != 1.0:"}
{"function_name": "_get_folder_size", "function_define": "    total_size = 0\n    for f in filenames:\n    continue", "piece": "for f in filenames:"}
{"function_name": "_get_ngrams", "function_define": "    ngrams = 0\n    while True:\n    line = process.stdout.readline()", "piece": "while True:"}
{"function_name": "_get_sapt_data", "function_define": "    prefixes = 0\n    target_words = 0\n    while True:", "piece": "target_words = 0"}
{"function_name": "check_data", "function_define": "    df: input data from csv file\n    Returns:\n    column_headers = df.columns", "piece": "Returns:"}
{"function_name": "checker_split", "function_define": "    assert z.dim() == 4\n    B, C, H, W = z.size()\n    z0 = torch.cat([za, zd], dim=1)", "piece": "B, C, H, W = z.size()"}
{"function_name": "checker_merge", "function_define": "    B, C2, sH, sW = z0.size()\n    C = C2 // 2\n    z0, z1 = (z1, z0)", "piece": "C = C2 // 2"}
{"function_name": "squeeze1d", "function_define": "    assert z.dim() == 2\n    B, C = z.size()\n    z = z.view(B, C // 2, 2)", "piece": "B, C = z.size()"}
{"function_name": "unsqueeze1d", "function_define": "    B, hC = z0.size()\n    z0, z1 = (z1, z0)\n    z = z.view(B, -1).contiguous()", "piece": "z0, z1 = (z1, z0)"}
{"function_name": "_run_test", "function_define": "    module_root = _get_module_root()\n    os.chdir(module_root)\n    if args.run_all:", "piece": "os.chdir(module_root)"}
{"function_name": "add_resource", "function_define": "    Required Arguments:\n    example 'api.users.get()'.\n    Optional Arguments:", "piece": "example 'api.users.get()'."}
{"function_name": "test_categorize", "function_define": "    assert len(p_acs_cat) == 3\n    if r.AGEP <= 19:\n    elif r.AGEP <= 35:", "piece": "if r.AGEP <= 19:"}
{"function_name": "race_cat", "function_define": "    if r.RAC1P == 1:\n    elif r.RAC1P == 2:\n    elif r.RAC1P == 6:", "piece": "elif r.RAC1P == 2:"}
{"function_name": "make_conformer", "function_define": "    Returns:\n    if self.mol is None:\n    m = self.mol", "piece": "if self.mol is None:"}
{"function_name": "from_smiles", "function_define": "    Returns:\n    if m is None:\n    if sanitize:", "piece": "if m is None:"}
{"function_name": "to_smiles", "function_define": "    Returns:\n    smile (str): Smile string.\n    if self.mol is None:", "piece": "smile (str): Smile string."}
{"function_name": "edge_indices", "function_define": "    Returns:\n    m = self.mol\n    bond_idx = []", "piece": "m = self.mol"}
{"function_name": "edge_attributes", "function_define": "    Returns:\n    tuple: Indices, Attributes.\n    m = self.mol", "piece": "tuple: Indices, Attributes."}
{"function_name": "node_attributes", "function_define": "    Returns:\n    list: List of atomic properties.\n    m = self.mol", "piece": "list: List of atomic properties."}
{"function_name": "graph_attributes", "function_define": "    Returns:\n    list: List of atomic properties.\n    m = self.mol", "piece": "list: List of atomic properties."}
{"function_name": "_init_weights", "function_define": "    if isinstance(m, nn.Linear):\n    trunc_normal_(m.weight)\n    zeros_(m.bias)", "piece": "trunc_normal_(m.weight)"}
{"function_name": "suggest_cdes", "function_define": "    if self.__cdedict:\n    suggestions = {}\n    var_name = columnreport.name", "piece": "suggestions = {}"}
{"function_name": "pesq_binaria", "function_define": "    limite_inferior = 0\n    limite_superior = self.ultimaP\n    while True:", "piece": "limite_superior = self.ultimaP"}
{"function_name": "fetch_genes", "function_define": "    Summary:\n    that nearby area.\n    Arguments:", "piece": "that nearby area."}
{"function_name": "on_double_click", "function_define": "    path = self.get_selected_path()\n    if path:\n    self.log_frame.load_log(path)", "piece": "if path:"}
{"function_name": "load_log", "function_define": "    self._clear_tree()\n    self.details_frame._clear_tree()\n    self.all_events = []", "piece": "self.details_frame._clear_tree()"}
{"function_name": "replay_event", "function_define": "    if 'text_widget_id' in event:\n    self.select(editor)\n    editor.replay_event(event)", "piece": "self.select(editor)"}
{"function_name": "on_select", "function_define": "    if self.loading:\n    iid = self.tree.focus()\n    if iid != '':", "piece": "iid = self.tree.focus()"}
{"function_name": "select_event", "function_define": "    self.last_event_index += 1\n    self.reset()\n    self.select_event(event_index)", "piece": "self.reset()"}
{"function_name": "make_grid", "function_define": "    out = {}\n    for y, line in enumerate(lines):\n    for x, c in enumerate(line):", "piece": "for y, line in enumerate(lines):"}
{"function_name": "find_basin", "function_define": "    out = []\n    q = deque([point])\n    seen = set()", "piece": "q = deque([point])"}
{"function_name": "get_story", "function_define": "    if self.story is '':\n    added_story = ''\n    for source in self.sources:", "piece": "added_story = ''"}
{"function_name": "source_exists", "function_define": "    result = False\n    for source in self.sources:\n    if source.check_source(url):", "piece": "for source in self.sources:"}
{"function_name": "get_summary", "function_define": "    summarizer = LexRankSummarizer()\n    result = ''\n    for sentence in summary:", "piece": "result = ''"}
{"function_name": "train_one_epoch", "function_define": "    model.train()\n    criterion.train()\n    print_freq = 50", "piece": "criterion.train()"}
{"function_name": "compute_acc_k", "function_define": "    vak = df['speed_body[2]']\n    gamma = df['gamma[2]']\n    if model == 'MT':", "piece": "gamma = df['gamma[2]']"}
{"function_name": "test_incar", "function_define": "    print(os.getcwd())\n    self.assertEqual(len(iv), 12)\n    iv.write(wf.name)", "piece": "self.assertEqual(len(iv), 12)"}
{"function_name": "test_encut_setup", "function_define": "    self.assertEqual(iv.ENCUT, 307)\n    iv.set_rough_relaxation()\n    iv.set_mit_settings()", "piece": "iv.set_rough_relaxation()"}
{"function_name": "test_vaspjob", "function_define": "    td = tempfile.mkdtemp()\n    vj.initialize(st, kpoints=kp)\n    vj.set_input_variables(iv)", "piece": "vj.initialize(st, kpoints=kp)"}
{"function_name": "test_poscar", "function_define": "    tmpdir = tempfile.mkdtemp()\n    self.assertEqual(st.natom, 4)\n    self.assertEqual(st.natom, 2)", "piece": "self.assertEqual(st.natom, 4)"}
{"function_name": "listener", "function_define": "    global information_logger\n    global rate\n    global debuger_mode", "piece": "global rate"}
{"function_name": "make_episodes", "function_define": "    for _ in trange(self.n_batch):\n    classes = self._sample_classes()\n    tags = defaultdict(lambda: -1)", "piece": "classes = self._sample_classes()"}
{"function_name": "tagged_labels", "function_define": "    t_labels = []\n    for lab in labels:\n    if len(lab) > 2:", "piece": "for lab in labels:"}
{"function_name": "sample_sentences", "function_define": "    respectively\n    for cls in classes:\n    continue", "piece": "for cls in classes:"}
{"function_name": "_sample_classes", "function_define": "    sorted_list = []\n    if cls not in self.classes:\n    continue", "piece": "if cls not in self.classes:"}
{"function_name": "make_batches", "function_define": "    batches = []\n    tags = defaultdict(lambda: -1)\n    tags['O'] = 0", "piece": "tags = defaultdict(lambda: -1)"}
{"function_name": "_wrap_numpy", "function_define": "    func.__name__ = _numpy_name\n    if numpy_func_doc[0] == '\\n':\n    func.__doc__ += numpy_func_doc", "piece": "if numpy_func_doc[0] == '\\n':"}
{"function_name": "_flatten", "function_define": "    flattened = []\n    for el in iterable:\n    if isinstance(el, _Iterable):", "piece": "for el in iterable:"}
{"function_name": "concatenate", "function_define": "    for i in range(len(arrays)):\n    ndim = arrays[0].ndim\n    for i in range(1, len(arrays)):", "piece": "ndim = arrays[0].ndim"}
{"function_name": "parse_model", "function_define": "    trees = []\n    with open(filename, 'r') as f:\n    lines = f.readlines()", "piece": "with open(filename, 'r') as f:"}
{"function_name": "_spawn_new_pnad", "function_define": "    given segment.\n    original.\n    objects = set(segment.states[0])", "piece": "original."}
{"function_name": "cdf_plot_all", "function_define": "    plt.ylabel('CDF')\n    plt.xscale('log')\n    plt.xscale('linear')", "piece": "plt.xscale('log')"}
{"function_name": "cdf_plot", "function_define": "    x = final[feature].dropna()\n    final_cdf = ECDF(x)\n    plt.ylabel('CDF')", "piece": "final_cdf = ECDF(x)"}
{"function_name": "histogram_plot", "function_define": "    x = final[feature].dropna()\n    x = x.astype(str)\n    plt.legend(prop={'size': 10})", "piece": "x = x.astype(str)"}
{"function_name": "plot_analysis", "function_define": "    for dt in dataset:\n    if dt == 'Ripe_Ris_monitors':\n    ripe_df = read_ripe_peers()", "piece": "if dt == 'Ripe_Ris_monitors':"}
{"function_name": "make_likey_list", "function_define": "    res = self.es.search(query)\n    likey_list = ''\n    print(word)", "piece": "likey_list = ''"}
{"function_name": "ov_range", "function_define": "    big_a = a_1\n    small_a = a_2\n    big_b = b_1", "piece": "small_a = a_2"}
{"function_name": "plotting", "function_define": "    plt.plot(x, y)\n    plt.ylim(-0.1, 1.1)\n    plt.show()", "piece": "plt.ylim(-0.1, 1.1)"}
{"function_name": "test_activation", "function_define": "    while True:\n    if func_str in function_list:\n    test(func_str)", "piece": "if func_str in function_list:"}
{"function_name": "make_installer", "function_define": "    if osnap.util.is_mac():\n    elif osnap.util.is_windows():\n    installer.make_installer()", "piece": "elif osnap.util.is_windows():"}
{"function_name": "psi4_sapt", "function_define": "    self.int_ = []\n    self.elst_ = []\n    self.exch_ = []", "piece": "self.elst_ = []"}
{"function_name": "psi4_super", "function_define": "    self.int_ = []\n    au_to_kcal = 627.51\n    count = 0", "piece": "au_to_kcal = 627.51"}
{"function_name": "wrap_handler", "function_define": "    that takes a message.\n    Parameters\n    message arguments.", "piece": "Parameters"}
{"function_name": "_close_writer", "function_define": "    if self.writer is not None:\n    self.writer.close()\n    self.writer = None", "piece": "self.writer.close()"}
{"function_name": "write_messages", "function_define": "    if self.writer is None:\n    self.writer.write(raw)\n    except ConnectionError as error:", "piece": "self.writer.write(raw)"}
{"function_name": "_done_callback", "function_define": "    self._closed_event.set()\n    if not task.cancelled():\n    task.result()", "piece": "if not task.cancelled():"}
{"function_name": "forget_sensor", "function_define": "    el asistente de voz.\n    sensor_name:\n    Returns:", "piece": "sensor_name:"}
{"function_name": "create_problem", "function_define": "    root = Group()\n    prob = Problem(root)\n    prob.root.add('comp', magdrag)", "piece": "prob = Problem(root)"}
{"function_name": "view_classify", "function_define": "    topk = len(top_p)\n    ax1 = self.imshow(img, ax1)\n    ax1.axis('off')", "piece": "ax1 = self.imshow(img, ax1)"}
{"function_name": "load_checkpoint", "function_define": "    if os.path.isfile(filepath):\n    self.arch = checkpoint['arch']\n    self.create_model()", "piece": "self.arch = checkpoint['arch']"}
{"function_name": "agency_spend", "function_define": "    agency_spend_list = []\n    for tile in agencies:\n    row = []", "piece": "for tile in agencies:"}
{"function_name": "investment_data", "function_define": "    projects = soup.find_all('tr')\n    project_spend_list = []\n    for p in projects:", "piece": "project_spend_list = []"}
{"function_name": "_merge_a_into_b", "function_define": "    for k, v_ in a.items():\n    if k not in b:\n    v = copy.deepcopy(v_)", "piece": "if k not in b:"}
{"function_name": "new_bindings", "function_define": "    statements:\n    expr_visitor.visit(expr)\n    if unbound:", "piece": "expr_visitor.visit(expr)"}
{"function_name": "tally_columns", "function_define": "    a tally is multi-column.\n    columns = {}\n    if len(updater.fields) != 1:", "piece": "columns = {}"}
{"function_name": "type_union", "function_define": "    union_t = None\n    for t in args:\n    if union_t is None:", "piece": "for t in args:"}
{"function_name": "occupied", "function_define": "    m = len(grid)\n    n = len(grid[0])\n    for di, dj in DIR:", "piece": "n = len(grid[0])"}
{"function_name": "is_pickle_format", "function_define": "    f = open(filename, 'rb')\n    f.seek(-1, os.SEEK_END)\n    last_byte = f.read(1)", "piece": "f.seek(-1, os.SEEK_END)"}
{"function_name": "_pickle_function", "function_define": "    import Logging\n    import better_exchook\n    better_exchook.print_tb(None)", "piece": "import better_exchook"}
{"function_name": "parse_every_page", "function_define": "    item = MzituZiPaicrawlerItem()\n    li_list = comments.xpath('./li')\n    for li in li_list:", "piece": "li_list = comments.xpath('./li')"}
{"function_name": "test_m2m", "function_define": "    if not create:\n    if m2m_entries:\n    for _m2m_entry in m2m_entries:", "piece": "if m2m_entries:"}
{"function_name": "test_taskdata", "function_define": "    taskdata = deepcopy(TASK)\n    TaskDataEntry(**taskdata)\n    TaskDataEntry(**taskdata)", "piece": "TaskDataEntry(**taskdata)"}
{"function_name": "processor", "function_define": "    sample_recs = {}\n    for sample in samples:\n    if key in ['name']:", "piece": "for sample in samples:"}
{"function_name": "process_group", "function_define": "    tool_counts, samples = ({}, [])\n    if not has_modules:\n    continue", "piece": "if not has_modules:"}
{"function_name": "defineTreeNodes", "function_define": "    root.setId(str(self.count))\n    self.count += 1\n    for node in root.getLista():", "piece": "self.count += 1"}
{"function_name": "mainFunction", "function_define": "    data = pd.DataFrame()\n    data.plot(figsize=(10, 6))\n    plt.show()", "piece": "data.plot(figsize=(10, 6))"}
{"function_name": "get_examples", "function_define": "    return_results = []\n    soup = self.__urlGet__(uri)\n    if soup == None:", "piece": "soup = self.__urlGet__(uri)"}
{"function_name": "test_grunfeld1", "function_define": "    test_path = tempfile.mkdtemp()\n    assert x_train.shape == (200, 5)\n    shutil.rmtree(test_path)", "piece": "assert x_train.shape == (200, 5)"}
{"function_name": "show_progress", "function_define": "    interval = 2\n    if current > 0:\n    n = current / duration * 100", "piece": "if current > 0:"}
{"function_name": "features", "function_define": "    supported = []\n    for i in range(len(f_list)):\n    supported.append(f_list[i])", "piece": "for i in range(len(f_list)):"}
{"function_name": "play_video", "function_define": "    self.client.start()\n    if not self.client.running:\n    self.client.stop_apps()", "piece": "if not self.client.running:"}
{"function_name": "dline_of", "function_define": "    xm = cv2.medianBlur(x, 5)\n    xgg = xl\n    xgg[xh == False] = 0", "piece": "xgg = xl"}
{"function_name": "query_instant", "function_define": "    response.raise_for_status()\n    except HTTPError as http_err:\n    except Exception as err:", "piece": "except HTTPError as http_err:"}
{"function_name": "query_range", "function_define": "    response.raise_for_status()\n    except HTTPError as http_err:\n    except Exception as err:", "piece": "except HTTPError as http_err:"}
{"function_name": "query_targets", "function_define": "    response.raise_for_status()\n    except HTTPError as http_err:\n    except Exception as err:", "piece": "except HTTPError as http_err:"}
{"function_name": "query_rules", "function_define": "    response.raise_for_status()\n    except HTTPError as http_err:\n    except Exception as err:", "piece": "except HTTPError as http_err:"}
{"function_name": "query_alerts", "function_define": "    response.raise_for_status()\n    except HTTPError as http_err:\n    except Exception as err:", "piece": "except HTTPError as http_err:"}
{"function_name": "create_snapshot", "function_define": "    response.raise_for_status()\n    except HTTPError as http_err:\n    except Exception as err:", "piece": "except HTTPError as http_err:"}
{"function_name": "delete_series", "function_define": "    response.raise_for_status()\n    except HTTPError as http_err:\n    except Exception as err:", "piece": "except HTTPError as http_err:"}
{"function_name": "clean_tombstones", "function_define": "    response.raise_for_status()\n    except HTTPError as http_err:\n    except Exception as err:", "piece": "except HTTPError as http_err:"}
{"function_name": "trans_to_matrix", "function_define": "    matrix = vtk.vtkMatrix4x4()\n    for i in range(trans.shape[0]):\n    for j in range(trans.shape[1]):", "piece": "for i in range(trans.shape[0]):"}
{"function_name": "check_comp", "function_define": "    helpful error message\n    Parameters\n    available_comps : list", "piece": "Parameters"}
{"function_name": "_load_materials", "function_define": "    arr = arr[arr != 0]\n    if arr.size == 1:\n    self._materials = {}", "piece": "if arr.size == 1:"}
{"function_name": "materials", "function_define": "    materials : dict\n    Material properties:\n    elements, boundary admittance)", "piece": "Material properties:"}
{"function_name": "section_data", "function_define": "    section_data : dict\n    if self._section_data is None:\n    self._load_section_data()", "piece": "if self._section_data is None:"}
{"function_name": "nodal_solution", "function_define": "    Parameters\n    rnum : int or list\n    Default ``False``.", "piece": "rnum : int or list"}
{"function_name": "nodal_velocity", "function_define": "    Parameters\n    rnum : int or list\n    system.  Default False.", "piece": "rnum : int or list"}
{"function_name": "_read_components", "function_define": "    components : dict\n    Dictionary of components\n    From fdresu.inc:", "piece": "Dictionary of components"}
{"function_name": "solution_info", "function_define": "    Parameters\n    rnum : int or list\n    header : dict", "piece": "rnum : int or list"}
{"function_name": "result_dof", "function_define": "    Parameters\n    rnum : int or list\n    dof : list", "piece": "rnum : int or list"}
{"function_name": "element_stress", "function_define": "    Parameters\n    rnum : int or list\n    principal : bool, optional", "piece": "rnum : int or list"}
{"function_name": "save_as_vtk", "function_define": "    select the VTK XML writer.\n    Parameters\n    filename : str", "piece": "Parameters"}
{"function_name": "write_tables", "function_define": "    Parameters\n    filename : str\n    Filename to write the tables to.", "piece": "filename : str"}
{"function_name": "_nodal_result", "function_define": "    Parameters\n    rnum : int\n    Result number.", "piece": "rnum : int"}
{"function_name": "_result_nitem", "function_define": "    nitem = 11\n    elif result_type == 'ENF':\n    nitem = numdof * 1", "piece": "elif result_type == 'ENF':"}
{"function_name": "nodal_stress", "function_define": "    solution.\n    numbering.\n    evaluated from.", "piece": "numbering."}
{"function_name": "get_scalars", "function_define": "    if not self._is_thermal:\n    data = data[:, :3]\n    axis = None", "piece": "data = data[:, :3]"}
{"function_name": "plot_thread", "function_define": "    while self._animating:\n    for i in range(self.nsets):\n    mesh['data'] = results[i]", "piece": "for i in range(self.nsets):"}
{"function_name": "format_tags", "function_define": "    tag = []\n    for arg in args:\n    if arg in entry:", "piece": "for arg in args:"}
{"function_name": "format_value", "function_define": "    values = entry['values']\n    if len(values) == 1:\n    field_pairs = []", "piece": "if len(values) == 1:"}
{"function_name": "_readbit", "function_define": "    if self.pos >= len(self.bytes):\n    if n > 1:\n    self.pos += n", "piece": "if n > 1:"}
{"function_name": "_readotherbits", "function_define": "    if self.bcount <= 0:\n    a = self._readbit(1)\n    self.accumulator = a", "piece": "a = self._readbit(1)"}
{"function_name": "compute_v", "function_define": "    Compute the matrix V\n    Parameters\n    n_rom : int", "piece": "Parameters"}
{"function_name": "func_base", "function_define": "    count = 0\n    for i in range(n):\n    if es_primo(f(i, -79, 1601)):", "piece": "for i in range(n):"}
{"function_name": "test_analyzer", "function_define": "    for file_name in files:\n    if mime.startswith('audio/'):\n    if file_descr:", "piece": "if mime.startswith('audio/'):"}
{"function_name": "__delitem__", "function_define": "    if self._lock is None:\n    del self._score_mapper[key]\n    with self._lock:", "piece": "del self._score_mapper[key]"}
{"function_name": "set_perm", "function_define": "    Parameters\n    mesh: dict\n    mesh structure", "piece": "mesh: dict"}
{"function_name": "redirect_out", "function_define": "    sys.exit(3)\n    os.close(1)\n    os.set_inheritable(1, True)", "piece": "os.close(1)"}
{"function_name": "redirect_in", "function_define": "    sys.exit(4)\n    os.close(0)\n    os.set_inheritable(0, True)", "piece": "os.close(0)"}
{"function_name": "parse_response", "function_define": "    v = json.loads(r.get_data())\n    except json.JSONDecodeError:\n    v = None", "piece": "except json.JSONDecodeError:"}
{"function_name": "args_init", "function_define": "    if isinstance(args, dict):\n    elif args is None:\n    args = {}", "piece": "elif args is None:"}
{"function_name": "_enqueue_tacc", "function_define": "    qf_path = get_qf_path(config)\n    cwd = os.getcwd()\n    os.chdir(qf_dir)", "piece": "cwd = os.getcwd()"}
{"function_name": "export_jail", "function_define": "    name = f'{uuid}_{self.date}'\n    image = f'{images}/{name}'\n    jail_list = []", "piece": "image = f'{images}/{name}'"}
{"function_name": "import_jail", "function_define": "    exports = os.listdir(image_dir)\n    if len(matches) > 1:\n    for j in sorted(matches):", "piece": "if len(matches) > 1:"}
{"function_name": "pickle_dump", "function_define": "    obj - object to write to file\n    obj saved as pickle file\n    EXAMPLE:", "piece": "obj saved as pickle file"}
{"function_name": "pickle_load", "function_define": "    load obj from filename\n    obj - object to write to file\n    load obj from pickle file", "piece": "obj - object to write to file"}
{"function_name": "jd2datetime", "function_define": "    convert jd to iso utc date/time\n    times in jd (array)\n    date/time in utc (array)", "piece": "times in jd (array)"}
{"function_name": "make_dir", "function_define": "    create new directory\n    creates folder named dirname\n    EXAMPLE:", "piece": "creates folder named dirname"}
{"function_name": "get_cmap_colors", "function_define": "    get colormap instance\n    cmap - colormap instance\n    EXAMPLE:", "piece": "cmap - colormap instance"}
{"function_name": "ax_add_colorbar", "function_define": "    ax - axis to put the colorbar\n    cmap - 'jet', 'viridis'\n    cax - the colorbar object", "piece": "cmap - 'jet', 'viridis'"}
{"function_name": "savefigure", "function_define": "    EXAMPLE:\n    fp = FilePath(savename)\n    make_dir(fp.directory)", "piece": "fp = FilePath(savename)"}
{"function_name": "grep_date", "function_define": "    string: string\n    intype: \"isot\" - 20181012T001823\n    outtype: \"iso\" - iso", "piece": "intype: \"isot\" - 20181012T001823"}
{"function_name": "grep_dates", "function_define": "    string: string\n    intype: \"isot\" - 20181012T001823\n    outtype: \"iso\" - iso", "piece": "intype: \"isot\" - 20181012T001823"}
{"function_name": "get_header_df", "function_define": "    fitsfiles - a list of fitsfiles\n    headers = []\n    if verbose:", "piece": "headers = []"}
{"function_name": "plot_rv_model", "function_define": "    if nbjd is not None:\n    res = RV - rv_obs\n    if nbjd is not None:", "piece": "res = RV - rv_obs"}
{"function_name": "get_rv_curve", "function_define": "    times_jd: times in jd\n    P: orbital period in days\n    tc: transit center in jd", "piece": "P: orbital period in days"}
{"function_name": "get_library", "function_define": "    EXAMPLE:\n    hpfspecmatch.utils.get_library()\n    make_dir(config.PATH_LIBRARY)", "piece": "hpfspecmatch.utils.get_library()"}
{"function_name": "_clone_fn", "function_define": "    network_fn = networks\n    except TypeError:\n    end_points['images'] = images", "piece": "except TypeError:"}
{"function_name": "_write_outputs", "function_define": "    save_dir = FLAGS.eval_dir\n    if FLAGS.output_single_file:\n    writer = csv.writer(f)", "piece": "if FLAGS.output_single_file:"}
{"function_name": "pixel2Ton", "function_define": "    rezolucija = 90\n    indent = -12\n    height = 3", "piece": "indent = -12"}
{"function_name": "pixel2Pozicija", "function_define": "    rezolucija = 90\n    indent = 19\n    width = 6", "piece": "indent = 19"}
{"function_name": "pixel2Trajanje", "function_define": "    indent = 4\n    width = 6\n    broj = (pixel - indent) / width", "piece": "width = 6"}
{"function_name": "ton2Pixel", "function_define": "    rezolucija = 90\n    indent = -12\n    height = 3", "piece": "indent = -12"}
{"function_name": "pozicija2Pixel", "function_define": "    rezolucija = 90\n    indent = 19\n    width = 6", "piece": "indent = 19"}
{"function_name": "findNote", "function_define": "    if nota.pozicija == cursorLeft:\n    print('na pocetku note s CL')\n    print('na sredini note s CL')", "piece": "print('na pocetku note s CL')"}
{"function_name": "__Check_Dir", "function_define": "    Check_Dir() -> None\n    if not DRIVER_CHECK().Dir:\n    print(f'\u68c0\u6d4b\u5230\u9a71\u52a8\u76ee\u5f55\u672a\u521b\u5efa\\n\u81ea\u52a8\u521b\u5efa\u4e2d')", "piece": "if not DRIVER_CHECK().Dir:"}
{"function_name": "__Driver_Check", "function_define": "    temp = False\n    temp = True\n    print(f'\u68c0\u6d4b\u5230\u9a71\u52a8\u672a\u4e0b\u8f7d')", "piece": "temp = True"}
{"function_name": "getLatency", "function_define": "    fping = ['fping', '-c', '16']\n    for row in config:\n    fping.append(row['target'])", "piece": "for row in config:"}
{"function_name": "getContent", "function_define": "    page = requests.get(url)\n    html = page.text\n    if not html:", "piece": "html = page.text"}
{"function_name": "parseTags", "function_define": "    headers = mainCol.find_all('h2')\n    tags = {}\n    for header in headers:", "piece": "tags = {}"}
{"function_name": "CheckComments", "function_define": "    fit the configured requirements.\n    if record is not None:\n    count: int = 0", "piece": "if record is not None:"}
{"function_name": "ProcessComment", "function_define": "    topLevel: praw.reddit.Comment\n    if topLevel.removed is True:\n    continue", "piece": "if topLevel.removed is True:"}
{"function_name": "discovery", "function_define": "    global search\n    while search:\n    time.sleep(1)", "piece": "while search:"}
{"function_name": "check_cores", "function_define": "    status = OK\n    if crash_type:\n    for location in locations:", "piece": "if crash_type:"}
{"function_name": "upload_to_server", "function_define": "    status = OK\n    port = kwargs['port']\n    server = kwargs['server']", "piece": "port = kwargs['port']"}
{"function_name": "clear_cores", "function_define": "    for item in full_list:\n    logger.info(meta_info)\n    except Exception as e:", "piece": "logger.info(meta_info)"}
{"function_name": "main_contfrac", "function_define": "    n = 1000\n    count = 10000\n    a = np.ones(n)", "piece": "count = 10000"}
{"function_name": "main_autoreg", "function_define": "    n = 1000\n    count = 1000\n    for f in functions:", "piece": "count = 1000"}
{"function_name": "save_file", "function_define": "    for line in data:\n    file.write(line)\n    file.write('\\n')", "piece": "file.write(line)"}
{"function_name": "ensure_mkey", "function_define": "    generated.\n    curek = get_mekey_size()\n    curpk = get_mpkey_size()", "piece": "curek = get_mekey_size()"}
{"function_name": "remove_webhook", "function_define": "    json_response = response.json()\n    except JSONDecodeError:\n    json_response = {}", "piece": "except JSONDecodeError:"}
{"function_name": "__CheckSolution", "function_define": "    result = True\n    if problemtype == 'minimize':\n    elif problemtype == 'maximize':", "piece": "if problemtype == 'minimize':"}
{"function_name": "__Evaluate", "function_define": "    if self.MULTITHREADMODE:\n    if historyfound:\n    problemtypes[i] = problemtype", "piece": "if historyfound:"}
{"function_name": "__NichedCount", "function_define": "    nichecount = 0\n    if self.FASTMODE:\n    if d <= self.NICHE_RADIUS:", "piece": "if self.FASTMODE:"}
{"function_name": "__Selection", "function_define": "    if dominated:\n    if dominated:\n    yield (parentA, parentB)", "piece": "if dominated:"}
{"function_name": "__LengthMutation", "function_define": "    r = random.random()\n    for i, p in enumerate(probs):\n    if r <= p:", "piece": "for i, p in enumerate(probs):"}
{"function_name": "__Mutation", "function_define": "    child = []\n    for i in range(parent.Length):\n    if FlipCoin(self.MUTATION_RATE):", "piece": "for i in range(parent.Length):"}
{"function_name": "Evolution", "function_define": "    child = self.__Generation()\n    self.population.append(child)\n    if found:", "piece": "self.population.append(child)"}
{"function_name": "buildGraph", "function_define": "    mydict = OrderedDict()\n    mylist = []\n    count = 4", "piece": "mylist = []"}
{"function_name": "apply_snipres", "function_define": "    if args.arch == 'resnet20':\n    cutmodel.cuda()\n    for net in nets:", "piece": "cutmodel.cuda()"}
{"function_name": "test_print_time", "function_define": "    timer = Timer()\n    saved_stdout = sys.stdout\n    out = StringIO()", "piece": "saved_stdout = sys.stdout"}
{"function_name": "_RunPreSetup", "function_define": "    sys.exit(constants.EXIT_BY_USER)\n    if os.path.exists(pre_setup_sh):\n    subprocess.call([pre_setup_sh])", "piece": "if os.path.exists(pre_setup_sh):"}
{"function_name": "read_clean_part", "function_define": "    new_page_list = []\n    for page in datum.get(key, []):\n    new_page_list.append(page)", "piece": "for page in datum.get(key, []):"}
{"function_name": "add_triple_data", "function_define": "    qad = {'Source': domain}\n    qad[key] = datum[key]\n    for key in page:", "piece": "qad[key] = datum[key]"}
{"function_name": "get_qad_triples", "function_define": "    qad_triples = []\n    for datum in data['Data']:\n    for page in datum.get(key, []):", "piece": "for datum in data['Data']:"}
{"function_name": "insertIntoDb", "function_define": "    cursor = connection.cursor()\n    connection.commit()\n    connection.close()", "piece": "connection.commit()"}
{"function_name": "getValuesFromDb", "function_define": "    cursor = connection.cursor()\n    result = cursor.fetchall()\n    connection.close()", "piece": "result = cursor.fetchall()"}
{"function_name": "harmonize_batch", "function_define": "    assert torch.max(y_hat) >= 0\n    assert torch.max(y_hat) <= 1\n    assert torch.max(y) >= 0", "piece": "assert torch.max(y_hat) <= 1"}
{"function_name": "read_string", "function_define": "    value = []\n    while True:\n    char = self.read(1)", "piece": "while True:"}
{"function_name": "getVidName", "function_define": "    Tme = datetime.datetime\n    rootName = 'TestVid'\n    Tme = Tme.now()", "piece": "rootName = 'TestVid'"}
{"function_name": "_calc_ll", "function_define": "    Arguments:\n    beta ([type]): [description]\n    Returns:", "piece": "beta ([type]): [description]"}
{"function_name": "_calc_ll_core", "function_define": "    g' (x \u2212 xc\\u200b) + \u03b20 \\u200b\u2264 0\n    g' (x \u2212 xc\\u200b) + \u03b21 \\u200b\u2265 0\n    Arguments:", "piece": "g' (x \u2212 xc\\u200b) + \u03b21 \\u200b\u2265 0"}
{"function_name": "_calc_ll_cc", "function_define": "    g' (x \u2212 xc\\u200b) \\u200b\u2264 0\n    g' (x \u2212 xc\\u200b) + \u03b21 \\u200b\u2265 0\n    Arguments:", "piece": "g' (x \u2212 xc\\u200b) + \u03b21 \\u200b\u2265 0"}
{"function_name": "_calc_dc", "function_define": "    g' (x \u2212 xc\\u200b) + \u03b2 \\u200b\u2264 0\n    Arguments:\n    beta (float): [description]", "piece": "Arguments:"}
{"function_name": "_calc_cc", "function_define": "    Arguments:\n    tau (float): [description]\n    self._mu = self._halfNminus1", "piece": "tau (float): [description]"}
{"function_name": "CheckDir", "function_define": "    if direction == 1:\n    if y - 2 <= 0:\n    if table[x][y - 2] == white:", "piece": "if y - 2 <= 0:"}
{"function_name": "Possible", "function_define": "    if x + 2 < size:\n    if table[x + 2][y] == black:\n    if x - 2 > 0:", "piece": "if table[x + 2][y] == black:"}
{"function_name": "__process__", "function_define": "    process = os.popen(command)\n    results = str(process.read())\n    except Exception as e:", "piece": "results = str(process.read())"}
{"function_name": "get_domain_name", "function_define": "    parsed = urlparse(url)\n    if not parsed.scheme:\n    url = 'https://%s' % url", "piece": "if not parsed.scheme:"}
{"function_name": "get_robots_txt", "function_define": "    if url.endswith('/'):\n    path = url[:-1]\n    response = urllib2.urlopen(req)", "piece": "path = url[:-1]"}
{"function_name": "test_add_group", "function_define": "    mets = OcrdMets.empty_mets()\n    mets.add_file_group('TEST')\n    mets.add_file_group('TEST')", "piece": "mets.add_file_group('TEST')"}
{"function_name": "extract_log_info", "function_define": "    log_data['request_body'] = None\n    if response:\n    response_string = ''", "piece": "if response:"}
{"function_name": "changestate", "function_define": "    api = tnco_client.assemblies\n    elif intended_state is not None:\n    ctl = self._get_controller()", "piece": "elif intended_state is not None:"}
{"function_name": "calculando_media", "function_define": "    soma = 0.0\n    for nota in arm:\n    soma += nota", "piece": "for nota in arm:"}
{"function_name": "find_channel_ids", "function_define": "    ids = set()\n    index = 0\n    while True:", "piece": "index = 0"}
{"function_name": "find_video_ids", "function_define": "    ids = set()\n    index = 0\n    while True:", "piece": "index = 0"}
{"function_name": "numbering_cli", "function_define": "    args = parser.parse_args()\n    col = DEFAULT_NUM_COL\n    if args.numbering:", "piece": "col = DEFAULT_NUM_COL"}
{"function_name": "parse_cmd", "function_define": "    if cmd.startswith('^'):\n    self.increment(cmd)\n    elif cmd.startswith('<'):", "piece": "self.increment(cmd)"}
{"function_name": "increment", "function_define": "    sub_cmds = list(cmd)\n    if sub_cmds.pop(0) != '^':\n    raise TypeError(msg)", "piece": "if sub_cmds.pop(0) != '^':"}
{"function_name": "lookback", "function_define": "    increment_pos = cmd.find('^')\n    if increment_pos < 0:\n    increment = ''", "piece": "if increment_pos < 0:"}
{"function_name": "string_iter", "function_define": "    for item in self:\n    if item:\n    yield item.to_string()", "piece": "if item:"}
{"function_name": "increase_letter", "function_define": "    letter (str): A single letter\n    if letter.isupper():\n    self.letter = new_letter", "piece": "if letter.isupper():"}
{"function_name": "increase_number", "function_define": "    increment = int(increment)\n    if self.number.startswith('0'):\n    self.number = str(new_number)", "piece": "if self.number.startswith('0'):"}
{"function_name": "increase_roman", "function_define": "    if not self.lower:\n    raise ValueError(msg)\n    if not self.punc1:", "piece": "raise ValueError(msg)"}
{"function_name": "test_json_parse", "function_define": "    car = EVCar(CAR1)\n    car.from_json(PKT1)\n    assert car.plugged_in is True", "piece": "car.from_json(PKT1)"}
{"function_name": "create_plot", "function_define": "    del data[0]['z']\n    if plot_type == 'histogram2d':\n    data[0]['type'] = 'scatter'", "piece": "if plot_type == 'histogram2d':"}
{"function_name": "_create_axis", "function_define": "    Creates a 2d or 3d axis.\n    if axis_type == '3d':\n    if axis_type == '2d':", "piece": "if axis_type == '3d':"}
{"function_name": "_black_out_axis", "function_define": "    axis['showgrid'] = False\n    axis['zeroline'] = False\n    axis['color'] = 'white'", "piece": "axis['zeroline'] = False"}
{"function_name": "plot_hist", "function_define": "    color = ('r', 'g', 'b')\n    for i, col in enumerate(color):\n    ax.plot(histr, color=col)", "piece": "for i, col in enumerate(color):"}
{"function_name": "get_kmeans_color", "function_define": "    original_pixels = img / 255\n    N_points = 20000\n    rng = np.random.RandomState(0)", "piece": "N_points = 20000"}
{"function_name": "updateMatrix", "function_define": "    m, n = (len(mat), len(mat[0]))\n    hash = {}\n    if mat[i][j] == 0:", "piece": "hash = {}"}
{"function_name": "has_shell", "function_define": "    keywords = context.node.keywords\n    result = False\n    for key in keywords:", "piece": "result = False"}
{"function_name": "update_json", "function_define": "    first = next(path)\n    first = int(first[1:-1])\n    except ValueError:", "piece": "first = int(first[1:-1])"}
{"function_name": "sendReport", "function_define": "    log = ''\n    for filename in self.logs:\n    except IOError:", "piece": "for filename in self.logs:"}
{"function_name": "calculate_gc", "function_define": "    cs = row[col].count('C')\n    gs = row[col].count('G')\n    gc = (cs + gs) / len(row[col])", "piece": "gs = row[col].count('G')"}
{"function_name": "uniq_motif", "function_define": "    if row.hg19_motif == True:\n    if row.mm9_motif == True:\n    elif row.mm9_motif == True:", "piece": "if row.mm9_motif == True:"}
{"function_name": "applyF_filterG", "function_define": "    Decorators:\n    guenther.wasser\n    f ([function]): [description]", "piece": "guenther.wasser"}
{"function_name": "query_latest", "function_define": "    start_time = time.time()\n    if not resps:\n    ret_resps = []", "piece": "if not resps:"}
{"function_name": "get_hops", "function_define": "    if not limit_dest_schemes:\n    limit_dest_schemes = []\n    if multihop_rses is None:", "piece": "limit_dest_schemes = []"}
{"function_name": "get_attributes", "function_define": "    dict_attributes = {}\n    if attributes:\n    if isinstance(attributes, dict):", "piece": "if attributes:"}
{"function_name": "to_output", "function_define": "    data = json.load(f)\n    output = []\n    for d in data:", "piece": "output = []"}
{"function_name": "parse_product", "function_define": "    item = ProductItem()\n    tag_list = [{'name': 'tech'}]\n    category_obj = None", "piece": "tag_list = [{'name': 'tech'}]"}
{"function_name": "wait_for_token", "function_define": "    lock.acquire()\n    self.check_info(fn_name)\n    self.add_new_tokens(fn_name)", "piece": "self.check_info(fn_name)"}
{"function_name": "flooding_Stage", "function_define": "    Stack = []\n    for i in range(0, N):\n    Stack.append(i)", "piece": "for i in range(0, N):"}
{"function_name": "dicformat", "function_define": "    a = dic['def'][0]['sseq']\n    for i in a:\n    b = i[0][1]['dt'][0][1]", "piece": "for i in a:"}
{"function_name": "strvalid", "function_define": "    while True:\n    wrd = input('Enter the word ')\n    print(\"ENTER 'exit' TO CLOSE\")", "piece": "wrd = input('Enter the word ')"}
{"function_name": "get_Chosen", "function_define": "    last_removed = 0\n    add_back = chosen[last_removed]\n    chosen.remove(add_back)", "piece": "add_back = chosen[last_removed]"}
{"function_name": "add_body_block", "function_define": "    last_dir = self.__directions[-1]\n    x -= last_dir[0]\n    y -= last_dir[1]", "piece": "x -= last_dir[0]"}
{"function_name": "job_worker", "function_define": "    np.random.seed(worker_id)\n    if rand_env:\n    env.launch()", "piece": "if rand_env:"}
{"function_name": "pingServer", "function_define": "    addedOids = set()\n    deletedOids = set()\n    setId = 0", "piece": "deletedOids = set()"}
{"function_name": "initTimer", "function_define": "    if self.__oxidResolver is True:\n    DCOMConnection.PINGTIMER.start()\n    except Exception as e:", "piece": "DCOMConnection.PINGTIMER.start()"}
{"function_name": "RemAddRef", "function_define": "    request = RemAddRef()\n    request['ORPCthis']['flags'] = 0\n    request['cInterfaceRefs'] = 1", "piece": "request['ORPCthis']['flags'] = 0"}
{"function_name": "RemRelease", "function_define": "    request = RemRelease()\n    request['ORPCthis']['flags'] = 0\n    request['cInterfaceRefs'] = 1", "piece": "request['ORPCthis']['flags'] = 0"}
{"function_name": "ResolveOxid", "function_define": "    self.__portmap.connect()\n    request = ResolveOxid()\n    request['pOxid'] = pOxid", "piece": "request = ResolveOxid()"}
{"function_name": "SimplePing", "function_define": "    self.__portmap.connect()\n    request = SimplePing()\n    request['pSetId'] = setId", "piece": "request = SimplePing()"}
{"function_name": "ComplexPing", "function_define": "    self.__portmap.connect()\n    request = ComplexPing()\n    request['pSetId'] = setId", "piece": "request = ComplexPing()"}
{"function_name": "ResolveOxid2", "function_define": "    self.__portmap.connect()\n    request = ResolveOxid2()\n    request['pOxid'] = pOxid", "piece": "request = ResolveOxid2()"}
{"function_name": "ServerAlive2", "function_define": "    self.__portmap.connect()\n    request = ServerAlive2()\n    done = False", "piece": "request = ServerAlive2()"}
{"function_name": "RemoteActivation", "function_define": "    ORPCthis = ORPCTHIS()\n    ORPCthis['cid'] = generate()\n    ORPCthis['extensions'] = NULL", "piece": "ORPCthis['cid'] = generate()"}
{"function_name": "mensagem", "function_define": "    if '\\n' in msg:\n    linha = msg.find('\\n')\n    linha = len(msg)", "piece": "linha = msg.find('\\n')"}
{"function_name": "onSimTotal", "function_define": "    object = event.GetEventObject()\n    value = int(object.GetValue())\n    self.model.setTotalValue(value)", "piece": "value = int(object.GetValue())"}
{"function_name": "get_packages", "function_define": "    pkgs = []\n    if '__init__.py' in files:\n    pkgs.append(package)", "piece": "if '__init__.py' in files:"}
{"function_name": "test_reading", "function_define": "    routine = 'SPC-130'\n    for file_type in test_files:\n    data = tttrlib.TTTR(*file_type)", "piece": "for file_type in test_files:"}
{"function_name": "contract", "function_define": "    operations only on SPAM.\n    Parameters\n    model : Model", "piece": "Parameters"}
{"function_name": "_contract_to_xp", "function_define": "    CLIFF = 10000\n    mdl = model.copy()\n    mdl.from_vector(vector_gs)", "piece": "mdl = model.copy()"}
{"function_name": "_contract_to_cp", "function_define": "    CLIFF = 10000\n    mdl = model.copy()\n    mxBasis = mdl.basis", "piece": "mdl = model.copy()"}
{"function_name": "_contract_to_tp", "function_define": "    mdl = model.copy()\n    gate[0, 0] = 1.0\n    gate[0, k] = 0.0", "piece": "gate[0, 0] = 1.0"}
{"function_name": "read_map", "function_define": "    with open(filename) as f:\n    dict_map = {}\n    for line in file_content:", "piece": "dict_map = {}"}
{"function_name": "read_dictionary", "function_define": "    with open(filename) as f:\n    pronDict = {}\n    for line in file_content:", "piece": "pronDict = {}"}
{"function_name": "save_fig", "function_define": "    already existing figure.\"\"\"\n    l = y_test.shape[0]\n    x = np.linspace(1, l, l)", "piece": "l = y_test.shape[0]"}
{"function_name": "_get_open_port", "function_define": "    while True:\n    if port in self.connections:\n    continue", "piece": "if port in self.connections:"}
{"function_name": "create_subject", "function_define": "    arguments.\n    a subject_context argument\n    instance creation", "piece": "a subject_context argument"}
{"function_name": "resolve_session", "function_define": "    Session instance\n    self._logger.debug(msg)\n    except InvalidSessionException:", "piece": "self._logger.debug(msg)"}
{"function_name": "updateAllTables", "function_define": "    getSchedule(cursor, conn)\n    setLastUpdate(cursor, conn)\n    print('\u0411\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0430!')", "piece": "setLastUpdate(cursor, conn)"}
{"function_name": "test_auto_size", "function_define": "    pgm = daft.PGM()\n    pgm.add_edge('node1', 'node2')\n    pgm.render()", "piece": "pgm.add_edge('node1', 'node2')"}
{"function_name": "test_manual_size", "function_define": "    pgm = daft.PGM()\n    pgm.add_edge('node1', 'node2')\n    pgm.render()", "piece": "pgm.add_edge('node1', 'node2')"}
{"function_name": "test_add_edge", "function_define": "    pgm = daft.PGM()\n    pgm.add_node('node1')\n    pgm.add_node('node2')", "piece": "pgm.add_node('node1')"}
{"function_name": "test_add_text", "function_define": "    pgm = daft.PGM()\n    plate = pgm._plates[0]\n    assert plate.label == 'text1'", "piece": "plate = pgm._plates[0]"}
{"function_name": "thread_attack", "function_define": "    x = attackrange.get()\n    for i in range(x):\n    time.sleep(4)", "piece": "for i in range(x):"}
{"function_name": "copy_reg", "function_define": "    import shutil\n    for f in files:\n    if not path.isfile(file_path):", "piece": "for f in files:"}
{"function_name": "test_sin", "function_define": "    sin = osc.Sin(440)\n    sin.configure()\n    benchmark(sin)", "piece": "sin.configure()"}
{"function_name": "test_saw", "function_define": "    saw = osc.Saw(440)\n    saw.configure()\n    benchmark(saw)", "piece": "saw.configure()"}
{"function_name": "test_square", "function_define": "    sq = osc.Square(440)\n    sq.configure()\n    benchmark(sq)", "piece": "sq.configure()"}
{"function_name": "test_white_noise", "function_define": "    noise = osc.WhiteNoise()\n    noise.configure()\n    benchmark(noise)", "piece": "noise.configure()"}
{"function_name": "missing_number", "function_define": "    for i in range(len(nums)):\n    if nums[i] < len(nums):\n    arr[nums[i]] = -1", "piece": "if nums[i] < len(nums):"}
{"function_name": "pre_histogram", "function_define": "    weights = torch.clone(_weights)\n    weights[weights <= thresh] = 0\n    n = points.shape[0]", "piece": "weights[weights <= thresh] = 0"}
{"function_name": "log_init", "function_define": "    if not os.path.exists(folder):\n    os.mkdir(folder)\n    global logfile", "piece": "os.mkdir(folder)"}
{"function_name": "read_data_menpo", "function_define": "    print('Landmark ' + str(lm))\n    sys.exit()\n    print(train_data_dnn.shape)", "piece": "sys.exit()"}
{"function_name": "model_half", "function_define": "    model = Sequential()\n    model.add(Dropout(0.3))\n    model.add(Dropout(0.3))", "piece": "model.add(Dropout(0.3))"}
{"function_name": "model_300", "function_define": "    model = Sequential()\n    model.add(Dropout(0.3))\n    model.add(Dropout(0.3))", "piece": "model.add(Dropout(0.3))"}
{"function_name": "load_old_model", "function_define": "    filename = None\n    start_epoch = 0\n    if acc_file is not None:", "piece": "start_epoch = 0"}
{"function_name": "get_best", "function_define": "    history = history.history\n    best_mse = None\n    best_corr = None", "piece": "best_mse = None"}
{"function_name": "getMeanStd", "function_define": "    Parameters\n    gdf: GeoDataFrame\n    columnName: str", "piece": "gdf: GeoDataFrame"}
{"function_name": "hovedprogram", "function_define": "    ordbok = {}\n    for line in abel:\n    line.split(' ')", "piece": "for line in abel:"}
{"function_name": "test_get_budgets", "function_define": "    cnx = get_connection()\n    current_month = '2020-07-01'\n    budgets = tuple(budgets)", "piece": "current_month = '2020-07-01'"}
{"function_name": "from_geometry", "function_define": "    Parameters\n    material : lavirot.Material\n    Shaft material.", "piece": "material : lavirot.Material"}
{"function_name": "validate_string", "function_define": "    is_alpha_numeric = False\n    is_alpha = False\n    is_digits = False", "piece": "is_alpha = False"}
{"function_name": "createScene", "function_define": "    node.dt = 0.01\n    node.gravity = '0 0 0'\n    compliance = 0", "piece": "node.gravity = '0 0 0'"}
{"function_name": "run_notebook", "function_define": "    with open(notebook_path) as f:\n    proc.allow_errors = True\n    if save_nb_path:", "piece": "proc.allow_errors = True"}
{"function_name": "_mikado_pairs", "function_define": "    if len(tasks) == 0:\n    child, depth = tasks[0]\n    if len(parents):", "piece": "child, depth = tasks[0]"}
{"function_name": "createConfig", "function_define": "    f = open(self.filename, 'w')\n    f.write(config)\n    f.close()", "piece": "f.write(config)"}
{"function_name": "test02_named", "function_define": "    factories[0].reconnect = True\n    factories[0].went_broke = True\n    d = defer.Deferred()", "piece": "factories[0].went_broke = True"}
{"function_name": "content2text", "function_define": "    content = ''\n    for item in eval(data):\n    if 'info' in item:", "piece": "for item in eval(data):"}
{"function_name": "smallMax", "function_define": "    for i in xrange(len(Gs)):\n    v = next(BFS_handles[i])\n    Vs[i].add(v)", "piece": "v = next(BFS_handles[i])"}
{"function_name": "toSPGraph", "function_define": "    spG = nx.Graph()\n    for u in SP:\n    for v, d in SP[u].items():", "piece": "for u in SP:"}
{"function_name": "findDeltaTeams", "function_define": "    res = list()\n    for i in xrange(1, len(Gs)):\n    while queue:", "piece": "for i in xrange(1, len(Gs)):"}
{"function_name": "division", "function_define": "    NGX = [dict() for _ in NG]\n    C = set()\n    for v in S:", "piece": "C = set()"}
{"function_name": "apply_algorithm", "function_define": "    self.algo = algo_interface\n    if self.args.algo_name == 'HMC':\n    self.algo.fit()", "piece": "if self.args.algo_name == 'HMC':"}
{"function_name": "on_close", "function_define": "    self.client.application = None\n    del self.j2p2j.clients[self.id]\n    del self.client", "piece": "del self.j2p2j.clients[self.id]"}
{"function_name": "parameterizedLnl", "function_define": "    for p in params:\n    if p < 0 or p > 1:\n    mvGauss = MVGaussian(mu, sig)", "piece": "if p < 0 or p > 1:"}
{"function_name": "dimension_subset", "function_define": "    valid_ids = []\n    for i in range(len(obs)):\n    if not obs[i] == 0:", "piece": "for i in range(len(obs)):"}
{"function_name": "setXRotation", "function_define": "    if angle != self.xRot:\n    self.xRot = angle\n    self.update()", "piece": "self.xRot = angle"}
{"function_name": "setYRotation", "function_define": "    if angle != self.yRot:\n    for i in range(0, 100):\n    self.yRot = angle + i", "piece": "for i in range(0, 100):"}
{"function_name": "setZRotation", "function_define": "    if angle != self.zRot:\n    self.zRot = angle\n    self.update()", "piece": "self.zRot = angle"}
{"function_name": "initializeGL", "function_define": "    self.object = self.makeObject()\n    self.move(0, 340)\n    gl.glShadeModel(gl.GL_FLAT)", "piece": "self.move(0, 340)"}
{"function_name": "resizeGL", "function_define": "    side = min(width, height)\n    if side < 0:\n    gl.glLoadIdentity()", "piece": "if side < 0:"}
{"function_name": "makeObject", "function_define": "    genList = gl.glGenLists(1)\n    gl.glBegin(gl.GL_QUADS)\n    x1 = +0.06", "piece": "gl.glBegin(gl.GL_QUADS)"}
{"function_name": "normalizeAngle", "function_define": "    while angle < 0:\n    angle += 360 * 16\n    while angle > 360 * 16:", "piece": "angle += 360 * 16"}
{"function_name": "validate_phone", "function_define": "    if '-' in phone.data:\n    if len(phone.data) == 9:\n    if phone.data[0] != '9':", "piece": "if len(phone.data) == 9:"}
{"function_name": "initializePages", "function_define": "    Initialize pages\n    Required Parameters:\n    Optional Parameters:", "piece": "Required Parameters:"}
{"function_name": "_GetPieceHash", "function_define": "    first_time = True\n    bytes_remaining = piece_len\n    hasher = hashlib.sha1()", "piece": "bytes_remaining = piece_len"}
{"function_name": "_CollectPieces", "function_define": "    prev_offset = 0\n    offset = prev_offset\n    bytes_covered_total = 0", "piece": "offset = prev_offset"}
{"function_name": "CheckTorrent", "function_define": "    info = parsed['info']\n    piece_len = info['piece length']\n    pieces = info['pieces']", "piece": "piece_len = info['piece length']"}
{"function_name": "user_client", "function_define": "    app = create_app()\n    client = app.test_client()\n    with app.app_context():", "piece": "client = app.test_client()"}
{"function_name": "showAbout", "function_define": "    d = QtAbout()\n    d.setObjectName('QtAbout')\n    d.setWindowTitle('About')", "piece": "d.setObjectName('QtAbout')"}
{"function_name": "test_image", "function_define": "    leak = Leak()\n    stats = list(leak.load(1000))\n    leak.clear()", "piece": "stats = list(leak.load(1000))"}
{"function_name": "test_text", "function_define": "    os.environ['TRACE_TEXT'] = '1'\n    txt = text()\n    txt.trace.reset()", "piece": "txt = text()"}
{"function_name": "test_disable", "function_define": "    when not in use.\n    os.environ.pop('TRACE_TEXT')\n    txt = text()", "piece": "os.environ.pop('TRACE_TEXT')"}
{"function_name": "process_sample", "function_define": "    candidate = sample['candidate']\n    answer = sample['answer']\n    candidate_tokens = []", "piece": "answer = sample['answer']"}
{"function_name": "getNoDataValue", "function_define": "    Returns:\n    Author: SMM\n    raster = gdal.Open(rasterfn)", "piece": "Author: SMM"}
{"function_name": "setNoDataValue", "function_define": "    Returns:\n    Author: SMM\n    raster = gdal.Open(rasterfn)", "piece": "Author: SMM"}
{"function_name": "GetUTMMaxMin", "function_define": "    Returns:\n    float: The cell size in metres\n    Author: SMM", "piece": "float: The cell size in metres"}
{"function_name": "GetPixelArea", "function_define": "    Returns:\n    Author: SMM\n    if exists(FileName) is False:", "piece": "Author: SMM"}
{"function_name": "GetGeoInfo", "function_define": "    float: A vector that contains:\n    Author: SMM\n    if exists(FileName) is False:", "piece": "Author: SMM"}
{"function_name": "GetUTMEPSG", "function_define": "    str: The EPSG string\n    Author: SMM\n    if exists(FileName) is False:", "piece": "Author: SMM"}
{"function_name": "CheckNoData", "function_define": "    Author: SMM\n    if exists(FileName) is False:\n    if SourceDS == None:", "piece": "if exists(FileName) is False:"}
{"function_name": "array2raster", "function_define": "    Author: SMM\n    raster = gdal.Open(rasterfn)\n    originX = geotransform[0]", "piece": "raster = gdal.Open(rasterfn)"}
{"function_name": "RasterDifference", "function_define": "    then writes it out to file\n    Raster1 = gdal.Open(RasterFile1)\n    Raster2 = gdal.Open(RasterFile2)", "piece": "Raster1 = gdal.Open(RasterFile1)"}
{"function_name": "PolygoniseRaster", "function_define": "    Returns:\n    Author: FJC\n    import rasterio", "piece": "Author: FJC"}
{"function_name": "showOpenDialog", "function_define": "    if fileName:\n    data = file.read()\n    self.textEdit.setHtml(data)", "piece": "data = file.read()"}
{"function_name": "proof_of_work", "function_define": "    regex = '0000'\n    new_proof = 0\n    block_hash = ''", "piece": "new_proof = 0"}
{"function_name": "convert_to_json", "function_define": "    temp = []\n    for i in self.block_chain:\n    print(temp)", "piece": "for i in self.block_chain:"}
{"function_name": "breadth_First", "function_define": "    queue = Queue()\n    queue.enqueue(self.root)\n    while not queue.isEmpty():", "piece": "queue.enqueue(self.root)"}
{"function_name": "scanForCategory", "function_define": "    page = 0\n    while cat == 0:\n    page += 1", "piece": "while cat == 0:"}
{"function_name": "getCategoryPage", "function_define": "    titles = []\n    for cat in data:\n    if 'title' in cat:", "piece": "for cat in data:"}
{"function_name": "subdirectory", "function_define": "    if dataroot is None:\n    if not os.path.isdir(dataroot):\n    if not os.path.isdir(subdir):", "piece": "if not os.path.isdir(dataroot):"}
{"function_name": "saveFigsAsPDF", "function_define": "    figdir = subdirectory('figs')\n    figbase = f'fig{figindex:02}'\n    for fname, fig in figs.items():", "piece": "figbase = f'fig{figindex:02}'"}
{"function_name": "changeStiffness", "function_define": "    req = BoolServiceRequest()\n    if self.stiffness == 1.0:\n    req.enable = False", "piece": "if self.stiffness == 1.0:"}
{"function_name": "sparse_array", "function_define": "    Input Format\n    Constraints\n    number_of_strings = int(input())", "piece": "Constraints"}
{"function_name": "list_instances", "function_define": "    instances = []\n    for server in servers:\n    server_name = server.name", "piece": "for server in servers:"}
{"function_name": "volume_create", "function_define": "    elif image_id:\n    provider_image_id = None\n    volume_id = str(uuid.uuid4())", "piece": "provider_image_id = None"}
{"function_name": "volume_delete", "function_define": "    except exception.EntityNotFound:\n    provider_volume.delete()\n    except Exception as ex:", "piece": "provider_volume.delete()"}
{"function_name": "attach_volume", "function_define": "    u'data': {\n    u'access_mode': u'rw',\n    u'qos_specs': None,", "piece": "u'access_mode': u'rw',"}
{"function_name": "power_off", "function_define": "    if not server:\n    server.stop()\n    LOG.debug('submit stop task')", "piece": "server.stop()"}
{"function_name": "power_on", "function_define": "    if not server:\n    if server.status == 'SHUTOFF':\n    server.start()", "piece": "if server.status == 'SHUTOFF':"}
{"function_name": "snapshot", "function_define": "    image_format = None\n    if hasattr(image, 'direct_url'):\n    direct_url = image.direct_url", "piece": "if hasattr(image, 'direct_url'):"}
{"function_name": "upload_image", "function_define": "    image_id = image_meta['id']\n    if not lxc_volume_id:\n    except Exception as ex:", "piece": "if not lxc_volume_id:"}
{"function_name": "SanzSerna", "function_define": "    Q1 = q + 7 * h * dT(p) / 48\n    P1 = p - h * dU(Q1) / 3\n    Q1 = Q1 + 3 * h * dT(P1) / 8", "piece": "P1 = p - h * dU(Q1) / 3"}
{"function_name": "_get_effects", "function_define": "    first_eff_by_undo = False\n    first_eff_by_redo = False\n    except KeyError:", "piece": "first_eff_by_redo = False"}
{"function_name": "get_pdb_center", "function_define": "    xcenter = 0.0\n    ycenter = 0.0\n    zcenter = 0.0", "piece": "ycenter = 0.0"}
{"function_name": "edit_pdb", "function_define": "    f0 = open(fh0, 'r')\n    f1 = open(fh1, 'w')\n    for line in f0:", "piece": "f1 = open(fh1, 'w')"}
{"function_name": "get_ugly_ts_df", "function_define": "    newmask = mask.copy()\n    mask[newmask >= 0.4] = 2\n    mask[newmask < 0.4] = 1", "piece": "mask[newmask >= 0.4] = 2"}
{"function_name": "SegmentMask", "function_define": "    segment_id: [B, T]\n    source_segment_id: [B, S]\n    Returns:", "piece": "source_segment_id: [B, S]"}
{"function_name": "_AttenLogits", "function_define": "    n = self.params.num_heads\n    l = self.params.left_context\n    r = self.params.right_context", "piece": "l = self.params.left_context"}
{"function_name": "_DotAtten", "function_define": "    attention weights.\n    query: [B, T, N, H].\n    key:   [B, S, N, H].", "piece": "query: [B, T, N, H]."}
{"function_name": "_DotAttenOneStep", "function_define": "    is True.\n    its children layers.\n    query_paddings: [B, 1].", "piece": "its children layers."}
{"function_name": "Feedforward", "function_define": "    p = self.params\n    if p.use_bias:\n    if p.use_bias:", "piece": "if p.use_bias:"}
{"function_name": "_MaybeSplit", "function_define": "    p = self.params\n    num_layers = len(blocks)\n    cells = []", "piece": "num_layers = len(blocks)"}
{"function_name": "_Attention", "function_define": "    name: name of this layer.\n    Returns:\n    A self attention layer params.", "piece": "Returns:"}
{"function_name": "_ShortSeq", "function_define": "    q: query of shape [B, N, H]\n    Returns:\n    Updated logits and time steps.", "piece": "Returns:"}
{"function_name": "_LayerParams", "function_define": "    p_ii.name = 'layer_%d' % ii\n    p_ii.input_dim = p.mdl_dim\n    p_ii.output_dim = p.mdl_dim", "piece": "p_ii.input_dim = p.mdl_dim"}
{"function_name": "_AttenStep", "function_define": "    q: query of shape [B, N, H]\n    Returns:\n    Updated logits and time steps.", "piece": "Returns:"}
{"function_name": "_DotStep", "function_define": "    p: probabiliy of shape [S, B*N]\n    Returns:\n    Updated output and time steps.", "piece": "Returns:"}
{"function_name": "calc_grid_repr", "function_define": "    grid_size = self.size\n    grid[:, :] = ' '\n    if self.cur_node.XKey != -1:", "piece": "grid[:, :] = ' '"}
{"function_name": "test_medfilt3", "function_define": "    npmed3[:1, :] = a[:1, :]\n    npmed3[-1:, :] = a[-1:, :]\n    npmed3[:, :1] = a[:, :1]", "piece": "npmed3[-1:, :] = a[-1:, :]"}
{"function_name": "test_medfilt5", "function_define": "    npmed5[:2, :] = a[:2, :]\n    npmed5[-2:, :] = a[-2:, :]\n    npmed5[:, :2] = a[:, :2]", "piece": "npmed5[-2:, :] = a[-2:, :]"}
{"function_name": "test_medfilt7", "function_define": "    npmed7[:3, :] = a[:3, :]\n    npmed7[-3:, :] = a[-3:, :]\n    npmed7[:, :3] = a[:, :3]", "piece": "npmed7[-3:, :] = a[-3:, :]"}
{"function_name": "test_sepmedfilt3", "function_define": "    npmed3[:, :1] = a[:, :1]\n    npmed3[:, -1:] = a[:, -1:]\n    npmed3[:1, :] = a[:1, :]", "piece": "npmed3[:, -1:] = a[:, -1:]"}
{"function_name": "test_sepmedfilt5", "function_define": "    npmed5[:, :2] = a[:, :2]\n    npmed5[:, -2:] = a[:, -2:]\n    npmed5[:2, :] = a[:2, :]", "piece": "npmed5[:, -2:] = a[:, -2:]"}
{"function_name": "test_sepmedfilt7", "function_define": "    npmed7[:, :3] = a[:, :3]\n    npmed7[:, -3:] = a[:, -3:]\n    npmed7[:3, :] = a[:3, :]", "piece": "npmed7[:, -3:] = a[:, -3:]"}
{"function_name": "test_sepmedfilt9", "function_define": "    npmed9[:, :4] = a[:, :4]\n    npmed9[:, -4:] = a[:, -4:]\n    npmed9[:4, :] = a[:4, :]", "piece": "npmed9[:, -4:] = a[:, -4:]"}
{"function_name": "test_dilate5", "function_define": "    kernel = np.ones((5, 5))\n    kernel[0, 0] = 0\n    kernel[0, 4] = 0", "piece": "kernel[0, 0] = 0"}
{"function_name": "test_dilate3", "function_define": "    kernel = np.ones((3, 3))\n    cgrow = dilate3(a)\n    npgrow[:, 0] = a[:, 0]", "piece": "cgrow = dilate3(a)"}
{"function_name": "test_subsample", "function_define": "    for i in range(a.shape[0]):\n    for j in range(a.shape[1]):\n    csubsamp = subsample(a)", "piece": "for j in range(a.shape[1]):"}
{"function_name": "test_rebin", "function_define": "    a = a.astype('f4')\n    for i in range(1001):\n    for j in range(1001):", "piece": "for i in range(1001):"}
{"function_name": "check_files", "function_define": "    checkFiles\n    except FileNotFoundError:\n    except IndexError:", "piece": "except FileNotFoundError:"}
{"function_name": "get_chunks", "function_define": "    if isinstance(dir_path, Path):\n    dir_path = str(dir_path)\n    chunks = list(set(chunks))", "piece": "dir_path = str(dir_path)"}
{"function_name": "list_files_in_S3", "function_define": "    assert response is not None\n    output = []\n    if 'Contents' not in response:", "piece": "output = []"}
{"function_name": "upload_to_s3", "function_define": "    assert bucket_name is not None\n    assert file_name is not None\n    assert content is not None", "piece": "assert file_name is not None"}
{"function_name": "generate_phrases", "function_define": "    ts = json.load(transcript)\n    items = ts['results']['items']\n    phrase = {}", "piece": "items = ts['results']['items']"}
{"function_name": "get_time_code", "function_define": "    thund = int(seconds % 1 * 1000)\n    tseconds = int(seconds)\n    tmins = int(tseconds / 60)", "piece": "tseconds = int(seconds)"}
{"function_name": "transcribe_all", "function_define": "    video_files = list_video_files()\n    output = {}\n    for video_file in video_files:", "piece": "output = {}"}
{"function_name": "histoanalysis", "function_define": "    row, col, _ = np.shape(pot)\n    if krnl % 2 == 0:\n    krnl = krnl + 1", "piece": "if krnl % 2 == 0:"}
{"function_name": "shapeanalysis", "function_define": "    row, col = pot.shape[0:2]\n    H[np.where(H > 100)] = 0\n    H[np.where(H < 10)] = 0", "piece": "H[np.where(H > 100)] = 0"}
{"function_name": "intersect", "function_define": "    from collections import Counter\n    counter1 = Counter(nums1)\n    counter2 = Counter(nums2)", "piece": "counter1 = Counter(nums1)"}
{"function_name": "getCount", "function_define": "    if txn_size < 253:\n    elif txn_size == 253:\n    elif txn_size == 254:", "piece": "elif txn_size == 253:"}
{"function_name": "getCountBytes", "function_define": "    mptr_read = mptr.read(1)\n    count_bytes = mptr_read\n    if txn_size < 253:", "piece": "count_bytes = mptr_read"}
{"function_name": "getTransaction", "function_define": "    txn_id = set()\n    out = {}\n    inputs = {}", "piece": "out = {}"}
{"function_name": "getBlock", "function_define": "    block = {}\n    mptr.seek(start + 88)\n    txn_list = []", "piece": "mptr.seek(start + 88)"}
{"function_name": "blockFileParser", "function_define": "    block_file = []\n    while True:\n    logging.debug(index)", "piece": "while True:"}
{"function_name": "flip_to_positive", "function_define": "    and unit-norm components\n    to_flip = abs_max < abs_min\n    self.comps_rot[:, to_flip] *= -1", "piece": "to_flip = abs_max < abs_min"}
{"function_name": "scoring_motif", "function_define": "    score = 1\n    for i in range(len(m)):\n    score *= float(ntdict[m[i]][i])", "piece": "for i in range(len(m)):"}
{"function_name": "frequentletter", "function_define": "    for i in row:\n    c.append(row.count(i))\n    for i in c:", "piece": "c.append(row.count(i))"}
{"function_name": "profile_most", "function_define": "    score = 0\n    index = 0\n    if newscore > score:", "piece": "index = 0"}
{"function_name": "profile_random", "function_define": "    score = {}\n    for i in score.keys():\n    l.extend(score[i] * [i])", "piece": "for i in score.keys():"}
{"function_name": "gibbs_sampler", "function_define": "    motifs = []\n    for i in dnas:\n    motifs.append(i[r:r + k])", "piece": "for i in dnas:"}
{"function_name": "draw_triangle", "function_define": "    t.penup()\n    t.goto(p0.x, p0.y)\n    t.pendown()", "piece": "t.goto(p0.x, p0.y)"}
{"function_name": "Sierpinski", "function_define": "    if colorDepth == -1:\n    if order <= 0:\n    draw_triangle(t, p0, p1, p2)", "piece": "if order <= 0:"}
{"function_name": "eval_modify", "function_define": "    mod_input = []\n    sample = sample[:max_seq_length]\n    mod_input.append(sample)", "piece": "sample = sample[:max_seq_length]"}
{"function_name": "score_contexts", "function_define": "    assert suffix is not None\n    reranker.model.eval()\n    if silent:", "piece": "reranker.model.eval()"}
{"function_name": "waitingLine", "function_define": "    waitingList = DefaultDict(list)\n    matchList = []\n    j = req.json()", "piece": "matchList = []"}
{"function_name": "gameResult", "function_define": "    j = req.json()\n    win -= 1\n    lose -= 1", "piece": "win -= 1"}
{"function_name": "matchingStart", "function_define": "    path = 'start'\n    x_auth_token = '<PASSWORD>'\n    param = {'problem': qid}", "piece": "x_auth_token = '<PASSWORD>'"}
{"function_name": "transparent_cmap", "function_define": "    mycmap = cmap\n    mycmap._init()\n    if increasing_alpha:", "piece": "mycmap._init()"}
{"function_name": "black_gradient", "function_define": "    color = np.array(color[:3])\n    for _i, _c in enumerate(color):\n    if transparent:", "piece": "for _i, _c in enumerate(color):"}
{"function_name": "normlize_color", "function_define": "    if vmin is None:\n    vmin = np.nanmin(_mat)\n    if vmax is None:", "piece": "vmin = np.nanmin(_mat)"}
{"function_name": "message_cb_coin", "function_define": "    if event.text[0:5] == '/coin':\n    coin = random.randint(0, 1)\n    if coin == 1:", "piece": "coin = random.randint(0, 1)"}
{"function_name": "message_cb_find", "function_define": "    if event.text[0:5] == '/find':\n    key = '<KEY>'\n    if prop == 0:", "piece": "key = '<KEY>'"}
{"function_name": "message_cb_rate", "function_define": "    if event.text == '/rate':\n    a = usd[0:10]\n    b = a.replace('USD', 'USD ')", "piece": "a = usd[0:10]"}
{"function_name": "_getProp", "function_define": "    if name == '.':\n    elif name == '..':\n    name = name[1:]", "piece": "elif name == '..':"}
{"function_name": "__reflookup__", "function_define": "    if not key:\n    raise KeyError(key)\n    if key[0] == '.':", "piece": "raise KeyError(key)"}
{"function_name": "yieldParents", "function_define": "    resource = self\n    while resource:\n    yield resource", "piece": "while resource:"}
{"function_name": "setStartTime", "function_define": "    if not startTime:\n    self.startTime = startTime\n    elif isinstance(startTime, int):", "piece": "self.startTime = startTime"}
{"function_name": "makeChangeId", "function_define": "    if not timestamp:\n    timestamp = datetime.utcnow()\n    if year < 0:", "piece": "timestamp = datetime.utcnow()"}
{"function_name": "_resolveKey", "function_define": "    if self.external:\n    if getter:\n    value = getter(key)", "piece": "if getter:"}
{"function_name": "_mapValue", "function_define": "    from .eval import mapValue, Ref\n    if isinstance(val, Results):\n    elif Ref.isRef(val):", "piece": "if isinstance(val, Results):"}
{"function_name": "rename_assets", "function_define": "    file_name_map = OrderedDict()\n    for file_name in file_names:\n    if file_name_name:", "piece": "for file_name in file_names:"}
{"function_name": "set_front_stub", "function_define": "    if article.doi:\n    doi_tag.text = article.doi\n    if article.title:", "piece": "doi_tag.text = article.doi"}
{"function_name": "asset_xref_tags", "function_define": "    asset_labels = labels(root)\n    for label in asset_labels:\n    if label.get('text'):", "piece": "for label in asset_labels:"}
{"function_name": "convolucion", "function_define": "    Entrada:\n    res - imagen resultante\"\"\"\n    res = np.zeros((fr, cr))", "piece": "res - imagen resultante\"\"\""}
{"function_name": "train_predict", "function_define": "    os = self.layers[-1].shape\n    input_layer = self.layers[0]\n    for layer in self.layers[1:]:", "piece": "input_layer = self.layers[0]"}
{"function_name": "get_minibatch", "function_define": "    minibatch_x = x[:, self.idx:]\n    minibatch_y = y[:, self.idx:]\n    self.idx += self.batch_size", "piece": "minibatch_y = y[:, self.idx:]"}
{"function_name": "_check_gradient", "function_define": "    epsilon = 1e-06\n    for j in range(layer.shape[1]):\n    layer.weights[i, j] += epsilon", "piece": "for j in range(layer.shape[1]):"}
{"function_name": "experiment", "function_define": "    self.root.setup()\n    db_url = self.root.db_url\n    config = self._load_config()", "piece": "db_url = self.root.db_url"}
{"function_name": "import_metrics", "function_define": "    files = os.listdir(metric_path)\n    metrics = []\n    for f in files:", "piece": "metrics = []"}
{"function_name": "excute_metric", "function_define": "    result_info = ''\n    for key in result:\n    if key in screen_output[metric]:", "piece": "for key in result:"}
{"function_name": "save_detail", "function_define": "    if is_path_validation:\n    ok = False\n    if detail_path is not None:", "piece": "ok = False"}
{"function_name": "get_x_from_y", "function_define": "    x = (y - self.b) / self.k\n    if self.x is not None:\n    if self.y is not None:", "piece": "if self.x is not None:"}
{"function_name": "getfields", "function_define": "    fields = desc.fields\n    fieldsameslist = []\n    for field in fields:", "piece": "fieldsameslist = []"}
{"function_name": "start_webcam", "function_define": "    self.cap = cv2.VideoCapture(0)\n    self.timer = QTimer(self)\n    self.timer.start(5)", "piece": "self.timer = QTimer(self)"}
{"function_name": "test_checkNone2", "function_define": "    hasx = dict()\n    hasx['x-webkit-csp'] = None\n    result = self.x.check(hasx)", "piece": "hasx['x-webkit-csp'] = None"}
{"function_name": "test_checkValid", "function_define": "    hasx5 = dict()\n    result = self.x.check(hasx5)\n    self.assertIsNotNone(result)", "piece": "result = self.x.check(hasx5)"}
{"function_name": "_gen_rotation", "function_define": "    Parameters\n    rs = np.random.default_rng(seed)\n    if np.linalg.det(rotate_l) < 0:", "piece": "rs = np.random.default_rng(seed)"}
{"function_name": "gen_spinsamples", "function_define": "    Parameters\n    coords : (N, 3) array_like\n    hemiid : (N,) array_like", "piece": "coords : (N, 3) array_like"}
{"function_name": "validate_user", "function_define": "    row = self.curr.fetchall()\n    if not row:\n    elif row[0][1] == inputData[0]:", "piece": "if not row:"}
{"function_name": "search_patient", "function_define": "    new_data = data\n    if data[0]:\n    com0 = '(id = (?))'", "piece": "if data[0]:"}
{"function_name": "search_leistung", "function_define": "    new_data = data\n    if data[0]:\n    com0 = '(id = (?))'", "piece": "if data[0]:"}
{"function_name": "search_rechnung", "function_define": "    new_data = data\n    if data[0]:\n    com0 = '(id = (?))'", "piece": "if data[0]:"}
{"function_name": "search_termin", "function_define": "    new_data = data\n    if data[0]:\n    com0 = '(id = (?))'", "piece": "if data[0]:"}
{"function_name": "WriteTableToFile", "function_define": "    nEntries = len(dataFrame.name)\n    hdrLine = '#'\n    for cname in colNames_to_save:", "piece": "hdrLine = '#'"}
{"function_name": "VmaxWeight", "function_define": "    distance), then W = 1\n    For S4G, R25_limit = 30 arcsec\n    V_tot = maxSurveyDist ** 3", "piece": "For S4G, R25_limit = 30 arcsec"}
{"function_name": "BmV_to_gmr", "function_define": "    galaxy B-V color to g-r.\n    gmr = 1.12 * BmV - 0.18\n    gmr[ii_bad] = -99.0", "piece": "gmr = 1.12 * BmV - 0.18"}
{"function_name": "GetSalo15BtoT", "function_define": "    gnameList = []\n    BotTDict = {}\n    bulgeFound = False", "piece": "BotTDict = {}"}
{"function_name": "getKeyDown", "function_define": "    if key in self.newlyActiveKeys:\n    self.newlyActiveKeys.remove(key)\n    self.activeKeys.append(key)", "piece": "self.newlyActiveKeys.remove(key)"}
{"function_name": "__initUi", "function_define": "    self.__parent = parent\n    self.__btn = SvgIconPushButton()\n    self.__btn.setCheckable(True)", "piece": "self.__btn = SvgIconPushButton()"}
{"function_name": "__drawerToggled", "function_define": "    self.__btn.hide()\n    self.__btn.show()\n    self.__animationGroup.start()", "piece": "self.__btn.show()"}
{"function_name": "is_valid_state", "function_define": "    Fails if is_valid is false.\n    if not is_valid:\n    raise Exception(message)", "piece": "if not is_valid:"}
{"function_name": "print_summary", "function_define": "    print('Summary: ')\n    print('\\n'.join(infos))\n    print('')", "piece": "print('\\n'.join(infos))"}
{"function_name": "fetch_mts_groups", "function_define": "    mts_groups = {}\n    for name in files:\n    if not 'mts' in ext.lower():", "piece": "for name in files:"}
{"function_name": "build_input_args", "function_define": "    groups_args = {}\n    if len(files) > 1:\n    cmd = ' -i \"concat:'", "piece": "if len(files) > 1:"}
{"function_name": "merge_mts_groups", "function_define": "    handle_info('Merging mts')\n    if len(files) < 2:\n    continue", "piece": "if len(files) < 2:"}
{"function_name": "plotHistory", "function_define": "    history = np.array(history)\n    history = history.T\n    iteration = range(0, times)", "piece": "history = history.T"}
{"function_name": "test_get_repr", "function_define": "    pca2 = PCA(n_components=2)\n    pca3 = PCA(n_components=3)\n    assert True", "piece": "pca3 = PCA(n_components=3)"}
{"function_name": "s_get_full_url", "function_define": "    if not base:\n    if url.scheme in url._scheme:\n    if not url.scheme:", "piece": "if url.scheme in url._scheme:"}
{"function_name": "finecenter", "function_define": "    The function takes three inputs:\n    a string.\n    dimy, dimx = flux.shape", "piece": "a string."}
{"function_name": "get_videos_ids", "function_define": "    videos = []\n    page_token = ''\n    while True:", "piece": "page_token = ''"}
{"function_name": "test_ttf", "function_define": "    tfh = TransferFunctionHeader()\n    ttf = TTF(tfh, 32)\n    ttf.set_tf(1, 2, 3)", "piece": "ttf = TTF(tfh, 32)"}
{"function_name": "draw_point", "function_define": "    img_cp = cp.deepcopy(img)\n    pcoords = tuple(point)\n    if label is not None:", "piece": "pcoords = tuple(point)"}
{"function_name": "draw_hom_points", "function_define": "    img_cp = cp.deepcopy(img)\n    for p in points_array:\n    label = 'p' + str(i)", "piece": "for p in points_array:"}
{"function_name": "initialStep", "function_define": "    for i in range(V0.shape[0]):\n    top = np.iinfo(np.int16).min\n    if i > 0:", "piece": "top = np.iinfo(np.int16).min"}
{"function_name": "nextStep", "function_define": "    for i in range(V0.shape[0]):\n    left = V0[i] - d\n    top = np.iinfo(np.int16).min", "piece": "left = V0[i] - d"}
{"function_name": "codons_alignment", "function_define": "    lenA = len(codonsA)\n    lenB = len(codonsB)\n    if lenA < lenB:", "piece": "lenB = len(codonsB)"}
{"function_name": "dna_local_align3", "function_define": "    results = []\n    for i in range(3):\n    for j in range(3):", "piece": "for i in range(3):"}
{"function_name": "check_auth", "function_define": "    yield defer.returnValue(None)\n    if not username.startswith('@'):\n    if auth:", "piece": "if not username.startswith('@'):"}
{"function_name": "check_passwd", "function_define": "    Returns:\n    if user_id.startswith('@'):\n    localpart = user_id", "piece": "if user_id.startswith('@'):"}
{"function_name": "__getdataset__", "function_define": "    config = self.config\n    template = 'hub'\n    dataset = None", "piece": "template = 'hub'"}
{"function_name": "change_sz_code", "function_define": "    sz_code = 0\n    if share_code < 10:\n    elif share_code < 100:", "piece": "if share_code < 10:"}
{"function_name": "cal_std_dev", "function_define": "    cur_size = len(list_to_cal)\n    counter = 0\n    result = 0", "piece": "counter = 0"}
{"function_name": "check_market", "function_define": "    reg_sh = '^600'\n    reg_sz = '^00'\n    reg_cy = '^300'", "piece": "reg_sz = '^00'"}
{"function_name": "find_path_rec", "function_define": "    path.append((num_row, num_col))\n    if M == None or len(M) == 0:\n    path = []", "piece": "if M == None or len(M) == 0:"}
{"function_name": "find_path_memo", "function_define": "    point = (row, col)\n    if point in failedPoints:\n    path.append(point)", "piece": "if point in failedPoints:"}
{"function_name": "_test_path", "function_define": "    assert path_rec == path_memo\n    for _ in range(len(M1)):\n    print(path_with_obstacle_memo)", "piece": "for _ in range(len(M1)):"}
{"function_name": "_find_path_memo", "function_define": "    point = (row, col)\n    if point in failedPoints:\n    path.append(point)", "piece": "if point in failedPoints:"}
{"function_name": "dem_data_dia", "function_define": "    if str_dia_fin is not None:\n    if not hay_errores:\n    print_err(str_import)", "piece": "if not hay_errores:"}
{"function_name": "split_path", "function_define": "    if split_dirname is None:\n    parts = Path(filename).parts\n    if split_dirname not in parts:", "piece": "parts = Path(filename).parts"}
{"function_name": "test_detect", "function_define": "    r = ElsevierXmlReader()\n    content = f.read()\n    f.close()", "piece": "content = f.read()"}
{"function_name": "getRectangle", "function_define": "    left = rect.left\n    top = rect.top\n    right = left + rect.width", "piece": "top = rect.top"}
{"function_name": "tutorial3", "function_define": "    cam_origin = (3.0, 3.0, 3.0)\n    cam_y_dir = (-1.0, 0.0, 0.0)\n    cloud_pose = cv.viz_Affine3d()", "piece": "cam_y_dir = (-1.0, 0.0, 0.0)"}
{"function_name": "list_font_names", "function_define": "    Logo constructors.\n    parameters\n    fontnames: (list)", "piece": "parameters"}
{"function_name": "set_attributes", "function_define": "    parameters\n    Attributes and their values.\n    self.patch.remove()", "piece": "Attributes and their values."}
{"function_name": "_make_patch", "function_define": "    the Glyph.\n    if height == 0.0:\n    self.patch = None", "piece": "if height == 0.0:"}
{"function_name": "_input_checks", "function_define": "    from numbers import Number\n    self.floor = float(self.floor)\n    self.color = get_rgb(self.color)", "piece": "self.floor = float(self.floor)"}
{"function_name": "requirements", "function_define": "    if not self.windows_xp:\n    self.requires('gtest/1.10.0')\n    if self.options.with_ruby:", "piece": "self.requires('gtest/1.10.0')"}
{"function_name": "lookahead", "function_define": "    selected_k = (0, 0)\n    selected_v = candidates[0, 0]\n    len_selected_v = 50", "piece": "selected_v = candidates[0, 0]"}
{"function_name": "solve_lookahead", "function_define": "    pp = possibilities[0]\n    solutions = []\n    while possibilities:", "piece": "solutions = []"}
{"function_name": "put_node", "function_define": "    Adds a node to be shut down\n    for param in (node_id, body):\n    if param in SKIP_IN_PATH:", "piece": "for param in (node_id, body):"}
{"function_name": "consensus", "function_define": "    if not result:\n    raw_consensus = result[0]\n    if '(' in raw_consensus:", "piece": "raw_consensus = result[0]"}
{"function_name": "earnings", "function_define": "    multiplier = 1\n    multiplier = -1\n    if not result:", "piece": "multiplier = -1"}
{"function_name": "game_teardown", "function_define": "    data['Winner'] = None\n    data['Race Active'] = False\n    data['Race Start'] = False", "piece": "data['Race Active'] = False"}
{"function_name": "game_setup", "function_define": "    racers = []\n    if mode == 'zoo':\n    if len(data['Players']) == 1:", "piece": "if mode == 'zoo':"}
{"function_name": "test_RequiredIf", "function_define": "    form = FakeForm()\n    form.validate()\n    except Exception as err:", "piece": "form.validate()"}
{"function_name": "get_nearest_k", "function_define": "    k_nearest_neighbors = []\n    for w in vocab:\n    if w == word:", "piece": "for w in vocab:"}
{"function_name": "get_furthest_k", "function_define": "    k_nearest_neighbors = []\n    for w in vocab:\n    if w == word:", "piece": "for w in vocab:"}
{"function_name": "line_search", "function_define": "    beta = 0.5\n    t = step\n    ok = False", "piece": "t = step"}
{"function_name": "all_keys_up", "function_define": "    Parameters:\n    self.active_keys.clear()\n    if include_modifiers:", "piece": "self.active_keys.clear()"}
{"function_name": "density_dir", "function_define": "    Parameters\n    CIJ : NxN np.ndarray\n    kden : float", "piece": "CIJ : NxN np.ndarray"}
{"function_name": "density_und", "function_define": "    Parameters\n    CIJ : NxN np.ndarray\n    kden : float", "piece": "CIJ : NxN np.ndarray"}
{"function_name": "rentian_scaling", "function_define": "    Parameters\n    A : NxN np.ndarray\n    xyz : Nx3 np.ndarray", "piece": "A : NxN np.ndarray"}
{"function_name": "add_arguments", "function_define": "    if arg.used:\n    for var in arg.variables:\n    llvm_arg = self.lfunc.args[i]", "piece": "for var in arg.variables:"}
{"function_name": "visit_ForNode", "function_define": "    self.visit(node.init)\n    self.builder.branch(bb_cond)\n    self.visit(node.step)", "piece": "self.builder.branch(bb_cond)"}
{"function_name": "visit_IfNode", "function_define": "    cond = self.visit(node.cond)\n    if node.else_body:\n    bb_false = bb_endif", "piece": "if node.else_body:"}
{"function_name": "visit_BinopNode", "function_define": "    lhs = self.visit(node.lhs)\n    rhs = self.visit(node.rhs)\n    op = node.operator", "piece": "rhs = self.visit(node.rhs)"}
{"function_name": "generate_compare", "function_define": "    op = node.operator\n    lop = None\n    lfunc = self.builder.fcmp", "piece": "lop = None"}
{"function_name": "_mangle_temp", "function_define": "    if name in self.temp_names:\n    node.name = name\n    self.temp_names.add(name)", "piece": "node.name = name"}
{"function_name": "_declare_temp", "function_define": "    self._mangle_temp(node)\n    bb = self.builder.basic_block\n    self.builder.position_at_end(bb)", "piece": "bb = self.builder.basic_block"}
{"function_name": "get_tag_domain", "function_define": "    if the_domain:\n    for k, v in fill_kv.items():\n    exec(f'the_domain.{k}=v')", "piece": "for k, v in fill_kv.items():"}
{"function_name": "get_tag_domains", "function_define": "    if the_domains:\n    for the_domain in the_domains:\n    for k, v in fill_kv.items():", "piece": "for the_domain in the_domains:"}
{"function_name": "dut_prepare", "function_define": "    install_iotrace()\n    dut_cleanup()\n    fio = Fio()", "piece": "dut_cleanup()"}
{"function_name": "checkStory", "function_define": "    sender_id = id_generator()\n    results = []\n    for s in story:", "piece": "results = []"}
{"function_name": "writeStoryResult", "function_define": "    if res[0][0]:\n    temp = res[1][k]\n    print(f'---{temp[0]}')", "piece": "temp = res[1][k]"}
{"function_name": "get_content", "function_define": "    players = get_players(soup)\n    head_coaches = get_coaches(soup)\n    if len(players) == 0:", "piece": "head_coaches = get_coaches(soup)"}
{"function_name": "get_players", "function_define": "    scrape roster for players\n    if not tables:\n    del tables[0]", "piece": "if not tables:"}
{"function_name": "scrape_roster", "function_define": "    roster = get_roster(game_id)\n    if not roster:\n    except Exception as e:", "piece": "if not roster:"}
{"function_name": "install_pipeline", "function_define": "    if parent_dir is None:\n    parent_dir = Path('.')\n    if target_dir.exists():", "piece": "parent_dir = Path('.')"}
{"function_name": "_get_image_blob", "function_define": "    num_images = len(roidb)\n    processed_ims = []\n    im_scales = []", "piece": "processed_ims = []"}
{"function_name": "_get_pose_pred", "function_define": "    num_images = len(roidb)\n    for i in range(num_images):\n    entry = roidb[i]", "piece": "for i in range(num_images):"}
{"function_name": "show_pose", "function_define": "    num_images = len(roidb)\n    for i in range(num_images):\n    pose_blob_i = pose_blob[i]", "piece": "for i in range(num_images):"}
{"function_name": "from_yaml", "function_define": "    zone = cls(config)\n    zone.editable = False\n    zone._generate_attrs()", "piece": "zone.editable = False"}
{"function_name": "test_graph", "function_define": "    db = _connect()\n    graph = new_graph(template)\n    view = graph.view", "piece": "graph = new_graph(template)"}
{"function_name": "install_ptvsd", "function_define": "    sys.path.insert(0, PYTHONFILES)\n    for line in reqsfile:\n    pkgreq = Requirement(line)", "piece": "for line in reqsfile:"}
{"function_name": "_remove_record", "function_define": "    Arguments:\n    pt1 {tuple} -- record (x1, y1)\n    pt2 {tuple} -- record (x2, y2)", "piece": "pt1 {tuple} -- record (x1, y1)"}
{"function_name": "parse_iso8601", "function_define": "    if not s:\n    raise blank_value\n    except Exception as e:", "piece": "raise blank_value"}
{"function_name": "to_iso8601", "function_define": "    ISO8601-like datetime formatter\n    if isinstance(t, (str, bytes)):\n    t = parse_iso8601(t)", "piece": "if isinstance(t, (str, bytes)):"}
{"function_name": "parsetimedelta", "function_define": "    datetime.timedelta(7)\n    datetime.timedelta(7, 48616)\n    pattern = '(\\\\d+)(\\\\S)'", "piece": "datetime.timedelta(7, 48616)"}
{"function_name": "make_full_url", "function_define": "    if settings.USE_HTTPS_LINKS:\n    protocol = 'https'\n    protocol = 'http'", "piece": "protocol = 'https'"}
{"function_name": "retry_function", "function_define": "    last_exc = None\n    next_delay = delay\n    for _ in range(count):", "piece": "next_delay = delay"}
{"function_name": "match_type", "function_define": "    if obj.type == typ:\n    ref = obj.referenced_value()\n    if ref.type == typ:", "piece": "ref = obj.referenced_value()"}
{"function_name": "add_elements", "function_define": "    kids = node['kids']\n    elems = node['elems']\n    for i in range(4):", "piece": "elems = node['elems']"}
{"function_name": "optimize_epoch", "function_define": "    loss_value = AverageMeter()\n    rotacc_value = AverageMeter()\n    if not validation:", "piece": "rotacc_value = AverageMeter()"}
{"function_name": "__refresh_cache", "function_define": "    assert self._cache_lock.locked()\n    self.debug('Refreshing cache')\n    self.debug('Creating directory')", "piece": "self.debug('Refreshing cache')"}
{"function_name": "_update_token", "function_define": "    with self._cache_lock:\n    self.__refresh_cache()\n    if uuid not in self._cache:", "piece": "self.__refresh_cache()"}
{"function_name": "_delete_token", "function_define": "    with self._cache_lock:\n    self.__refresh_cache()\n    if uuid in self._cache:", "piece": "self.__refresh_cache()"}
{"function_name": "_refresh_token", "function_define": "    oldtoken = self._cache[uuid]\n    if self.client_secret:\n    resp.raise_for_status()", "piece": "if self.client_secret:"}
{"function_name": "_get_server", "function_define": "    for port in WEB_PORTS:\n    except socket.error:\n    continue", "piece": "except socket.error:"}
{"function_name": "_get_new_token", "function_define": "    cancellation message.\n    query = environ['QUERY_STRING']\n    split = query.split('&')", "piece": "query = environ['QUERY_STRING']"}
{"function_name": "_token_app", "function_define": "    query = environ['QUERY_STRING']\n    split = query.split('&')\n    if 'error' in kv:", "piece": "split = query.split('&')"}
{"function_name": "reconstruct_plan", "function_define": "    reconstruct plan from encoding\n    if n_keyframes == 0:\n    assert first_dir in [0, 1]", "piece": "if n_keyframes == 0:"}
{"function_name": "test_fields", "function_define": "    os.environ['VAR_INT_R'] = '1234'\n    class MyEnv(EnvReader):\n    e = MyEnv()", "piece": "class MyEnv(EnvReader):"}
{"function_name": "parse_options", "function_define": "    sys.exit(0)\n    sys.exit(0)\n    quast_py_args = quast_args[1:]", "piece": "sys.exit(0)"}
{"function_name": "caesar_cipher", "function_define": "    codex = {}\n    base = ord('a')\n    for i in range(26):", "piece": "base = ord('a')"}
{"function_name": "api_view_cart", "function_define": "    This is a PRIVATE API.\n    Format: __cart/view.json\n    Arguments: reqno=<reqno>", "piece": "Format: __cart/view.json"}
{"function_name": "api_cart_status", "function_define": "    This is a PRIVATE API.\n    Format: __cart/status.json\n    Arguments: reqno=<N>", "piece": "Format: __cart/status.json"}
{"function_name": "api_get_cart_csv", "function_define": "    This is a PRIVATE API.\n    Format: __cart/data.csv\n    Normal selected-column arguments", "piece": "Format: __cart/data.csv"}
{"function_name": "api_edit_cart", "function_define": "    This is a PRIVATE API.\n    Format: __cart/\n    reqno=<N>", "piece": "Format: __cart/"}
{"function_name": "_edit_cart_range", "function_define": "    exit_api_call(api_code, ret)\n    raise ret\n    ids = id_range.split(',')", "piece": "raise ret"}
{"function_name": "_create_csv_file", "function_define": "    if error is not None:\n    exit_api_call(api_code, ret)\n    raise ret", "piece": "exit_api_call(api_code, ret)"}
{"function_name": "init_func", "function_define": "    classname = m.__class__.__name__\n    if init_type == 'normal':\n    elif init_type == 'xavier':", "piece": "if init_type == 'normal':"}
{"function_name": "normalize_images", "function_define": "    Note: the function is inplace\n    fixed_image (Image): fixed image\n    fixed_image.image -= min_val", "piece": "fixed_image (Image): fixed image"}
{"function_name": "parse_value", "function_define": "    value = None\n    index = -1\n    work = line.strip()", "piece": "index = -1"}
{"function_name": "load_from_file", "function_define": "    self.options.set_to_default()\n    content = conf_file.readlines()\n    iter_content = iter(content)", "piece": "content = conf_file.readlines()"}
{"function_name": "generate_macros", "function_define": "    print('\\t.globl \\\\name')\n    print('\\t.section .text')\n    print('\\\\name:')", "piece": "print('\\t.section .text')"}
{"function_name": "emit_macro", "function_define": "    if params['expr'] != '':\n    print(params['expr'])\n    print('.endm')", "piece": "print(params['expr'])"}
{"function_name": "__select_tree", "function_define": "    w = [i[1] for i in pop]\n    trees = pop.copy()\n    random.shuffle(trees)", "piece": "trees = pop.copy()"}
{"function_name": "get_embedded", "function_define": "    embedded_interfaces = []\n    if _biosdevname:\n    if 'em' in _biosdevname:", "piece": "if _biosdevname:"}
{"function_name": "your_data", "function_define": "    if request.method == 'POST':\n    token.delete()\n    tokens = AuthToken.objects()", "piece": "token.delete()"}
{"function_name": "your_access", "function_define": "    if request.method == 'POST':\n    token.delete()\n    tokens = AuthToken.objects()", "piece": "token.delete()"}
{"function_name": "your_log", "function_define": "    if request.method == 'POST':\n    token.delete()\n    tokens = AuthToken.objects()", "piece": "token.delete()"}
{"function_name": "register_user", "function_define": "    data = request.form\n    raise Exception\n    if email != data['email']:", "piece": "raise Exception"}
{"function_name": "get_name", "function_define": "    res = []\n    if data[2:] == 'Nh':\n    res.append(words[i])", "piece": "if data[2:] == 'Nh':"}
{"function_name": "get_one_name", "function_define": "    name_list = []\n    for w, tag in ner_data:\n    if tag == 'nr':", "piece": "for w, tag in ner_data:"}
{"function_name": "judge_which_say", "function_define": "    res_words = []\n    for word in say_words:\n    if word in jieba.lcut(sentence):", "piece": "for word in say_words:"}
{"function_name": "get_say_sentence", "function_define": "    senlist = []\n    new_sen = sentence.split('\\\\n')\n    for sen in new_sen:", "piece": "new_sen = sentence.split('\\\\n')"}
{"function_name": "judge_parse", "function_define": "    says = ''\n    idex = 0\n    name = ''", "piece": "idex = 0"}
{"function_name": "get_some_idea", "function_define": "    global say_words\n    say_words_list = {}\n    for say in have_say:", "piece": "say_words_list = {}"}
{"function_name": "get_all_name", "function_define": "    LTP_DATA_DIR = 'ltp_data_v3.4.0'\n    segmentor = Segmentor()\n    postagger = Postagger()", "piece": "segmentor = Segmentor()"}
{"function_name": "RDIV_TXBUF", "function_define": "    Set the value of RDIV_TXBUF<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_VCOGN", "function_define": "    Set the value of RDIV_VCOGN<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_TLOB", "function_define": "    Set the value of RDIV_TLOB<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_TPAD", "function_define": "    Set the value of RDIV_TPAD<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_TIA12", "function_define": "    Set the value of RDIV_TIA12<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_TIA14", "function_define": "    Set the value of RDIV_TIA14<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_RXBUF", "function_define": "    Set the value of RDIV_RXBUF<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_TBB", "function_define": "    Set the value of RDIV_TBB<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_MXRFE", "function_define": "    Set the value of RDIV_MXRFE<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_RBB", "function_define": "    Set the value of RDIV_RBB<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_LNA12", "function_define": "    Set the value of RDIV_LNA12<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_LNA14", "function_define": "    Set the value of RDIV_LNA14<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_DIVGN", "function_define": "    Set the value of RDIV_DIVGN<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_DIGGN", "function_define": "    Set the value of RDIV_DIGGN<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_CPSXT", "function_define": "    Set the value of RDIV_CPSXT<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_DIG", "function_define": "    Set the value of RDIV_DIG<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_CPGN", "function_define": "    Set the value of RDIV_CPGN<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_CPSXR", "function_define": "    Set the value of RDIV_CPSXR<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "RDIV_AFE", "function_define": "    Set the value of RDIV_AFE<7:0>\n    if self.allowLDO:\n    if not 0 <= value <= 255:", "piece": "if self.allowLDO:"}
{"function_name": "add_value", "function_define": "    self.values.append(coord)\n    if len(self.values) < 2:\n    values = np.array(self.values)", "piece": "if len(self.values) < 2:"}
{"function_name": "check_crypto", "function_define": "    total_message = ''\n    special_message = ''\n    if not data:", "piece": "special_message = ''"}
{"function_name": "get_cmcprices", "function_define": "    url = config_json['cmcurl']\n    session = Session()\n    session.headers.update(headers)", "piece": "session = Session()"}
{"function_name": "message_pushover", "function_define": "    url = config_json['pushoverurl']\n    session = Session()\n    session.headers.update(headers)", "piece": "session = Session()"}
{"function_name": "build_lists", "function_define": "    res = []\n    for l in tow_dim_list:\n    dummy = node = ListNode(0)", "piece": "for l in tow_dim_list:"}
{"function_name": "iter_list", "function_define": "    res = []\n    while node:\n    res.append(node.v)", "piece": "while node:"}
{"function_name": "test_empty", "function_define": "    tup = util.tuple_builder()\n    assert tup.answer is None\n    assert tup.text == ''", "piece": "assert tup.answer is None"}
{"function_name": "test_refkey", "function_define": "    i1 = TestModel2()\n    i1.put()\n    i2 = TestModel()", "piece": "i1.put()"}
{"function_name": "_get_categories", "function_define": "    cat_list = []\n    ws = clients.get('workspace')\n    if not mapping:", "piece": "ws = clients.get('workspace')"}
{"function_name": "testShrinkCycle", "function_define": "    origcycle = cycle()\n    origsnarfer = snarfer()\n    snarfer.setValue(True)", "piece": "origsnarfer = snarfer()"}
{"function_name": "testNonSnarfing", "function_define": "    origService = shrink.default()\n    origLen = shrink.minimumLength()\n    shrink.default.setValue('tiny')", "piece": "origLen = shrink.minimumLength()"}
{"function_name": "test_yaml_tuples", "function_define": "    data = (1, 2)\n    text = yaml.dump(data)\n    with no_duplicate_yaml():", "piece": "text = yaml.dump(data)"}
{"function_name": "stop_blob", "function_define": "    the first of the builder.\n    if self._stop_blob is None:\n    net = self.current_net()", "piece": "if self._stop_blob is None:"}
{"function_name": "task_group", "function_define": "    the current NetBuilder.\n    from caffe2.python import task\n    group = NetBuilder.current()", "piece": "from caffe2.python import task"}
{"function_name": "stop_guard", "function_define": "    Example:\n    a = ops.Const(True)\n    with ops.stop_guard() as sg1:", "piece": "a = ops.Const(True)"}
{"function_name": "task_init", "function_define": "    top-level structure.\n    Example:\n    with ops.task_init():", "piece": "Example:"}
{"function_name": "task_exit", "function_define": "    top-level structure.\n    Example:\n    with ops.task_exit():", "piece": "Example:"}
{"function_name": "task_reporter", "function_define": "    finished.\n    Example:\n    ops.LogInfo('10s elapsed')", "piece": "Example:"}
{"function_name": "computeResiduals", "function_define": "    period and for a given time bin.\n    Parameters\n    df_activity : dask.DataFrame", "piece": "Parameters"}
{"function_name": "plotDisplacement", "function_define": "    Parameters\n    count_users_per_area : dict\n    pivoted : pandas.DataFrame", "piece": "count_users_per_area : dict"}
{"function_name": "mostCommonWord", "function_define": "    lookup = set(banned)\n    result = ''\n    for word in counts:", "piece": "result = ''"}
{"function_name": "getNumberRecords", "function_define": "    number = 0\n    for x in readFile:\n    number += 1", "piece": "for x in readFile:"}
{"function_name": "checkFilesExist", "function_define": "    fileNumber = botNumber + 20\n    number = 0\n    while number <= fileNumber:", "piece": "number = 0"}
{"function_name": "genAdminFiles", "function_define": "    fileNumber = botNumbers + 20\n    print(recordsPerFile)\n    number = 0", "piece": "print(recordsPerFile)"}
{"function_name": "getCredentials", "function_define": "    trackNumber = 0\n    newRecords = []\n    credentials = []", "piece": "newRecords = []"}
{"function_name": "writeBack", "function_define": "    writeBack = []\n    writeBack.append(username)\n    writeBack.append(password)", "piece": "writeBack.append(username)"}
{"function_name": "training_loop", "function_define": "    if Config.do_advance_trans:\n    if Config.use_wandb:\n    folds_val_score = []", "piece": "if Config.use_wandb:"}
{"function_name": "run_fold", "function_define": "    oof = pd.DataFrame()\n    oof = oof.reset_index()\n    oof['preds'] = valid_labels", "piece": "oof = oof.reset_index()"}
{"function_name": "valid_epoch", "function_define": "    model.eval()\n    valid_loss = []\n    preds = []", "piece": "valid_loss = []"}
{"function_name": "_init_context", "function_define": "    if self._has_ssl_context:\n    self._context = None\n    self._ssl_version = ssl_version", "piece": "self._context = None"}
{"function_name": "_deprecated_arg", "function_define": "    if len(args) <= pos:\n    real_pos = pos + 3\n    if key in kwargs:", "piece": "real_pos = pos + 3"}
{"function_name": "_wrap_socket", "function_define": "    if self._has_ssl_context:\n    if not self._custom_context:\n    if self.certfile:", "piece": "if not self._custom_context:"}
{"function_name": "_do_open", "function_define": "    except Exception:\n    plain_sock.close()\n    msg = 'failed to initialize SSL'", "piece": "plain_sock.close()"}
{"function_name": "setCertfile", "function_define": "    connections.\n    i.e. '/etc/certs/server.pem'\n    self.certfile = certfile", "piece": "i.e. '/etc/certs/server.pem'"}
{"function_name": "send_action", "function_define": "    if not action:\n    if not request:\n    self.obs_socket.send(action)", "piece": "if not request:"}
{"function_name": "_RunAaptCmd", "function_define": "    Returns:\n    The output of the command.\n    cmd = [_AAPT_PATH] + args", "piece": "The output of the command."}
{"function_name": "coverage", "function_define": "    for wl in weak_labs:\n    x = [y for y in wl if y != -1]\n    if len(x) >= k:", "piece": "x = [y for y in wl if y != -1]"}
{"function_name": "dirty_cache", "function_define": "    cache_reset_key = '_reset_cache'\n    if reset:\n    delattr(self, cache_attr)", "piece": "if reset:"}
{"function_name": "writecontent", "function_define": "    pdir = os.path.dirname(path)\n    if not os.path.isdir(pdir):\n    os.makedirs(pdir)", "piece": "if not os.path.isdir(pdir):"}
{"function_name": "running_time", "function_define": "    startTime = time.time()\n    x = func(*param, **kwargs)\n    endTime = time.time()", "piece": "x = func(*param, **kwargs)"}
{"function_name": "evaluate_model", "function_define": "    del X_train\n    del y_train\n    y_pred = model.predict(X_test)", "piece": "del y_train"}
{"function_name": "print_evaluate", "function_define": "    y_pred = model.predict(X_test)\n    print(train_report)\n    print(feat_imp)", "piece": "print(train_report)"}
{"function_name": "create_report", "function_define": "    Parameters\n    basicRegions = []\n    vHtmlContent = []", "piece": "basicRegions = []"}
{"function_name": "sectionTitle", "function_define": "    linker = ''\n    sectionName = ''\n    linker += 'id=\"histogramPlot\"'", "piece": "sectionName = ''"}
{"function_name": "parseInput", "function_define": "    totalLines = 0\n    totalBases = 0\n    for line in bedData:", "piece": "totalBases = 0"}
{"function_name": "print_field", "function_define": "    print('========')\n    print('name: %s' % f.name)\n    print('type: %s' % f.type)", "piece": "print('name: %s' % f.name)"}
{"function_name": "__retry_x_times", "function_define": "    message_delivered = False\n    max_tries_reached = False\n    counter = 1", "piece": "max_tries_reached = False"}
{"function_name": "getAdjecment", "function_define": "    adjecment = list()\n    if self.x > 0:\n    if self.y > 0:", "piece": "if self.x > 0:"}
{"function_name": "isAccessAllowed", "function_define": "    if self.type == '.':\n    elif self.type == '=':\n    elif self.type == '|':", "piece": "elif self.type == '=':"}
{"function_name": "count_patt", "function_define": "    patt_dict = {}\n    cpatt = re.compile(patt)\n    with open(fname) as fobj:", "piece": "cpatt = re.compile(patt)"}
{"function_name": "mock_bridge", "function_define": "    bridge.mock_requests = []\n    kwargs['method'] = method\n    kwargs['path'] = path", "piece": "kwargs['method'] = method"}
{"function_name": "test_available", "function_define": "    assert light.available is False\n    assert light.available is True\n    assert light.available is True", "piece": "assert light.available is True"}
{"function_name": "monitore", "function_define": "    global oldPin1\n    global oldPin2\n    global oldPin3", "piece": "global oldPin2"}
{"function_name": "train_nlu", "function_define": "    output: Output path.\n    with the model.\n    Returns:", "piece": "with the model."}
{"function_name": "prepare_image", "function_define": "    ext = url.rsplit('.', 1)[1]\n    h, w, _ = img.shape\n    if h < w:", "piece": "h, w, _ = img.shape"}
{"function_name": "_on_copy", "function_define": "    data = self._get_data()\n    buffer = io.StringIO()\n    writer.writerows(data)", "piece": "buffer = io.StringIO()"}
{"function_name": "_save_xlsx", "function_define": "    data = self._get_data()\n    finally:\n    workbook.close()", "piece": "finally:"}
{"function_name": "_on_save", "function_define": "    caption = 'Save result'\n    if not namefilter:\n    if not filepath:", "piece": "if not namefilter:"}
{"function_name": "work_unit", "function_define": "    torch.set_num_threads(1)\n    for i in range(steps):\n    play(steps, model)", "piece": "for i in range(steps):"}
{"function_name": "cria_audio", "function_define": "    global dialogo\n    tts = gTTS(audio, lang='pt-br')\n    tts.save(path)", "piece": "tts = gTTS(audio, lang='pt-br')"}
{"function_name": "ouvir_microfone", "function_define": "    microfone = sr.Recognizer()\n    with sr.Microphone() as source:\n    print('Diga alguma coisa: ')", "piece": "with sr.Microphone() as source:"}
{"function_name": "detect_motion", "function_define": "    while True:\n    with vid_lock:\n    if frame is None:", "piece": "with vid_lock:"}
{"function_name": "_bin_search", "function_define": "    start = time.time()\n    lower_search_bound = 0\n    w_old = lower_search_bound", "piece": "lower_search_bound = 0"}
{"function_name": "_featurize", "function_define": "    import numpy as np\n    start = time.time()\n    if isinstance(context, dict):", "piece": "start = time.time()"}
{"function_name": "_terms_by_degree", "function_define": "    terms_by_degree = {}\n    degree = 1\n    while index != len(terms):", "piece": "degree = 1"}
{"function_name": "_predict_model", "function_define": "    import numpy as np\n    import scipy.sparse as sp\n    if sp.issparse(model):", "piece": "import scipy.sparse as sp"}
{"function_name": "reloadSettings", "function_define": "    global settings\n    if os.path.isfile(path):\n    with open(path, 'r') as f:", "piece": "if os.path.isfile(path):"}
{"function_name": "test_L1Decay", "function_define": "    test L1Decay\n    main_program = fluid.Program()\n    with fluid.unique_name.guard():", "piece": "main_program = fluid.Program()"}
{"function_name": "test_L2Decay", "function_define": "    test L2Decay\n    main_program = fluid.Program()\n    with fluid.unique_name.guard():", "piece": "main_program = fluid.Program()"}
{"function_name": "get_caps", "function_define": "    overrides later ones.\n    r: Dict[str, Any] = {}\n    for caps in args:", "piece": "r: Dict[str, Any] = {}"}
{"function_name": "wpa_cli_command", "function_define": "    run = ['wpa_cli']\n    if current_interface:\n    except CalledProcessError as e:", "piece": "if current_interface:"}
{"function_name": "is_wpa_enabled", "function_define": "    wpa_enabled = False\n    for flag in flags:\n    if flag.startswith('WPA'):", "piece": "for flag in flags:"}
{"function_name": "process_table", "function_define": "    table = []\n    for line in contents:\n    row = {}", "piece": "for line in contents:"}
{"function_name": "process_output", "function_define": "    lines = output.split('\\n')\n    if not current_interface:\n    lines = lines[1:]", "piece": "if not current_interface:"}
{"function_name": "gotoMiddle", "function_define": "    width, height = pyautogui.size()\n    centerX = width / 2\n    centerY = height / 2", "piece": "centerX = width / 2"}
{"function_name": "moveToPoint", "function_define": "    log('func: moveToPoint()')\n    width, height = pyautogui.size()\n    endx = width / 2", "piece": "width, height = pyautogui.size()"}
{"function_name": "pickRandPositive", "function_define": "    val1 = abs(val1)\n    val2 = abs(val2)\n    if val1 == val2:", "piece": "val2 = abs(val2)"}
{"function_name": "hydra_ssh", "function_define": "    TOOLS: hydra\n    opts = '-e nsr -f'\n    self._hydra('ssh', opts)", "piece": "opts = '-e nsr -f'"}
{"function_name": "get_sentiment", "function_define": "    from Vader\n    articles.\n    sentiment_dict = {}", "piece": "articles."}
{"function_name": "make_predictions", "function_define": "    Returns - None\n    result_table = []\n    if permute:", "piece": "result_table = []"}
{"function_name": "convert_bdf", "function_define": "    for i in range(65536):\n    data = glyph.data.copy()\n    data.reverse()", "piece": "data = glyph.data.copy()"}
{"function_name": "format_header", "function_define": "    for k, row in enumerate(glyphs):\n    yield ('// %d  ;' % k)\n    yield '};'", "piece": "yield ('// %d  ;' % k)"}
{"function_name": "getFlags", "function_define": "    flags = parser.parse_args()\n    if flags.run_identifier is None:\n    if flags.run_series is not None:", "piece": "if flags.run_identifier is None:"}
{"function_name": "startExecuting", "function_define": "    new_events = []\n    if self.executing:\n    if self.queue.empty():", "piece": "if self.executing:"}
{"function_name": "getattr_silent", "function_define": "    when we access unset properties.\n    reset_verbose = False\n    reset_verbose = True", "piece": "reset_verbose = False"}
{"function_name": "perspective", "function_define": "    gray_scale = False\n    if len(img.shape) == 2:\n    gray_scale = True", "piece": "if len(img.shape) == 2:"}
{"function_name": "noise_gaussian", "function_define": "    Returns:\n    h, w, c = img.shape\n    if gtype == 'bw':", "piece": "h, w, c = img.shape"}
{"function_name": "noise_speckle", "function_define": "    Returns:\n    h, w, c = img.shape\n    if gtype == 'bw':", "piece": "h, w, c = img.shape"}
{"function_name": "compression", "function_define": "    quality. Default=20\n    compression. Default='.jpeg'.\n    Returns:", "piece": "compression. Default='.jpeg'."}
{"function_name": "bilateral_blur", "function_define": "    noise filtering.\n    the image look \"cartoonish\".\n    Returns:", "piece": "the image look \"cartoonish\"."}
{"function_name": "km_quantize", "function_define": "    Returns:\n    Z = img.reshape((-1, 3))\n    Z = np.float32(Z)", "piece": "Z = img.reshape((-1, 3))"}
{"function_name": "noise_dither_fs", "function_define": "    pixels, to be dealt with later.\n    Pseudocode:\n    for each y from top to bottom", "piece": "Pseudocode:"}
{"function_name": "filter_max_rgb", "function_define": "    Returns:\n    B, G, R = cv2.split(img)\n    R[R < M] = 0", "piece": "B, G, R = cv2.split(img)"}
{"function_name": "filter_unsharp", "function_define": "    More infotmation on:\n    Returns:\n    if unsharp_algo == 'DoG':", "piece": "Returns:"}
{"function_name": "filter_canny", "function_define": "    img: Image to be filtered.\n    Returns:\n    to_rgb = True", "piece": "Returns:"}
{"function_name": "getSteps", "function_define": "    Hence we sample:\n    and each step is:\n    steps = []", "piece": "and each step is:"}
{"function_name": "getAngles", "function_define": "    Gets an angle for each step.\n    U(0, complexity * pi).\n    sign than the previous one.", "piece": "U(0, complexity * pi)."}
{"function_name": "addDatabaseEntry", "function_define": "    cur = con.cursor()\n    con.commit()\n    con.close()", "piece": "con.commit()"}
{"function_name": "update_CV", "function_define": "    N = features.size(0)\n    C = self.class_num\n    A = features.size(1)", "piece": "C = self.class_num"}
{"function_name": "isda_aug", "function_define": "    N = features.size(0)\n    C = self.class_num\n    A = features.size(1)", "piece": "C = self.class_num"}
{"function_name": "_update_canvas", "function_define": "    self.axes1.clear()\n    self.axes2.clear()\n    self.my_canvas.draw()", "piece": "self.axes2.clear()"}
{"function_name": "getOpener", "function_define": "    headers = []\n    elem = (key, value)\n    headers.append(elem)", "piece": "elem = (key, value)"}
{"function_name": "html_login", "function_define": "    data = res.read()\n    opener = getOpener(headers)\n    res = opener.open(url, postData)", "piece": "opener = getOpener(headers)"}
{"function_name": "get_dataset", "function_define": "    download_dataset(dataset)\n    if dataset == 'wiki-02':\n    vocab_size = 33278 + 1", "piece": "if dataset == 'wiki-02':"}
{"function_name": "download_ptb", "function_define": "    r = requests.get(urls[0])\n    f.write(r.content)\n    r = requests.get(urls[1])", "piece": "f.write(r.content)"}
{"function_name": "add_larky_import", "function_define": "    if it was not imported.\"\"\"\n    insert_pos = offset = 0\n    if not _is_import_stmt(node):", "piece": "insert_pos = offset = 0"}
{"function_name": "safe_dedent", "function_define": "    prefix of the following token.\n    for i, c in enumerate(prefix):\n    if c not in '\\r\\n':", "piece": "for i, c in enumerate(prefix):"}
{"function_name": "dedent_suite", "function_define": "    leaves = suite.leaves()\n    for leaf in leaves:\n    if leaf.type == token.NEWLINE:", "piece": "for leaf in leaves:"}
{"function_name": "tokeneater", "function_define": "    if type == NEWLINE:\n    self.find_stmt = 1\n    elif type == INDENT:", "piece": "self.find_stmt = 1"}
{"function_name": "torqueout", "function_define": "    EMULATE_HX711 = False\n    referenceUnit = 430\n    if not EMULATE_HX711:", "piece": "referenceUnit = 430"}
{"function_name": "tooltest", "function_define": "    self.torqueout()\n    print('Pass')\n    print('Fail')", "piece": "print('Pass')"}
{"function_name": "cleanAndExit", "function_define": "    print('Cleaning...')\n    if not EMULATE_HX711:\n    GPIO.cleanup()", "piece": "if not EMULATE_HX711:"}
{"function_name": "_getCompileTime", "function_define": "    prefix = ''\n    if context.config.single_source:\n    compile_time = 0.0", "piece": "if context.config.single_source:"}
{"function_name": "setup_handlers", "function_define": "    log.debug(web_app.settings)\n    host_pattern = '.*$'\n    for h in handlers:", "piece": "host_pattern = '.*$'"}
{"function_name": "get_jobid", "function_define": "    if 'jobID' not in body:\n    raise MissingSlurmJobID('')\n    jobID = body['jobID']", "piece": "raise MissingSlurmJobID('')"}
{"function_name": "get_batch_script", "function_define": "    script_data = None\n    if 'input' in body:\n    finally:", "piece": "if 'input' in body:"}
{"function_name": "testCreation", "function_define": "    old_dir = os.getcwd()\n    os.chdir('ex_report')\n    fp.write(example_text)", "piece": "os.chdir('ex_report')"}
{"function_name": "_attachPruned", "function_define": "    if self._mustPruneNode(node):\n    self._pruneNode(node, root)\n    root.appendChild(newNode)", "piece": "self._pruneNode(node, root)"}
{"function_name": "_pruneNode", "function_define": "    if len(node.children) == 0:\n    if len(newNode.children) == 0:\n    root.appendChild(newNode)", "piece": "if len(newNode.children) == 0:"}
{"function_name": "_set_results", "function_define": "    if config['label']:\n    results_folder = None\n    if config['save_model']:", "piece": "results_folder = None"}
{"function_name": "_set_seed", "function_define": "    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)", "piece": "np.random.seed(seed)"}
{"function_name": "load_pretrained", "function_define": "    Parameters\n    model_name : str\n    atom order", "piece": "model_name : str"}
{"function_name": "constraint", "function_define": "    Returns:\n    if val < min:\n    if val > max:", "piece": "if val < min:"}
{"function_name": "_create_operator", "function_define": "    params = {**kwargs}\n    del params['description']\n    if self._task.python:", "piece": "del params['description']"}
{"function_name": "get_placeholder", "function_define": "    if name in _PLACEHOLDER_CACHE:\n    assert dtype is None\n    assert shape is None", "piece": "assert dtype is None"}
{"function_name": "save_init_args", "function_define": "    if deepcopy_args:\n    if self._tfObject__args_saved:\n    self.__args_saved = True", "piece": "if self._tfObject__args_saved:"}
{"function_name": "__deepcopy", "function_define": "    memo[id(self)] = tfobj\n    if name is not None:\n    tfobj.__default_name = name", "piece": "if name is not None:"}
{"function_name": "build_flat_ph", "function_define": "    structure of self.tensors. \"\"\"\n    size = intprod(shape)\n    idx += size", "piece": "size = intprod(shape)"}
{"function_name": "member_approve", "function_define": "    to 'active'.\n    specified with an ID).\n    if not identity_id:", "piece": "specified with an ID)."}
{"function_name": "check_full", "function_define": "    self.filled = True\n    if self.parent is not None:\n    global current_block", "piece": "if self.parent is not None:"}
{"function_name": "_mock_backend", "function_define": "    if path is None:\n    disk = self.disks[disk_name]\n    setattr(disk, 'path', path)", "piece": "disk = self.disks[disk_name]"}
{"function_name": "image_init", "function_define": "    if path is None:\n    disk = self.disks[disk_name]\n    setattr(disk, 'path', path)", "piece": "disk = self.disks[disk_name]"}
{"function_name": "sugiyama_example", "function_define": "    Parameters\n    render : bool, optional\n    exp: flow.core.Experiment type", "piece": "render : bool, optional"}
{"function_name": "cur_file_dir", "function_define": "    path = sys.path[0]\n    if os.path.isdir(path):\n    elif os.path.isfile(path):", "piece": "if os.path.isdir(path):"}
{"function_name": "pretty_print", "function_define": "    print_matrix[matrix] = '#'\n    for row in print_matrix:\n    for symb in row:", "piece": "for row in print_matrix:"}
{"function_name": "fold_once", "function_define": "    if axis == 'y':\n    matrix = matrix.T\n    iter = matrix.shape[1] - value", "piece": "matrix = matrix.T"}
{"function_name": "one_permutation", "function_define": "    name = 'NN_' + str(index)\n    print('BNN model :')\n    num_samples = 50", "piece": "print('BNN model :')"}
{"function_name": "_status_change", "function_define": "    Parameters\n    id : str\n    The job ID", "piece": "id : str"}
{"function_name": "_deposit_payload", "function_define": "    Parameters\n    to_deposit : dict\n    The job info", "piece": "to_deposit : dict"}
{"function_name": "_redis_wrap", "function_define": "    executing function by:\n    Parameters\n    job_info : dict", "piece": "Parameters"}
{"function_name": "submit_nouser", "function_define": "    Parameters\n    func : function\n    args : tuple or None", "piece": "func : function"}
{"function_name": "list_albums", "function_define": "    albums = client.list('album')\n    albums_by_last_scheduled = {}\n    last_scheduled_times = []", "piece": "albums_by_last_scheduled = {}"}
{"function_name": "get_code_version", "function_define": "    code_version = 'master'\n    for row in rows:\n    if tag == code_version:", "piece": "for row in rows:"}
{"function_name": "_generate_nodes", "function_define": "    tails_str = ','.join(self.tails)\n    heads_str = ','.join(self.heads)\n    source = {}", "piece": "heads_str = ','.join(self.heads)"}
{"function_name": "datapoint", "function_define": "    datapoint\n    self._datapoint = dp\n    self.datapoint_is_passed = True", "piece": "self._datapoint = dp"}
{"function_name": "data_plot", "function_define": "    data = data[1:]\n    x0 = data[:, 0]\n    x1 = data[:, 1]", "piece": "x0 = data[:, 0]"}
{"function_name": "proc_emg", "function_define": "    times.append(time.time())\n    if len(times) > 20:\n    times.pop(0)", "piece": "if len(times) > 20:"}
{"function_name": "myo_main", "function_define": "    atexit.register(set_normal_term)\n    set_curses_term()\n    m = MyoRaw(None)", "piece": "set_curses_term()"}
{"function_name": "mask_dic_values", "function_define": "    if not dic:\n    if keys is None:\n    if len(keys) == 0:", "piece": "if keys is None:"}
{"function_name": "command_prefix", "function_define": "    prefix = ''\n    if is_unix_platform():\n    prefix = './'", "piece": "if is_unix_platform():"}
{"function_name": "print_error", "function_define": "    print(msg)\n    if needExit:\n    sys.exit(-1)", "piece": "if needExit:"}
{"function_name": "psd_freq", "function_define": "    nfft = time_array.shape[0]\n    if nfft % 2:\n    num_freqs = (nfft + 1) // 2", "piece": "if nfft % 2:"}
{"function_name": "angle_psd", "function_define": "    See also: inv_psd\n    nfft = fft.shape[0]\n    if nfft % 2:", "piece": "nfft = fft.shape[0]"}
{"function_name": "psd_from_fft2", "function_define": "    Return freq_array and psd_array.\n    nfft = fft2.shape[0]\n    if weight == None:", "piece": "nfft = fft2.shape[0]"}
{"function_name": "maximumSwapStr", "function_define": "    s = list(num)\n    if len(s) == 1:\n    maxNum = '0'", "piece": "if len(s) == 1:"}
{"function_name": "get_state", "function_define": "    if done:\n    channels = []\n    if self.use_position_channel:", "piece": "channels = []"}
{"function_name": "_shortest_path", "function_define": "    if configuration_space is None:\n    if check_straight:\n    i, j = (target_i, target_j)", "piece": "if check_straight:"}
{"function_name": "update_poses", "function_define": "    if data['cubes'] is not None:\n    if data['robots'] is not None:\n    if pose is not None:", "piece": "if data['robots'] is not None:"}
{"function_name": "get_obstacle_box", "function_define": "    x, y = obstacle['position']\n    if buffer_width > 0:\n    b = b.buffer(buffer_width)", "piece": "if buffer_width > 0:"}
{"function_name": "client_thread", "function_define": "    autolog('client_thread: ')\n    import sys\n    if siz >= MAX_BUFFER_SIZE:", "piece": "import sys"}
{"function_name": "fid_analyze", "function_define": "    autolog(type(fid))\n    if fid == '99':\n    autolog(fid)", "piece": "if fid == '99':"}
{"function_name": "start_handshake", "function_define": "    import socket\n    autolog('SOCKET CREATED')\n    soc.bind((local_ip, n_port))", "piece": "autolog('SOCKET CREATED')"}
{"function_name": "get_closes", "function_define": "    import pandas as pd\n    for ticker in tickers:\n    closes[ticker] = df['Adj Close']", "piece": "for ticker in tickers:"}
{"function_name": "do_analyze", "function_define": "    global is_analyze_running\n    global sock\n    global out", "piece": "global sock"}
{"function_name": "set_active", "function_define": "    for user in queryset:\n    user.is_active = True\n    user.save()", "piece": "user.is_active = True"}
{"function_name": "minmod_seq", "function_define": "    Parameters\n    abc : sequence of array_like\n    out : ndarray", "piece": "abc : sequence of array_like"}
{"function_name": "processFile", "function_define": "    inpfn = file\n    reader = PdfReader(inpfn)\n    writer = PdfWriter(outfn)", "piece": "reader = PdfReader(inpfn)"}
{"function_name": "generateLL", "function_define": "    if not nums:\n    ll = tmp = ListNode(0)\n    for num in nums:", "piece": "ll = tmp = ListNode(0)"}
{"function_name": "stepSimulation", "function_define": "    Simulates one step simulation\n    for r in self.robots:\n    r.neighbors = []", "piece": "for r in self.robots:"}
{"function_name": "md5_blocks", "function_define": "    path = Path(path)\n    if not path.is_dir():\n    hasher = md5()", "piece": "if not path.is_dir():"}
{"function_name": "get_stat", "function_define": "    log.debug(path)\n    path = Path(path)\n    info['path'] = str(path)", "piece": "path = Path(path)"}
{"function_name": "glob_paths", "function_define": "    path = Path(path)\n    if path.is_dir():\n    except Exception as error:", "piece": "if path.is_dir():"}
{"function_name": "load_dir", "function_define": "    limit = 300\n    i = limit\n    if from_q.qsize():", "piece": "i = limit"}
{"function_name": "multiplex", "function_define": "    while True:\n    x = q.get()\n    for out_q in out_queues:", "piece": "x = q.get()"}
{"function_name": "proc_paths", "function_define": "    q = Queue()\n    remote_q = client.scatter(q)\n    q1, q2 = multiplex(2, remote_q)", "piece": "remote_q = client.scatter(q)"}
{"function_name": "test_add_to_cart", "function_define": "    self.login_as_customer()\n    update_cart('_Test Item', 1)\n    update_cart('_Test Item 2', 1)", "piece": "update_cart('_Test Item', 1)"}
{"function_name": "image_to_head", "function_define": "    net = self.build_base()\n    print('unique_weights3')\n    stop = -3", "piece": "print('unique_weights3')"}
{"function_name": "attention_norm_H", "function_define": "    att_shape = tf.shape(att)\n    att = tf.nn.softmax(att)\n    att = tf.reshape(att, att_shape)", "piece": "att = tf.nn.softmax(att)"}
{"function_name": "attention_norm_O", "function_define": "    att_shape = tf.shape(att)\n    att = tf.nn.softmax(att)\n    att = tf.reshape(att, att_shape)", "piece": "att = tf.nn.softmax(att)"}
{"function_name": "test_mct", "function_define": "    o = QuantumRegister(1, name='o')\n    for subset in allsubsets:\n    qc = QuantumCircuit(o, c)", "piece": "for subset in allsubsets:"}
{"function_name": "check_operand", "function_define": "    kind = operand.uncasted_kind()\n    if kind is not None:\n    if not kind.value.can_op:", "piece": "if kind is not None:"}
{"function_name": "txt2excel", "function_define": "    data = pd.DataFrame(data)\n    writer.save()\n    writer.close()", "piece": "writer.save()"}
{"function_name": "extract_from_mod", "function_define": "    continue\n    self.callpath_burn(obj, name)\n    yield obj", "piece": "self.callpath_burn(obj, name)"}
{"function_name": "key_word", "function_define": "    keyboard.wait(hotkey='alt+a')\n    print('\u952e\u76d8\u6309\u4e0b\u4e86\u622a\u56fe\u5feb\u6377\u952e,\u8bf7\u5f00\u59cb\u4e0b\u4e00\u6b65\u64cd\u4f5c')\n    keyboard.wait(hotkey='enter')", "piece": "print('\u952e\u76d8\u6309\u4e0b\u4e86\u622a\u56fe\u5feb\u6377\u952e,\u8bf7\u5f00\u59cb\u4e0b\u4e00\u6b65\u64cd\u4f5c')"}
{"function_name": "pipeline_path", "function_define": "    yield pathlib.Path(dir_path)\n    finally:\n    shutil.rmtree(dir_path)", "piece": "finally:"}
{"function_name": "try_answer", "function_define": "    for row in response:\n    complete_row = ''\n    for element in row:", "piece": "complete_row = ''"}
{"function_name": "adyacent_nodes", "function_define": "    top = max(pos[0] - 1, 0)\n    left = max(pos[1] - 1, 0)\n    for i in range(top, bottom + 1):", "piece": "left = max(pos[1] - 1, 0)"}
{"function_name": "make_path", "function_define": "    direct_path = []\n    titem = d\n    while titem != s:", "piece": "titem = d"}
{"function_name": "dijkstra", "function_define": "    while len(heap) > 0:\n    u = extract_min(heap)\n    visited[u.id[0]][u.id[1]] = True", "piece": "u = extract_min(heap)"}
{"function_name": "add_cache", "function_define": "    if l.find('cache=True') >= 0:\n    if l[-1] == 't':\n    l += '(cache=True)'", "piece": "if l[-1] == 't':"}
{"function_name": "remove_cache", "function_define": "    if l[-1] == ')':\n    l = l.replace('cache=True', '')\n    s = l.strip()[:-1].strip()", "piece": "l = l.replace('cache=True', '')"}
{"function_name": "remote_iterator", "function_define": "    it_name = '_%s_iter' % name\n    while True:\n    if e.ename == 'StopIteration':", "piece": "while True:"}
{"function_name": "printadj", "function_define": "    print('    ', end='')\n    print('  '.join(table))\n    for i in table:", "piece": "print('  '.join(table))"}
{"function_name": "_send_message", "function_define": "    send_socket.connect((IP, PORT))\n    send_socket.close()\n    except socket.error:", "piece": "send_socket.close()"}
{"function_name": "bully_algorithm", "function_define": "    received_okay = False\n    while True:\n    data = conn.recv(1024)", "piece": "while True:"}
{"function_name": "test_errormap", "function_define": "    errmap = ErrorMap()\n    result = errmap.run()\n    result = errmap.run()", "piece": "result = errmap.run()"}
{"function_name": "strftimedelta", "function_define": "    if isinstance(td, (int, float)):\n    td = timedelta(seconds=td)\n    days = td.days", "piece": "td = timedelta(seconds=td)"}
{"function_name": "strptimedelta", "function_define": "    Supported format:\n    match = parser.match(s)\n    if match is None:", "piece": "match = parser.match(s)"}
{"function_name": "evalText", "function_define": "    expr = m.group(1)\n    result = eval(expr)\n    except Exception:", "piece": "result = eval(expr)"}
{"function_name": "__loop__", "function_define": "    if self.speed < 0:\n    self.speed = 0\n    self.highest_speed = self.speed", "piece": "self.speed = 0"}
{"function_name": "__events__", "function_define": "    if event.type == pygame.QUIT:\n    self.running = False\n    self.reset()", "piece": "self.running = False"}
{"function_name": "check_binaries", "function_define": "    if not which(REPEAT_BIN):\n    devnull = open(os.devnull, 'w')\n    if e.returncode == -9:", "piece": "devnull = open(os.devnull, 'w')"}
{"function_name": "analyse_repeats", "function_define": "    if args.debug:\n    cmdline.append('-d')\n    subprocess.check_call(cmdline)", "piece": "cmdline.append('-d')"}
{"function_name": "_BuildHeader", "function_define": "    Returns:\n    html.append('<script>')\n    html.append('</script>')", "piece": "html.append('<script>')"}
{"function_name": "_BuildBody", "function_define": "    is_active = tab_index == 0\n    html.append('</div>')\n    html.append('</header>')", "piece": "html.append('</div>')"}
{"function_name": "_BuildScoreTab", "function_define": "    html.append('</tr></thead>')\n    html.append('<tbody>')\n    for apm_config in apm_configs:", "piece": "html.append('<tbody>')"}
{"function_name": "minimize", "function_define": "    min_val = np.inf\n    theta_opt = None\n    for inum in range(n_iters):", "piece": "theta_opt = None"}
{"function_name": "FTP_send", "function_define": "    path = input('Path:')\n    conn.send(Informf.encode())\n    if receive == 'n':", "piece": "conn.send(Informf.encode())"}
{"function_name": "FTP_receive", "function_define": "    conn.sendall(ans.encode())\n    if ans == 'n':\n    print('OVER')", "piece": "if ans == 'n':"}
{"function_name": "run_experiment", "function_define": "    time.sleep(0.5)\n    if task.state == 'PENDING':\n    elif task.state == 'RUNNING':", "piece": "if task.state == 'PENDING':"}
{"function_name": "readfrom", "function_define": "    if size == 0:\n    if self._keep is None:\n    data = []", "piece": "if self._keep is None:"}
{"function_name": "manifest_text", "function_define": "    if strip:\n    for d in self._data_locators:\n    manifest_text.append(m.group(0))", "piece": "for d in self._data_locators:"}
{"function_name": "select_arm", "function_define": "    if self.annealing:\n    self.update_temperature()\n    probs /= float(probs.sum())", "piece": "self.update_temperature()"}
{"function_name": "getBlogList", "function_define": "    kwargs = {}\n    if 'title_contain' in filters:\n    if 'createtime' in filters:", "piece": "if 'title_contain' in filters:"}
{"function_name": "get_filter_in", "function_define": "    filter_in = {}\n    if isinstance(value, list):\n    del filters[filter_index]", "piece": "if isinstance(value, list):"}
{"function_name": "get_components", "function_define": "    id_list = []\n    id_list = ids.split(',')\n    except Exception as err:", "piece": "id_list = ids.split(',')"}
{"function_name": "put_components", "function_define": "    components = []\n    for component_data in data:\n    except Exception as err:", "piece": "for component_data in data:"}
{"function_name": "patch_components", "function_define": "    components = []\n    for component_data in data:\n    if component_id not in DB:", "piece": "for component_data in data:"}
{"function_name": "put_component", "function_define": "    except Exception as err:\n    data['id'] = component_id\n    data = _set_auto_fields(data)", "piece": "data['id'] = component_id"}
{"function_name": "patch_component", "function_define": "    if component_id not in DB:\n    except Exception as err:\n    data = _set_auto_fields(data)", "piece": "except Exception as err:"}
{"function_name": "proxies_pool", "function_define": "    with requests.Session() as res:\n    proxies_page = res.get(url)\n    proxies = []", "piece": "proxies_page = res.get(url)"}
{"function_name": "merge_results", "function_define": "    if self.save_traj:\n    if self.save_video:\n    index = 0", "piece": "if self.save_video:"}
{"function_name": "reset_pi", "function_define": "    if hasattr(pi, 'reset'):\n    reset_kwargs = {}\n    if hasattr(self.env, 'level'):", "piece": "reset_kwargs = {}"}
{"function_name": "throttle", "function_define": "    ip, tcp = (pkt[IP], pkt[TCP])\n    for i in range(0, 3):\n    except Exception as ex:", "piece": "for i in range(0, 3):"}
{"function_name": "pressSpace", "function_define": "    pyautogui.keyDown('space')\n    print('Jump')\n    time.sleep(0.18)", "piece": "print('Jump')"}
{"function_name": "imageGrab", "function_define": "    x1 = Cordinates.dinosaur[0] + 50\n    y1 = Cordinates.dinosaur[1]\n    x2 = x1 + 80", "piece": "y1 = Cordinates.dinosaur[1]"}
{"function_name": "eval_seen_data", "function_define": "    data_b0, data_b1 = data\n    every_nth = len(data_b0) / n\n    if every_nth == 0:", "piece": "every_nth = len(data_b0) / n"}
{"function_name": "eval_unseen_data", "function_define": "    data_b0, data_b1 = data\n    axis_ranges = [-5, 5]\n    every_nth = 2", "piece": "axis_ranges = [-5, 5]"}
{"function_name": "eval_unseen_time", "function_define": "    cmap = plt.cm.get_cmap('cool')\n    data_b0, data_b1 = data\n    axis_ranges = [-20, 20]", "piece": "data_b0, data_b1 = data"}
{"function_name": "check_one", "function_define": "    if is_mic:\n    frames_read = 160\n    vad.init(frames_read, path)", "piece": "frames_read = 160"}
{"function_name": "check_all", "function_define": "    is_mic = False\n    is_write = False\n    if is_write:", "piece": "is_write = False"}
{"function_name": "read_config", "function_define": "    A list of configuration values.\n    configs = []\n    for s, f in sections_fields:", "piece": "configs = []"}
{"function_name": "find_checkpoint", "function_define": "    if best:\n    for r, d, f in os.walk(dir):\n    for file in f:", "piece": "for r, d, f in os.walk(dir):"}
{"function_name": "restore_settrace", "function_define": "    orig_settrace = sys.settrace\n    if func is None:\n    orig_settrace(_orig_trace)", "piece": "if func is None:"}
{"function_name": "readline_param", "function_define": "    m = MonkeyPatch()\n    if request.param == 'pyrepl':\n    import pyrepl.readline", "piece": "if request.param == 'pyrepl':"}
{"function_name": "settrace", "function_define": "    if func is None:\n    orig_settrace(_orig_trace)\n    orig_settrace(func)", "piece": "orig_settrace(_orig_trace)"}
{"function_name": "frequency", "function_define": "    word_list_block = []\n    answers = list(some_df[column])\n    for i in range(len(answers)):", "piece": "answers = list(some_df[column])"}
{"function_name": "parse_params", "function_define": "    params = []\n    namespace = None\n    cpp_class = None", "piece": "namespace = None"}
{"function_name": "get_query_string", "function_define": "    ostr = ''\n    if language == 'C++':\n    elif language == 'F90':", "piece": "if language == 'C++':"}
{"function_name": "get_decl_string", "function_define": "    if self.dtype == 'int':\n    elif self.dtype == 'bool':\n    elif self.dtype == 'Real':", "piece": "elif self.dtype == 'bool':"}
{"function_name": "assert_view", "function_define": "    if method == 'get':\n    if query_params:\n    if method == 'post':", "piece": "if query_params:"}
{"function_name": "test_edited", "function_define": "    self.test_created()\n    r = self.addon.reviews.all()[0]\n    r.rating = 1", "piece": "r = self.addon.reviews.all()[0]"}
{"function_name": "test_deleted", "function_define": "    self.test_created()\n    r = self.addon.reviews.all()[0]\n    r.delete()", "piece": "r = self.addon.reviews.all()[0]"}
{"function_name": "test_example_1", "function_define": "    nums = [2, 7, 11, 15]\n    target = 9\n    expected_result = [0, 1]", "piece": "target = 9"}
{"function_name": "test_example_2", "function_define": "    nums = [3, 2, 4]\n    target = 6\n    expected_result = [1, 2]", "piece": "target = 6"}
{"function_name": "df_to_lower", "function_define": "    data : pandas dataframe\n    The dataframe to be cleaned\n    cols : str, list, or None", "piece": "The dataframe to be cleaned"}
{"function_name": "load_parameters", "function_define": "    global properties\n    with open(propertyFile) as f:\n    for line in f:", "piece": "with open(propertyFile) as f:"}
{"function_name": "get_parameter", "function_define": "    global properties\n    res = ''\n    if param in properties:", "piece": "res = ''"}
{"function_name": "is_config_stale", "function_define": "    global properties\n    tmp = open(tmpFile, 'r')\n    except IOError:", "piece": "tmp = open(tmpFile, 'r')"}
{"function_name": "rot_center", "function_define": "    angle = math.degrees(angle)\n    orig_rect = image.get_rect()\n    rot_rect = orig_rect.copy()", "piece": "orig_rect = image.get_rect()"}
{"function_name": "planet_gen", "function_define": "    data = myhash(coords, seed)\n    size = data[7] // 2\n    temperature_mid = data[13] / 255", "piece": "size = data[7] // 2"}
{"function_name": "key_input", "function_define": "    done = False\n    for event in pygame.event.get():\n    pygame.event.wait()", "piece": "for event in pygame.event.get():"}
{"function_name": "space_explorer", "function_define": "    screen.fill((0, 0, 0))\n    pygame.display.flip()\n    stars = render_stars()", "piece": "pygame.display.flip()"}
{"function_name": "planet_test", "function_define": "    screen.fill((0, 0, 0))\n    pygame.display.flip()\n    stars = render_stars()", "piece": "pygame.display.flip()"}
{"function_name": "_biome_texture", "function_define": "    simplex = OpenSimplex(self.id)\n    start = time.time()\n    zoomX = 4", "piece": "start = time.time()"}
{"function_name": "play_music", "function_define": "    clock = pygame.time.Clock()\n    pygame.mixer.music.play()\n    clock.tick(30)", "piece": "pygame.mixer.music.play()"}
{"function_name": "as_graph", "function_define": "    Returns:\n    if not pose_data.size:\n    pose_data = np.zeros((0, 18))", "piece": "if not pose_data.size:"}
{"function_name": "set_xlabel", "function_define": "    if self.panel is not None:\n    self.panel.set_xlabel(s)\n    self.panel.canvas.draw()", "piece": "self.panel.set_xlabel(s)"}
{"function_name": "set_ylabel", "function_define": "    if self.panel is not None:\n    self.panel.set_ylabel(s)\n    self.panel.canvas.draw()", "piece": "self.panel.set_ylabel(s)"}
{"function_name": "BuildFrame", "function_define": "    sbar_widths = [-2, -1, -1]\n    sfont = sbar.GetFont()\n    sfont.SetWeight(wx.BOLD)", "piece": "sfont = sbar.GetFont()"}
{"function_name": "Build_FileMenu", "function_define": "    mfile = wx.Menu()\n    if extras is not None:\n    mfile.AppendSeparator()", "piece": "if extras is not None:"}
{"function_name": "BuildMenu", "function_define": "    mfile = self.Build_FileMenu()\n    mopts = wx.Menu()\n    mopts.AppendSeparator()", "piece": "mopts = wx.Menu()"}
{"function_name": "onExport", "function_define": "    title = self.panel.conf.title\n    except AttributeError:\n    title = None", "piece": "except AttributeError:"}
{"function_name": "initials", "function_define": "    parts = name.split(' ')\n    letters = ''\n    for part in parts:", "piece": "letters = ''"}
{"function_name": "workfunction", "function_define": "    Example usage:\n    inputs = {}\n    if kwargs:", "piece": "inputs = {}"}
{"function_name": "wrapped_function", "function_define": "    inputs = {}\n    if kwargs:\n    inputs.update(kwargs)", "piece": "if kwargs:"}
{"function_name": "_get_logpath", "function_define": "    logfilename = _get_logfilename()\n    for logdir in potential_logdirs:\n    if os.path.exists(logdir):", "piece": "for logdir in potential_logdirs:"}
{"function_name": "read_npm", "function_define": "    Returns:\n    a set of package names\n    packages = json.loads(pkg_json)", "piece": "a set of package names"}
{"function_name": "install_casks", "function_define": "    existing = read_casks()\n    cmd = [BREW, 'install']\n    print(f'Installing {line}')", "piece": "cmd = [BREW, 'install']"}
{"function_name": "read_mas", "function_define": "    Returns:\n    set of packages\n    sep = re.compile('\\\\s{2,}')", "piece": "set of packages"}
{"function_name": "pick_elements", "function_define": "    elements = []\n    for frame in frame_list:\n    elements.append(elem)", "piece": "for frame in frame_list:"}
{"function_name": "get_variables", "function_define": "    variables = []\n    for n in names:\n    if n == 'params_model0':", "piece": "for n in names:"}
{"function_name": "process_seurat", "function_define": "    cprint('For Seurat:', 'red')\n    if len(f_list) != 3:\n    sys.exit(1)", "piece": "if len(f_list) != 3:"}
{"function_name": "process_bbknn", "function_define": "    cprint('For BBKNN:', 'red')\n    sys.exit(1)\n    pg.umap(adata)", "piece": "sys.exit(1)"}
{"function_name": "plot_scatter", "function_define": "    if precomputed:\n    method_l = []\n    ksim_l = []", "piece": "method_l = []"}
{"function_name": "add_events", "function_define": "    url = resolve(request.path_info)\n    url_name = url.url_name\n    url_namespace = url.namespace", "piece": "url_name = url.url_name"}
{"function_name": "RunNavigateSteps", "function_define": "    action_runner.Wait(2)\n    if self.TURN_SCREEN_OFF:\n    action_runner.Wait(2)", "piece": "if self.TURN_SCREEN_OFF:"}
{"function_name": "createGrid", "function_define": "    grid = []\n    space = width // rows\n    for x in range(rows):", "piece": "space = width // rows"}
{"function_name": "generateGrid", "function_define": "    space = width // rows\n    for x in range(rows):\n    for i in range(rows):", "piece": "for x in range(rows):"}
{"function_name": "getClicked", "function_define": "    space = width // rows\n    y, x = position\n    column = x // space", "piece": "y, x = position"}
{"function_name": "update_document", "function_define": "    db.delete(old_document)\n    db.add(new_document)\n    db.commit()", "piece": "db.add(new_document)"}
{"function_name": "process_buffer", "function_define": "    prev_buffer = buffer[0:index]\n    if Packet.check(prev_buffer):\n    except Exception as e:", "piece": "if Packet.check(prev_buffer):"}
{"function_name": "runcentrifuge", "function_define": "    self.basename = 'placeholder'\n    self.outputfile = 'placeholder'\n    print(centrifugecall)", "piece": "self.outputfile = 'placeholder'"}
{"function_name": "data_format", "function_define": "    df.fillna(value=0, inplace=True)\n    for c in df2:\n    df2[c] = df2[c].astype(str)", "piece": "for c in df2:"}
{"function_name": "data_join", "function_define": "    index_list = []\n    df_list = []\n    dir_path = p_source", "piece": "df_list = []"}
{"function_name": "_order_points", "function_define": "    left_most = x_sorted[:2, :]\n    right_most = x_sorted[2:, :]\n    tl, bl = left_most", "piece": "right_most = x_sorted[2:, :]"}
{"function_name": "read_voc_xml", "function_define": "    boxes = []\n    if os.path.exists(p):\n    with open(p) as f:", "piece": "if os.path.exists(p):"}
{"function_name": "xy_rotate_box", "function_define": "    cx = float(cx)\n    cy = float(cy)\n    w = float(w)", "piece": "cy = float(cy)"}
{"function_name": "resize_box", "function_define": "    newBoxes = []\n    for box in boxes:\n    cx = box['cx'] * scale", "piece": "for box in boxes:"}
{"function_name": "get_rorate", "function_define": "    imgW, imgH = im.size\n    newBoxes = []\n    for line in boxes:", "piece": "newBoxes = []"}
{"function_name": "letterbox_image", "function_define": "    image_w, image_h = image.size\n    w, h = size\n    if fillValue is None:", "piece": "w, h = size"}
{"function_name": "box_split", "function_define": "    newBoxes = []\n    for box in boxes:\n    w = box['w']", "piece": "for box in boxes:"}
{"function_name": "get_box_spilt", "function_define": "    isRoate:\u662f\u5426\u65cb\u8f6cbox\n    size = (sizeW, SizeH)\n    if isRoate:", "piece": "size = (sizeW, SizeH)"}
{"function_name": "box_rotate", "function_define": "    if angle == 90:\n    x1_, y1_ = (y2, imgW - x2)\n    x2_, y2_ = (y3, imgW - x3)", "piece": "x1_, y1_ = (y2, imgW - x2)"}
{"function_name": "rotate_cut_img", "function_define": "    degree_ = degree * 180.0 / np.pi\n    right = 0\n    left = 0", "piece": "right = 0"}
{"function_name": "sort_box", "function_define": "    box[index, 0] = x1\n    box[index, 1] = y1\n    box[index, 2] = x2", "piece": "box[index, 1] = y1"}
{"function_name": "get_boxes", "function_define": "    boxes: bounding boxes\n    index = 0\n    for box in bboxes:", "piece": "index = 0"}
{"function_name": "union_rbox", "function_define": "    cy1 = box1['cy']\n    cy2 = box2['cy']\n    h1 = box1['h']", "piece": "cy2 = box2['cy']"}
{"function_name": "sort_group_box", "function_define": "    N = len(boxes)\n    box4 = np.zeros((N, 8))\n    for i in range(N):", "piece": "box4 = np.zeros((N, 8))"}
{"function_name": "test_api_get", "function_define": "    Test get method\n    for t, amount in data:\n    self.assertEqual(len(r), amount)", "piece": "for t, amount in data:"}
{"function_name": "get_input_data", "function_define": "    params = search\n    service = params.pop('service')\n    if service == 'pubmed':", "piece": "service = params.pop('service')"}
{"function_name": "rename_var", "function_define": "    new_var_list = []\n    if key in except_list:\n    continue", "piece": "if key in except_list:"}
{"function_name": "_parse_template", "function_define": "    template_sequence = ''\n    for line in f:\n    if line.startswith('>'):", "piece": "for line in f:"}
{"function_name": "_parse_reads", "function_define": "    read_sequence = ''\n    for line in f1:\n    line = line.rstrip('\\n')", "piece": "for line in f1:"}
{"function_name": "sanity_check", "function_define": "    self.lc_has_footprint = False\n    self.lc_has_footprint = True\n    except Exception as e:", "piece": "self.lc_has_footprint = True"}
{"function_name": "init_instance", "function_define": "    cr = self.manager.acquire(id)\n    self.rtype = cr._adaptor.rtype\n    self.descr = cr._adaptor.descr", "piece": "self.rtype = cr._adaptor.rtype"}
{"function_name": "_refresh_images", "function_define": "    self.images = []\n    self.images_dict = {}\n    pattern = [uid]", "piece": "self.images_dict = {}"}
{"function_name": "acquire_by_id", "function_define": "    if not self.conn:\n    if len(nodes) < 1:\n    if len(nodes) > 1:", "piece": "if len(nodes) < 1:"}
{"function_name": "get_image", "function_define": "    self._refresh_images(uid=img_id)\n    if 'name' not in descr:\n    for key in list(descr.keys()):", "piece": "if 'name' not in descr:"}
{"function_name": "_refresh_state", "function_define": "    if self.state == c.EXPIRED:\n    if not len(nodes):\n    if len(nodes) != 1:", "piece": "if not len(nodes):"}
{"function_name": "test_not_spam", "function_define": "    thread = ThreadFactory.create()\n    query = Message.objects.all()\n    assert query.count() == 1", "piece": "query = Message.objects.all()"}
{"function_name": "search_hash", "function_define": "    Variables:\n    Arguments:(optional)\n    Data Block:", "piece": "Arguments:(optional)"}
{"function_name": "build_logger", "function_define": "    logger.setLevel(logging.DEBUG)\n    fh.setLevel(logging.DEBUG)\n    logger.addHandler(fh)", "piece": "fh.setLevel(logging.DEBUG)"}
{"function_name": "tag_sentence", "function_define": "    doc = nlp(sentence)\n    tokens = []\n    lemmas = []", "piece": "tokens = []"}
{"function_name": "tag_text", "function_define": "    lines = text.splitlines()\n    text_token = ''\n    text_lemma = ''", "piece": "text_token = ''"}
{"function_name": "_in_thread", "function_define": "    self._statistic.started += 1\n    with self.__channel:\n    gen = iter(self.__gen_func())", "piece": "with self.__channel:"}
{"function_name": "convertToBase7", "function_define": "    if num == 0:\n    res = []\n    while num:", "piece": "res = []"}
{"function_name": "get_arg_parser", "function_define": "    an argument parser instance\n    Returns:\n    if parser is None:", "piece": "Returns:"}
{"function_name": "UnpackTask", "function_define": "    test.outcomes = set(task[5])\n    test.id = task[6]\n    test.run = 1", "piece": "test.id = task[6]"}
{"function_name": "_all_donors", "function_define": "    sheets = self.shortcut_sheets\n    if not include_background:\n    for sheet in sheets:", "piece": "if not include_background:"}
{"function_name": "cancel_order", "function_define": "    while True:\n    except ValueError as e:\n    self.logger.info(e)", "piece": "except ValueError as e:"}
{"function_name": "get_portfolio", "function_define": "    contracts = settings.CONTRACTS\n    portfolio = {}\n    for symbol in contracts:", "piece": "portfolio = {}"}
{"function_name": "calc_delta", "function_define": "    portfolio = self.get_portfolio()\n    spot_delta = 0\n    mark_delta = 0", "piece": "spot_delta = 0"}
{"function_name": "converge_orders", "function_define": "    to_amend = []\n    to_create = []\n    to_cancel = []", "piece": "to_create = []"}
{"function_name": "write_readme", "function_define": "    prefix = f.read()\n    suffix = f.read()\n    for job in jobs:", "piece": "suffix = f.read()"}
{"function_name": "write_workflows", "function_define": "    for job in jobs:\n    write_job_workflow(job)\n    for endpoint in endpoints:", "piece": "write_job_workflow(job)"}
{"function_name": "parse_path", "function_define": "    filename = None\n    project_dir = None\n    hyphenated = None", "piece": "project_dir = None"}
{"function_name": "Image_copy", "function_define": "    for concept in CONCEPT_LIST:\n    count = 0\n    for image in annotations.keys():", "piece": "count = 0"}
{"function_name": "update_cn", "function_define": "    languages = ['chs']\n    for locale in languages:\n    for m in data.keys():", "piece": "for locale in languages:"}
{"function_name": "get_from_coinach", "function_define": "    if FFXIV_PATH:\n    reader.ffxiv_path = FFXIV_PATH\n    if CN_FFXIV_PATH:", "piece": "reader.ffxiv_path = FFXIV_PATH"}
{"function_name": "email_format", "function_define": "    if emails is None:\n    emails = []\n    processed = set()", "piece": "emails = []"}
{"function_name": "clean_emails", "function_define": "    if emails is None:\n    emails = []\n    processed = set()", "piece": "emails = []"}
{"function_name": "email_validate", "function_define": "    if self.is_email_valid(email):\n    if mx_records != False:\n    domain = email.split('@')[-1]", "piece": "if mx_records != False:"}
{"function_name": "check_email", "function_define": "    host = socket.gethostname()\n    PORTS = [25, 587]\n    server = smtplib.SMTP()", "piece": "PORTS = [25, 587]"}
{"function_name": "setDefaultParams", "function_define": "    paramsDict = {}\n    if version == 0 or version == 1:\n    paramsDict['MagAmmo'] = '30'", "piece": "if version == 0 or version == 1:"}
{"function_name": "processBaseFile", "function_define": "    outputString = ''\n    if os.path.exists(filePath):\n    with open(filePath) as file:", "piece": "if os.path.exists(filePath):"}
{"function_name": "parseCSVFile", "function_define": "    outputData = ''\n    with open(csvFile) as file:\n    reader = csv.reader(file)", "piece": "with open(csvFile) as file:"}
{"function_name": "fq_factor", "function_define": "    if method == 'hfq':\n    if hfq_factor_df.shape[0] == 0:\n    del hfq_factor_df['date']", "piece": "if hfq_factor_df.shape[0] == 0:"}
{"function_name": "to_adjust2", "function_define": "    if adjust == 'hfq':\n    del hfq_factor_df['date']\n    temp_df = temp_df.astype(float)", "piece": "del hfq_factor_df['date']"}
{"function_name": "_find_dict_key", "function_define": "    duplicate entries.\n    input_key (str):\n    Returns:", "piece": "input_key (str):"}
{"function_name": "ConjGrad", "function_define": "    r = b - np.dot(a, x)\n    rsold = np.dot(r.T, r)\n    for i in range(len(b)):", "piece": "rsold = np.dot(r.T, r)"}
{"function_name": "dictToXML", "function_define": "    node = xml.Element('Parameters')\n    it = d.entrySet().iterator()\n    while it.hasNext():", "piece": "it = d.entrySet().iterator()"}
{"function_name": "getFileForCode", "function_define": "    dataSetFiles = []\n    if nodes is not None:\n    for node in nodes:", "piece": "if nodes is not None:"}
{"function_name": "get_dists_file", "function_define": "    out = {}\n    for n in [5, 7]:\n    if os.path.exists(fHist):", "piece": "for n in [5, 7]:"}
{"function_name": "gen_r_script", "function_define": "    for core in ['1', '2']:\n    for ea in ['F1', 'F2']:\n    cval = int(core) - 1", "piece": "for ea in ['F1', 'F2']:"}
{"function_name": "gen_stats", "function_define": "    table = [dict(), dict()]\n    for ea, info in data.items():\n    line = 0", "piece": "for ea, info in data.items():"}
{"function_name": "fresh_start", "function_define": "    if config.wandb:\n    import wandb\n    config = init_n_update(config)", "piece": "import wandb"}
{"function_name": "hkl_tuple_to_str", "function_define": "    Prepare for display on plots\n    str_format = '($'\n    for x in hkl:", "piece": "str_format = '($'"}
{"function_name": "get_tri_area", "function_define": "    pts: [a, b, c] three points\n    v1 = np.array(b) - np.array(a)\n    v2 = np.array(c) - np.array(a)", "piece": "v1 = np.array(b) - np.array(a)"}
{"function_name": "_get_simpx_plane", "function_define": "    for simpx in self.wulff_cv_simp:\n    center = np.sum(pts, 0) / 3.0\n    for plane in self.facets:", "piece": "center = np.sum(pts, 0) / 3.0"}
{"function_name": "_get_colors", "function_define": "    e_surf_on_wulff_list)\n    import matplotlib as mpl\n    import matplotlib.pyplot as plt", "piece": "import matplotlib as mpl"}
{"function_name": "get_plot", "function_define": "    Get the Wulff shape plot.\n    color_set: default is 'PuBu'\n    grid_off (bool): default is True", "piece": "color_set: default is 'PuBu'"}
{"function_name": "anisotropy", "function_define": "    Returns:\n    The ideal sphere is 0.\n    square_diff_energy = 0", "piece": "The ideal sphere is 0."}
{"function_name": "tot_edges", "function_define": "    all_edges = []\n    for facet in self.facets:\n    edges = []", "piece": "for facet in self.facets:"}
{"function_name": "find_cog", "function_define": "    if mode == 'load':\n    bot.load_extension(full_path)\n    if mode == 'unload':", "piece": "bot.load_extension(full_path)"}
{"function_name": "load_ext", "function_define": "    if mode == 'load':\n    bot.load_extension(full_path)\n    if mode == 'unload':", "piece": "bot.load_extension(full_path)"}
{"function_name": "get_test_trends", "function_define": "    by the request parameters\n    or Unix time format.\n    or Unix time format.", "piece": "or Unix time format."}
{"function_name": "checkExtension", "function_define": "    processFile = 0\n    if len(extension) == 0:\n    processFile = 0", "piece": "if len(extension) == 0:"}
{"function_name": "checkExclusion", "function_define": "    processDir = 0\n    if dir[0:1] == '.':\n    processDir = 0", "piece": "if dir[0:1] == '.':"}
{"function_name": "test_get_types", "function_define": "    types = droneservice.get_types()\n    expected_types = typedomain()\n    assert types == expected_types", "piece": "expected_types = typedomain()"}
{"function_name": "_scipy_to_igraph", "function_define": "    Paramaters\n    matrix : object\n    coords : np.array", "piece": "matrix : object"}
{"function_name": "get_degree", "function_define": "    degree : np.array\n    if igraph_available is True:\n    self.degree = self.g.degree()", "piece": "if igraph_available is True:"}
{"function_name": "get_betweenness", "function_define": "    betweeness : np.array\n    if igraph_available is True:\n    except AttributeError:", "piece": "if igraph_available is True:"}
{"function_name": "get_multiplicity", "function_define": "    if igraph_available is True:\n    clusters = self.g.clusters()\n    except AttributeError:", "piece": "clusters = self.g.clusters()"}
{"function_name": "get_edges", "function_define": "    edges: np.ndarray\n    indicated by their index.\n    if igraph_available is True:", "piece": "indicated by their index."}
{"function_name": "get_edge_lengths", "function_define": "    lengths: np.array\n    The length is caclulated as:\n    if igraph_available is True:", "piece": "The length is caclulated as:"}
{"function_name": "cut_image", "function_define": "    if len(word_gto) > 0:\n    rep = True\n    while rep:", "piece": "rep = True"}
{"function_name": "E2Ecollate", "function_define": "    img = []\n    gt_boxes = []\n    texts = []", "piece": "gt_boxes = []"}
{"function_name": "getNewArgsFromHp", "function_define": "    args = copy.deepcopy(args)\n    args_dict = vars(args)\n    for k in hp:", "piece": "args_dict = vars(args)"}
{"function_name": "_clean_recursive", "function_define": "    if isinstance(data, str):\n    elif isinstance(data, list):\n    elif isinstance(data, tuple):", "piece": "elif isinstance(data, list):"}
{"function_name": "is_equal", "function_define": "    if len(self) != len(Other):\n    for x, y in izip(self, Other):\n    x_number_set, x_count_action = x", "piece": "for x, y in izip(self, Other):"}
{"function_name": "from_list", "function_define": "    result = CountActionMap()\n    for entry in NsCaList:\n    result.append(entry)", "piece": "for entry in NsCaList:"}
{"function_name": "set_user_param", "function_define": "    args.out_tmp_file = raw\n    args.out_file = raw\n    raw = int(raw)", "piece": "args.out_file = raw"}
{"function_name": "traverse_map", "function_define": "    max_index = len(self.map[0]) - 1\n    self.visited_locations = []\n    inc_y = starting_y", "piece": "self.visited_locations = []"}
{"function_name": "to_tensor", "function_define": "    Parameters\n    data : np.ndarray\n    torch.Tensor", "piece": "data : np.ndarray"}
{"function_name": "view_as_real", "function_define": "    Parameters\n    data : torch.Tensor\n    with complex torch.dtype", "piece": "data : torch.Tensor"}
{"function_name": "safe_divide", "function_define": "    Parameters\n    input_tensor : torch.Tensor\n    other_tensor : torch.Tensor", "piece": "input_tensor : torch.Tensor"}
{"function_name": "align_as", "function_define": "    Example:\n    torch.Size([1, 4, 5, 1])\n    torch.Size([1, 4, 5, 1])", "piece": "torch.Size([1, 4, 5, 1])"}
{"function_name": "fftshift", "function_define": "    Parameters\n    data : torch.Tensor\n    dim : tuple, list or int", "piece": "data : torch.Tensor"}
{"function_name": "ifftshift", "function_define": "    Parameters\n    data : torch.Tensor\n    dim : tuple, list or int", "piece": "data : torch.Tensor"}
{"function_name": "complex_mm", "function_define": "    Parameters\n    input_tensor : torch.Tensor\n    other_tensor : torch.Tensor", "piece": "input_tensor : torch.Tensor"}
{"function_name": "complex_bmm", "function_define": "    Complex batch multiplication.\n    Parameters\n    input_tensor : torch.Tensor", "piece": "Parameters"}
{"function_name": "conjugate", "function_define": "    has dimension 2).\n    Parameters\n    data : torch.Tensor", "piece": "Parameters"}
{"function_name": "apply_mask", "function_define": "    Parameters\n    kspace : torch.Tensor\n    Can also be a sampling mask.", "piece": "kspace : torch.Tensor"}
{"function_name": "center_crop", "function_define": "    Parameters\n    data : torch.Tensor\n    shape : Tuple[int, int]", "piece": "data : torch.Tensor"}
{"function_name": "reduce_operator", "function_define": "    Parameters\n    coil_data : torch.Tensor\n    sensitivity_map: torch.Tensor", "piece": "coil_data : torch.Tensor"}
{"function_name": "expand_operator", "function_define": "    Parameters\n    data : torch.Tensor\n    sensitivity_map: torch.Tensor", "piece": "data : torch.Tensor"}
{"function_name": "generate_example", "function_define": "    image.paste(frame)\n    draw = ImageDraw.Draw(image)\n    if level in (11, 12):", "piece": "draw = ImageDraw.Draw(image)"}
{"function_name": "test_RandomCrop", "function_define": "    size = (500, 300)\n    r_img = transform(self.timg)\n    r_imgs = transform(self.timgs)", "piece": "r_img = transform(self.timg)"}
{"function_name": "backend_mocker", "function_define": "    repo = BackendRepository()\n    repo.register(m)\n    yield repo", "piece": "repo.register(m)"}
{"function_name": "search_docs", "function_define": "    query = query.strip().lower()\n    if not query:\n    tweak = list()", "piece": "if not query:"}
{"function_name": "craft_docs_page", "function_define": "    page = record.get('page')\n    syntax = record.get('syntax')\n    if syntax is not None:", "piece": "syntax = record.get('syntax')"}
{"function_name": "_playsoundWin", "function_define": "    versions of Python.\n    from random import random\n    from time import sleep", "piece": "from random import random"}
{"function_name": "_playsoundOSX", "function_define": "    from AppKit import NSSound\n    from Foundation import NSURL\n    from time import sleep", "piece": "from Foundation import NSURL"}
{"function_name": "_playsoundNix", "function_define": "    Inspired by this:\n    if not block:\n    import os", "piece": "if not block:"}
{"function_name": "winCommand", "function_define": "    buf = c_buffer(255)\n    if errorCode:\n    errorBuffer = c_buffer(255)", "piece": "if errorCode:"}
{"function_name": "update_mode", "function_define": "    mod = self.mode()\n    if mod == 'playing':\n    if self.__is_repeat == True:", "piece": "if mod == 'playing':"}
{"function_name": "GetInstance", "function_define": "    cls._mutex.acquire()\n    cls._instance = cls()\n    cls._mutex.release()", "piece": "cls._instance = cls()"}
{"function_name": "append_music", "function_define": "    music = music_player(self)\n    music.open(sound)\n    music.set_repeat(repeat)", "piece": "music.open(sound)"}
{"function_name": "__add_music", "function_define": "    m = _music(sound, id)\n    self.__mutex.acquire()\n    self.__sounds.append(m)", "piece": "self.__mutex.acquire()"}
{"function_name": "__rm_music", "function_define": "    rm_item.close()\n    rm_item.set_id(-1)\n    self.__mutex.acquire()", "piece": "rm_item.set_id(-1)"}
{"function_name": "skipMovie", "function_define": "    invoker = spellbook.getInvoker()\n    battleId = invoker.getBattleId()\n    if not battleId:", "piece": "battleId = invoker.getBattleId()"}
{"function_name": "abortBattle", "function_define": "    toonsCopy = self.toons[:]\n    for toonId in toonsCopy:\n    self.__removeToon(toonId)", "piece": "for toonId in toonsCopy:"}
{"function_name": "__removeSuit", "function_define": "    self.suits.remove(suit)\n    self.activeSuits.remove(suit)\n    self.luredSuits.remove(suit)", "piece": "self.activeSuits.remove(suit)"}
{"function_name": "__removeTaskName", "function_define": "    if self.taskNames.count(name):\n    self.taskNames.remove(name)\n    taskMgr.remove(name)", "piece": "self.taskNames.remove(name)"}
{"function_name": "__removeAllTasks", "function_define": "    for n in self.taskNames:\n    taskMgr.remove(n)\n    self.taskNames = []", "piece": "taskMgr.remove(n)"}
{"function_name": "getMembers", "function_define": "    suits = []\n    for s in self.suits:\n    suits.append(s.doId)", "piece": "for s in self.suits:"}
{"function_name": "getMovie", "function_define": "    suitIds = []\n    for s in self.activeSuits:\n    suitIds.append(s.doId)", "piece": "for s in self.activeSuits:"}
{"function_name": "__makeAvPending", "function_define": "    self.__removeJoinResponse(avId)\n    if self.toons.count(avId) > 0:\n    self.joiningToons.remove(avId)", "piece": "if self.toons.count(avId) > 0:"}
{"function_name": "suitRequestJoin", "function_define": "    if self.suitCanJoin():\n    self.addSuit(suit)\n    self.__joinSuit(suit)", "piece": "self.addSuit(suit)"}
{"function_name": "__makeToonRun", "function_define": "    self.activeToons.remove(toonId)\n    self.toonGone = 1\n    self.runningToons.append(toonId)", "piece": "self.toonGone = 1"}
{"function_name": "__serverRunDone", "function_define": "    self.__removeTaskName(taskName)\n    self.__removeToon(toonId)\n    self.d_setMembers()", "piece": "self.__removeToon(toonId)"}
{"function_name": "__requestAdjust", "function_define": "    if not self.fsm:\n    if self.needAdjust == 1:\n    self.d_adjust()", "piece": "if self.needAdjust == 1:"}
{"function_name": "__removeToon", "function_define": "    self.__removeToonTasks(toonId)\n    self.toons.remove(toonId)\n    self.joiningToons.remove(toonId)", "piece": "self.toons.remove(toonId)"}
{"function_name": "toonRequestRun", "function_define": "    if self.ignoreResponses == 1:\n    if not self.isRunable():\n    updateAttacks = 0", "piece": "if not self.isRunable():"}
{"function_name": "toonDied", "function_define": "    if toonId in self.toons:\n    toon = self.getToon(toonId)\n    if toon:", "piece": "toon = self.getToon(toonId)"}
{"function_name": "signupToon", "function_define": "    if self.toons.count(toonId):\n    if self.toonCanJoin():\n    if self.addToon(toonId):", "piece": "if self.toonCanJoin():"}
{"function_name": "resetResponses", "function_define": "    self.responses = {}\n    for t in self.toons:\n    self.responses[t] = 0", "piece": "for t in self.toons:"}
{"function_name": "__removeResponse", "function_define": "    del self.responses[toonId]\n    self.__requestMovie()\n    self.__movieDone()", "piece": "self.__requestMovie()"}
{"function_name": "movieDone", "function_define": "    if self.ignoreResponses == 1:\n    self.responses[toonId] += 1\n    self.__movieDone()", "piece": "self.responses[toonId] += 1"}
{"function_name": "rewardDone", "function_define": "    if self.ignoreResponses == 1:\n    self.responses[toonId] += 1\n    self.handleRewardDone()", "piece": "self.responses[toonId] += 1"}
{"function_name": "joinDone", "function_define": "    jr = self.joinResponses[avId]\n    if toonId in jr:\n    jr[toonId] += 1", "piece": "if toonId in jr:"}
{"function_name": "requestAttack", "function_define": "    if self.ignoreResponses == 1:\n    toon = self.getToon(toonId)\n    if toon == None:", "piece": "toon = self.getToon(toonId)"}
{"function_name": "requestPetProxy", "function_define": "    if self.ignoreResponses == 1:\n    toon = self.getToon(toonId)\n    if toon == None:", "piece": "toon = self.getToon(toonId)"}
{"function_name": "__requestMovie", "function_define": "    self.movieRequested = 1\n    movieDelay = 0\n    if len(self.activeToons) == 0:", "piece": "movieDelay = 0"}
{"function_name": "__makeMovie", "function_define": "    self.notify.debug('makeMovie()')\n    if self._DOAI_requestedDelete:\n    if hasattr(self, 'levelDoId'):", "piece": "if self._DOAI_requestedDelete:"}
{"function_name": "enterWaitForJoin", "function_define": "    if len(self.activeSuits) > 0:\n    self.b_setState('WaitForInput')\n    self.resetResponses()", "piece": "self.b_setState('WaitForInput')"}
{"function_name": "__movieDone", "function_define": "    if self.movieHasPlayed == 1:\n    self.movieHasBeenMade = 0\n    self.movieHasPlayed = 1", "piece": "self.movieHasBeenMade = 0"}
{"function_name": "enterResume", "function_define": "    for suit in self.suits:\n    if suit.isDeleted():\n    suit.resume()", "piece": "if suit.isDeleted():"}
{"function_name": "exitAdjusting", "function_define": "    self.timer.restart()\n    self.b_setState('WaitForInput')\n    self.adjustingTimer.stop()", "piece": "self.b_setState('WaitForInput')"}
{"function_name": "__adjustDone", "function_define": "    for s in self.adjustingSuits:\n    self.pendingSuits.remove(s)\n    self.activeSuits.append(s)", "piece": "self.pendingSuits.remove(s)"}
{"function_name": "user_information", "function_define": "    if self.config['fields']:\n    data = json.loads(resp.text)\n    data['picture'] = picture_url", "piece": "data = json.loads(resp.text)"}
{"function_name": "parse_token", "function_define": "    except UnicodeEncodeError as e:\n    raise BasicAuthException from e\n    except TypeError as e:", "piece": "raise BasicAuthException from e"}
{"function_name": "generate_token", "function_define": "    except UnicodeEncodeError as e:\n    raise BasicAuthException from e\n    except TypeError as e:", "piece": "raise BasicAuthException from e"}
{"function_name": "parse_header", "function_define": "    if header_value is None:\n    raise BasicAuthException\n    except AttributeError as e:", "piece": "raise BasicAuthException"}
{"function_name": "read_dict", "function_define": "    word_dict = {}\n    for line in open(infile):\n    r = line.strip().split()", "piece": "for line in open(infile):"}
{"function_name": "read_doc", "function_define": "    doc = {}\n    for line in open(infile):\n    r = line.strip().split()", "piece": "for line in open(infile):"}
{"function_name": "filter_triletter", "function_define": "    tri_dict = {}\n    for triinfo in tri_stats:\n    if triinfo[0] not in tri_dict:", "piece": "for triinfo in tri_stats:"}
{"function_name": "test_happy", "function_define": "    streets = 'no'\n    relation_name = 'gazdagret'\n    items: List[yattag.doc.Doc] = []", "piece": "relation_name = 'gazdagret'"}
{"function_name": "clearMailBox", "function_define": "    toRemove = []\n    toRemove.append(msg)\n    for msg in toRemove:", "piece": "toRemove.append(msg)"}
{"function_name": "traveller", "function_define": "    if head.child:\n    if head.next:\n    save_ls.append(head.next)", "piece": "if head.next:"}
{"function_name": "evaluate_env_var", "function_define": "    if not matches:\n    for match in matches:\n    variable_name = match.group(3)", "piece": "for match in matches:"}
{"function_name": "cleanCache", "function_define": "    itemsToRemove = []\n    for item in requestCache:\n    itemsToRemove.append(item)", "piece": "for item in requestCache:"}
{"function_name": "setCacheTime", "function_define": "    Parameters\n    seconds : float\n    global cacheTime", "piece": "seconds : float"}
{"function_name": "GetUsers", "function_define": "    allURLS = []\n    URLStoRequest = []\n    memberList = []", "piece": "URLStoRequest = []"}
{"function_name": "UsernameFromUuid", "function_define": "    if len(x) == 1:\n    data = response.json()\n    if response.status_code != 200:", "piece": "data = response.json()"}
{"function_name": "getSession", "function_define": "    UUID = self.UUID\n    except HypixelAPIError:\n    session = None", "piece": "except HypixelAPIError:"}
{"function_name": "getFriends", "function_define": "    UUID = self.UUID\n    except HypixelAPIError:\n    friends = None", "piece": "except HypixelAPIError:"}
{"function_name": "getGuildName", "function_define": "    GuildID = self.getGuildID()\n    if GuildID:\n    GuildName = Guild['name']", "piece": "if GuildID:"}
{"function_name": "decompile", "function_define": "    b64 = base64.b64decode(data)\n    bio = io.BytesIO(b64)\n    gzf = gzip.GzipFile(fileobj=bio)", "piece": "bio = io.BytesIO(b64)"}
{"function_name": "getArmor", "function_define": "    if 'inv_armor' not in player:\n    j = self.decompile(data)\n    items = []", "piece": "j = self.decompile(data)"}
{"function_name": "getSkillStats", "function_define": "    if 'Crit' in a:\n    sName = 'Crit ' + a[-1]\n    sName = a[-1]", "piece": "sName = 'Crit ' + a[-1]"}
{"function_name": "get_cpu_load", "function_define": "    Returns:\n    client = monitoring.Client()\n    time_series = list(query)", "piece": "client = monitoring.Client()"}
{"function_name": "scale_bigtable", "function_define": "    instance.reload()\n    cluster.reload()\n    if scale_up:", "piece": "cluster.reload()"}
{"function_name": "prepareNETCDF", "function_define": "    Parameters\n    df : DataFrame.\n    Results of API extraction.", "piece": "df : DataFrame."}
{"function_name": "subUnsort", "function_define": "    tmp_min = idx_min = float('inf')\n    tmp_min = min(elem, tmp_min)\n    if elem > tmp_min:", "piece": "tmp_min = min(elem, tmp_min)"}
{"function_name": "update_attribute", "function_define": "    ending = '.cs'\n    ending = '.xaml.cs'\n    lines = f.readlines()", "piece": "ending = '.xaml.cs'"}
{"function_name": "test_parser_math", "function_define": "    textpart = 'a'\n    mathpart = 'x'\n    tree = self.parse(text)", "piece": "mathpart = 'x'"}
{"function_name": "test_parser_env", "function_define": "    name = 'test'\n    content = 'tmp'\n    tree = self.parse(text)", "piece": "content = 'tmp'"}
{"function_name": "test_separator", "function_define": "    bef = 'a'\n    aft = 'b'\n    text = '{}&{}'.format(bef, aft)", "piece": "aft = 'b'"}
{"function_name": "progressbar", "function_define": "    count = len(it)\n    x = int(size * j / count)\n    file.flush()", "piece": "x = int(size * j / count)"}
{"function_name": "__init__queue", "function_define": "    for dr in listdir(self.root):\n    if os_path.isdir(dr):\n    self.queue.append(dr)", "piece": "if os_path.isdir(dr):"}
{"function_name": "signInButton", "function_define": "    import hashlib\n    if isExist:\n    temp = pipe.window", "piece": "if isExist:"}
{"function_name": "signUpButton", "function_define": "    temp = pipe.window\n    pipe.ui = signUp.Ui_Form()\n    pipe.ui.setupUi(pipe.window)", "piece": "pipe.ui = signUp.Ui_Form()"}
{"function_name": "registerAdmin", "function_define": "    isAdmin = int(g.user['isadmin'])\n    if isAdmin == 0:\n    db = get_db()", "piece": "if isAdmin == 0:"}
{"function_name": "registerPan", "function_define": "    isAdmin = int(g.user['isadmin'])\n    if isAdmin == 0:\n    db = get_db()", "piece": "if isAdmin == 0:"}
{"function_name": "check_migrations", "function_define": "    connection = connections[using]\n    app_label = app_config.label\n    continue", "piece": "app_label = app_config.label"}
{"function_name": "test_schema_urls", "function_define": "    class TResource(BaseResource):\n    type_ = 'test-resource'\n    class TSchema(JSONAPISchema):", "piece": "type_ = 'test-resource'"}
{"function_name": "smoke_test", "function_define": "    action = agent.step(obs, config)\n    action = agent.step(obs, config)\n    action = agent.step(obs, config)", "piece": "action = agent.step(obs, config)"}
{"function_name": "simulate_mab", "function_define": "    last_actions = [0, 0]\n    totals = [0, 0]\n    for i in range(num_steps):", "piece": "totals = [0, 0]"}
{"function_name": "compare_agents", "function_define": "    print(f'{names[0]}\\n{names[1]}')\n    num_cpus = 6\n    scores = []", "piece": "num_cpus = 6"}
{"function_name": "rank_agents", "function_define": "    print('\\nFinal Ranking:')\n    for a in ranked:\n    print(a(100).description())", "piece": "for a in ranked:"}
{"function_name": "_rank_agents", "function_define": "    num_agents = len(agents)\n    if num_agents == 1:\n    if num_agents == 2:", "piece": "if num_agents == 1:"}
{"function_name": "round_robin", "function_define": "    num_agents = len(agent_lambdas)\n    round_num = 1\n    for name in agent_names:", "piece": "round_num = 1"}
{"function_name": "plot_los_heatmap", "function_define": "    num_agents = len(agent_names)\n    fix, ax = plt.subplots()\n    ax.set_xticklabels(sorted_names)", "piece": "fix, ax = plt.subplots()"}
{"function_name": "test_coupon_form", "function_define": "    data = {'code': 'code'}\n    form = CouponForm(data=data)\n    self.assertTrue(form.is_valid())", "piece": "form = CouponForm(data=data)"}
{"function_name": "test_refund_form", "function_define": "    form = RefundForm(data=data)\n    self.assertTrue(form.is_valid())\n    data['email'] = 'text'", "piece": "self.assertTrue(form.is_valid())"}
{"function_name": "validate_name", "function_define": "    if parent is None:\n    parent = self.instance.parent\n    validator({'name': value}, self)", "piece": "parent = self.instance.parent"}
{"function_name": "test_bytes", "function_define": "    testname = request.node.name\n    data = b'a' * 10 * 2 ** 20\n    data += b'b' * 10 * 2 ** 20", "piece": "data = b'a' * 10 * 2 ** 20"}
{"function_name": "test_pickle", "function_define": "    testname = request.node.name\n    data = pickle.dumps(arr)\n    with hdfs.open(fname, 'w') as f:", "piece": "data = pickle.dumps(arr)"}
{"function_name": "TestOneInput", "function_define": "    fh = FuzzingHelper(input_bytes)\n    dtype = fh.get_tf_dtype()\n    seed = fh.get_int()", "piece": "dtype = fh.get_tf_dtype()"}
{"function_name": "check_space", "function_define": "    total, used, free = get_usage()\n    if free < limit:\n    if config['show_space_alert']:", "piece": "if free < limit:"}
{"function_name": "get_usage", "function_define": "    total = total // 2 ** 30\n    used = used // 2 ** 30\n    free = free // 2 ** 30", "piece": "used = used // 2 ** 30"}
{"function_name": "test_prime", "function_define": "    assert is_prime(3)\n    assert is_prime(5)\n    assert is_prime(7)", "piece": "assert is_prime(5)"}
{"function_name": "get_gps_info", "function_define": "    self.send_and_read('AT+CGNSINF')\n    self.serial.readline()\n    self.serial.readline()", "piece": "self.serial.readline()"}
{"function_name": "send_http", "function_define": "    self.send_and_check('AT+CFUN=1')\n    self.send_and_check('AT+CIICR')\n    self.send_and_check('AT+CIFSR')", "piece": "self.send_and_check('AT+CIICR')"}
{"function_name": "main_port", "function_define": "    if default_port:\n    default_port = default_port[-4:]\n    default_port = 12910", "piece": "default_port = default_port[-4:]"}
{"function_name": "create_archive", "function_define": "    FileExistsError.\n    if os.path.isfile(archivepath):\n    archive.close()", "piece": "if os.path.isfile(archivepath):"}
{"function_name": "read_bin", "function_define": "    datadict = dict()\n    if os.path.isfile(archivepath):\n    for filename in filelist:", "piece": "if os.path.isfile(archivepath):"}
{"function_name": "read_diff_log", "function_define": "    diff_log = diff_log_bin.decode()\n    diff_log_file.close()\n    arch.close()", "piece": "diff_log_file.close()"}
{"function_name": "getMarket", "function_define": "    if coin_name[0] == '/':\n    coin_name = coin_name[1:]\n    market = coin_name.upper()", "piece": "coin_name = coin_name[1:]"}
{"function_name": "encode_gaps", "function_define": "    character_map['-'] = 0\n    taxon = None\n    sequence = []", "piece": "taxon = None"}
{"function_name": "_create_token", "function_define": "    payload['type'] = token_type\n    payload['exp'] = expire\n    payload['sub'] = str(sub)", "piece": "payload['exp'] = expire"}
{"function_name": "_format_command", "function_define": "    formatted_out = ''\n    if self.global_options:\n    if self.inputfile_options:", "piece": "if self.global_options:"}
{"function_name": "in_background", "function_define": "    command = shlex.split(command)\n    self.process.communicate()\n    self.notify_observers()", "piece": "self.process.communicate()"}
{"function_name": "save_comments", "function_define": "    for comment in comments:\n    cursor = self.connect.cursor()\n    result = cursor.fetchone()", "piece": "cursor = self.connect.cursor()"}
{"function_name": "detail_page", "function_define": "    same_likes = []\n    if re_same:\n    comments = []", "piece": "if re_same:"}
{"function_name": "datadump", "function_define": "    name = request.form.get('name')\n    filename = ''\n    if filename:", "piece": "filename = ''"}
{"function_name": "user_loader", "function_define": "    if email not in users:\n    user = User()\n    user.id = email", "piece": "user = User()"}
{"function_name": "request_loader", "function_define": "    email = request.form.get(ADMIN)\n    if email not in users:\n    user = User()", "piece": "if email not in users:"}
{"function_name": "connect_volume", "function_define": "    ori_devices = bdm.device_scan()\n    if not server_id:\n    curr_devices = bdm.device_scan()", "piece": "if not server_id:"}
{"function_name": "str_to_dtype", "function_define": "    if s == 'none':\n    elif s == 'uint8':\n    elif s == 'uint16':", "piece": "elif s == 'uint8':"}
{"function_name": "shape_to_str", "function_define": "    Returns:\n    printable shape (str)\n    if len(shape) == 5:", "piece": "printable shape (str)"}
{"function_name": "get_size", "function_define": "    size = sys.getsizeof(obj)\n    if seen is None:\n    seen = set()", "piece": "if seen is None:"}
{"function_name": "createConnection", "function_define": "    conn = sqlite3.connect(db_file)\n    except Error as e:\n    print(e)", "piece": "except Error as e:"}
{"function_name": "insertGameData", "function_define": "    c = conn.cursor()\n    c.execute(sql, values)\n    conn.commit()", "piece": "c.execute(sql, values)"}
{"function_name": "setRedeemed", "function_define": "    c = conn.cursor()\n    redeemed = 1\n    values = (redeemed, Key)", "piece": "redeemed = 1"}
{"function_name": "gameSearch", "function_define": "    c = conn.cursor()\n    all_rows = c.fetchall()\n    resultCount = len(all_rows)", "piece": "all_rows = c.fetchall()"}
{"function_name": "choosePlatform", "function_define": "    GamePlatform = int(input())\n    if GamePlatform == 1:\n    GamePlatform = 'Steam'", "piece": "if GamePlatform == 1:"}
{"function_name": "preprocessing", "function_define": "    if count != 0:\n    for column in test_data.columns:\n    if count != 0:", "piece": "for column in test_data.columns:"}
{"function_name": "fetch_json_map", "function_define": "    json.dump(res, f)\n    f.close()\n    f = open('./data/states.json')", "piece": "f.close()"}
{"function_name": "aes_encrypt_str", "function_define": "    Encrypt a string with AES.\n    iv = os.urandom(16)\n    ctext += encrypter.feed()", "piece": "iv = os.urandom(16)"}
{"function_name": "aes_decrypt_str", "function_define": "    Decrypt a string with AES\n    iv = binascii.unhexlify(iv)\n    ptext += decrypter.feed()", "piece": "iv = binascii.unhexlify(iv)"}
{"function_name": "get_health", "function_define": "    result = 0\n    for squad in self._squads:\n    result += squad.get_health()", "piece": "for squad in self._squads:"}
{"function_name": "get_random_squad", "function_define": "    from random import randint\n    arr = self._get_alive_squards()\n    if len(arr) is 0:", "piece": "arr = self._get_alive_squards()"}
{"function_name": "readUntil", "function_define": "    resp = b''\n    while True:\n    b = self.read(1)", "piece": "while True:"}
{"function_name": "getWeight", "function_define": "    result = False\n    data = 0.0\n    time.sleep(0.05)", "piece": "data = 0.0"}
{"function_name": "getCurrentWeight", "function_define": "    result = False\n    data = 0.0\n    time.sleep(0.05)", "piece": "data = 0.0"}
{"function_name": "getF1Code", "function_define": "    time.sleep(0.05)\n    self.write(req)\n    resp = self.readUntil(b'\\x00')", "piece": "self.write(req)"}
{"function_name": "getF2Code", "function_define": "    time.sleep(0.05)\n    self.write(req)\n    resp = self.readUntil(b'\\x00')", "piece": "self.write(req)"}
{"function_name": "getF3Code", "function_define": "    time.sleep(0.05)\n    self.write(req)\n    resp = self.readUntil(b'\\x00')", "piece": "self.write(req)"}
{"function_name": "getF4Code", "function_define": "    time.sleep(0.05)\n    self.write(req)\n    resp = self.readUntil(b'\\x00')", "piece": "self.write(req)"}
{"function_name": "getF5Code", "function_define": "    time.sleep(0.05)\n    self.write(req)\n    resp = self.readUntil(b'\\x00')", "piece": "self.write(req)"}
{"function_name": "printLabel", "function_define": "    result = False\n    data = label\n    time.sleep(0.2)", "piece": "data = label"}
{"function_name": "keyboardConfig", "function_define": "    result = False\n    time.sleep(0.2)\n    self.write(b'\\x02')", "piece": "time.sleep(0.2)"}
{"function_name": "keyPress", "function_define": "    result = False\n    time.sleep(0.2)\n    self.write(b'\\x02')", "piece": "time.sleep(0.2)"}
{"function_name": "_build_widgets", "function_define": "    self.label = qt.QLabel()\n    weight = qt.QLabel('  ')\n    self.number = qt.QLabel()", "piece": "weight = qt.QLabel('  ')"}
{"function_name": "select_pose", "function_define": "    if not self.update_select:\n    if pose_name:\n    cmds.autoKeyframe(state=False)", "piece": "if pose_name:"}
{"function_name": "create_pose", "function_define": "    pose = None\n    if name:\n    pose = name", "piece": "if name:"}
{"function_name": "delete_pose", "function_define": "    pose = self._current_pose()\n    if not pose:\n    if not permission:", "piece": "if not pose:"}
{"function_name": "mirror_pose", "function_define": "    pose = self._current_pose()\n    if not pose:\n    self.refresh()", "piece": "if not pose:"}
{"function_name": "add_mesh", "function_define": "    pose_name = self.pose_name\n    if not pose_name:\n    if not selection:", "piece": "if not pose_name:"}
{"function_name": "parent_changed", "function_define": "    pose_name = self._current_pose()\n    if not pose_name:\n    pose = corrective.PoseCone()", "piece": "if not pose_name:"}
{"function_name": "highlight_pose", "function_define": "    if not poses:\n    self._remove_highlights()\n    for pose in poses:", "piece": "self._remove_highlights()"}
{"function_name": "_populate_list", "function_define": "    self.clear()\n    if not poses:\n    self.item_select = False", "piece": "if not poses:"}
{"function_name": "_current_item", "function_define": "    selected = self.selectedItems()\n    item = None\n    if selected:", "piece": "item = None"}
{"function_name": "_rename_pose", "function_define": "    items = self.selectedItems()\n    item = None\n    if items:", "piece": "item = None"}
{"function_name": "mousePressEvent", "function_define": "    item = self.itemAt(event.pos())\n    if item:\n    item_parent = item.parent()", "piece": "if item:"}
{"function_name": "dropEvent", "function_define": "    position = event.pos()\n    index = self.indexAt(position)\n    if not is_dropped:", "piece": "index = self.indexAt(position)"}
{"function_name": "_add_item", "function_define": "    item.setText(0, pose)\n    item.setText(1, type_name)\n    self.addTopLevelItem(item)", "piece": "item.setText(1, type_name)"}
{"function_name": "_add_pose_item", "function_define": "    pose_type = 'cone'\n    if sub_poses:\n    for sub_pose in sub_poses:", "piece": "if sub_poses:"}
{"function_name": "_select_joint", "function_define": "    name = self._current_pose()\n    transform = pose.get_transform()\n    core.show_channel_box()", "piece": "transform = pose.get_transform()"}
{"function_name": "_select_pose", "function_define": "    name = self._current_pose()\n    core.show_channel_box()\n    cmds.select(control)", "piece": "core.show_channel_box()"}
{"function_name": "_select_blend", "function_define": "    name = self._current_pose()\n    if not name:\n    pose_inst.set_pose(name)", "piece": "if not name:"}
{"function_name": "_get_item", "function_define": "    found_item = None\n    while iterator.value():\n    if found_item:", "piece": "while iterator.value():"}
{"function_name": "_expand_to_item", "function_define": "    parent = item.parent()\n    if not parent:\n    parent.setExpanded(True)", "piece": "if not parent:"}
{"function_name": "_update_meshes", "function_define": "    pose = self.pose_class\n    if not pose or not pose_name:\n    pose.set_pose(pose_name)", "piece": "if not pose or not pose_name:"}
{"function_name": "remove_mesh", "function_define": "    if not items:\n    for item in items:\n    mesh = str(item.longname)", "piece": "for item in items:"}
{"function_name": "update_meshes", "function_define": "    self.mesh_list.clear()\n    for mesh in meshes:\n    if not mesh:", "piece": "for mesh in meshes:"}
{"function_name": "_button_sculpt", "function_define": "    self.mesh_widget.add_mesh()\n    self.sculpted_mesh.emit()\n    if self.pose:", "piece": "self.sculpted_mesh.emit()"}
{"function_name": "_value_changed", "function_define": "    if not self.value_update_enable:\n    twist_on = self.twist_on.value()\n    twist = self.twist.value()", "piece": "twist_on = self.twist_on.value()"}
{"function_name": "_string_widget", "function_define": "    layout = qt.QHBoxLayout()\n    label = qt.QLabel(name)\n    text = qt.QLineEdit()", "piece": "label = qt.QLabel(name)"}
{"function_name": "_add_spin_widget", "function_define": "    layout = qt.QHBoxLayout()\n    layout.setSpacing(1)\n    label = qt.QLabel(name)", "piece": "layout.setSpacing(1)"}
{"function_name": "_input_change", "function_define": "    if not text:\n    style = self.styleSheet()\n    style = self.styleSheet()", "piece": "style = self.styleSheet()"}
{"function_name": "set_input", "function_define": "    if not self.pose:\n    pose = corrective.PoseNoReader()\n    pose.set_pose(self.pose)", "piece": "pose = corrective.PoseNoReader()"}
{"function_name": "_set_ui_values", "function_define": "    self.value_update_enable = False\n    self.max_angle.setValue(angle)\n    self.twist_on.setValue(twist_on)", "piece": "self.max_angle.setValue(angle)"}
{"function_name": "_get_pose_values", "function_define": "    pose = self.pose\n    if not cmds.objExists(pose):\n    axis = [x, y, z]", "piece": "if not cmds.objExists(pose):"}
{"function_name": "_get_parent", "function_define": "    pose_inst.set_pose(self.pose)\n    parent = pose_inst.get_parent()\n    self.set_parent_name(parent)", "piece": "parent = pose_inst.get_parent()"}
{"function_name": "axis_change", "function_define": "    if not self.pose:\n    pose_name = str(self.pose)\n    pose = corrective.PoseCone()", "piece": "pose_name = str(self.pose)"}
{"function_name": "set_parent_name", "function_define": "    if not self.pose:\n    pose = corrective.PoseCone()\n    pose.set_pose(self.pose)", "piece": "pose = corrective.PoseCone()"}
{"function_name": "_add_pose_list", "function_define": "    tree = PoseTreeWidget(False)\n    self.tree = tree\n    self.tree.setColumnCount(1)", "piece": "self.tree = tree"}
{"function_name": "_add_pose", "function_define": "    if not items:\n    for item in items:\n    if self._has_pose(item.text(0)):", "piece": "for item in items:"}
{"function_name": "_select_changed", "function_define": "    if not items:\n    item = items[0]\n    if item.text(0) == self.pose:", "piece": "item = items[0]"}
{"function_name": "_remove_widget", "function_define": "    pop_inc = None\n    pop_inc = inc\n    inc += 1", "piece": "pop_inc = inc"}
{"function_name": "clear_widgets", "function_define": "    for widget in self.pose_widgets:\n    widget.deleteLater()\n    self.pose_widgets = []", "piece": "widget.deleteLater()"}
{"function_name": "add_code", "function_define": "    if not r:\n    if not r:\n    if not code:", "piece": "if not r:"}
{"function_name": "list_issues", "function_define": "    with_total = False\n    order = []\n    disable_coding = False", "piece": "order = []"}
{"function_name": "build_table_text", "function_define": "    if hide_top_header:\n    top_header = csv_header\n    while i < len(csv_data):", "piece": "top_header = csv_header"}
{"function_name": "num_houses", "function_define": "    sleigh = SantaType()\n    for direction in directions:\n    sleigh.move(direction)", "piece": "for direction in directions:"}
{"function_name": "_check_state", "function_define": "    Returns:\n    if isinstance(state, Robot):\n    update_state = True", "piece": "if isinstance(state, Robot):"}
{"function_name": "get_pseudo_label", "function_define": "    if label_flag:\n    if os.path.exists(file_path):\n    with open(file_path, 'rb') as f:", "piece": "if os.path.exists(file_path):"}
{"function_name": "collect_boxlist", "function_define": "    for i in range(len(preds_set)):\n    preds = preds_set[i]\n    idx = preds[:, 0] == cur_id", "piece": "preds = preds_set[i]"}
{"function_name": "ensemble_box", "function_define": "    all_boxes = []\n    all_labels = []\n    all_ids = []", "piece": "all_labels = []"}
{"function_name": "get_diff", "function_define": "    if jsonit:\n    t1 = timeit.default_timer()\n    t2 = timeit.default_timer()", "piece": "t1 = timeit.default_timer()"}
{"function_name": "get_ratios", "function_define": "    if json_ratios is None:\n    t4 = timeit.default_timer()\n    t5 = timeit.default_timer()", "piece": "t4 = timeit.default_timer()"}
{"function_name": "calc_diff", "function_define": "    ds1 = dataset.get(id1)\n    ds2 = dataset.get(id2)\n    t2 = timeit.default_timer()", "piece": "ds2 = dataset.get(id2)"}
{"function_name": "vis_sample", "function_define": "    sampled.\n    create a new one if None\n    blow_up (): TODO: implement", "piece": "create a new one if None"}
{"function_name": "vis_and_store", "function_define": "    if not initialized\n    fs = get_fs(filesystem)\n    geom = LOSTGeometries()", "piece": "fs = get_fs(filesystem)"}
{"function_name": "upload_template", "function_define": "    file = request.files['template']\n    if allowed_file(file.filename):\n    user_info = json.load(jsonFile)", "piece": "if allowed_file(file.filename):"}
{"function_name": "test_monroescore", "function_define": "    from preferences import Profile\n    self.longMessage = True\n    profile = Profile(6)", "piece": "self.longMessage = True"}
{"function_name": "fact_num", "function_define": "    while n != 0:\n    d = n % 10\n    n //= 10", "piece": "d = n % 10"}
{"function_name": "julian_day_start", "function_define": "    Parameters\n    t : datetime\n    datetime", "piece": "t : datetime"}
{"function_name": "julian_day_end", "function_define": "    Parameters\n    t : datetime\n    datetime", "piece": "t : datetime"}
{"function_name": "inflooper", "function_define": "    epoch = 0\n    while True:\n    sampler.set_epoch(epoch)", "piece": "while True:"}
{"function_name": "spawn_process", "function_define": "    world_size = 1\n    processes = []\n    for rank in range(world_size):", "piece": "processes = []"}
{"function_name": "lr_factor", "function_define": "    if iter_i < args.burn_in:\n    factor = 1.0\n    for step in args.steps:", "piece": "factor = 1.0"}
{"function_name": "_getSink", "function_define": "    pm = self._PM\n    super(MyPMSink, self).__init__()\n    self._log = log", "piece": "super(MyPMSink, self).__init__()"}
{"function_name": "_customization", "function_define": "    self._enabled = False\n    upgradeAvailable = None\n    missingRollback = None", "piece": "upgradeAvailable = None"}
{"function_name": "_validation", "function_define": "    engineVersion = None\n    if self._plist is not None:\n    for p in self._plist:", "piece": "if self._plist is not None:"}
{"function_name": "plot_radius", "function_define": "    plt.figure(figsize=(5, 5))\n    plt.grid(True)\n    plt.xlim(0, max(arcsec))", "piece": "plt.grid(True)"}
{"function_name": "_bowtie_align", "function_define": "    A list of SeqRecord objects\n    temp_str = io.StringIO()\n    proc.check_returncode()", "piece": "temp_str = io.StringIO()"}
{"function_name": "_parse_sam_line", "function_define": "    if line_str[0] is '@':\n    raise ValueError\n    opt_flags = {}", "piece": "raise ValueError"}
{"function_name": "complement", "function_define": "    result = ''\n    for base in genotype:\n    result += bases[base]", "piece": "for base in genotype:"}
{"function_name": "get_sample_type", "function_define": "    Returns:\n    type_ = None\n    for sampletype in SAMPLETYPE:", "piece": "type_ = None"}
{"function_name": "from_string", "function_define": "    Returns:\n    if type(value) != str:\n    value = value.upper()", "piece": "if type(value) != str:"}
{"function_name": "__check_coding", "function_define": "    for allele in genotype:\n    if allele in missing:\n    continue", "piece": "if allele in missing:"}
{"function_name": "forward2top", "function_define": "    Returns:\n    list: The genotype in top format\n    result = []", "piece": "list: The genotype in top format"}
{"function_name": "affy2top", "function_define": "    Returns:\n    list: The genotype in top format\n    result = []", "piece": "list: The genotype in top format"}
{"function_name": "click_grid", "function_define": "    global case\n    if case not in playedList:\n    playedList.append(case)", "piece": "if case not in playedList:"}
{"function_name": "placeShipH", "function_define": "    shipInPlace = True\n    if col + lg > 10:\n    shipInPlace = False", "piece": "if col + lg > 10:"}
{"function_name": "placeShipV", "function_define": "    shipInPlace = True\n    if row + lg > 10:\n    shipInPlace = False", "piece": "if row + lg > 10:"}
{"function_name": "randomGridShips", "function_define": "    global ships, grid, gridAttempts\n    grid = initGrid()\n    dic_ships = {}", "piece": "grid = initGrid()"}
{"function_name": "printRules", "function_define": "    ruleWindow = tk.Toplevel()\n    ruleWindow.title('How to play')\n    with open('rules_eng.txt') as f:", "piece": "ruleWindow.title('How to play')"}
{"function_name": "split_sentences", "function_define": "    for c in '!?':\n    sents = text.split('. ')\n    if sents[-1][-1] in '.!?':", "piece": "sents = text.split('. ')"}
{"function_name": "format_related", "function_define": "    ans = abstract\n    if ans[-2:] == '..':\n    while ans[-1] == '.':", "piece": "if ans[-2:] == '..':"}
{"function_name": "imprimir_tela", "function_define": "    print(cabecalho)\n    print(conteudo)\n    print(rodape)", "piece": "print(conteudo)"}
{"function_name": "carregar_opcoes", "function_define": "    if opcao == 1:\n    elif opcao == 2:\n    elif opcao == 3:", "piece": "elif opcao == 2:"}
{"function_name": "powerSpectrum1D", "function_define": "    batchCount = points.shape[0]\n    dimCount = points.shape[2]\n    xlow = 0.0", "piece": "dimCount = points.shape[2]"}
{"function_name": "powerSpectrum2D", "function_define": "    batchCount = points.shape[0]\n    dimCount = points.shape[2]\n    halfres = int(spectrumRes * 0.5)", "piece": "dimCount = points.shape[2]"}
{"function_name": "radialSpectrumMC", "function_define": "    freqSamples = input[0]\n    points = input[1]\n    twoPi = 2.0 * math.pi", "piece": "points = input[1]"}
{"function_name": "sampleSpectrum", "function_define": "    freqSamples = input[0]\n    points = input[1]\n    twoPi = 2.0 * math.pi", "piece": "points = input[1]"}
{"function_name": "leia_int", "function_define": "    while True:\n    n = int(input(msg))\n    except (ValueError, TypeError):", "piece": "n = int(input(msg))"}
{"function_name": "estimate_gas", "function_define": "    data = data or b''\n    if block_identifier:\n    params.append(block_identifier)", "piece": "if block_identifier:"}
{"function_name": "used_port", "function_define": "    port = 8000\n    while port <= 65535:\n    if is_port_in_use(port):", "piece": "while port <= 65535:"}
{"function_name": "generatePDF", "function_define": "    workbook = Workbook(XLSXPath)\n    htmlDoc = f.read()\n    styles = f.read()", "piece": "htmlDoc = f.read()"}
{"function_name": "cleanPDF", "function_define": "    shutil.rmtree('./sheet_files')\n    os.remove('./out.html')\n    os.remove('./sheet.html')", "piece": "os.remove('./out.html')"}
{"function_name": "generatePNG", "function_define": "    workbook = Workbook(XLSXPath)\n    img = cv2.imread('sheet.png')\n    cropped = img[20:-100]", "piece": "img = cv2.imread('sheet.png')"}
{"function_name": "get_tokens", "function_define": "    measures (see input-api).\n    body (max 65 characters).\n    GET /objects/{objectId}/tokens", "piece": "body (max 65 characters)."}
{"function_name": "put_tags", "function_define": "    Add tags to the object.\n    PUT /objects/{objectId}/tags\n    params = {'tags': tags}", "piece": "PUT /objects/{objectId}/tags"}
{"function_name": "delete_tags", "function_define": "    Remove tags.\n    DELETE /objects/{objectId}/tags\n    params = {'tags': tags}", "piece": "DELETE /objects/{objectId}/tags"}
{"function_name": "view_all", "function_define": "    raise PermissionDenied\n    context = {}\n    page = request.GET.get('page')", "piece": "context = {}"}
{"function_name": "snipe_checkout", "function_define": "    if not settings.SNIPE_URL:\n    if not settings.SNIPE_API_KEY:\n    checkout_to_choices = []", "piece": "if not settings.SNIPE_API_KEY:"}
{"function_name": "snipe_checkin", "function_define": "    if not settings.SNIPE_URL:\n    if not settings.SNIPE_API_KEY:\n    checkin_from_choices = []", "piece": "if not settings.SNIPE_API_KEY:"}
{"function_name": "log_access", "function_define": "    if not space:\n    if request.method == 'POST':\n    if form.is_valid():", "piece": "if request.method == 'POST':"}
{"function_name": "view_logs", "function_define": "    records = []\n    for user in record.users.all():\n    records.append(obj)", "piece": "for user in record.users.all():"}
{"function_name": "transition_fn", "function_define": "    agent = env_state.agent\n    if len(agent.history) == 0:\n    like_counts: Dict[str, int] = {}", "piece": "if len(agent.history) == 0:"}
{"function_name": "make_problem", "function_define": "    out_terms = []\n    for i in range(like_terms):\n    for tpl in diff_term_tpls:", "piece": "for i in range(like_terms):"}
{"function_name": "prep_buff", "function_define": "    self.index_count = 0\n    l = len(self.data)\n    diff = l - self.index_count", "piece": "l = len(self.data)"}
{"function_name": "salience", "function_define": "    Parameters\n    S : np.ndarray [shape=(d, n)]\n    chosen axis.", "piece": "S : np.ndarray [shape=(d, n)]"}
{"function_name": "interp_harmonics", "function_define": "    computation.\n    Parameters\n    x : np.ndarray", "piece": "Parameters"}
{"function_name": "harmonics_1d", "function_define": "    Parameters\n    X : np.ndarray\n    The input energy", "piece": "X : np.ndarray"}
{"function_name": "harmonics_2d", "function_define": "    time-varying frequencies.\n    Parameters\n    harmonic_out : np.ndarray", "piece": "Parameters"}
{"function_name": "with_metaclass", "function_define": "    Use it like this::\n    class BaseForm(object):\n    class FormType(type):", "piece": "class BaseForm(object):"}
{"function_name": "test_all_runs", "function_define": "    add_run(1.0, 3, 3)\n    add_run(0.5, 6, 6)\n    with self.client:", "piece": "add_run(0.5, 6, 6)"}
{"function_name": "validate_enums", "function_define": "    for k, v in value.items():\n    if v is None:\n    value[k] = EnumData()", "piece": "if v is None:"}
{"function_name": "validate_methods", "function_define": "    for k, v in value.items():\n    if v is None:\n    value[k] = FunctionData()", "piece": "if v is None:"}
{"function_name": "validate_classes", "function_define": "    for k, v in value.items():\n    if v is None:\n    value[k] = ClassData()", "piece": "if v is None:"}
{"function_name": "dict_to_file", "function_define": "    last_section = None\n    for key in sorted(dict.keys()):\n    section = key[:key.index('.')]", "piece": "for key in sorted(dict.keys()):"}
{"function_name": "_infinite_alpha", "function_define": "    alpha_complex.get_point(4) == []\n    except IndexError:\n    assert False", "piece": "except IndexError:"}
{"function_name": "_filtered_alpha", "function_define": "    except IndexError:\n    assert False\n    except IndexError:", "piece": "assert False"}
{"function_name": "_3d_tetrahedrons", "function_define": "    delaunay_tetra = []\n    if len(sk[0]) == 4:\n    alpha_tetra = []", "piece": "if len(sk[0]) == 4:"}
{"function_name": "pagination", "function_define": "    next\u3001last\u94fe\u63a5\n    if _yu == 0:\n    last = _chu", "piece": "if _yu == 0:"}
{"function_name": "lock_lock", "function_define": "    if duel.guest_flag is False:\n    ID1 = -1\n    ID1 = duel.guest_id", "piece": "ID1 = -1"}
{"function_name": "choices_det", "function_define": "    if user == 1:\n    other_user = 2\n    other_user = 1", "piece": "other_user = 2"}
{"function_name": "free_lock", "function_define": "    if room_number == 1:\n    lock.lock_1 = False\n    lock.save()", "piece": "lock.lock_1 = False"}
{"function_name": "find_elements", "function_define": "    raise Exception\n    except Exception as handleRetry:\n    self._refresh()", "piece": "except Exception as handleRetry:"}
{"function_name": "barplot_rss", "function_define": "    n = min(n, df.shape[0])\n    df = df.iloc[0:n, :]\n    df.index.name = 'Regulon'", "piece": "df = df.iloc[0:n, :]"}
{"function_name": "search_files", "function_define": "    found = []\n    regexp = self.options.regexp\n    for file in files:", "piece": "regexp = self.options.regexp"}
{"function_name": "get_probability", "function_define": "    Arguments\n    sample : ndarray\n    cond : ndarray", "piece": "sample : ndarray"}
{"function_name": "get_project_list", "function_define": "    if self.project_cache is None:\n    wd = self.app.wd\n    self.open_projects_page()", "piece": "wd = self.app.wd"}
{"function_name": "parse_document", "function_define": "    doc_id = root.attrib['ucid']\n    lang = root.attrib['lang']\n    sec_groups.update(main_group)", "piece": "lang = root.attrib['lang']"}
{"function_name": "fetch_WIPOgamma", "function_define": "    Fetchs the WIPO-gamma dataset\n    if not exists(data_home):\n    if 'description' in text_fields:", "piece": "if not exists(data_home):"}
{"function_name": "make_callable", "function_define": "    callable function of theta\n    offset_values = attribute[1]\n    offset_values = attribute", "piece": "offset_values = attribute[1]"}
{"function_name": "find_points", "function_define": "    self._overlapping_shape = False\n    if angles is None:\n    thetas = angles", "piece": "if angles is None:"}
{"function_name": "distribution", "function_define": "    Returns:\n    point with angle theta\n    if pkg == np:", "piece": "point with angle theta"}
{"function_name": "insert_switch", "function_define": "    num_pool = string.digits\n    for i in range(_LENGTH):\n    first = '{int '", "piece": "for i in range(_LENGTH):"}
{"function_name": "_look_in_catalog", "function_define": "    Parameters\n    cat_name : str\n    phase_dict : dict", "piece": "cat_name : str"}
{"function_name": "antpair2ind", "function_define": "    conjugate.\n    Parameters\n    ant1, ant2 : int", "piece": "Parameters"}
{"function_name": "_key2inds", "function_define": "    Parameters\n    key : tuple of int\n    if len(key) == 1:", "piece": "key : tuple of int"}
{"function_name": "_smart_slicing", "function_define": "    Parameters\n    data : ndarray\n    ind1 : array_like of int", "piece": "data : ndarray"}
{"function_name": "get_antpairpols", "function_define": "    list of tuples of int\n    associated with them.\n    pols = self.get_pols()", "piece": "associated with them."}
{"function_name": "get_flags", "function_define": "    Parameters\n    called the key.\n    If key is length 1:", "piece": "called the key."}
{"function_name": "get_nsamples", "function_define": "    Parameters\n    called the key.\n    If key is length 1:", "piece": "called the key."}
{"function_name": "get_lsts", "function_define": "    Parameters\n    called the key.\n    If key is length 1:", "piece": "called the key."}
{"function_name": "get_ENU_antpos", "function_define": "    Parameters\n    center : bool\n    pick_data_ants : bool", "piece": "center : bool"}
{"function_name": "set_flags", "function_define": "    Parameters\n    flag : ndarray of boolean\n    as the target indices.", "piece": "flag : ndarray of boolean"}
{"function_name": "set_nsamples", "function_define": "    Parameters\n    nsamples : ndarray of float\n    shape as the target indices.", "piece": "nsamples : ndarray of float"}
{"function_name": "antpairpol_iter", "function_define": "    Parameters\n    squeeze : str\n    key : tuple", "piece": "squeeze : str"}
{"function_name": "conjugate_bls", "function_define": "    Parameters\n    use_enu : bool\n    uvw_tol : float", "piece": "use_enu : bool"}
{"function_name": "reorder_pols", "function_define": "    Parameters\n    order : str\n    run_check : bool", "piece": "order : str"}
{"function_name": "reorder_blts", "function_define": "    Parameters\n    order : str or array_like of int\n    minor_order : str", "piece": "order : str or array_like of int"}
{"function_name": "reorder_freqs", "function_define": "    Parameters\n    sorting of spectral windows.\n    run_check : bool", "piece": "sorting of spectral windows."}
{"function_name": "remove_eq_coeffs", "function_define": "    Parameters\n    ValueError\n    if self.eq_coeffs is None:", "piece": "ValueError"}
{"function_name": "_apply_w_proj", "function_define": "    Parameters\n    select_mask: ndarray of bool\n    IndexError", "piece": "select_mask: ndarray of bool"}
{"function_name": "unphase_to_drift", "function_define": "    Parameters\n    phase_frame : str\n    if that attribute is None.", "piece": "phase_frame : str"}
{"function_name": "phase_to_time", "function_define": "    Parameters\n    phase_frame : str\n    use_ant_pos : bool", "piece": "phase_frame : str"}
{"function_name": "fix_phase", "function_define": "    Parameters\n    use_ant_pos : bool\n    self._set_app_coords_helper()", "piece": "use_ant_pos : bool"}
{"function_name": "fast_concat", "function_define": "    Parameters\n    axis : str\n    inplace : bool", "piece": "axis : str"}
{"function_name": "diff_vis", "function_define": "    object are taken.\n    Parameters\n    other : UVData object", "piece": "Parameters"}
{"function_name": "parse_ants", "function_define": "    Parameters\n    ant_str : str\n    print_toggle : bool", "piece": "ant_str : str"}
{"function_name": "_select_metadata", "function_define": "    Parameters\n    blt_inds : list of int\n    freq_inds : list of int", "piece": "blt_inds : list of int"}
{"function_name": "upsample_in_time", "function_define": "    Parameters\n    max_int_time : float\n    blt_order : str", "piece": "max_int_time : float"}
{"function_name": "resample_in_time", "function_define": "    Parameters\n    target_time : float\n    only_downsample : bool", "piece": "target_time : float"}
{"function_name": "get_redundancies", "function_define": "    Parameters\n    tol : float\n    use_antpos : bool", "piece": "tol : float"}
{"function_name": "read_fhd", "function_define": "    Parameters\n    filelist : array_like of str\n    use_model : bool", "piece": "filelist : array_like of str"}
{"function_name": "read_mir", "function_define": "    Parameters\n    filepath : str\n    isource : int", "piece": "filepath : str"}
{"function_name": "read_miriad", "function_define": "    Read in data from a miriad file.\n    Parameters\n    filepath : str", "piece": "Parameters"}
{"function_name": "read_uvfits", "function_define": "    Parameters\n    filename : str\n    The uvfits file to read from.", "piece": "filename : str"}
{"function_name": "read_uvh5", "function_define": "    Read a UVH5 file.\n    Parameters\n    filename : str", "piece": "Parameters"}
{"function_name": "write_miriad", "function_define": "    Write the data to a miriad file.\n    Parameters\n    filename : str", "piece": "Parameters"}
{"function_name": "write_mir", "function_define": "    Write the data to a mir file.\n    Parameters\n    filename : str", "piece": "Parameters"}
{"function_name": "write_ms", "function_define": "    Parameters\n    filename : str\n    a folder with many files).", "piece": "filename : str"}
{"function_name": "write_uvfits", "function_define": "    Write the data to a uvfits file.\n    Parameters\n    filename : str", "piece": "Parameters"}
{"function_name": "write_uvh5", "function_define": "    Parameters\n    filename : str\n    The UVH5 file to write to.", "piece": "filename : str"}
{"function_name": "write_uvh5_part", "function_define": "    Parameters\n    filename : str\n    data_array : ndarray", "piece": "filename : str"}
{"function_name": "get_arch", "function_define": "    add_custom_forward = True\n    elif args.arch in vitmodeldict:\n    arch = args.arch", "piece": "elif args.arch in vitmodeldict:"}
{"function_name": "freeze_model", "function_define": "    update_params = None\n    if freeze_level != -1:\n    update_params = []", "piece": "if freeze_level != -1:"}
{"function_name": "patch_state_dict", "function_define": "    pth = torch.load(path)\n    d = pth['model']\n    new_d = {}", "piece": "d = pth['model']"}
{"function_name": "info_content", "function_define": "    value of 0.415.\n    pseudoc = 1e-09\n    if transpose:", "piece": "pseudoc = 1e-09"}
{"function_name": "make_filter_pwm", "function_define": "    pwm_counts = []\n    nsites = 4\n    for line in open(filter_fasta):", "piece": "nsites = 4"}
{"function_name": "meme_add", "function_define": "    meme_out : open file\n    f (int) : filter index #\n    if not trim_filters:", "piece": "f (int) : filter index #"}
{"function_name": "meme_intro", "function_define": "    meme_file (str) : filename\n    Returns:\n    mem_out : open MEME file", "piece": "Returns:"}
{"function_name": "name_filters", "function_define": "    Returns:\n    filter_names [str] :\n    filter_motifs = {}", "piece": "filter_names [str] :"}
{"function_name": "plot_target_corr", "function_define": "    num_seqs = filter_outs.shape[0]\n    num_targets = len(target_names)\n    if seq_op == 'mean':", "piece": "num_targets = len(target_names)"}
{"function_name": "filter_motif", "function_define": "    nts = 'ACGT'\n    motif_list = []\n    max_n = 0", "piece": "motif_list = []"}
{"function_name": "filter_possum", "function_define": "    trim_start = 0\n    trim_t = 0.3\n    if trim_filters:", "piece": "trim_t = 0.3"}
{"function_name": "plot_filter_heat", "function_define": "    sns.set(font_scale=2)\n    ax = plt.gca()\n    plt.savefig(out_pdf)", "piece": "ax = plt.gca()"}
{"function_name": "plot_filter_logo", "function_define": "    if maxpct_t:\n    all_outs = np.ravel(filter_outs)\n    all_outs_mean = all_outs.mean()", "piece": "all_outs = np.ravel(filter_outs)"}
{"function_name": "BPF_bank", "function_define": "    sys.stdout.write('\\r%d' % i)\n    sys.stdout.flush()\n    self.BPF_bank_wav[i] = bpf_wav", "piece": "sys.stdout.flush()"}
{"function_name": "gray2rgb", "function_define": "    if show_number > 0:\n    if freq_rang is not None:\n    index_max = np.argmax(in_fig)", "piece": "if freq_rang is not None:"}
{"function_name": "make_figure", "function_define": "    if sp < 0 or ep < 0:\n    ep = len(self.yg)\n    delta_x = ep - sp", "piece": "ep = len(self.yg)"}
{"function_name": "_build_scheduler", "function_define": "    if lr_scheduler not in AVAI_SCH:\n    if isinstance(stepsize, list):\n    stepsize = stepsize[-1]", "piece": "if isinstance(stepsize, list):"}
{"function_name": "manager_factory", "function_define": "    if manager_type == 'csv':\n    manager = CSVManager()\n    elif manager_type == 'tsv':", "piece": "manager = CSVManager()"}
{"function_name": "age_assignment", "function_define": "    people_dict = {}\n    for name in args:\n    if name.startswith(key):", "piece": "for name in args:"}
{"function_name": "sprinkle", "function_define": "    Returns list of item ids\n    if tilemask is None:\n    tilemask = empty_locations(game)", "piece": "if tilemask is None:"}
{"function_name": "empty_locations", "function_define": "    but maybe with other block types\n    empties = []\n    if not mask(x, y):", "piece": "empties = []"}
{"function_name": "agent_movefunc", "function_define": "    x, y = loc\n    dx, dy = dloc\n    nx, ny = (x + dx, y + dy)", "piece": "dx, dy = dloc"}
{"function_name": "_to_python", "function_define": "    wh = None\n    if isinstance(value, M.Webhook):\n    wh = value", "piece": "if isinstance(value, M.Webhook):"}
{"function_name": "_default", "function_define": "    except Invalid:\n    raise exc.HTTPNotFound()\n    if request.method == 'POST':", "piece": "raise exc.HTTPNotFound()"}
{"function_name": "get_payload", "function_define": "    app = kw.get('app') or c.app\n    for ci in commits:\n    after = self._after(commit_ids)", "piece": "for ci in commits:"}
{"function_name": "get_mean_std", "function_define": "    img_num = len(img_list)\n    r_sum = g_sum = b_sum = 0\n    for idx, img_name in mean_pbar:", "piece": "r_sum = g_sum = b_sum = 0"}
{"function_name": "get_template", "function_define": "    for line in models_file:\n    line = line.strip().split('\\t')\n    if line[0] == model:", "piece": "line = line.strip().split('\\t')"}
{"function_name": "get_priority_fee", "function_define": "    web3 (Web3): Web3 object\n    Returns:\n    int: [description]", "piece": "Returns:"}
{"function_name": "sign_and_send_tx", "function_define": "    tx_hash = signed_tx.hash\n    except Exception:\n    tx_hash = HexBytes(0)", "piece": "except Exception:"}
{"function_name": "ser_data", "function_define": "    if ser.inWaiting() > 0:\n    data = b''\n    last_byte = b''", "piece": "data = b''"}
{"function_name": "buffer_to_file", "function_define": "    file = open(filename, 'a')\n    file.write(data)\n    file.close()", "piece": "file.write(data)"}
{"function_name": "loadWords", "function_define": "    take a while to finish.\n    line = inFile.readline()\n    wordlist = line.split()", "piece": "line = inFile.readline()"}
{"function_name": "test_page_group", "function_define": "    class TestForm(SimpleForm):\n    self.data = {'id': 1}\n    test_form = TestForm()", "piece": "self.data = {'id': 1}"}
{"function_name": "_do_request", "function_define": "    sleep_time = 4\n    for x in range(0, NUM_RETRIES):\n    response = request_func(arg)", "piece": "for x in range(0, NUM_RETRIES):"}
{"function_name": "json_or_empty", "function_define": "    response_json = ''\n    response_json = response.json()\n    except Exception:", "piece": "response_json = response.json()"}
{"function_name": "showMultiPlot", "function_define": "    print(list_images[0].shape)\n    images = []\n    for i in range(0, 50):", "piece": "images = []"}
{"function_name": "osx_app_count", "function_define": "    cursor = connection.cursor()\n    cursor.execute(query)\n    for row in cursor.fetchall():", "piece": "cursor.execute(query)"}
{"function_name": "os_version_count", "function_define": "    cursor = connection.cursor()\n    cursor.execute(query)\n    for row in cursor.fetchall():", "piece": "cursor.execute(query)"}
{"function_name": "operation", "function_define": "    for line in inf:\n    data = json.loads(line)\n    pdata = {'date': date}", "piece": "data = json.loads(line)"}
{"function_name": "isSunriseIP", "function_define": "    if a != 178:\n    if b != 39:\n    if c < 64 or c > 127:", "piece": "if b != 39:"}
{"function_name": "getFwDeniedIP", "function_define": "    deniedIp = []\n    line = line.strip()\n    deniedIp.append(ipList[0])", "piece": "line = line.strip()"}
{"function_name": "get_params", "function_define": "    th, tw = output_size\n    if w == tw and h == th:\n    i = random.randint(0, h - th)", "piece": "if w == tw and h == th:"}
{"function_name": "_pil_to_tensor", "function_define": "    if pic.mode == 'I':\n    elif pic.mode == 'I;16':\n    elif pic.mode == 'F':", "piece": "elif pic.mode == 'I;16':"}
{"function_name": "docker_run", "function_define": "    docker_run_options = []\n    docker_run_options.extend(argv)\n    sys.exit(c.returncode)", "piece": "docker_run_options.extend(argv)"}
{"function_name": "rank_groups", "function_define": "    ranked_groups = []\n    for group in outcome_groups:\n    confidence_score = 0.0", "piece": "for group in outcome_groups:"}
{"function_name": "configuration", "function_define": "    if entities:\n    intents = []\n    intent_examples = []", "piece": "intents = []"}
{"function_name": "_report_entities", "function_define": "    entity_name = entity['entity']\n    if len(dates) == 2:\n    elif name in name_to_values:", "piece": "if len(dates) == 2:"}
{"function_name": "read_cifar10", "function_define": "    examples.\n    Returns:\n    for this example.", "piece": "Returns:"}
{"function_name": "read_cifar100", "function_define": "    examples.\n    Returns:\n    for this example.", "piece": "Returns:"}
{"function_name": "extract_data", "function_define": "    for f in filenames:\n    if not tf.gfile.Exists(f):\n    labels = None", "piece": "if not tf.gfile.Exists(f):"}
{"function_name": "next_train_batch", "function_define": "    start = self.index_in_epoch\n    self.epochs_completed += 1\n    perm = np.arange(TRAIN_NUMS)", "piece": "self.epochs_completed += 1"}
{"function_name": "create_saver_dir", "function_define": "    if not os.path.exists(root):\n    os.mkdir(root)\n    except FileExistsError as e:", "piece": "os.mkdir(root)"}
{"function_name": "load_container", "function_define": "    container = DataContainer(name)\n    if best:\n    container.load(container_path)", "piece": "if best:"}
{"function_name": "save_state_dict", "function_define": "    if self.test is True:\n    if best:\n    self._save_best_state_dict()", "piece": "if best:"}
{"function_name": "save_meters", "function_define": "    if self.test:\n    for meter in meters:\n    f.write(str(meter) + '\\n')", "piece": "for meter in meters:"}
{"function_name": "save_cfg", "function_define": "    if self.test:\n    opt.dump(self.cfg_path)\n    opt.dump_pkl(self.cfg_path)", "piece": "opt.dump(self.cfg_path)"}
{"function_name": "prune_min", "function_define": "    Tree(6, [Tree(3)])\n    Tree(6, [Tree(3, [Tree(1)])])\n    if t.is_leaf():", "piece": "Tree(6, [Tree(3, [Tree(1)])])"}
{"function_name": "num_splits", "function_define": "    if length == 0:\n    if length == 1:\n    if len(s) == 0:", "piece": "if length == 1:"}
{"function_name": "test_classify", "function_define": "    query = np.atleast_2d([1, 1])\n    predictions = []\n    assert prediction == expected", "piece": "predictions = []"}
{"function_name": "test_classify2", "function_define": "    query = np.atleast_2d([1, 1])\n    predictions = []\n    assert prediction == expected", "piece": "predictions = []"}
{"function_name": "manage_gateways", "function_define": "    print(f'payload: {payload}')\n    if 'uid' not in payload:\n    if hid in gateways:", "piece": "if 'uid' not in payload:"}
{"function_name": "manage_devices", "function_define": "    app.logger.warning('yo')\n    print('ff')\n    device = request.json", "piece": "print('ff')"}
{"function_name": "chooseUsername", "function_define": "    global username\n    username = name\n    self.open_Chat()", "piece": "username = name"}
{"function_name": "seed_everything", "function_define": "    random.seed(seed)\n    np.random.seed(seed)\n    tf.random.set_seed(seed)", "piece": "np.random.seed(seed)"}
{"function_name": "create_beta_list", "function_define": "    assert policy_num > 0\n    beta_list = []\n    for i in range(policy_num):", "piece": "beta_list = []"}
{"function_name": "getTiSignal", "function_define": "    indicator.\n    Returns:\n    if len(self._ti_data.index) < 2:", "piece": "Returns:"}
{"function_name": "connectWifi", "function_define": "    global wlan\n    print('Start Wifi  NIC.')\n    wlan.active(True)", "piece": "print('Start Wifi  NIC.')"}
{"function_name": "apply_qc", "function_define": "    Parameters\n    data: pandas DataFrame\n    prefix: string", "piece": "data: pandas DataFrame"}
{"function_name": "fetch_clinical", "function_define": "    Parameters\n    test_size: float, default 0.2\n    seed: int, default 42", "piece": "test_size: float, default 0.2"}
{"function_name": "fetch_rois", "function_define": "    Parameters\n    datasetdir: string\n    metrics to fetch", "piece": "datasetdir: string"}
{"function_name": "fetch_surface", "function_define": "    Parameters\n    metrics to fetch\n    test_size: float, default 0.2", "piece": "metrics to fetch"}
{"function_name": "fetch_genetic", "function_define": "    Parameters\n    test_size: float, see defaults\n    seed: int, see default", "piece": "test_size: float, see defaults"}
{"function_name": "fetch_multiblock", "function_define": "    Parameters\n    test_size: float, default 0.2\n    seed: int, default 42", "piece": "test_size: float, default 0.2"}
{"function_name": "bmp_lst_scaled", "function_define": "    if self._ini_wx_bmp_lst is None:\n    NewW = 350\n    wx_image = wx.Image(NewW, NewW)", "piece": "NewW = 350"}
{"function_name": "_wx_img_w_cpp", "function_define": "    xmax = np_2d_tmp.shape[1]\n    ymax = np_2d_tmp.shape[0]\n    if np_2d_mask is None:", "piece": "ymax = np_2d_tmp.shape[0]"}
{"function_name": "_wx_bmp_scaled", "function_define": "    width = data_to_become_bmp[1]\n    height = data_to_become_bmp[2]\n    NewW = int(width * scale)", "piece": "height = data_to_become_bmp[2]"}
{"function_name": "iou_loss_core", "function_define": "    intersection = true * pred\n    notTrue = 1 - true\n    union = true + notTrue * pred", "piece": "notTrue = 1 - true"}
{"function_name": "do_request", "function_define": "    url = url or self.url\n    if headers:\n    self.headers.update(headers)", "piece": "if headers:"}
{"function_name": "on_base_get", "function_define": "    req_data = req.media or {}\n    if valid:\n    if resp_data:", "piece": "if valid:"}
{"function_name": "on_base_post", "function_define": "    req_data = req.media or {}\n    if valid:\n    req_data_wrap = wrap(req_data)", "piece": "if valid:"}
{"function_name": "on_base_put", "function_define": "    req_data = req.media or {}\n    if valid:\n    req_data_wrap = wrap(req_data)", "piece": "if valid:"}
{"function_name": "on_base_delete", "function_define": "    req_data = req.media or {}\n    if resp:\n    hits = search.execute()", "piece": "if resp:"}
{"function_name": "openLayerImage", "function_define": "    file (str): path/ filename\n    Returns:\n    if not exists(file):", "piece": "Returns:"}
{"function_name": "saveLayerImage", "function_define": "    fileName (str): path/ filename\n    Returns:\n    if fileExt not in functionMap:", "piece": "Returns:"}
{"function_name": "emit_next", "function_define": "    if not me.connected:\n    message = me.queue.get()\n    except Exception as e:", "piece": "message = me.queue.get()"}
{"function_name": "on_connect", "function_define": "    logger.info('connected')\n    me.sid = socketio.eio.sid\n    if publish_location:", "piece": "me.sid = socketio.eio.sid"}
{"function_name": "on_disconnect", "function_define": "    logger.info('disconnected')\n    me.sid = None\n    socketio.disconnect()", "piece": "me.sid = None"}
{"function_name": "on_schedule", "function_define": "    me.schedule.add(cmd)\n    except Exception as e:\n    feedback(failure=str(e))", "piece": "except Exception as e:"}
{"function_name": "moralize", "function_define": "    assert g.digraph\n    ret = deepcopy(g)\n    ret.digraph = False", "piece": "ret = deepcopy(g)"}
{"function_name": "get_elim_order", "function_define": "    assert not g.digraph\n    unmarked = list(range(g.N))\n    edges = g.get_edges()", "piece": "unmarked = list(range(g.N))"}
{"function_name": "chowliu_tree", "function_define": "    marginals = {}\n    for i in range(D):\n    for v in allcomb:", "piece": "for i in range(D):"}
{"function_name": "init_CPT", "function_define": "    cpt = Potential()\n    ids = [i] + parents\n    cpt.ids = ids", "piece": "ids = [i] + parents"}
{"function_name": "min_clique", "function_define": "    candidates = []\n    for i in range(G.N):\n    nids = G.V[i].ids", "piece": "for i in range(G.N):"}
{"function_name": "multiply_CPT", "function_define": "    for i in range(G.N):\n    clique = G.V[i]\n    assert ret[i].ids == clique.ids", "piece": "clique = G.V[i]"}
{"function_name": "marginalize", "function_define": "    if pt.ids == ids:\n    newp = deepcopy(pt)\n    newp.P = newp.P / np.sum(newp.P)", "piece": "newp = deepcopy(pt)"}
{"function_name": "get_message", "function_define": "    assert timestep in [-1, 0, 1]\n    ids = []\n    if timestep > 0:", "piece": "ids = []"}
{"function_name": "calculate_msg", "function_define": "    message = {}\n    g = G.todirect(0)\n    order = g.toposort(reverse=True)", "piece": "g = G.todirect(0)"}
{"function_name": "collect_msg", "function_define": "    neignbors = G.find_neighbor(r)\n    pt = npt[r]\n    for n in neignbors:", "piece": "pt = npt[r]"}
{"function_name": "get_domain", "function_define": "    n0 = self.G2.V[nids[0]]\n    D = n0.domain\n    for i in nids[1:]:", "piece": "D = n0.domain"}
{"function_name": "norm_CPT", "function_define": "    ratio = 0.001\n    X = np.sum(cpt.P)\n    addv = int(X * ratio)", "piece": "X = np.sum(cpt.P)"}
{"function_name": "check_noise", "function_define": "    noise = True\n    for label in labels.split(','):\n    if label not in NOISE_SOUNDS:", "piece": "for label in labels.split(','):"}
{"function_name": "test_hba_repr", "function_define": "    faked_hba = self.add_hba1()\n    hba_mgr = self.partition.hbas\n    repr_str = repr(hba)", "piece": "hba_mgr = self.partition.hbas"}
{"function_name": "test_hba_delete", "function_define": "    faked_hba = self.add_hba1()\n    self.add_hba2()\n    hba_mgr = self.partition.hbas", "piece": "self.add_hba2()"}
{"function_name": "parse_string", "function_define": "    compiler.reset()\n    if end < len(input):\n    error(input, end)", "piece": "if end < len(input):"}
{"function_name": "getRandomColor", "function_define": "    c1 = randint(0, 255)\n    c2 = randint(0, 255)\n    c3 = randint(0, 255)", "piece": "c2 = randint(0, 255)"}
{"function_name": "getRandomStr", "function_define": "    len_chars = len(chars) - 1\n    random_tmp = Random()\n    random_char = ''", "piece": "random_tmp = Random()"}
{"function_name": "getValidCodeImg", "function_define": "    draw = ImageDraw.Draw(image)\n    temp = []\n    for i in range(self.code_count):", "piece": "temp = []"}
{"function_name": "_StoreDtype", "function_define": "    if sys.byteorder == 'little':\n    bo = '<'\n    bo = '>'", "piece": "bo = '<'"}
{"function_name": "is_url_in_domain", "function_define": "    parsed = urlparse(url)\n    for domain in domains:\n    if domain.match(parsed.netloc):", "piece": "for domain in domains:"}
{"function_name": "fitData1", "function_define": "    xVals, yVals = getData(fileName)\n    xVals = pylab.array(xVals)\n    yVals = pylab.array(yVals)", "piece": "xVals = pylab.array(xVals)"}
{"function_name": "update_form", "function_define": "    storage = app.config['STORAGE']\n    task_id = request.args.get('id')\n    task = storage.get_task(task_id)", "piece": "task_id = request.args.get('id')"}
{"function_name": "delete_form", "function_define": "    storage = app.config['STORAGE']\n    task_id = request.args.get('id')\n    task = storage.get_task(task_id)", "piece": "task_id = request.args.get('id')"}
{"function_name": "delete_task", "function_define": "    storage = app.config['STORAGE']\n    task_id = request.args.get('id')\n    storage.delete_task(task_id)", "piece": "task_id = request.args.get('id')"}
{"function_name": "complete_form", "function_define": "    storage = app.config['STORAGE']\n    task_id = request.args.get('id')\n    task = storage.get_task(task_id)", "piece": "task_id = request.args.get('id')"}
{"function_name": "complete_task", "function_define": "    storage = app.config['STORAGE']\n    task_id = request.args.get('id')\n    storage.complete_task(task_id)", "piece": "task_id = request.args.get('id')"}
{"function_name": "store_hours", "function_define": "    day_groups = []\n    this_day_group = None\n    day_short = day.title()[:2]", "piece": "this_day_group = None"}
{"function_name": "local_do_test", "function_define": "    m.elaborate()\n    ref = m._rtlir_test_ref\n    except AttributeError:", "piece": "ref = m._rtlir_test_ref"}
{"function_name": "multiplyFreeHand", "function_define": "    config = ConfigParser()\n    configFile = str(inifile)\n    config.read(configFile)", "piece": "configFile = str(inifile)"}
{"function_name": "pretrain_forward", "function_define": "    x = x.unsqueeze(1)\n    a0 = F.relu(self.layer1(x))\n    a0 = a0.reshape(a0.size(0), -1)", "piece": "a0 = F.relu(self.layer1(x))"}
{"function_name": "pretrain_model", "function_define": "    mse = []\n    total_loss = 0\n    self.train()", "piece": "total_loss = 0"}
{"function_name": "plot_mse", "function_define": "    plt.figure()\n    plt.xlabel('epoch')\n    plt.ylabel('loss')", "piece": "plt.xlabel('epoch')"}
{"function_name": "levelOrder", "function_define": "    if not root:\n    if not root:\n    if k >= len(self.res):", "piece": "if not root:"}
{"function_name": "obs_space", "function_define": "    if self.observe_ball:\n    obs_lo.extend([-3.0, -3.0])\n    obs_up.extend([3.0, 3.0])", "piece": "obs_lo.extend([-3.0, -3.0])"}
{"function_name": "_mujoco_step", "function_define": "    if self._num_dof == 4:\n    elif self._num_dof == 7:\n    self.sim.step()", "piece": "elif self._num_dof == 7:"}
{"function_name": "cmd_config", "function_define": "    if len(args) != 2:\n    key = args[0]\n    val = args[1]", "piece": "key = args[0]"}
{"function_name": "location", "function_define": "    lat = str(Latitude)\n    long = str(Longitude)\n    print(lat + long)", "piece": "long = str(Longitude)"}
{"function_name": "calc_psroi_pool", "function_define": "    Psroi_pool implemented by Numpy.\n    x: 4-D as (N, C, H, W),\n    batch_id = 0", "piece": "x: 4-D as (N, C, H, W),"}
{"function_name": "init_test_case", "function_define": "    self.batch_size = 3\n    self.channels = 3 * 2 * 2\n    self.height = 6", "piece": "self.channels = 3 * 2 * 2"}
{"function_name": "make_rois", "function_define": "    rois = []\n    self.rois_lod = [[]]\n    self.rois_lod[0].append(bno + 1)", "piece": "self.rois_lod = [[]]"}
{"function_name": "test_output_size", "function_define": "    paddle.disable_static()\n    places = ['cpu']\n    places.append('gpu')", "piece": "places = ['cpu']"}
{"function_name": "test_read_rdb", "function_define": "    from vera import RV\n    here = dirname(__file__)\n    print(s)", "piece": "here = dirname(__file__)"}
{"function_name": "test_DACE", "function_define": "    from vera import DACE\n    s = DACE.HD10180\n    print(s)", "piece": "s = DACE.HD10180"}
{"function_name": "test_KOBE", "function_define": "    from vera import KOBE\n    cap = capsys.readouterr()\n    s = KOBE.KOBE_001", "piece": "cap = capsys.readouterr()"}
{"function_name": "test_plot", "function_define": "    import matplotlib.pyplot as plt\n    from vera import DACE\n    s = DACE.HD10180", "piece": "from vera import DACE"}
{"function_name": "handle_postcode", "function_define": "    except ParseError as ex:\n    except ValidationError as ex:\n    except Exception as ex:", "piece": "except ValidationError as ex:"}
{"function_name": "get_node_info", "function_define": "    nodes = set()\n    for nodeinfo in df:\n    size = int(nodeinfo[1][:-1])", "piece": "for nodeinfo in df:"}
{"function_name": "get_pair_count", "function_define": "    pair_count = 0\n    for a in nodes:\n    ax, ay, _, au = a", "piece": "for a in nodes:"}
{"function_name": "find_empty", "function_define": "    for y in range(len(grid)):\n    for x in range(len(grid[0])):\n    if grid[y][x] == '0':", "piece": "for x in range(len(grid[0])):"}
{"function_name": "find_data", "function_define": "    for y in range(len(grid)):\n    for x in range(len(grid[0])):\n    if grid[y][x] == 'D':", "piece": "for x in range(len(grid[0])):"}
{"function_name": "addPizzaToCart", "function_define": "    global driver\n    sleep(5)\n    driver.switch_to.frame('iframe')", "piece": "sleep(5)"}
{"function_name": "reconstructPath", "function_define": "    path = [node]\n    while node.parent is not None:\n    path.append(node)", "piece": "while node.parent is not None:"}
{"function_name": "LoadData", "function_define": "    x.resize(x.shape[0] // dim, dim)\n    lbl.reshape(lbl.shape[0], 1)\n    if not quiet:", "piece": "lbl.reshape(lbl.shape[0], 1)"}
{"function_name": "TestCorpus", "function_define": "    correct = 0\n    total = 0\n    self.mlp.train(mode=False)", "piece": "total = 0"}
{"function_name": "_serialize", "function_define": "    serializes the given value.\n    the row index of each result.\n    used to create computed columns.", "piece": "the row index of each result."}
{"function_name": "check_line", "function_define": "    self.conditional += 1\n    self.conditional -= 1\n    if self.conditional > 0:", "piece": "self.conditional -= 1"}
{"function_name": "test_all_classic", "function_define": "    global_var.fields = ['udp.port']\n    exp = ['udp.port == 25']\n    self.assertEqual(result, True)", "piece": "exp = ['udp.port == 25']"}
{"function_name": "test_all_foreach", "function_define": "    global_var.fields = ['FOREACH']\n    exp = ['FOREACH == 25']\n    self.assertEqual(result, True)", "piece": "exp = ['FOREACH == 25']"}
{"function_name": "get_random_locs", "function_define": "    c = 2 * math.pi * b\n    x = r * math.cos(c)\n    y = r * math.sin(c)", "piece": "x = r * math.cos(c)"}
{"function_name": "test_thumbnails", "function_define": "    import sys\n    import os\n    from models.media import Episode", "piece": "import os"}
{"function_name": "predict_test", "function_define": "    data_size = 'full'\n    neural_net = CNN()\n    en = Ensemble()", "piece": "neural_net = CNN()"}
{"function_name": "generate_image", "function_define": "    if use_cuda:\n    with torch.no_grad():\n    samples = netG(noisev)", "piece": "with torch.no_grad():"}
{"function_name": "inf_train_gen", "function_define": "    while True:\n    for images in train_gen():\n    yield images", "piece": "for images in train_gen():"}
{"function_name": "persistent_cache", "function_define": "    if path is None:\n    yield ScheduleCache()\n    if isinstance(path, str):", "piece": "yield ScheduleCache()"}
{"function_name": "unpublish", "function_define": "    raise PermissionDenied\n    if request.method == 'POST':\n    result = fn(request, page)", "piece": "if request.method == 'POST':"}
{"function_name": "spammables", "function_define": "    flaggables = []\n    for model in apps.get_models():\n    except FieldDoesNotExist:", "piece": "for model in apps.get_models():"}
{"function_name": "check_error", "function_define": "    method()\n    except Exception as e:\n    self.actual_exception = e", "piece": "except Exception as e:"}
{"function_name": "center_around", "function_define": "    computed.\n    Parameters\n    coords : arraylike", "piece": "Parameters"}
{"function_name": "center_complex", "function_define": "    Parameters\n    coords : arraylike\n    transforming.", "piece": "coords : arraylike"}
{"function_name": "info_gain", "function_define": "    provided feature.\n    Parameters:\n    Keyword Args:", "piece": "Parameters:"}
{"function_name": "bind_new", "function_define": "    if self.is_class_scope:\n    self.class_id += 1\n    i = self.class_id", "piece": "self.class_id += 1"}
{"function_name": "get_binding", "function_define": "    assert fullname is not None\n    if fullname in self.scope:\n    elif self.parent is not None:", "piece": "if fullname in self.scope:"}
{"function_name": "retry_download", "function_define": "    data = [d for d in data]\n    if data:\n    x = torch.tensor(x)", "piece": "if data:"}
{"function_name": "gifimager", "function_define": "    newgif = []\n    for frame in frames:\n    img = frame.load()", "piece": "for frame in frames:"}
{"function_name": "start_screen", "function_define": "    while self.in_start:\n    for ev in pygame.event.get():\n    if ev == pygame.QUIT:", "piece": "for ev in pygame.event.get():"}
{"function_name": "add_tower", "function_define": "    x, y = pygame.mouse.get_pos()\n    self.moving_object = obj\n    obj.moving = True", "piece": "self.moving_object = obj"}
{"function_name": "enemy_wave", "function_define": "    if sum(self.curr_wave) == 0:\n    if len(self.enemies) == 0:\n    self.wave += 1", "piece": "if len(self.enemies) == 0:"}
{"function_name": "lose_screen", "function_define": "    while self.lose:\n    for ev in pygame.event.get():\n    if ev.type == pygame.QUIT:", "piece": "for ev in pygame.event.get():"}
{"function_name": "win_screen", "function_define": "    while self.win:\n    for ev in pygame.event.get():\n    if ev.type == pygame.QUIT:", "piece": "for ev in pygame.event.get():"}
{"function_name": "liftAllOf", "function_define": "    for sch in schemas:\n    schs2 = toAllOfList(sch)\n    for s in schs2:", "piece": "schs2 = toAllOfList(sch)"}
{"function_name": "liftAnyOf", "function_define": "    for sch in schemas:\n    schs2 = toAnyOfList(sch)\n    for s in schs2:", "piece": "schs2 = toAnyOfList(sch)"}
{"function_name": "enumValues", "function_define": "    ret = list()\n    for e in es:\n    ret.append(e)", "piece": "for e in es:"}
{"function_name": "simplifyAll", "function_define": "    s_all: List[Schema] = schemas\n    s_any: List[List[Schema]] = []\n    s_one: List[Schema] = []", "piece": "s_any: List[List[Schema]] = []"}
{"function_name": "simplifyAny", "function_define": "    s_any = schema\n    s_other: List[Schema] = []\n    while s_any:", "piece": "s_other: List[Schema] = []"}
{"function_name": "simplifyNot_", "function_define": "    if 'not' in schema:\n    elif 'anyOf' in schema:\n    anys = schema['anyOf']", "piece": "elif 'anyOf' in schema:"}
{"function_name": "get_sample", "function_define": "    that allows sampling repeatedly\n    Returns:\n    if transform_type is not None:", "piece": "Returns:"}
{"function_name": "close_connection", "function_define": "    Closes the connection to the db.\n    if db is not None:\n    db.close()", "piece": "if db is not None:"}
{"function_name": "check_authorized", "function_define": "    if auth is None:\n    raise web.webapi.unauthorized()\n    raise web.webapi.unauthorized()", "piece": "raise web.webapi.unauthorized()"}
{"function_name": "find_handler", "function_define": "    for p in plugin_manager.plugins:\n    if p.name == name:\n    func = p.data.get('httpev')", "piece": "if p.name == name:"}
{"function_name": "send_get", "function_define": "    if path == '':\n    path = '/'\n    self.sendall('Accept: */*\\r\\n')", "piece": "path = '/'"}
{"function_name": "send_post_header", "function_define": "    self.sendall('Accept: */*\\r\\n')\n    self.sendall('DNT: 1\\r\\n')\n    self.sendall('\\r\\n')", "piece": "self.sendall('DNT: 1\\r\\n')"}
{"function_name": "draw_detections", "function_define": "    if score < THRES_SCORE:\n    color = label_color(label)\n    b = box.astype(int)", "piece": "color = label_color(label)"}
{"function_name": "calzetti", "function_define": "    npts = len(wave)\n    wave = wave / 10000.0\n    MIN_WAVE = 0.12", "piece": "wave = wave / 10000.0"}
{"function_name": "HandleInterrupt", "function_define": "    del signal_number, frame\n    log.err.Print(message)\n    except NameError:", "piece": "log.err.Print(message)"}
{"function_name": "edit_profile", "function_define": "    form.populate_obj(current_user)\n    print(request.files)\n    if 'photo' in request.files:", "piece": "print(request.files)"}
{"function_name": "change_password", "function_define": "    db.session.add(current_user)\n    db.session.commit()\n    flash('Invalid password.')", "piece": "db.session.commit()"}
{"function_name": "admin_center", "function_define": "    TOP_X_MAX = 5\n    top_x_lengths = []\n    if top_x_games:", "piece": "top_x_lengths = []"}
{"function_name": "edit_order", "function_define": "    form.populate_obj(order)\n    db.session.add(order)\n    db.session.commit()", "piece": "db.session.add(order)"}
{"function_name": "refund_process", "function_define": "    if refund.status != 'pending':\n    abort(404)\n    form.populate_obj(refund)", "piece": "abort(404)"}
{"function_name": "edit_user", "function_define": "    user = User.query.get_or_404(id)\n    form.populate_obj(user)\n    db.session.add(user)", "piece": "form.populate_obj(user)"}
{"function_name": "add_new_game", "function_define": "    game = Game()\n    game.title = form.title.data\n    game.price = form.price.data", "piece": "game.title = form.title.data"}
{"function_name": "edit_game", "function_define": "    game = Game.query.get_or_404(id)\n    game.title = form.title.data\n    game.price = form.price.data", "piece": "game.title = form.title.data"}
{"function_name": "enable_game", "function_define": "    game = Game.query.get_or_404(id)\n    game.enabled = True\n    db.session.add(game)", "piece": "game.enabled = True"}
{"function_name": "disable_game", "function_define": "    game = Game.query.get_or_404(id)\n    game.enabled = False\n    db.session.add(game)", "piece": "game.enabled = False"}
{"function_name": "recommend_add", "function_define": "    game = Game.query.get_or_404(id)\n    game.is_recommended = True\n    db.session.add(game)", "piece": "game.is_recommended = True"}
{"function_name": "recommend_remove", "function_define": "    game = Game.query.get_or_404(id)\n    game.is_recommended = False\n    db.session.add(game)", "piece": "game.is_recommended = False"}
{"function_name": "editor_pick_add", "function_define": "    game = Game.query.get_or_404(id)\n    game.is_editor_picked = True\n    db.session.add(game)", "piece": "game.is_editor_picked = True"}
{"function_name": "add_game_image", "function_define": "    game = Game.query.get_or_404(id)\n    if 'photo' in request.files:\n    file = request.files['photo']", "piece": "if 'photo' in request.files:"}
{"function_name": "tokenize_data", "function_define": "    max_forward_asp_query_length = 0\n    max_forward_opi_query_length = 0\n    max_sentiment_query_length = 0", "piece": "max_forward_opi_query_length = 0"}
{"function_name": "minDepth", "function_define": "    if not root:\n    min_depth = 10 ** 9\n    if root.left:", "piece": "min_depth = 10 ** 9"}
{"function_name": "cleanupFilename", "function_define": "    the file system.\n    fname = fname.replace(' ', '_')\n    fname = fname.replace('/', '_')", "piece": "fname = fname.replace(' ', '_')"}
{"function_name": "mergeDicts", "function_define": "    r.update(d1)\n    for key in d2:\n    value = d2[key]", "piece": "for key in d2:"}
{"function_name": "resolveDefaults", "function_define": "    What this funtion will do is:\n    returned.\n    in which they are resolved.", "piece": "returned."}
{"function_name": "stylePath", "function_define": "    result = []\n    if envvar.startswith('$'):\n    envvar = envvar[1:]", "piece": "if envvar.startswith('$'):"}
{"function_name": "ChangeStatus", "function_define": "    global SuccessCounter\n    global ErrorCounter\n    session = requests.Session()", "piece": "global ErrorCounter"}
{"function_name": "scdn_multi_sub", "function_define": "    scdn analysis main function\n    Parameters\n    for each folder_name", "piece": "Parameters"}
{"function_name": "test_save_data", "function_define": "    stock.data['aset', 1] = arr\n    stock.commit('added data')\n    del stock", "piece": "stock.commit('added data')"}
{"function_name": "gen_Ybus", "function_define": "    Fast calculation of Ybus\n    r_nb = range(nb)\n    Yp = zeros(nb + 1, dtype=int64)", "piece": "r_nb = range(nb)"}
{"function_name": "makeYbus", "function_define": "    conversions to p.u.\n    nb = bus.shape[0]\n    nl = branch.shape[0]", "piece": "nb = bus.shape[0]"}
{"function_name": "get_total", "function_define": "    range_min: Range = Range()\n    range_min.offset = 0\n    range_min.limit = 1", "piece": "range_min.offset = 0"}
{"function_name": "get_record", "function_define": "    if record.id is not None:\n    raise ConnectionError\n    findedRecord: Dict = None", "piece": "raise ConnectionError"}
{"function_name": "setupFitnessTest", "function_define": "    n = n + 1\n    self.currentInput = n\n    interpreter.pushFloat(n)", "piece": "self.currentInput = n"}
{"function_name": "main_estimator", "function_define": "    if options.debug:\n    print('Options:')\n    pprint.pprint(options)", "piece": "print('Options:')"}
{"function_name": "question", "function_define": "    if request.method == 'GET':\n    q.increase_views()\n    context = {'question': q}", "piece": "q.increase_views()"}
{"function_name": "ask_question", "function_define": "    if request.method == 'GET':\n    context = {'makey': m}\n    elif request.method == 'POST':", "piece": "context = {'makey': m}"}
{"function_name": "add_comment", "function_define": "    if request.method == 'POST':\n    form = CommentForm(request.POST)\n    if form.is_valid():", "piece": "form = CommentForm(request.POST)"}
{"function_name": "maxDepth", "function_define": "    if not root:\n    que = deque()\n    que.append(root)", "piece": "que = deque()"}
{"function_name": "sshLogin", "function_define": "    deviceType = 'autodetect'\n    print('\u6b63\u5728\u5c1d\u8bd5\u8fde\u63a5\u7b2c\u4e00\u53f0\u4e3b\u673a\uff0c\u8bf7\u7a0d\u5019\u2026\u2026')\n    guesser = SSHDetect(**device)", "piece": "print('\u6b63\u5728\u5c1d\u8bd5\u8fde\u63a5\u7b2c\u4e00\u53f0\u4e3b\u673a\uff0c\u8bf7\u7a0d\u5019\u2026\u2026')"}
{"function_name": "sort_to_csv", "function_define": "    print('\u5f00\u59cb\u5c06cache\u8f6c\u4e3acsv')\n    makeDir('./cache/')\n    makeDir('./csv/')", "piece": "makeDir('./cache/')"}
{"function_name": "csv_to_xlsx_pd", "function_define": "    print('\u5f00\u59cb\u5c06csv\u8f6c\u4e3aexcel')\n    makeDir('./excel/')\n    makeDir('./csv/')", "piece": "makeDir('./excel/')"}
{"function_name": "conv_bn_relu", "function_define": "    if normalizer_fn is not None:\n    if activation_fn is not None:\n    net = activation_fn(net)", "piece": "if activation_fn is not None:"}
{"function_name": "resBlock", "function_define": "    shortcut = x\n    if self.pre_act:\n    if self.pre_act:", "piece": "if self.pre_act:"}
{"function_name": "backbone", "function_define": "    end_points = OrderedDict()\n    if self.data_format == 'NCHW':\n    with tf.variable_scope('conv1'):", "piece": "if self.data_format == 'NCHW':"}
{"function_name": "loss_function", "function_define": "    losses = []\n    losses_name = []\n    others = {}", "piece": "losses_name = []"}
{"function_name": "pretrained_param", "function_define": "    pretrained_param = []\n    for v in param:\n    if self.name in v.name:", "piece": "for v in param:"}
{"function_name": "testFormatTag", "function_define": "    event_tag = events.EventTag()\n    event_tag.AddLabel('one')\n    event_tag.AddLabel('two')", "piece": "event_tag.AddLabel('one')"}
{"function_name": "testHeader", "function_define": "    output_module.WriteHeader()\n    output_module.WriteHeader()\n    output_module.WriteHeader()", "piece": "output_module.WriteHeader()"}
{"function_name": "start_color", "function_define": "    global color_on\n    colorama.init()\n    color_on = True", "piece": "colorama.init()"}
{"function_name": "on_color", "function_define": "    s = _convert_to_string(string)\n    if start_color():\n    color = _remap_color(color)", "piece": "if start_color():"}
{"function_name": "get_input", "function_define": "    import readline\n    except ImportError:\n    if not result:", "piece": "except ImportError:"}
{"function_name": "prompt_for_cname", "function_define": "    while True:\n    echo('Enter DNS CNAME prefix')\n    if default:", "piece": "echo('Enter DNS CNAME prefix')"}
{"function_name": "option_price", "function_define": "    volatility to expiry.\n    dimensionless.\n    Returns:", "piece": "dimensionless."}
{"function_name": "binary_price", "function_define": "    strike price at expiry.\n    volatility to expiry.\n    dimensionless.", "piece": "volatility to expiry."}
{"function_name": "cutImage", "function_define": "    image = cv2.imread(image_name)\n    part_1 = image[:, 1650:2550, :]\n    part_2 = image[:, 3950:4250, :]", "piece": "part_1 = image[:, 1650:2550, :]"}
{"function_name": "side_effect", "function_define": "    retval = {}\n    for i in inlist:\n    retval[i.name] = i.message", "piece": "for i in inlist:"}
{"function_name": "lookupArtist", "function_define": "    artist = None\n    rq = request.Request(url=url)\n    with request.urlopen(rq) as f:", "piece": "rq = request.Request(url=url)"}
{"function_name": "searchForRelease", "function_define": "    if not artist.iTunesId:\n    rq = request.Request(url=url)\n    releases = []", "piece": "rq = request.Request(url=url)"}
{"function_name": "generate_window", "function_define": "    dataset_seq = []\n    size = len(dataset)\n    x_arr = []", "piece": "size = len(dataset)"}
{"function_name": "print_file_list", "function_define": "    version_line_list = []\n    for file in file_list:\n    for i in range(len(file_list)):", "piece": "for file in file_list:"}
{"function_name": "handle_action", "function_define": "    Main action handler\n    response = None\n    if action_type == 'ESCAPE':", "piece": "response = None"}
{"function_name": "add_objects", "function_define": "    if num != 0:\n    for x in range(num):\n    self.create_all_objects()", "piece": "for x in range(num):"}
{"function_name": "add_network", "function_define": "    start_state = self.state.name\n    if start_state != 'Normal':\n    self.transition_state('normal')", "piece": "if start_state != 'Normal':"}
{"function_name": "collate_tokens", "function_define": "    size = max_target_value\n    if src.numel() > dst.numel():\n    clip_src = src[:dst.numel() - 1]", "piece": "if src.numel() > dst.numel():"}
{"function_name": "ordered_indices", "function_define": "    on this order.\"\"\"\n    if self.shuffle:\n    order = [np.arange(len(self))]", "piece": "if self.shuffle:"}
{"function_name": "copy_tensor", "function_define": "    if src.numel() > dst.numel():\n    clip_src = src[:dst.numel() - 1]\n    if move_eos_to_beginning:", "piece": "clip_src = src[:dst.numel() - 1]"}
{"function_name": "create_midi_file", "function_define": "    magnitudeMin = min(deviations)\n    magnitudeMax = max(deviations)\n    note_list = []", "piece": "magnitudeMax = max(deviations)"}
{"function_name": "part2_cleaner", "function_define": "    for s in range(len(seq)):\n    current_sum = 0\n    current_min = float('inf')", "piece": "current_sum = 0"}
{"function_name": "save_log", "function_define": "    df = pd.DataFrame(loglist)\n    if use_orth_loss:\n    elif use_confusion:", "piece": "if use_orth_loss:"}
{"function_name": "_trainer_v1", "function_define": "    net.train()\n    total_loss = 0\n    gra_loss = 0", "piece": "total_loss = 0"}
{"function_name": "_tester_v1", "function_define": "    net.eval()\n    total_loss = 0\n    gra_loss = 0", "piece": "total_loss = 0"}
{"function_name": "save_preds", "function_define": "    df = pd.DataFrame(df)\n    df.to_csv(name + 'gra_pred.csv')\n    df = pd.DataFrame(df)", "piece": "df.to_csv(name + 'gra_pred.csv')"}
{"function_name": "train_model_v2_1", "function_define": "    net = net.cuda()\n    if reference_labels is None:\n    if len(loss_w) == 3:", "piece": "if reference_labels is None:"}
{"function_name": "test_model_v1", "function_define": "    net = net.cuda()\n    if trainloader is not None:\n    print('train data')", "piece": "if trainloader is not None:"}
{"function_name": "lossfunc", "function_define": "    total_loss = 0\n    losses = []\n    for i in range(len(loss_funcs)):", "piece": "losses = []"}
{"function_name": "display_auto", "function_define": "    are 'js', 'css', and 'html'\n    if file_type is None:\n    elif 'js' in file_type.lower():", "piece": "if file_type is None:"}
{"function_name": "smooth_mask2d", "function_define": "    debug('generating arena mask')\n    l, r, b, t = extent\n    w, h = (r - l, t - b)", "piece": "l, r, b, t = extent"}
{"function_name": "_get_dataset", "function_define": "    pts = np.atleast_2d((X, Y))\n    if pts.shape[0] == 2:\n    pts = pts.T", "piece": "if pts.shape[0] == 2:"}
{"function_name": "_reshape_grid", "function_define": "    m = self.arena_mask.flatten()\n    grid = np.zeros(m.size)\n    grid[m] = self.mask_value", "piece": "grid = np.zeros(m.size)"}
{"function_name": "test_cooler_cost", "function_define": "    p_loss_1 = 100.0\n    p_loss_2 = 1000.0\n    c1 = cooler_cost(p_loss_1)", "piece": "p_loss_2 = 1000.0"}
{"function_name": "upload_files", "function_define": "    success = True\n    data_file = futures[future]\n    future.result()", "piece": "data_file = futures[future]"}
{"function_name": "update_saver", "function_define": "    all_invalid = True\n    all_invalid = False\n    config = config_list[i].copy()", "piece": "all_invalid = False"}
{"function_name": "format_id", "function_define": "    if string == 'anchor':\n    elif 'anchor' in string:\n    suffix = '_' if string else ''", "piece": "elif 'anchor' in string:"}
{"function_name": "commit_edges", "function_define": "    query = 'MATCH '\n    query += str(node) + ','\n    if query[-1] is ',':", "piece": "query += str(node) + ','"}
{"function_name": "flush_edges", "function_define": "    self.commit_edges()\n    self.nodes = {}\n    self.edges = []", "piece": "self.nodes = {}"}
{"function_name": "test_lincomb_op", "function_define": "    p1 = MonomOperator(1)\n    p2 = MonomOperator(2)\n    p12 = p1 + p2", "piece": "p2 = MonomOperator(2)"}
{"function_name": "test_apply", "function_define": "    V = op.apply(U, mu=mu)\n    assert V in op.range\n    assert len(V) == len(U)", "piece": "assert V in op.range"}
{"function_name": "test_apply2", "function_define": "    for U_ind in valid_inds(U):\n    for V_ind in valid_inds(V):\n    assert np.allclose(M, M2)", "piece": "for V_ind in valid_inds(V):"}
{"function_name": "test_projected_2", "function_define": "    op_U = op.projected(U, None)\n    op_V = op.projected(None, V)\n    op_U_V = op_U.projected(None, V)", "piece": "op_V = op.projected(None, V)"}
{"function_name": "test_jacobian", "function_define": "    j = op.jacobian(U, mu=mu)\n    except NotImplementedError:\n    assert j.linear", "piece": "except NotImplementedError:"}
{"function_name": "test_assemble", "function_define": "    aop = op.assemble(mu=mu)\n    assert op.source == aop.source\n    assert op.range == aop.range", "piece": "assert op.source == aop.source"}
{"function_name": "set_password", "function_define": "    self.auth_code = None\n    self.auth_code_date = None\n    self.save()", "piece": "self.auth_code_date = None"}
{"function_name": "add_ssh_key", "function_define": "    ssh = self.validate_key(key)\n    if self.check_key_exist(key):\n    self.save()", "piece": "if self.check_key_exist(key):"}
{"function_name": "_generate_ddl", "function_define": "    files = list([])\n    if directives:\n    files.append(directives)", "piece": "if directives:"}
{"function_name": "_generate_common", "function_define": "    of files that were generated.\n    if entry.desc == obj_type:\n    self.included.add(entry.dump_id)", "piece": "if entry.desc == obj_type:"}
{"function_name": "_generate_files", "function_define": "    files = []\n    for dump_id, obj in ddl.items():\n    if path.exists(file_path):", "piece": "for dump_id, obj in ddl.items():"}
{"function_name": "connect_peer", "function_define": "    logger.info(r)\n    except Exception as e:\n    logger.error(e)", "piece": "except Exception as e:"}
{"function_name": "insertRows", "function_define": "    success = False\n    for row in range(rows):\n    childNode = ElementNode(element)", "piece": "for row in range(rows):"}
{"function_name": "addAttribute", "function_define": "    node = self.getNode(index)\n    node.addAttribute(key, value)\n    self.endInsertRows()", "piece": "node.addAttribute(key, value)"}
{"function_name": "removeAttribute", "function_define": "    node = self.getNode(index)\n    children = node.children\n    node.removeAttribute(key)", "piece": "children = node.children"}
{"function_name": "addChildElement", "function_define": "    node = self.getNode(index)\n    node.addChildElement()\n    self.endInsertRows()", "piece": "node.addChildElement()"}
{"function_name": "addParentElement", "function_define": "    node = self.getNode(index)\n    parentindex = self.parent(index)\n    parentnode = node.parent()", "piece": "parentindex = self.parent(index)"}
{"function_name": "removeElement", "function_define": "    node = self.getNode(index)\n    row = node.row()\n    elementrow = node.elementRow()", "piece": "row = node.row()"}
{"function_name": "deleteElement", "function_define": "    node = self.getNode(index)\n    parentindex = self.parent(index)\n    parent = node.parent()", "piece": "parentindex = self.parent(index)"}
{"function_name": "test_ln_gcc_O2", "function_define": "    r.symbolize()\n    r.remove_unnecessary_stuff()\n    if is_linux_x64():", "piece": "r.remove_unnecessary_stuff()"}
{"function_name": "test_ex_gpp", "function_define": "    r.symbolize()\n    r.remove_unnecessary_stuff()\n    if is_linux_x64():", "piece": "r.remove_unnecessary_stuff()"}
{"function_name": "test_df_gcc_O1", "function_define": "    r.symbolize()\n    r.remove_unnecessary_stuff()\n    if is_linux_x64():", "piece": "r.remove_unnecessary_stuff()"}
{"function_name": "test_dir_gcc_O0", "function_define": "    r.symbolize()\n    r.remove_unnecessary_stuff()\n    if is_linux_x64():", "piece": "r.remove_unnecessary_stuff()"}
{"function_name": "_resolve_path", "function_define": "    if fpath:\n    if is_exec(command):\n    for resolve_dir in resolve_dirs:", "piece": "if is_exec(command):"}
{"function_name": "call_in_dir", "function_define": "    original_dir = os.getcwd()\n    os.chdir(working_dir)\n    call(command, args)", "piece": "os.chdir(working_dir)"}
{"function_name": "getShows", "function_define": "    if r.status_code in [404, 301]:\n    continue\n    title = page.title.text", "piece": "continue"}
{"function_name": "saveShow", "function_define": "    info = {}\n    info['show'] = show\n    info['timestamp'] = timestamp", "piece": "info['show'] = show"}
{"function_name": "writeMetadata", "function_define": "    if subtitles:\n    f.write(subtitles)\n    process.wait()", "piece": "f.write(subtitles)"}
{"function_name": "saveToDB", "function_define": "    except sqlite3.Error as e:\n    presenterID = None\n    except sqlite3.Error as e:", "piece": "presenterID = None"}
{"function_name": "idOrInsert", "function_define": "    r = db.execute(cmd).fetchone()\n    if not r:\n    db.execute(insert, (data,))", "piece": "if not r:"}
{"function_name": "backupDB", "function_define": "    timestamp = int(time.time())\n    os.makedirs(backupDir)\n    except OSError:", "piece": "os.makedirs(backupDir)"}
{"function_name": "createDB", "function_define": "    dbCon = connectDB(path)\n    db = dbCon.cursor()\n    db.execute(videoCmd)", "piece": "db = dbCon.cursor()"}
{"function_name": "GetDateRange", "function_define": "    table\uff1a\u8f7d\u5165\u7684\u914d\u8bfe\u8868\u6570\u636e\n    rows = table.nrows\n    while True:", "piece": "rows = table.nrows"}
{"function_name": "GetConstraint", "function_define": "    DeptType = ['\u5317\u7f8e\u9879\u76ee\u90e8', '\u82f1\u8054\u90a6\u9879\u76ee\u90e8']\n    while True:\n    while True:", "piece": "while True:"}
{"function_name": "isinClassType", "function_define": "    Classprogram: \u8bfe\u7a0b\u9879\u76ee\u540d(str)\n    CurrentClass: \u5f53\u524d\u8bfe\u7a0b\u540d(str)\n    Capacity: \u73ed\u7ea7\u5bb9\u91cf(str)", "piece": "CurrentClass: \u5f53\u524d\u8bfe\u7a0b\u540d(str)"}
{"function_name": "CheckConstraint", "function_define": "    curdep: \u5f53\u524d\u90e8\u95e8\n    curcls: \u5f53\u524d\u8bfe\u7a0b\n    capacity: \u73ed\u7ea7\u5bb9\u91cf", "piece": "curcls: \u5f53\u524d\u8bfe\u7a0b"}
{"function_name": "TableFilter", "function_define": "    table: \u8f7d\u5165\u7684excel table\n    totalclsn: \u603b\u5f00\u73ed\u6570\u76ee\n    totaltn: \u603b\u53c2\u4e0e\u6559\u5e08\u6570\u76ee", "piece": "totalclsn: \u603b\u5f00\u73ed\u6570\u76ee"}
{"function_name": "GetDateRange4NTP", "function_define": "    sche_table: \u914d\u8bfe\u8868table\n    rows = sche_table.nrows\n    for i in range(2, rows - 1):", "piece": "rows = sche_table.nrows"}
{"function_name": "NumofTneeded", "function_define": "    availableT(list): \u53ef\u7528\u6559\u5e08\u7684\u4ea7\u80fd\u5217\u8868\n    gap(float): \u7531\u4e0d\u53ef\u7528\u6559\u5e08\u4ea7\u751f\u7684\u4ea7\u80fd\u7f3a\u53e3\n    estimean(float): \u65b0\u6559\u5e08\u7684\u9884\u4f30\u4ea7\u80fd", "piece": "gap(float): \u7531\u4e0d\u53ef\u7528\u6559\u5e08\u4ea7\u751f\u7684\u4ea7\u80fd\u7f3a\u53e3"}
{"function_name": "FindZombie", "function_define": "    availableT: \u53ef\u7528\u6559\u5e08\u4ea7\u80fd\u5217\u8868\n    estimean: \u65b0\u6559\u5e08\u5e73\u5747\u4ea7\u80fd\n    n = len(availableT)", "piece": "estimean: \u65b0\u6559\u5e08\u5e73\u5747\u4ea7\u80fd"}
{"function_name": "CalcuNum", "function_define": "    while True:\n    while True:\n    while True:", "piece": "while True:"}
{"function_name": "_update_statuses", "function_define": "    if not self.local_games_called:\n    if prev is None:\n    if refr.playable:", "piece": "if prev is None:"}
{"function_name": "term_setup", "function_define": "    defaulted.\n    if not 'coeff' in self.term:\n    self.term['coeff'] = 1.0", "piece": "if not 'coeff' in self.term:"}
{"function_name": "op_setup", "function_define": "    if 'modes' in self.term:\n    modes = self.term['modes']\n    ops = self.term['ops']", "piece": "modes = self.term['modes']"}
{"function_name": "get_oauth_data", "function_define": "    if 'expires_in' in payload:\n    if 'refresh_token' in payload:\n    if 'token_type' in payload:", "piece": "if 'refresh_token' in payload:"}
{"function_name": "refresh_identity", "function_define": "    if not refresh_token:\n    body = safe_urlread(req)\n    payload = json.loads(body)", "piece": "body = safe_urlread(req)"}
{"function_name": "get_captures", "function_define": "    args_dict = {}\n    for k, v in d.items():\n    args_dict[k] = v", "piece": "for k, v in d.items():"}
{"function_name": "synth_batches", "function_define": "    rng = npr.RandomState(0)\n    while True:\n    yield (images, onehot_labels)", "piece": "while True:"}
{"function_name": "test_events", "function_define": "    for event_code in events:\n    proto_write.send(event)\n    out_event = proto_read.recv()", "piece": "proto_write.send(event)"}
{"function_name": "test_commands", "function_define": "    for command_code in commands:\n    proto_write.send(command)\n    out_command = proto_read.recv()", "piece": "proto_write.send(command)"}
{"function_name": "test_resonses", "function_define": "    for response in responses:\n    proto_write.send(response)\n    out_response = proto_read.recv()", "piece": "proto_write.send(response)"}
{"function_name": "mktensor", "function_define": "    torch tensor.\n    Returns:\n    requires_grad containing data", "piece": "Returns:"}
{"function_name": "annotate", "function_define": "    are supplied to the callable.\n    Parameters\n    Examples", "piece": "Parameters"}
{"function_name": "visualize", "function_define": "    Parameters\n    filename : str or None, optional\n    with dot using only pipes.", "piece": "filename : str or None, optional"}
{"function_name": "register_pandas", "function_define": "    import pandas as pd\n    values = ind.array\n    codes = ind.codes", "piece": "values = ind.array"}
{"function_name": "register_numpy", "function_define": "    import numpy as np\n    if not x.shape:\n    if hasattr(x.base, 'ctypes'):", "piece": "if not x.shape:"}
{"function_name": "_colorize", "function_define": "    Examples\n    t = t[:3]\n    h = hex(int(i))[2:].upper()", "piece": "t = t[:3]"}
{"function_name": "get_scheduler", "function_define": "    from those many options\n    raise TypeError(get_err_msg)\n    if scheduler is not None:", "piece": "raise TypeError(get_err_msg)"}
{"function_name": "clone_key", "function_define": "    Examples\n    if isinstance(key, str):\n    prefix = key_split(key)", "piece": "if isinstance(key, str):"}
{"function_name": "__await__", "function_define": "    except ImportError as e:\n    from tornado import gen\n    if futures_of(self):", "piece": "from tornado import gen"}
{"function_name": "normalize_array", "function_define": "    if not x.shape:\n    if hasattr(x.base, 'ctypes'):\n    offset = 0", "piece": "if hasattr(x.base, 'ctypes'):"}
{"function_name": "normalize_ufunc", "function_define": "    name = x.__name__\n    if getattr(np, name) is x:\n    except AttributeError:", "piece": "if getattr(np, name) is x:"}
{"function_name": "results_on_file", "function_define": "    wb = openpyxl.Workbook()\n    wb.remove(wb.active)\n    ws = wb.create_sheet('result')", "piece": "wb.remove(wb.active)"}
{"function_name": "model_eval", "function_define": "    model.eval()\n    result_list = []\n    with torch.no_grad():", "piece": "result_list = []"}
{"function_name": "_csmr_in_t3", "function_define": "    Returns:\n    this ``model_version_id``.\n    location_rows = c.fetchall()", "piece": "this ``model_version_id``."}
{"function_name": "custom_directory", "function_define": "    root = Tk()\n    root.withdraw()\n    print(folder_selected)", "piece": "root.withdraw()"}
{"function_name": "GetAPIResponse", "function_define": "    response = requests.get(url)\n    if response == None:\n    if response.status_code != 200:", "piece": "if response == None:"}
{"function_name": "_parse_list", "function_define": "    for item in list_:\n    self._parse_item(item)\n    self._parse_item((item,))", "piece": "self._parse_item(item)"}
{"function_name": "SetStandby", "function_define": "    valueString = None\n    if standbyRequested:\n    valueString = '<Value>1</Value>'", "piece": "if standbyRequested:"}
{"function_name": "TransportState", "function_define": "    if self.HasTransportService():\n    source = self.Source()\n    if source['type'] == 'Radio':", "piece": "source = self.Source()"}
{"function_name": "__SubscribeEvent", "function_define": "    if timespan <= 60:\n    timespan = 60\n    sock.bind(('', callbackPort))", "piece": "timespan = 60"}
{"function_name": "__recv_timeout", "function_define": "    total_data = []\n    data = ''\n    begin = time.time()", "piece": "data = ''"}
{"function_name": "set_param_sizes", "function_define": "    param_sizes: Dict[str, int] = {}\n    if p.name in param_sizes:\n    for sp in p_group:", "piece": "if p.name in param_sizes:"}
{"function_name": "set_msg_sizes", "function_define": "    for m in msgs.values():\n    for p in m.parameters:\n    p.p_def = params[p.param_name]", "piece": "for p in m.parameters:"}
{"function_name": "write_test_code", "function_define": "    if write_header:\n    w.write('\\npackage llrp\\n\\n')\n    with w.paren('import'):", "piece": "w.write('\\npackage llrp\\n\\n')"}
{"function_name": "lower_camel", "function_define": "    if len(s) <= 1:\n    m = re.match('[A-Z]+', s)\n    if not m or m.end() == len(s):", "piece": "m = re.match('[A-Z]+', s)"}
{"function_name": "write_type_def", "function_define": "    if self.kind == 'external':\n    if self.description:\n    w.comment(self.description)", "piece": "if self.description:"}
{"function_name": "test_instance", "function_define": "    possibly using i as a seed.\n    if self.name == 'string':\n    if self.name == 'bool':", "piece": "if self.name == 'string':"}
{"function_name": "min_size", "function_define": "    if self.is_array:\n    if self.length == 0:\n    if self.length == -1:", "piece": "if self.length == 0:"}
{"function_name": "test_field", "function_define": "    if self.is_array:\n    dist = self.max - self.min\n    if self.max is not None:", "piece": "dist = self.max - self.min"}
{"function_name": "write_struct", "function_define": "    if self.can_inline():\n    f = self.fields[0]\n    if f.type.name == 'bitArray':", "piece": "f = self.fields[0]"}
{"function_name": "write_literal", "function_define": "    for f in self.fields:\n    if f.padding:\n    continue", "piece": "if f.padding:"}
{"function_name": "len_check", "function_define": "    if self.empty():\n    w.write('return nil')\n    if self.fixed_size:", "piece": "w.write('return nil')"}
{"function_name": "unmarshal_tv", "function_define": "    sub = p.p_def\n    if p.optional:\n    with blk:", "piece": "if p.optional:"}
{"function_name": "unmarshal_tlv", "function_define": "    sub = p.p_def\n    if p.optional:\n    with blk:", "piece": "if p.optional:"}
{"function_name": "write_cases", "function_define": "    for p in p_group:\n    sub = p.p_def\n    with w.case(f'Param{sub.name}'):", "piece": "sub = p.p_def"}
{"function_name": "get_param_size", "function_define": "    if p.name in param_sizes:\n    for sp in p_group:\n    get_param_size(sp.p_def)", "piece": "for sp in p_group:"}
{"function_name": "write_paragraph", "function_define": "    open_quote = False\n    long_return = False\n    for line in self.code.wrap(p):", "piece": "long_return = False"}
{"function_name": "publish_state", "function_define": "    if self._setup:\n    if data is None:\n    ftemp = float(itemp)", "piece": "if data is None:"}
{"function_name": "pruebaPrint", "function_define": "    while True:\n    print('Leyendo datos')\n    time.sleep(1)", "piece": "print('Leyendo datos')"}
{"function_name": "get_cv_split", "function_define": "    iterator = []\n    for val_indices in indices:\n    train_indices = []", "piece": "for val_indices in indices:"}
{"function_name": "trainable_layers", "function_define": "    Example:\n    if names:\n    stack = [('', '', model)]", "piece": "if names:"}
{"function_name": "one_hot_lookup", "function_define": "    specified at each row.\n    Example:\n    array([ 0,  4,  8, 10])", "piece": "Example:"}
{"function_name": "pruneHandlers", "function_define": "    continue\n    continue\n    continue", "piece": "continue"}
{"function_name": "visitArrayGet", "function_define": "    arr_at = cur.arrs[instr.args[1]]\n    if arr_at is arrays.NULL:\n    st, at = arrays.eletPair(arr_at)", "piece": "if arr_at is arrays.NULL:"}
{"function_name": "doInference", "function_define": "    for tryi in code.tries:\n    for instr in code.bytecode:\n    types = {}", "piece": "for instr in code.bytecode:"}
{"function_name": "assignFromDesc", "function_define": "    st = scalars.fromDesc(desc)\n    at = arrays.fromDesc(desc)\n    if scalars.iswide(st):", "piece": "at = arrays.fromDesc(desc)"}
{"function_name": "test_parse", "function_define": "    input = '0,9 -> 5,9'\n    expected = Vent((0, 9), (5, 9))\n    result = Vent.from_string(input)", "piece": "expected = Vent((0, 9), (5, 9))"}
{"function_name": "test_vertical", "function_define": "    input = '0,9 -> 5,9'\n    expected = True\n    assert result == expected", "piece": "expected = True"}
{"function_name": "test_horizontal", "function_define": "    input = '2,2 -> 2,1'\n    expected = True\n    assert result == expected", "piece": "expected = True"}
{"function_name": "test_part1", "function_define": "    expected = 5\n    result = day.part1(data)\n    assert result == expected", "piece": "result = day.part1(data)"}
{"function_name": "test_part2", "function_define": "    expected = 12\n    result = day.part2(data)\n    assert result == expected", "piece": "result = day.part2(data)"}
{"function_name": "topo_sort", "function_define": "    if not constraints:\n    items = list(items)\n    constraints = list(constraints)", "piece": "items = list(items)"}
{"function_name": "bar_plot", "function_define": "    sorted_values.sort()\n    if len(errors) > 0:\n    sorted_errors = None", "piece": "if len(errors) > 0:"}
{"function_name": "grouped_bar_plot", "function_define": "    if sort_on_key:\n    sorted_values.sort()\n    if len(errors_group_one) > 0:", "piece": "sorted_values.sort()"}
{"function_name": "_getActivity", "function_define": "    if not history:\n    current = total = 0\n    current += 1", "piece": "current = total = 0"}
{"function_name": "_getTimeLimits", "function_define": "    conf = self.config['synced']\n    if limhist is not None:\n    if limfcst is not None:", "piece": "if limhist is not None:"}
{"function_name": "_validDecks", "function_define": "    all_excluded = []\n    for did in excluded:\n    all_excluded.extend(children)", "piece": "for did in excluded:"}
{"function_name": "_didLimit", "function_define": "    if self.whole:\n    if excluded_dids:\n    dids = self.col.decks.active()", "piece": "if excluded_dids:"}
{"function_name": "_revlogLimit", "function_define": "    if self.whole:\n    if excluded_dids:\n    elif ignore_deleted:", "piece": "if excluded_dids:"}
{"function_name": "_cardsDue", "function_define": "    lim = ''\n    if start is not None:\n    if stop is not None:", "piece": "if start is not None:"}
{"function_name": "_cardsDone", "function_define": "    reach >100K entries).\n    performance penalty\n    offset = self.offset * 3600", "piece": "performance penalty"}
{"function_name": "get_pred", "function_define": "    model.eval()\n    if args.cuda:\n    image = image.cuda()", "piece": "if args.cuda:"}
{"function_name": "get_tags", "function_define": "    if isinstance(value, Dict):\n    property_tags = value.get('tag')\n    if property_tags:", "piece": "property_tags = value.get('tag')"}
{"function_name": "get_field_tags", "function_define": "    tags = cls.parse_tag(tags)\n    if not tags:\n    if invalid_tags:", "piece": "if not tags:"}
{"function_name": "check_config", "function_define": "    Check plugin configuration.\n    logger.debug(message)\n    raise ValueError(message)", "piece": "logger.debug(message)"}
{"function_name": "on_post_build", "function_define": "    except ValueError:\n    if to_ignore:\n    search_index = json.load(f)", "piece": "if to_ignore:"}
{"function_name": "on_mqtt_message", "function_define": "    if match:\n    hub = int(match.group(1))\n    leiste = int(match.group(2))", "piece": "hub = int(match.group(1))"}
{"function_name": "preProcess", "function_define": "    column = unidecode(column)\n    column = re.sub('-', '', column)\n    column = re.sub(\"'\", '', column)", "piece": "column = re.sub('-', '', column)"}
{"function_name": "new_sesion", "function_define": "    cur = get_db().cursor()\n    session_id = uuid.uuid4()\n    cur.close()", "piece": "session_id = uuid.uuid4()"}
{"function_name": "reconcile", "function_define": "    if request.method == 'GET':\n    version_id = None\n    if session_id:", "piece": "version_id = None"}
{"function_name": "_do_iter", "function_define": "    Overridden.\n    self.repeated_data = train_data\n    self.m_accumulated += 1", "piece": "self.repeated_data = train_data"}
{"function_name": "get_reg_part", "function_define": "    it, wherever it is.\n    potential_parts = []\n    if potential_parts:", "piece": "potential_parts = []"}
{"function_name": "preprocess_xml", "function_define": "    for node in xml.xpath(path):\n    parent = node.getparent()\n    idx = parent.index(node)", "piece": "parent = node.getparent()"}
{"function_name": "build_tree", "function_define": "    doc = etree.fromstring(reg_xml)\n    doc = reg_xml\n    preprocess_xml(doc)", "piece": "doc = reg_xml"}
{"function_name": "build_subpart", "function_define": "    sections = []\n    if ch.tag == 'SECTION':\n    subpart.children = sections", "piece": "if ch.tag == 'SECTION':"}
{"function_name": "next_marker", "function_define": "    if remaining_markers:\n    sib = xml_node.getnext()\n    sib = sib.getnext()", "piece": "sib = xml_node.getnext()"}
{"function_name": "EqualSumDp", "function_define": "    s = sum(a)\n    if s & 1:\n    s = s // 2", "piece": "if s & 1:"}
{"function_name": "_distance_matrix", "function_define": "    Dmax = L // 2\n    D = list(range(Dmax + 1))\n    D += D[-2 + L % 2:0:-1]", "piece": "D = list(range(Dmax + 1))"}
{"function_name": "watts_strogatz", "function_define": "    d = _distance_matrix(L)\n    p = _pd(d, p0, beta)\n    if directed:", "piece": "p = _pd(d, p0, beta)"}
{"function_name": "gen_rand_matrix", "function_define": "    random.seed(seed)\n    p0 = K / (L - 1)\n    G = nx.Graph()", "piece": "p0 = K / (L - 1)"}
{"function_name": "bucket_sort", "function_define": "    buckets = []\n    for i in range(size):\n    buckets.append([])", "piece": "for i in range(size):"}
{"function_name": "autodiscover", "function_define": "    module_name = 'tasks'\n    except ImportError:\n    continue", "piece": "except ImportError:"}
{"function_name": "_export_task", "function_define": "    if hiearchy_index:\n    e_td.text = curr_hiearchy_index\n    e_td.text = task.name", "piece": "e_td.text = curr_hiearchy_index"}
{"function_name": "export_schedule", "function_define": "    e_html = etree.Element('html')\n    title = self.schedule.name\n    e_title.text = title", "piece": "title = self.schedule.name"}
{"function_name": "update_samples", "function_define": "    if not sample:\n    label = sample['label']\n    if self.split == 'train':", "piece": "label = sample['label']"}
{"function_name": "load_annotations", "function_define": "    self.ok_ori_samples = []\n    self.ng_ori_samples = []\n    self.class_samples = {}", "piece": "self.ng_ori_samples = []"}
{"function_name": "add_circle", "function_define": "    center_x = center[0]\n    center_y = center[1]\n    game[center_y][center_x] = cchar", "piece": "center_y = center[1]"}
{"function_name": "add_horizontal", "function_define": "    game[row][center_x] = fill_char\n    if center_x - offset > 0:\n    if offset == radius * 2 - 1:", "piece": "if center_x - offset > 0:"}
{"function_name": "optimizar", "function_define": "    poblacion.inicializar()\n    for _ in range(self.pasos):\n    self.actualizar()", "piece": "for _ in range(self.pasos):"}
{"function_name": "_process_node", "function_define": "    scale = 0.8 ** tree_node.level\n    height = str(1 * scale)\n    width = str(2 * scale)", "piece": "height = str(1 * scale)"}
{"function_name": "run_on_video", "function_define": "    annotations = dict()\n    outputs = model(frame)\n    i = iuv_arr[0, :, :].tolist()", "piece": "outputs = model(frame)"}
{"function_name": "run_on_dataset", "function_define": "    w, h = (640, 480)\n    all_masks = []\n    gei = np.mean(all_masks, axis=0)", "piece": "all_masks = []"}
{"function_name": "download_video", "function_define": "    Download the Youtube video\n    the video will be saved\n    ydl.download([url])", "piece": "the video will be saved"}
{"function_name": "createExamples", "function_define": "    numbersWeHave = range(1, 10)\n    for eachNum in numbersWeHave:\n    for furtherNum in numbersWeHave:", "piece": "for eachNum in numbersWeHave:"}
{"function_name": "threshold", "function_define": "    balanceAr = []\n    newAr = imageArray\n    for eachPart in imageArray:", "piece": "newAr = imageArray"}
{"function_name": "kernel_matrix", "function_define": "    if self.object_vectors is None:\n    if x_inducing:\n    x_object = x[:, 2:]", "piece": "if x_inducing:"}
{"function_name": "variational_loss", "function_define": "    b = tf.shape(x)[0]\n    b = tf.cast(b, dtype=self.dtype)\n    m = tf.cast(m, dtype=self.dtype)", "piece": "b = tf.cast(b, dtype=self.dtype)"}
{"function_name": "RenderText", "function_define": "    for renderClass in PIPELINE:\n    r = renderClass(txt)\n    txt = r.Render()", "piece": "r = renderClass(txt)"}
{"function_name": "truncated_normal", "function_define": "    shape = tensor.shape\n    while torch.any(is_truncated):\n    sample[is_truncated] = repick", "piece": "while torch.any(is_truncated):"}
{"function_name": "faceDetected", "function_define": "    now = int(time.time())\n    hour = garbageDataByDate()\n    if name in last_update_dict:", "piece": "hour = garbageDataByDate()"}
{"function_name": "location_json", "function_define": "    v = meta.get('location')\n    if not v:\n    if type(v) == str:", "piece": "if not v:"}
{"function_name": "checkFilter", "function_define": "    output = False\n    f = copy.deepcopy(filt)\n    f = f.replace(' ', '_').upper()", "piece": "f = copy.deepcopy(filt)"}
{"function_name": "filterProfile", "function_define": "    if f0 == False:\n    raise ValueError\n    filt = f0", "piece": "raise ValueError"}
{"function_name": "filterMag", "function_define": "    info = kwargs.get('info', False)\n    vega = kwargs.get('vega', True)\n    ab = kwargs.get('ab', not vega)", "piece": "vega = kwargs.get('vega', True)"}
{"function_name": "vegaToAB", "function_define": "    if f0 == False:\n    filt = f0\n    rsr = FILTERS[filt]['rsr']", "piece": "filt = f0"}
{"function_name": "filterInfo", "function_define": "    if len(args) > 0:\n    fname = list(args)\n    fname = kwargs['filter']", "piece": "fname = list(args)"}
{"function_name": "filterProperties", "function_define": "    Filter 2MASS J: 2MASS J-band\n    Zeropoint = 1594.0 Jy\n    Pivot point: = 1.252 micron", "piece": "Zeropoint = 1594.0 Jy"}
{"function_name": "magToFlux", "function_define": "    vega = kwargs.get('vega', True)\n    ab = kwargs.get('ab', not vega)\n    rsr = kwargs.get('rsr', False)", "piece": "ab = kwargs.get('ab', not vega)"}
{"function_name": "visualizeFilter", "function_define": "    filt = copy.deepcopy(filters)\n    if isinstance(filt, str):\n    filt = [filt]", "piece": "if isinstance(filt, str):"}
{"function_name": "check_crate", "function_define": "    assert root_id in json_entities\n    root = json_entities[root_id]\n    if data_entity_ids:", "piece": "root = json_entities[root_id]"}
{"function_name": "from_str", "function_define": "    if len(s) < 42:\n    raise Exception('IllegalFormat')\n    prefix = bytes([s[:2] == 'cx'])", "piece": "raise Exception('IllegalFormat')"}
{"function_name": "invoke_handler", "function_define": "    self.get_value(b'hello')\n    self.set_value(b'foo', None)\n    self.get_value(b'foo')", "piece": "self.set_value(b'foo', None)"}
{"function_name": "read_output", "function_define": "    msg = print_queue.get()\n    while msg is not None:\n    print(msg, flush=True)", "piece": "while msg is not None:"}
{"function_name": "open_and_save", "function_define": "    except UnicodeDecodeError:\n    is_yaml_file = False\n    finally:", "piece": "is_yaml_file = False"}
{"function_name": "setup_info_msgs", "function_define": "    supervisor.data['waiting'] = 0\n    supervisor.data['skipped'] = 0\n    supervisor.data['skipped'] += 1", "piece": "supervisor.data['skipped'] = 0"}
{"function_name": "set_test_config", "function_define": "    config.add_section('db')\n    config['db']['default'] = url\n    config.write(configfile)", "piece": "config['db']['default'] = url"}
{"function_name": "compute_mask", "function_define": "    radius = int(patch_size / 2)\n    nb_row, nb_col = disp_map.shape\n    disp = disp_map[row, col]", "piece": "nb_row, nb_col = disp_map.shape"}
{"function_name": "fusion_contest", "function_define": "    nb_img = len(gt)\n    indices = np.arange(nb_img)\n    np.random.seed(0)", "piece": "indices = np.arange(nb_img)"}
{"function_name": "test_widgets", "function_define": "    tw = TimeWidgets()\n    wig = tw.create_widgets()\n    start, end = tw.get_start_end()", "piece": "wig = tw.create_widgets()"}
{"function_name": "asses_task", "function_define": "    t = task()\n    pred = t.run_all()\n    true = answers[task.__name__]", "piece": "pred = t.run_all()"}
{"function_name": "show_train_hist", "function_define": "    x = range(len(hist['D_losses']))\n    y1 = hist['D_losses']\n    y2 = hist['G_losses']", "piece": "y1 = hist['D_losses']"}
{"function_name": "show_noise_morp", "function_define": "    source_z_ = torch.randn(10, 100)\n    z_ = torch.zeros(100, 100)\n    for i in range(5):", "piece": "z_ = torch.zeros(100, 100)"}
{"function_name": "multimap", "function_define": "    result = defaultdict(list)\n    for key, val in items:\n    result[key].append(val)", "piece": "for key, val in items:"}
{"function_name": "ec_point_add", "function_define": "    if not P:\n    if P == Q:\n    R = Point()", "piece": "if P == Q:"}
{"function_name": "commonChars", "function_define": "    for a in A:\n    record_now = {}\n    for i in a:", "piece": "record_now = {}"}
{"function_name": "get_linecounts", "function_define": "    linelist.reverse()\n    if linelist[0]:\n    if ',' in linelist[0]:", "piece": "if linelist[0]:"}
{"function_name": "charge_cards", "function_define": "    lock.acquire()\n    log = Log()\n    continue", "piece": "log = Log()"}
{"function_name": "preprocess_sent", "function_define": "    text = re.sub('\"\"', '', text)\n    text = re.sub(\"''\", '', text)\n    text = re.sub('``', '', text)", "piece": "text = re.sub(\"''\", '', text)"}
{"function_name": "get_sentseg_tac", "function_define": "    files = os.listdir(data_folder)\n    lines = of.readlines()\n    sents = []", "piece": "lines = of.readlines()"}
{"function_name": "trainUnweighted", "function_define": "    Theta = (X.T * X)-1 * X.T * Y\n    X_matrix = np.matrix(train_X).T\n    Y_matrix = np.matrix(train_Y).T", "piece": "X_matrix = np.matrix(train_X).T"}
{"function_name": "displayWeighted", "function_define": "    and plots a point\n    train_X.sort()\n    h_theta = []", "piece": "train_X.sort()"}
{"function_name": "trainWeighted", "function_define": "    X_matrix = np.matrix(train_X).T\n    Y_matrix = np.matrix(train_Y).T\n    x_matrix = np.matrix([1, x]).T", "piece": "Y_matrix = np.matrix(train_Y).T"}
{"function_name": "generateW", "function_define": "    weights = []\n    for x_i in train_X:\n    weights.append(math.exp(expo))", "piece": "for x_i in train_X:"}
{"function_name": "apply_tfms", "function_define": "    x = self.clone()\n    for tfm in tfms:\n    x.data = tfm(x.data)", "piece": "for tfm in tfms:"}
{"function_name": "export_as_tiff", "function_define": "    if not self.file_valid:\n    file_info = {}\n    file_info['frame_headers'] = []", "piece": "file_info = {}"}
{"function_name": "read_file_header", "function_define": "    if self.file_valid:\n    self.file_handle.seek(0)\n    logger.debug(self.file_header)", "piece": "self.file_handle.seek(0)"}
{"function_name": "read_frame", "function_define": "    if not self.file_valid:\n    if self.file_valid:\n    if self.bpp == 1:", "piece": "if self.file_valid:"}
{"function_name": "top_k_acc", "function_define": "    with torch.no_grad():\n    correct = 0\n    for i in range(k):", "piece": "correct = 0"}
{"function_name": "picp_mpiw", "function_define": "    mean = torch.mean(output, dim=2)\n    std = torch.std(output, dim=2)\n    y_U = mean + 2 * std", "piece": "std = torch.std(output, dim=2)"}
{"function_name": "picp_mpiw_homo", "function_define": "    noise = output[1]\n    output = output[0]\n    mean = torch.mean(output, dim=2)", "piece": "output = output[0]"}
{"function_name": "picp_mpiw_hetero", "function_define": "    y_U = mean + total_unc\n    y_L = mean - total_unc\n    noise = output[:, 1:].exp()", "piece": "y_L = mean - total_unc"}
{"function_name": "promenade", "function_define": "    if _debug():\n    verbose = True\n    logging.setup(verbose=verbose)", "piece": "verbose = True"}
{"function_name": "build_all", "function_define": "    debug = _debug()\n    e.display(debug=debug)\n    sys.exit(e.EXIT_CODE)", "piece": "e.display(debug=debug)"}
{"function_name": "genereate_certs", "function_define": "    debug = _debug()\n    g = generator.Generator(c)\n    g.generate(output_dir)", "piece": "g = generator.Generator(c)"}
{"function_name": "anonymize", "function_define": "    df: <pandas.DataFrame>\n    free_text_columns: <list of str>\n    be anonymized", "piece": "free_text_columns: <list of str>"}
{"function_name": "test_api_errors", "function_define": "    app.preprocess_request()\n    response = test_client.get(url)\n    assert_api_success(response, 0)", "piece": "response = test_client.get(url)"}
{"function_name": "test_api_context", "function_define": "    app.preprocess_request()\n    response = test_client.get(url)\n    response = test_client.get(url)", "piece": "response = test_client.get(url)"}
{"function_name": "bitInsertionFor", "function_define": "    clearmask = 0\n    for b in range(i, j):\n    clearmask |= 1 << b", "piece": "for b in range(i, j):"}
{"function_name": "bitInsertionBit", "function_define": "    clearmask = (~1 & b32) << j\n    clearmask |= (1 << i) - 1\n    R = N & clearmask", "piece": "clearmask |= (1 << i) - 1"}
{"function_name": "runAllTests", "function_define": "    for test in self.A:\n    N = test['N']\n    M = test['M']", "piece": "N = test['N']"}
{"function_name": "_get_prefixes", "function_define": "    if up_to_limit is None:\n    up_to_limit = len(trace)\n    all_prefixes = set()", "piece": "up_to_limit = len(trace)"}
{"function_name": "fix_rmfiles", "function_define": "    file = rmfile\n    with open(file) as f:\n    content = f.readlines()", "piece": "with open(file) as f:"}
{"function_name": "add_trace", "function_define": "    trace = tuple(trace)\n    if reward > 0:\n    self.positive.add(trace)", "piece": "if reward > 0:"}
{"function_name": "export_traces", "function_define": "    output_file.write('POSITIVE:')\n    for trace in self.positive:\n    output_file.write('\\n')", "piece": "for trace in self.positive:"}
{"function_name": "pre_model", "function_define": "    res_list = []\n    clf = model_dict[model]\n    res = clf.predict(testdata)", "piece": "clf = model_dict[model]"}
{"function_name": "reconstruction", "function_define": "    f1 = torch.cat([z1, z2], dim=1)\n    f2 = torch.cat([z2, z1], dim=1)\n    x_ = self.l13(f1)", "piece": "f2 = torch.cat([z2, z1], dim=1)"}
{"function_name": "blend_two_images", "function_define": "    img1 = Image.open(img1_path)\n    img1 = img1.convert('RGBA')\n    img2 = Image.open(img2_path)", "piece": "img1 = img1.convert('RGBA')"}
{"function_name": "visit_url", "function_define": "    driver.get(url)\n    time.sleep(120)\n    driver.quit()", "piece": "time.sleep(120)"}
{"function_name": "translate_har", "function_define": "    h2s = Har2Stix(har_dir)\n    har_files = files\n    for har_file in har_files:", "piece": "har_files = files"}
{"function_name": "sinavHazirla", "function_define": "    r1 = random.randint(1, 5)\n    d[0, j] = chr(64 + r1)\n    r1 = random.randint(1, 5)", "piece": "d[0, j] = chr(64 + r1)"}
{"function_name": "sinavDegerlendir", "function_define": "    dogruSayisi[i] = 0\n    yalisSayisi[i] = 0\n    bosSayisi[i] = 0", "piece": "yalisSayisi[i] = 0"}
{"function_name": "sinavSirala", "function_define": "    if puan[i] < puan[j]:\n    g = d[i, k]\n    d[i, k] = d[j, k]", "piece": "g = d[i, k]"}
{"function_name": "sinavYaz", "function_define": "    dosya = open(dosyaIsmi, 'w')\n    s = '    '\n    s += d[0, j]", "piece": "s = '    '"}
{"function_name": "sinavOku", "function_define": "    dosya = open(dosyaIsmi, 'r')\n    for s in dosya:\n    print(s, end='')", "piece": "for s in dosya:"}
{"function_name": "startlog", "function_define": "    except IndexError:\n    for name in command_params[1:]:\n    except KeyError:", "piece": "for name in command_params[1:]:"}
{"function_name": "get_meshes", "function_define": "    dfs = [self]\n    while dfs:\n    parent = dfs.pop()", "piece": "while dfs:"}
{"function_name": "get_family", "function_define": "    dfs = [self]\n    while dfs:\n    parent = dfs.pop()", "piece": "while dfs:"}
{"function_name": "init_updaters", "function_define": "    self.time_based_updaters = []\n    self.non_time_updaters = []\n    self.has_updaters = False", "piece": "self.non_time_updaters = []"}
{"function_name": "add_updater", "function_define": "    if index is None:\n    if call_updater:\n    self.update()", "piece": "if call_updater:"}
{"function_name": "resume_updating", "function_define": "    self.updating_suspended = False\n    if call_updater:\n    self.update(dt=0)", "piece": "if call_updater:"}
{"function_name": "read_rel_path", "function_define": "    abs_path = []\n    if self.prefix:\n    abs_path += self.prefix", "piece": "if self.prefix:"}
{"function_name": "read_path", "function_define": "    if len(path) == 0:\n    if type(in_dict) is not dict:\n    key = path[0]", "piece": "if type(in_dict) is not dict:"}
{"function_name": "seeded_range", "function_define": "    Basic usage::\n    ansible_fqdn|seeded_range(60)\n    hashed_seed = new_hash('sha1')", "piece": "ansible_fqdn|seeded_range(60)"}
{"function_name": "timedTest", "function_define": "    begin = time.time()\n    averagePower1 = 0\n    averagePower2 = 0", "piece": "averagePower1 = 0"}
{"function_name": "machine_params", "function_define": "    num_gpus = cuda.device_count()\n    has_gpu = num_gpus != 0\n    sampler_devices = None", "piece": "has_gpu = num_gpus != 0"}
{"function_name": "make_sampler_fn", "function_define": "    if 'mp_ctx' in kwargs:\n    del kwargs['mp_ctx']\n    if not runtime_sample:", "piece": "del kwargs['mp_ctx']"}
{"function_name": "saveFile", "function_define": "    np.savetxt('W_hidden', wh)\n    np.savetxt('W_output', wo)\n    np.savetxt('Bias_hidden', bh)", "piece": "np.savetxt('W_output', wo)"}
{"function_name": "is_valid", "function_define": "    if max_age is None:\n    max_age = self.cache_max_age\n    current_time = time()", "piece": "max_age = self.cache_max_age"}
{"function_name": "write_to_cache", "function_define": "    if not filename:\n    filename = self.cache_path_cache\n    json_data = json.dumps(data)", "piece": "filename = self.cache_path_cache"}
{"function_name": "get_gce_drivers", "function_define": "    libcloud drivers.\n    secrets_found = False\n    import secrets", "piece": "secrets_found = False"}
{"function_name": "node_to_dict", "function_define": "    if inst is None:\n    subnet = None\n    if self.ip_type == 'internal':", "piece": "subnet = None"}
{"function_name": "list_nodes", "function_define": "    all_nodes = []\n    while more_results:\n    for driver in self.drivers:", "piece": "while more_results:"}
{"function_name": "group_instances", "function_define": "    groups = {}\n    meta = {}\n    meta['hostvars'] = {}", "piece": "meta = {}"}
{"function_name": "_process_request", "function_define": "    url = '{0}/{1}{2}'\n    if method == 'POST':\n    new_headers = {}", "piece": "if method == 'POST':"}
{"function_name": "get_department", "function_define": "    Returns:\n    match was found, None otherwise.\n    idf = idf.lower()", "piece": "match was found, None otherwise."}
{"function_name": "_confirm", "function_define": "    if is_admin:\n    if a.org_confirmed:\n    a.org_confirmed = True", "piece": "if a.org_confirmed:"}
{"function_name": "show_header", "function_define": "    COL_NUM = 60\n    print('-' * COL_NUM)\n    print('{:^60}'.format('TASKS'))", "piece": "print('-' * COL_NUM)"}
{"function_name": "show_todos", "function_define": "    for todo in db.get_todos():\n    id = '[#' + str(todo[0]) + ']'\n    print('-' * 60)", "piece": "id = '[#' + str(todo[0]) + ']'"}
{"function_name": "add_answer", "function_define": "    DEBUG = True\n    if request.method != 'POST':\n    json_data = request.get_json()", "piece": "if request.method != 'POST':"}
{"function_name": "delete_answer", "function_define": "    if not internal_call:\n    if request.method != 'DELETE':\n    if not internal_call:", "piece": "if request.method != 'DELETE':"}
{"function_name": "update_answer", "function_define": "    DEBUG = True\n    if request.method != 'PUT':\n    json_data = request.get_json()", "piece": "if request.method != 'PUT':"}
{"function_name": "get_answers", "function_define": "    if request.method != 'GET':\n    conn = mysql.connect()\n    cursor = conn.cursor()", "piece": "conn = mysql.connect()"}
{"function_name": "find_answer", "function_define": "    if request.method != 'GET':\n    if not internal_call:\n    conn = mysql.connect()", "piece": "if not internal_call:"}
{"function_name": "_readFile", "function_define": "    if reparse:\n    if six.PY2:\n    data = file.read()", "piece": "if six.PY2:"}
{"function_name": "pt_render", "function_define": "    self._updateFromFS()\n    if not source:\n    if not source:", "piece": "if not source:"}
{"function_name": "dawn_compatible", "function_define": "    register\n    except Exception as e:\n    print(e)", "piece": "except Exception as e:"}
{"function_name": "plugin_loader", "function_define": "    except Exception as e:\n    logging.error(e)\n    if check:", "piece": "logging.error(e)"}
{"function_name": "param_to_str", "function_define": "    if param_name.isdigit():\n    param_name = int(param_name)\n    if param_name <= len(keys):", "piece": "param_name = int(param_name)"}
{"function_name": "_dawn_compatible", "function_define": "    register\n    except Exception as e:\n    print(e)", "piece": "except Exception as e:"}
{"function_name": "find_sigmas_mus", "function_define": "    index = np.argsort(unsorted_mus)\n    mus = unsorted_mus[index]\n    sigma_max_value = prior_sigma", "piece": "mus = unsorted_mus[index]"}
{"function_name": "timesince_data", "function_define": "    if not now:\n    if since <= 0:\n    count = since // seconds", "piece": "if since <= 0:"}
{"function_name": "parseLayoutFile", "function_define": "    contents = readTextFile(svgFile)\n    items = []\n    for g in groups:", "piece": "items = []"}
{"function_name": "import_old_query", "function_define": "    with app.app_context():\n    query_old = json.load(json_file)\n    json_file.close()", "piece": "query_old = json.load(json_file)"}
{"function_name": "filter_from_json", "function_define": "    if old_query:\n    timerange = None\n    if json is not None:", "piece": "timerange = None"}
{"function_name": "predict_class", "function_define": "    self.arthrosis[key][2].eval()\n    im = np.expand_dims(im, 2)\n    infer_data = transforms(im)", "piece": "im = np.expand_dims(im, 2)"}
{"function_name": "predict_error", "function_define": "    if len(results['boxes']) != 21:\n    self.signal_infer_fail.emit()\n    if len(classifer) != 7:", "piece": "self.signal_infer_fail.emit()"}
{"function_name": "label_classifier", "function_define": "    label = dict()\n    label['Ulna'] = classifer[1][0]\n    label['MCPThird'] = MCP[1]", "piece": "label['Ulna'] = classifer[1][0]"}
{"function_name": "init_parameter", "function_define": "    self.is_hide(False)\n    self.finally_results = {}\n    self.read_config()", "piece": "self.finally_results = {}"}
{"function_name": "init_model", "function_define": "    self.warm_model = True\n    self.arthrosis = arthrosis\n    self.init_model_thread.quit()", "piece": "self.arthrosis = arthrosis"}
{"function_name": "infer_start", "function_define": "    self.infer_bn.setEnabled(False)\n    if self.warm_model:\n    self.init_parameter()", "piece": "if self.warm_model:"}
{"function_name": "cv2_to_qimage", "function_define": "    height = int(height / 5 * 3)\n    img = img[:height, :]\n    height = int(height / 5 * 3)", "piece": "img = img[:height, :]"}
{"function_name": "screen_start", "function_define": "    self.showMinimized()\n    time.sleep(0.3)\n    self.CaptureScreen.show()", "piece": "time.sleep(0.3)"}
{"function_name": "get_screen", "function_define": "    self.showMaximized()\n    self.get_img_mode = 0\n    self.image_path_te.clear()", "piece": "self.get_img_mode = 0"}
{"function_name": "qimage_to_cvimg", "function_define": "    temp_shape += (4,)\n    ptr = qimg.bits()\n    ptr.setsize(qimg.byteCount())", "piece": "ptr = qimg.bits()"}
{"function_name": "create_config", "function_define": "    if content:\n    f.write(content)\n    setting = dict()", "piece": "f.write(content)"}
{"function_name": "setting_init", "function_define": "    self.read_config()\n    if 'gpu' in device:\n    self.gpu_rb.setChecked(True)", "piece": "if 'gpu' in device:"}
{"function_name": "closeEvent", "function_define": "    if reply == QMessageBox.Yes:\n    event.accept()\n    event.ignore()", "piece": "event.accept()"}
{"function_name": "feed_data", "function_define": "    self.X = input_array\n    self.Y = output_array\n    self.N = self.X.shape[0]", "piece": "self.Y = output_array"}
{"function_name": "_take_step", "function_define": "    if i1 == i2:\n    C = self.C\n    alpha1_old = self.alpha[i1]", "piece": "C = self.C"}
{"function_name": "_examine_example", "function_define": "    y2 = self.Y[i2]\n    alph2 = self.alpha[i2]\n    E2 = self.E[i2]", "piece": "alph2 = self.alpha[i2]"}
{"function_name": "compute_scores", "function_define": "    for i in range(y_true.shape[0]):\n    TP = scr['TP']\n    TN = scr['TN']", "piece": "TP = scr['TP']"}
{"function_name": "find_loop_size", "function_define": "    loop_size = 0\n    while True:\n    loop_size += 1", "piece": "while True:"}
{"function_name": "transform_loop", "function_define": "    for _ in range(loop_size):\n    c *= public\n    c = c % 20201227", "piece": "c *= public"}
{"function_name": "_make_L_matrix", "function_define": "    n = len(points)\n    P = np.ones((n, 4))\n    P[:, 1:] = points", "piece": "P = np.ones((n, 4))"}
{"function_name": "_calculate_f", "function_define": "    w = coeffs[:-3]\n    a1, ax, ay, az = coeffs[-4:]\n    summation = np.zeros(x.shape)", "piece": "a1, ax, ay, az = coeffs[-4:]"}
{"function_name": "_make_warp", "function_define": "    err = np.seterr(divide='ignore')\n    L = _make_L_matrix(from_points)\n    V[-3:, :] = 0", "piece": "L = _make_L_matrix(from_points)"}
{"function_name": "_add_data", "function_define": "    data, kwargs = return_value\n    viewer.add_image(data, **kwargs)\n    self.pop(0).hide()", "piece": "viewer.add_image(data, **kwargs)"}
{"function_name": "separador", "function_define": "    qtd = largura // 4\n    print('')\n    for i in range(qtd):", "piece": "print('')"}
{"function_name": "to_serializable", "function_define": "    serializable = {}\n    if converters is None:\n    converters = {}", "piece": "if converters is None:"}
{"function_name": "main_test", "function_define": "    measure\u662f\u4e00\u4e2a\u5b57\u5178\u5217\u8868\uff0c\u7528\u4e8e\u907f\u514d\u4ee3\u7801\u91cd\u590d\u3002\n    name: fbncd,doc:\n    name: nsum,doc:", "piece": "name: fbncd,doc:"}
{"function_name": "addable_types", "function_define": "    if hijack:\n    upload_types = ('File', 'Image')\n    for upload_type in upload_types:", "piece": "upload_types = ('File', 'Image')"}
{"function_name": "evaluate_json", "function_define": "    for test_set in TEST_SETS:\n    print(test_set)\n    for language in LANGUAGES:", "piece": "print(test_set)"}
{"function_name": "tokenizeText", "function_define": "    for i, line in enumerate(fin):\n    js = ujson.loads(line)\n    js['tokens'] = tokens", "piece": "js = ujson.loads(line)"}
{"function_name": "_parse_log", "function_define": "    for r in log_regexes:\n    regex = r.get('regex')\n    r_type = r.get('type')", "piece": "regex = r.get('regex')"}
{"function_name": "get_filename", "function_define": "    while True:\n    log = self.logs.pop()\n    if log is False:", "piece": "log = self.logs.pop()"}
{"function_name": "_read_files", "function_define": "    urls = []\n    urls = []\n    a = a['href'].strip()", "piece": "urls = []"}
{"function_name": "_prepare_url", "function_define": "    for s, r in regex:\n    result = re.search(r, raw_url)\n    if result:", "piece": "result = re.search(r, raw_url)"}
{"function_name": "_download", "function_define": "    start = int(time.time())\n    url = url_object.url\n    name = url_object.custom_name", "piece": "url = url_object.url"}
{"function_name": "_move_file", "function_define": "    filename = file.filename\n    folder = file.folder\n    if not os.path.exists(source):", "piece": "folder = file.folder"}
{"function_name": "_cookie_jar", "function_define": "    temp_c = []\n    cookies = []\n    cookie = f.read()", "piece": "cookies = []"}
{"function_name": "html_file", "function_define": "    urls = []\n    a = a['href'].strip()\n    continue", "piece": "a = a['href'].strip()"}
{"function_name": "request_page", "function_define": "    urls = []\n    for _ in cookies:\n    a = a['href'].strip()", "piece": "for _ in cookies:"}
{"function_name": "_connect_ssm", "function_define": "    args = {}\n    if profile:\n    args['profile_name'] = profile", "piece": "if profile:"}
{"function_name": "_grouper", "function_define": "    it = iter(iterable)\n    while True:\n    if not chunk:", "piece": "while True:"}
{"function_name": "_get_all_prefix", "function_define": "    parameters = []\n    if prefix:\n    for page in page_iterator:", "piece": "if prefix:"}
{"function_name": "put_parameter", "function_define": "    if profile or region:\n    ssm = self.ssm\n    if overwrite:", "piece": "ssm = self.ssm"}
{"function_name": "new_param", "function_define": "    Create a new parameter\n    param['KeyId'] = key\n    if description:", "piece": "param['KeyId'] = key"}
{"function_name": "set_param", "function_define": "    Edit an existing parameter\n    value (str): Value to set.\n    Returns:", "piece": "value (str): Value to set."}
{"function_name": "filterCatalog", "function_define": "    customThreadCatalog = []\n    customPage = {}\n    for page in boardCatalog:", "piece": "customPage = {}"}
{"function_name": "test_ticket_href", "function_define": "    self._insert_tickets(1)\n    data = self.process_request()\n    docs = data['results'].items", "piece": "data = self.process_request()"}
{"function_name": "initPlot", "function_define": "    xAchse = np.arange(0, 300, 1)\n    yAchse = np.array([0] * 300)\n    fig = plt.figure()", "piece": "yAchse = np.array([0] * 300)"}
{"function_name": "removePlot", "function_define": "    self.hidingPlots.append(plot)\n    if self.pause:\n    self.updateYAxis()", "piece": "if self.pause:"}
{"function_name": "updateYAxis", "function_define": "    miny = []\n    maxy = []\n    for p in self.plots:", "piece": "maxy = []"}
{"function_name": "updatePlot", "function_define": "    self.data = data\n    for p in self.plots:\n    self.values[p] = self.data[p]", "piece": "for p in self.plots:"}
{"function_name": "RealtimePloter", "function_define": "    limit = -50\n    limit = -len(self.values['x'])\n    CurrentXAxis = self.values['x']", "piece": "limit = -len(self.values['x'])"}
{"function_name": "makePlots", "function_define": "    for k, v in self.plots.items():\n    b = gtk.CheckButton(k)\n    b.set_active(True)", "piece": "b = gtk.CheckButton(k)"}
{"function_name": "showIndices", "function_define": "    if as_df:\n    st.write(df)\n    for i in l_indices:", "piece": "st.write(df)"}
{"function_name": "get_members_info", "function_define": "    l_tickers = None\n    if type(asset) == list:\n    l_tickers = asset", "piece": "if type(asset) == list:"}
{"function_name": "LoadPins", "function_define": "    mapping <list>, ['IA','IB']\n    for i in range(len(inp)):\n    o[mapping[i]] = inp[i]", "piece": "for i in range(len(inp)):"}
{"function_name": "WindowSetup", "function_define": "    size <tuple>, width by height\n    caption <str>, window title bar\n    pygame.init()", "piece": "caption <str>, window title bar"}
{"function_name": "InputLoop", "function_define": "    index = 0\n    while True:\n    events = pygame.event.get()", "piece": "while True:"}
{"function_name": "InputLoopDemo", "function_define": "    print('woof')\n    print('meow')\n    print('blub')", "piece": "print('meow')"}
{"function_name": "save_covoit", "function_define": "    self.spot_id = spot_id\n    self.start_time = start_time\n    self.surfoards = surfboards", "piece": "self.start_time = start_time"}
{"function_name": "add_surfer", "function_define": "    le conducteur valide un surfeur\n    self.surfers.append(surfer_id)\n    self.places_available -= 1", "piece": "self.surfers.append(surfer_id)"}
{"function_name": "remote_control", "function_define": "    loop = asyncio.get_event_loop()\n    with Screen() as screen:\n    except KeyboardInterrupt:", "piece": "with Screen() as screen:"}
{"function_name": "show_distance", "function_define": "    loop = asyncio.get_event_loop()\n    except KeyboardInterrupt:\n    except Exception as e:", "piece": "except KeyboardInterrupt:"}
{"function_name": "students", "function_define": "    if doctype == 'students':\n    Student(**request.form).save()\n    elif doctype == 'grades':", "piece": "Student(**request.form).save()"}
{"function_name": "putStudents", "function_define": "    if doc_type == 'student':\n    elif doc_type == 'grade':\n    elif doc_type == 'course':", "piece": "elif doc_type == 'grade':"}
{"function_name": "getStudent", "function_define": "    if doc_type == 'student':\n    elif doc_type == 'grade':\n    elif doc_type == 'course':", "piece": "elif doc_type == 'grade':"}
{"function_name": "editData", "function_define": "    if doc_type == 'student':\n    elif doc_type == 'grade':\n    elif doc_type == 'course':", "piece": "elif doc_type == 'grade':"}
{"function_name": "apiDelete", "function_define": "    if doc_type == 'student':\n    elif doc_type == 'grade':\n    elif doc_type == 'course':", "piece": "elif doc_type == 'grade':"}
{"function_name": "_middle_process", "function_define": "    os.setsid()\n    os.umask(0)\n    proc_pid = proc.pid", "piece": "os.umask(0)"}
{"function_name": "load_plugins", "function_define": "    import pkg_resources\n    except Exception:\n    except ImportError:", "piece": "except Exception:"}
{"function_name": "init_train", "function_define": "    if platform.system() == 'Linux':\n    logdir = None\n    if args.logdir is not None:", "piece": "logdir = None"}
{"function_name": "replace_column", "function_define": "    if self.get_selected_columns():\n    if self.get_arrayjoin():\n    if self.get_groupby():", "piece": "if self.get_arrayjoin():"}
{"function_name": "HelpText", "function_define": "    f = io.StringIO()\n    help(object)\n    sys.stdout = stdout", "piece": "help(object)"}
{"function_name": "meta_prioritized", "function_define": "    error = FileDataException(t)\n    for s in sources:\n    except FileDataException:", "piece": "for s in sources:"}
{"function_name": "calculate_shift", "function_define": "    index = []\n    for im in [im1, im2]:\n    index = np.array(index)", "piece": "for im in [im1, im2]:"}
{"function_name": "under_sampling", "function_define": "    for idx, df in enumerate(base):\n    y = df['is_attributed']\n    del X0, y0", "piece": "y = df['is_attributed']"}
{"function_name": "controlPanel", "function_define": "    FLAG = {}\n    FLAG['data_prepare_flag'] = 0\n    FLAG['plotting_flag'] = 0", "piece": "FLAG['data_prepare_flag'] = 0"}
{"function_name": "on_button", "function_define": "    nonlocal result\n    result = value\n    dialog.destroy()", "piece": "result = value"}
{"function_name": "showImage", "function_define": "    plt.imshow(train_images[int])\n    print(train_labels[int])\n    print(train_images[int])", "piece": "print(train_labels[int])"}
{"function_name": "add_blog", "function_define": "    if request.method == 'GET':\n    obj = {}\n    if blog_id != '0':", "piece": "obj = {}"}
{"function_name": "migration", "function_define": "    if option == 'create':\n    elif option == 'migration':\n    count = migration_db('data/sql')", "piece": "elif option == 'migration':"}
{"function_name": "playGame", "function_define": "    self.rndcomputer = randint(1, 3)\n    if self.rndcomputer == 1:\n    elif self.rndcomputer == 2:", "piece": "if self.rndcomputer == 1:"}
{"function_name": "funcstop", "function_define": "    global computerScore\n    global playerScore\n    self.timer.stop()", "piece": "global playerScore"}
{"function_name": "measureLatency", "function_define": "    res = ''\n    if not res[0]:\n    results[hostname] = 9999", "piece": "if not res[0]:"}
{"function_name": "__shifDown", "function_define": "    while k * 2 <= self.count:\n    j = k * 2\n    if self.data[k] > self.data[j]:", "piece": "j = k * 2"}
{"function_name": "extractMax", "function_define": "    ret = self.data[1]\n    self.count -= 1\n    self.__shifDown(1)", "piece": "self.count -= 1"}
{"function_name": "all_writeups", "function_define": "    writeups = WriteupFiles.query\n    if user_id:\n    weeks = writeup_weeks()", "piece": "if user_id:"}
{"function_name": "view_writeups", "function_define": "    user = get_current_user()\n    if request.method == 'POST':\n    if writeup_file:", "piece": "if request.method == 'POST':"}
{"function_name": "view_writeup", "function_define": "    user = get_current_user()\n    if not writeup:\n    abort(404)", "piece": "if not writeup:"}
{"function_name": "save_ckpt", "function_define": "    if args.no_save:\n    if not os.path.exists(ckpt_dir):\n    os.makedirs(ckpt_dir)", "piece": "if not os.path.exists(ckpt_dir):"}
{"function_name": "quick_sort", "function_define": "    if start >= end:\n    quick_sort(AA, start, pivot - 1)\n    quick_sort(AA, pivot + 1, end)", "piece": "quick_sort(AA, start, pivot - 1)"}
{"function_name": "get_window_names", "function_define": "    with all the names (strings).\n    win_name_list = []\n    for d in windows:", "piece": "win_name_list = []"}
{"function_name": "ultraspherical", "function_define": "    L = N - 1\n    w0 = geg_ev(N, alpha, x_0)\n    w = np.zeros(N)", "piece": "w0 = geg_ev(N, alpha, x_0)"}
{"function_name": "encode_int", "function_define": "    res = StringIO()\n    while val > 0:\n    val /= 65", "piece": "while val > 0:"}
{"function_name": "decode_int", "function_define": "    val = list(val)\n    val.reverse()\n    for c in val:", "piece": "val.reverse()"}
{"function_name": "igemm_flatten", "function_define": "    mc_set_current(mc)\n    for td in tunable_dicts:\n    td['arch'] = sec_root['arch']", "piece": "for td in tunable_dicts:"}
{"function_name": "cadastrar", "function_define": "    a = open(arq, 'at')\n    a.write(f'{name};{age}\\n')\n    a.close()", "piece": "a.write(f'{name};{age}\\n')"}
{"function_name": "plot_convolution", "function_define": "    ax1.set_yticklabels([])\n    ax1.set_xticklabels([])\n    ax1.legend()", "piece": "ax1.set_xticklabels([])"}
{"function_name": "exec_command", "function_define": "    if debug:\n    p = subprocess.Popen(command)\n    p.wait()", "piece": "p = subprocess.Popen(command)"}
{"function_name": "docker_exec", "function_define": "    init_submodule_if_not(debug)\n    if res_code != 0:\n    print('Docker command failed')", "piece": "if res_code != 0:"}
{"function_name": "get_submodules", "function_define": "    dirs = []\n    for line in f:\n    line = line.strip()", "piece": "for line in f:"}
{"function_name": "xgb_train_cv", "function_define": "    xgb_params.update(params)\n    del dtrain\n    del dvalid", "piece": "del dtrain"}
{"function_name": "get_votes", "function_define": "    ret = {}\n    html = self.get(url).text\n    p = lxml.html.fromstring(html)", "piece": "html = self.get(url).text"}
{"function_name": "parse_vote_page", "function_define": "    ret = []\n    p = lxml.html.fromstring(page)\n    for vote in votes:", "piece": "p = lxml.html.fromstring(page)"}
{"function_name": "_verifyLuBase", "function_define": "    self.assertShapeEqual(x, lower)\n    self.assertShapeEqual(x, upper)\n    if perm_np.shape[-1] > 0:", "piece": "self.assertShapeEqual(x, upper)"}
{"function_name": "_verifyLu", "function_define": "    batch_shape = lu_shape[:-2]\n    num_rows = lu_shape[-2]\n    num_cols = lu_shape[-1]", "piece": "num_rows = lu_shape[-2]"}
{"function_name": "testPivoting", "function_define": "    p_val = self.evaluate([p])\n    complex_data += data\n    self._verifyLu(complex_data)", "piece": "complex_data += data"}
{"function_name": "testBatch", "function_define": "    self._verifyLu(simple_array)\n    batch_size = 200\n    np.random.seed(42)", "piece": "batch_size = 200"}
{"function_name": "testLargeMatrix", "function_define": "    np.random.seed(64)\n    data = np.random.rand(n, n)\n    self._verifyLu(data)", "piece": "data = np.random.rand(n, n)"}
{"function_name": "_GenerateMatrix", "function_define": "    batch_shape = shape[:-2]\n    shape = shape[-2:]\n    assert shape[0] == shape[1]", "piece": "shape = shape[-2:]"}
{"function_name": "benchmarkLuOp", "function_define": "    for shape in self.shapes:\n    lu, p = linalg_ops.lu(matrix)\n    if test.is_gpu_available(True):", "piece": "lu, p = linalg_ops.lu(matrix)"}
{"function_name": "countnum", "function_define": "    dict_ic = {}\n    dict_ic['date'] = df\n    print(mean)", "piece": "dict_ic['date'] = df"}
{"function_name": "statfunc", "function_define": "    df = pd.DataFrame(perf_dict)\n    print(df['close'].idxmin())\n    print(min_close)", "piece": "print(df['close'].idxmin())"}
{"function_name": "run_generate", "function_define": "    logging.info('run_generate')\n    additional = ''\n    args.debug = True", "piece": "additional = ''"}
{"function_name": "run_evaluator", "function_define": "    logging.info('run_evaluator')\n    print('CodeXGlue Evaluation')\n    submit_local(script)", "piece": "print('CodeXGlue Evaluation')"}
{"function_name": "run_eval_script", "function_define": "    logging.info('run_eval_script')\n    TARGET = args.target\n    submit_local(script)", "piece": "TARGET = args.target"}
{"function_name": "alm_matrix", "function_define": "    matrices.\n    lmax = _lmax_from_Nlm(len(alm))\n    for ell in range(lmax + 1):", "piece": "lmax = _lmax_from_Nlm(len(alm))"}
{"function_name": "evaluate_al0", "function_define": "    import spinsfast\n    lmax = len(al0) - 1\n    Nta = 2 * lmax + 1", "piece": "lmax = len(al0) - 1"}
{"function_name": "inner_z_distance", "function_define": "    the points on both surfaces.\n    distance.\n    dist *= -1", "piece": "distance."}
{"function_name": "inner_x_distance", "function_define": "    distance.\n    if where not in ('zero', 'max'):\n    if where == 'zero':", "piece": "if where not in ('zero', 'max'):"}
{"function_name": "suspend_calc_obj", "function_define": "    expansion.\n    calc_orig = self._calc\n    self._calc = None", "piece": "calc_orig = self._calc"}
{"function_name": "suspend_curv", "function_define": "    curv = self.extr_curvature\n    self.extr_curvature = None\n    finally:", "piece": "self.extr_curvature = None"}
{"function_name": "temp_metric", "function_define": "    metric_orig = self.metric\n    if metric_orig is metric:\n    with self.suspend_calc_obj():", "piece": "if metric_orig is metric:"}
{"function_name": "expansion", "function_define": "    the expansion.\n    are not currently implemented.\n    calc = self.get_calc_obj(param)", "piece": "are not currently implemented."}
{"function_name": "dt_normals", "function_define": "    from `curves`. Default is `3`.\n    SignatureQuantities objects.\n    with self.fix_evaluator():", "piece": "SignatureQuantities objects."}
{"function_name": "_dt_normals", "function_define": "    t0 = self.metric.time\n    if use_tev:\n    if tevs is None:", "piece": "if use_tev:"}
{"function_name": "surface_gravity", "function_define": "    surface gravity.\n    from `curves`. Default is `3`.\n    if wrt not in ('ell', 'tev'):", "piece": "from `curves`. Default is `3`."}
{"function_name": "timescale_tau2", "function_define": "    This computes\n    vectors.\n    option 4, see below).", "piece": "vectors."}
{"function_name": "_compute_dtau_c", "function_define": "    t0 = self.metric.time\n    epsilons = [v.eps for v in tevs]\n    t = curve.metric.time", "piece": "epsilons = [v.eps for v in tevs]"}
{"function_name": "timescale_T2", "function_define": "    This computes\n    T^2 := \\\\left(\n    n = len(tevs)", "piece": "T^2 := \\\\left("}
{"function_name": "xi_vector", "function_define": "    computed here.\n    parts of equal proper length.\n    from `curves`. Default is `3`.", "piece": "parts of equal proper length."}
{"function_name": "_xi_vector", "function_define": "    xi_A_up = []\n    xi_A = []\n    xi2 = []", "piece": "xi_A = []"}
{"function_name": "expand_xi_scalar", "function_define": "    We expand the quantity\n    from `curves`. Default is `3`.\n    sufficiently up to `lmax`.", "piece": "from `curves`. Default is `3`."}
{"function_name": "get_det_q_func", "function_define": "    created function.\n    calc = self.get_calc_obj(param)\n    q = calc.induced_metric()", "piece": "calc = self.get_calc_obj(param)"}
{"function_name": "euler_char", "function_define": "    induced metric `q`.\n    expected.\n    expected.", "piece": "expected."}
{"function_name": "irreducible_mass", "function_define": "    M := \\\\sqrt{A/16\\\\pi},\n    where `A` is the horizon's area.\n    if area is None:", "piece": "where `A` is the horizon's area."}
{"function_name": "horizon_radius", "function_define": "    R := \\\\sqrt{A/4\\\\pi},\n    where `A` is the horizon's area.\n    computed.", "piece": "where `A` is the horizon's area."}
{"function_name": "compute_zeta", "function_define": "    it is defined in [1] via\n    version.\n    if num is None:", "piece": "version."}
{"function_name": "multipoles", "function_define": "    we compute for ``n=0,...,10``.\n    resolution, but at least 100.\n    functions.", "piece": "resolution, but at least 100."}
{"function_name": "find_neck", "function_define": "    which is then located precisely.\n    to define the neck.\n    Default is ``'coord'``.", "piece": "to define the neck."}
{"function_name": "plot_expansion", "function_define": "    expansion surfaces.\n    if isiterable(points):\n    pts = points", "piece": "if isiterable(points):"}
{"function_name": "signature", "function_define": "    signature, respectively.\n    f_sig = self.f_sig()\n    if f_sig > 0.0:", "piece": "f_sig = self.f_sig()"}
{"function_name": "cached_func", "function_define": "    to_compute = []\n    for x in xs:\n    cache[x] = boundary_val", "piece": "for x in xs:"}
{"function_name": "_distance", "function_define": "    pt = np.asarray(self(param))\n    if mp_finish:\n    x1, z1 = (fl(pt[0]), fl(pt[1]))", "piece": "if mp_finish:"}
{"function_name": "_integrand", "function_define": "    theta_V = c * ingoing_exp\n    if option == 0:\n    integrand = kappas_tev * theta_V", "piece": "if option == 0:"}
{"function_name": "check_connection", "function_define": "    import simplesqlite\n    con.check_connection()\n    con.close()", "piece": "con.check_connection()"}
{"function_name": "execute_query", "function_define": "    Caller information.\n    import time\n    self.check_connection()", "piece": "import time"}
{"function_name": "insert_many", "function_define": "    if attr_names:\n    if attr_names is None:\n    logging_count = 8", "piece": "if attr_names is None:"}
{"function_name": "fetch_value", "function_define": "    except DatabaseError as e:\n    logger.debug(e)\n    if result is None:", "piece": "logger.debug(e)"}
{"function_name": "fetch_attr_names", "function_define": "    import simplesqlite\n    table_name = \"sample_table\"\n    table_name,", "piece": "table_name = \"sample_table\""}
{"function_name": "fetch_attr_type", "function_define": "    assert result\n    query = result.fetchone()[0]\n    assert match", "piece": "query = result.fetchone()[0]"}
{"function_name": "has_table", "function_define": "    print(con.has_table(\"hoge\"))\n    validate_table_name(table_name)\n    except NameValidationError:", "piece": "validate_table_name(table_name)"}
{"function_name": "has_attr", "function_define": "    import simplesqlite\n    table_name = \"sample_table\"\n    table_name,", "piece": "table_name = \"sample_table\""}
{"function_name": "has_attrs", "function_define": "    import simplesqlite\n    table_name = \"sample_table\"\n    table_name,", "piece": "table_name = \"sample_table\""}
{"function_name": "rollback", "function_define": "    self.check_connection()\n    assert self.connection\n    self.connection.rollback()", "piece": "assert self.connection"}
{"function_name": "extract_in_list", "function_define": "    for text in data_file:\n    text = text.strip()\n    data_set.append(text)", "piece": "text = text.strip()"}
{"function_name": "create_data_file", "function_define": "    words = value.split()\n    global file1\n    timestamp = int(float(words[2]))", "piece": "global file1"}
{"function_name": "_scratch_bufs", "function_define": "    if 'flux' in self.antialias:\n    if self._soln_in_src_exprs:\n    bufs |= {'scal_upts_cpy'}", "piece": "if self._soln_in_src_exprs:"}
{"function_name": "set_backend", "function_define": "    kernel = self._be.kernel\n    slicem = self._slice_mat\n    regions = self._mesh_regions", "piece": "slicem = self._slice_mat"}
{"function_name": "discrete_entropy", "function_define": "    logp = log_normalize(logp)\n    plogp = -logp.exp() * logp\n    plogp[torch.isnan(plogp)] = 0.0", "piece": "plogp = -logp.exp() * logp"}
{"function_name": "backupSave", "function_define": "    f = open(fullName, 'wb')\n    pickle.dump(data, f)\n    f.close()", "piece": "pickle.dump(data, f)"}
{"function_name": "pushHumanSave", "function_define": "    f = open(fullName, 'wb')\n    pickle.dump(data, f)\n    f.close()", "piece": "pickle.dump(data, f)"}
{"function_name": "backupLoad", "function_define": "    f = open(fname, 'rb')\n    data = pickle.load(f)\n    f.close()", "piece": "data = pickle.load(f)"}
{"function_name": "mouse_callback", "function_define": "    mouse_pressed = True\n    s_x, s_y = (x, y)\n    image_to_show = np.copy(image)", "piece": "s_x, s_y = (x, y)"}
{"function_name": "process_wav_line", "function_define": "    a = wav_line.split()\n    res = []\n    for s in a:", "piece": "res = []"}
{"function_name": "should_retry", "function_define": "    print('retry as empty')\n    print('retry as error')\n    print('retry as too short !')", "piece": "print('retry as error')"}
{"function_name": "hypos_refer_iter", "function_define": "    for key in key_list:\n    refer_text = txt_dict[key]\n    if FLAGS.rerun_all:", "piece": "refer_text = txt_dict[key]"}
{"function_name": "try_redis", "function_define": "    async def try_connect():\n    await connection.connect()\n    await connection.disconnect()", "piece": "await connection.connect()"}
{"function_name": "test_poll_next", "function_define": "    priority = 0\n    for prj, spd in cfg.items():\n    d1 = self.poller.next()", "piece": "for prj, spd in cfg.items():"}
{"function_name": "get_parent", "function_define": "    parent: Comment = c.parent()\n    while not parent.is_root:\n    parent = parent.parent()", "piece": "while not parent.is_root:"}
{"function_name": "update_data_val", "function_define": "    if key not in data:\n    data[key]['update_flair'] = True\n    data[key][secondary_key] += 1", "piece": "data[key]['update_flair'] = True"}
{"function_name": "update_flair", "function_define": "    if data[name]['update_flair']:\n    tier = 0\n    if interactions > 10:", "piece": "tier = 0"}
{"function_name": "validate_trade", "function_define": "    pname: str = parent.author.name\n    cname: str = comment.author.name\n    reply = comment.reply(message)", "piece": "cname: str = comment.author.name"}
{"function_name": "writeAnon", "function_define": "    Parameters\n    outf: csv.writer\n    p: profile", "piece": "outf: csv.writer"}
{"function_name": "ss_matmul", "function_define": "    if a_np <= 0:\n    logger.debug('a_np = %s', a_np)\n    start = time.time()", "piece": "logger.debug('a_np = %s', a_np)"}
{"function_name": "sd_matmul", "function_define": "    if a_np <= 0:\n    logger.debug('a_np = %s', a_np)\n    b = np.random.randn(rank ** dim)", "piece": "logger.debug('a_np = %s', a_np)"}
{"function_name": "test_add_subtype", "function_define": "    family = Family(distribution)\n    family.add_subtype()\n    subtype = family.subtypes.get(0)", "piece": "family.add_subtype()"}
{"function_name": "test_save", "function_define": "    family = Family(distribution)\n    family.add_subtype()\n    family.save('.testcache')", "piece": "family.add_subtype()"}
{"function_name": "test_load", "function_define": "    family = Family(distribution)\n    family.add_subtype()\n    subtype = family.subtypes[0]", "piece": "family.add_subtype()"}
{"function_name": "_register", "function_define": "    for e in elements:\n    if isinstance(e, sample):\n    self._samples.append(e)", "piece": "if isinstance(e, sample):"}
{"function_name": "_check_priority", "function_define": "    pri = False\n    pri = True\n    for m in self._models:", "piece": "pri = True"}
{"function_name": "_init_cond", "function_define": "    for key, value in init.items():\n    if key == '_out':\n    self._out = value", "piece": "if key == '_out':"}
{"function_name": "_get_init_dict", "function_define": "    self._reset()\n    for k, v in elements:\n    if isinstance(v, model):", "piece": "for k, v in elements:"}
{"function_name": "_get_init_df", "function_define": "    self._reset()\n    if d is None:\n    if key is None:", "piece": "if d is None:"}
{"function_name": "_add_init_flows", "function_define": "    for m in self._models:\n    m._add_init_flows()\n    for e in self._init_flows:", "piece": "m._add_init_flows()"}
{"function_name": "_add_flows", "function_define": "    for m in self._models:\n    m._add_flows()\n    for e in self._flows:", "piece": "m._add_flows()"}
{"function_name": "_update_pools", "function_define": "    for m in self._models:\n    m._update_pools(passno)\n    for e in self._pools:", "piece": "m._update_pools(passno)"}
{"function_name": "_update_flows", "function_define": "    for m in self._models:\n    m._update_flows(passno)\n    for e in self._flows:", "piece": "m._update_flows(passno)"}
{"function_name": "_update_time", "function_define": "    for m in self._models:\n    m._update_time(passno)\n    self._t.update(self._dt())", "piece": "m._update_time(passno)"}
{"function_name": "_update_regular", "function_define": "    self._add_flows()\n    self._update_pools()\n    self._update_equations()", "piece": "self._update_pools()"}
{"function_name": "_update_priority", "function_define": "    self._add_priority_flows()\n    self._update_pools()\n    self._update_equations()", "piece": "self._update_pools()"}
{"function_name": "_reset_pools", "function_define": "    for m in self._models:\n    m._reset_pools()\n    for e in self._pools:", "piece": "m._reset_pools()"}
{"function_name": "_reset_samples", "function_define": "    for m in self._models:\n    m._reset_samples()\n    for e in self._samples:", "piece": "m._reset_samples()"}
{"function_name": "_reset_equations", "function_define": "    for m in self._models:\n    m._reset_equations()\n    for e in self._equations:", "piece": "m._reset_equations()"}
{"function_name": "_reset_flows", "function_define": "    for m in self._models:\n    m._reset_flows()\n    for e in self._flows:", "piece": "m._reset_flows()"}
{"function_name": "_reset_time", "function_define": "    for m in self._models:\n    m._reset_time()\n    self._t.reset()", "piece": "m._reset_time()"}
{"function_name": "_save_output", "function_define": "    self._output = {}\n    for key in self._out:\n    e = getattr(self, key)", "piece": "for key in self._out:"}
{"function_name": "_init_output_mc", "function_define": "    output_mc = {}\n    for k, v in output.items():\n    if not isinstance(v, dict):", "piece": "for k, v in output.items():"}
{"function_name": "junit5_test", "function_define": "    for arg in FILTER_KWARGS:\n    if arg in kwargs.keys():\n    kwargs.pop(arg)", "piece": "if arg in kwargs.keys():"}
{"function_name": "create_key", "function_define": "    specified context is None.\n    if context is None:\n    raise exception.Forbidden()", "piece": "if context is None:"}
{"function_name": "search_notes", "function_define": "    items = []\n    if len(notes) == 0:\n    for item in notes[:8]:", "piece": "if len(notes) == 0:"}
{"function_name": "test_capture", "function_define": "    vision = VisionSubclass(0)\n    img = processor.capture()\n    assert isinstance(img, Frame)", "piece": "img = processor.capture()"}
{"function_name": "get_readings", "function_define": "    v = ina.voltage()\n    i = ina.current()\n    p = ina.power()", "piece": "i = ina.current()"}
{"function_name": "get_field_style", "function_define": "    if style == 'ueditor':\n    param = {}\n    param.update(widget.attrs)", "piece": "param = {}"}
{"function_name": "on_stderr", "function_define": "    logger.warning(stderr)\n    logger.error(stderr)\n    self.notify_failure()", "piece": "logger.error(stderr)"}
{"function_name": "find_errors", "function_define": "    content = json.loads(last_line)\n    except ValueError:\n    self.notify_failure()", "piece": "except ValueError:"}
{"function_name": "reposition_match", "function_define": "    match = m.match\n    end_line = match['endLine'] - 1\n    text = vv.select_line(_line)", "piece": "end_line = match['endLine'] - 1"}
{"function_name": "InputInformation", "function_define": "    name = input('\u8bf7\u8f93\u5165\u5f55\u5165\u7684\u540d\u5b57\uff1a')\n    subjects.append(name)\n    print('\u8bf7\u8010\u5fc3\u7b49\u5f85\u4e00\u4f1a')", "piece": "subjects.append(name)"}
{"function_name": "naive_bayes", "function_define": "    classes = np.unique(target)\n    classes.sort()\n    count = {}", "piece": "classes.sort()"}
{"function_name": "checkinput", "function_define": "    strout = ''\n    for idx, i in enumerate(guess):\n    if wrd[idx] == i:", "piece": "for idx, i in enumerate(guess):"}
{"function_name": "create_setblock", "function_define": "    block, command = block\n    if block.mode == 'CHAIN':\n    elif block.mode == 'REPEAT':", "piece": "if block.mode == 'CHAIN':"}
{"function_name": "switch_users", "function_define": "    if self._user_type == user_type:\n    except NoSuchElementError:\n    self.update_constants()", "piece": "except NoSuchElementError:"}
{"function_name": "shut_down", "function_define": "    if self._shut_down:\n    self._shut_down = True\n    self._auth_provider.close()", "piece": "self._shut_down = True"}
{"function_name": "plan_day28", "function_define": "    c_tape = [27.024, 24.8, 19.84]\n    m7_pit_vals = None\n    yield from align.m1pit", "piece": "m7_pit_vals = None"}
{"function_name": "plan_night27b", "function_define": "    c_tape = [27.024, 24.8, 19.84]\n    m7_pit_vals = None\n    yield from align.m1pit", "piece": "m7_pit_vals = None"}
{"function_name": "plan_evening_28", "function_define": "    m7_pit_vals = None\n    yield from align.m1pit\n    yield from m3_check()", "piece": "yield from align.m1pit"}
{"function_name": "plan_night_28", "function_define": "    yield from pol_V(3)\n    yield from align.m1pit\n    yield from m3_check()", "piece": "yield from align.m1pit"}
{"function_name": "plan_night_31", "function_define": "    yield from align.m1pit\n    yield from m3_check()\n    yield from sleep(30)", "piece": "yield from m3_check()"}
{"function_name": "plan_morning_1", "function_define": "    yield from align.m1pit\n    yield from m3_check()\n    yield from sleep(30)", "piece": "yield from m3_check()"}
{"function_name": "plan_evening_1", "function_define": "    yield from sleep(30)\n    m7_pit_vals = None\n    yield from align.m1pit", "piece": "m7_pit_vals = None"}
{"function_name": "plan_morning_30", "function_define": "    yield from align.m1pit\n    yield from m3_check()\n    yield from sleep(30)", "piece": "yield from m3_check()"}
{"function_name": "plan_evening_30", "function_define": "    yield from align.m1pit\n    yield from m3_check()\n    yield from sleep(30)", "piece": "yield from m3_check()"}
{"function_name": "plan_lunch27", "function_define": "    m7_pit_vals = None\n    yield from pol_H(0)\n    yield from align.m1pit", "piece": "yield from pol_H(0)"}
{"function_name": "plan_lunch27b", "function_define": "    m7_pit_vals = None\n    yield from align.m1pit\n    yield from m3_check()", "piece": "yield from align.m1pit"}
{"function_name": "plan_first_night", "function_define": "    m7_pit_vals = None\n    yield from m3_check()\n    yield from align.m1pit", "piece": "yield from m3_check()"}
{"function_name": "test_no_params", "function_define": "    clf = LinearRegression()\n    X = X[:, np.newaxis]\n    clf.fit(X, y)", "piece": "X = X[:, np.newaxis]"}
{"function_name": "test_accountant", "function_define": "    acc = BudgetAccountant()\n    X = np.linspace(-1, 1, 1000)\n    y = X.copy()", "piece": "X = np.linspace(-1, 1, 1000)"}
{"function_name": "load_img_list", "function_define": "    lines = f.readlines()\n    if load_test:\n    lines = f.readlines()", "piece": "if load_test:"}
{"function_name": "load_colmap", "function_define": "    depths = []\n    masks = []\n    for image_name in image_list:", "piece": "masks = []"}
{"function_name": "load_gt_depths", "function_define": "    depths = []\n    masks = []\n    for image_name in image_list:", "piece": "masks = []"}
{"function_name": "load_depths", "function_define": "    depths = []\n    for image_name in image_list:\n    depth = np.load(depth_path)", "piece": "for image_name in image_list:"}
{"function_name": "load_rgbs", "function_define": "    from PIL import Image\n    rgbs = []\n    for image_name in image_list:", "piece": "rgbs = []"}
{"function_name": "load_rgbs_np", "function_define": "    rgbs = []\n    for image_name in image_list:\n    if is_png:", "piece": "for image_name in image_list:"}
{"function_name": "visualize_depth", "function_define": "    respectively.\n    if not direct:\n    depth = 1.0 / (depth + 1e-06)", "piece": "if not direct:"}
{"function_name": "interaction", "function_define": "    sys.stdin = open(0)\n    finally:\n    sys.stdin = _stdin", "piece": "finally:"}
{"function_name": "setup_receiver", "function_define": "    ssh = paramiko.SSHClient()\n    except Exception as e:\n    print(e)", "piece": "except Exception as e:"}
{"function_name": "setup_sender", "function_define": "    ssh = paramiko.SSHClient()\n    except Exception as e:\n    print(e)", "piece": "except Exception as e:"}
{"function_name": "reinforce", "function_define": "    priority = self.priority()\n    while available:\n    available -= 1", "piece": "while available:"}
{"function_name": "freemove", "function_define": "    if srcs:\n    src = srcs[-1]\n    n = src.forces - 1", "piece": "src = srcs[-1]"}
{"function_name": "compute_hessian", "function_define": "    bs = x.shape[0]\n    with torch.no_grad():\n    if net[k].bias is not None:", "piece": "with torch.no_grad():"}
{"function_name": "__chapters_dic", "function_define": "    chapters = self.__chapters\n    chapters_dict = {}\n    for i in range(len(cn)):", "piece": "chapters_dict = {}"}
{"function_name": "slowhello", "function_define": "    s = 'Hello World!'\n    for i in range(len(s)):\n    os.system('cls')", "piece": "for i in range(len(s)):"}
{"function_name": "create_revision", "function_define": "    with transaction.atomic():\n    with create_revision():\n    setattr(article, k, v)", "piece": "with create_revision():"}
{"function_name": "post_grade", "function_define": "    request_time = time.time()\n    if not request.is_json:\n    content = request.get_json()", "piece": "if not request.is_json:"}
{"function_name": "_process_dir", "function_define": "    dataset = []\n    with open(list_path, 'r') as f:\n    lines = f.readlines()", "piece": "with open(list_path, 'r') as f:"}
{"function_name": "do_upgrade", "function_define": "    result = cursor.fetchall()\n    if result:\n    for s in sql:", "piece": "if result:"}
{"function_name": "buffStat", "function_define": "    b = None\n    if len(self.buffs) > 0:\n    b = self.buffs[0]", "piece": "if len(self.buffs) > 0:"}
{"function_name": "setInterval", "function_define": "    if self.interval != v:\n    if f > 1.0:\n    self.convert()", "piece": "if f > 1.0:"}
{"function_name": "updateDraw", "function_define": "    self.move(self.dir)\n    self.life -= 1\n    self.draw(screen)", "piece": "self.life -= 1"}
{"function_name": "shotting", "function_define": "    shot = False\n    for b in self.bullets:\n    shot = True", "piece": "for b in self.bullets:"}
{"function_name": "checksum", "function_define": "    for e in self.units:\n    if not pc.shotting(e):\n    nu.append(e)", "piece": "if not pc.shotting(e):"}
{"function_name": "catchTarget", "function_define": "    x = self.pos[0] - self.target[0]\n    y = self.pos[1] - self.target[1]\n    if y == 0:", "piece": "y = self.pos[1] - self.target[1]"}
{"function_name": "safe_execute", "function_define": "    Returns:\n    if not context:\n    context = {}", "piece": "if not context:"}
{"function_name": "preprocess_model", "function_define": "    Parameters\n    model : multitfa.core.tmodel\n    multitfa model, updated", "piece": "model : multitfa.core.tmodel"}
{"function_name": "subfactory", "function_define": "    if len(self.dimensions) > 1:\n    for field in list(fields):\n    fields.discard(field)", "piece": "for field in list(fields):"}
{"function_name": "event_page", "function_define": "    returned from self.func(doc)\n    Parameters\n    doc : dict", "piece": "Parameters"}
{"function_name": "_add_figure", "function_define": "    tab = QWidget()\n    canvas = FigureCanvas(fig)\n    canvas.setMinimumWidth(640)", "piece": "canvas = FigureCanvas(fig)"}
{"function_name": "load_tests", "function_define": "    tests = [TestRender]\n    suite = unittest.TestSuite()\n    for test_class in tests:", "piece": "suite = unittest.TestSuite()"}
{"function_name": "get_temperature", "function_define": "    result_flag = False\n    if temperature is not None:\n    temperature = int(temperature)", "piece": "if temperature is not None:"}
{"function_name": "click_buy_button", "function_define": "    result_flag = False\n    if result_flag:\n    self.switch_page(product_type)", "piece": "if result_flag:"}
{"function_name": "jupyterhub", "function_define": "    import importlib\n    import sirepo.template\n    importlib.import_module(m)", "piece": "import sirepo.template"}
{"function_name": "nginx_proxy", "function_define": "    Used for development only.\n    import sirepo.template\n    f = run_dir.join('default.conf')", "piece": "import sirepo.template"}
{"function_name": "_cfg_emails", "function_define": "    Returns:\n    list: validated emails\n    import pyisemail", "piece": "list: validated emails"}
{"function_name": "StepTrialCB", "function_define": "    if not TheSim.IsRunning:\n    TheSim.IsRunning = True\n    TheSim.TrainTrial()", "piece": "TheSim.IsRunning = True"}
{"function_name": "StepEpochCB", "function_define": "    if not TheSim.IsRunning:\n    TheSim.IsRunning = True\n    TheSim.ToolBar.UpdateActions()", "piece": "TheSim.IsRunning = True"}
{"function_name": "StepRunCB", "function_define": "    if not TheSim.IsRunning:\n    TheSim.IsRunning = True\n    TheSim.ToolBar.UpdateActions()", "piece": "TheSim.IsRunning = True"}
{"function_name": "TestTrialCB", "function_define": "    if not TheSim.IsRunning:\n    TheSim.IsRunning = True\n    TheSim.TestTrial(False)", "piece": "TheSim.IsRunning = True"}
{"function_name": "TestAllCB", "function_define": "    if not TheSim.IsRunning:\n    TheSim.IsRunning = True\n    TheSim.ToolBar.UpdateActions()", "piece": "TheSim.IsRunning = True"}
{"function_name": "SOATestTrialCB", "function_define": "    if not TheSim.IsRunning:\n    TheSim.IsRunning = True\n    TheSim.SOATestTrial(False)", "piece": "TheSim.IsRunning = True"}
{"function_name": "SOATestAllCB", "function_define": "    if not TheSim.IsRunning:\n    TheSim.IsRunning = True\n    TheSim.ToolBar.UpdateActions()", "piece": "TheSim.IsRunning = True"}
{"function_name": "DefaultsCB", "function_define": "    TheSim.Defaults()\n    TheSim.Init()\n    TheSim.UpdateClassView()", "piece": "TheSim.Init()"}
{"function_name": "ConfigEnv", "function_define": "    if ss.MaxRuns == 0:\n    ss.MaxRuns = 1\n    if ss.MaxEpcs == 0:", "piece": "ss.MaxRuns = 1"}
{"function_name": "ConfigNet", "function_define": "    net.InitName(net, 'Stroop')\n    full = prjn.NewFull()\n    clr2hid = prjn.NewOneToOne()", "piece": "full = prjn.NewFull()"}
{"function_name": "AlphaCyc", "function_define": "    if ss.Win != 0:\n    ss.Win.PollEvents()\n    viewUpdt = ss.TrainUpdt.value", "piece": "ss.Win.PollEvents()"}
{"function_name": "AlphaCycTest", "function_define": "    viewUpdt = ss.TestUpdt.value\n    train = False\n    ss.Net.AlphaCycInit()", "piece": "train = False"}
{"function_name": "AlphaCycTestCyc", "function_define": "    viewUpdt = ss.TestUpdt.value\n    train = False\n    ss.Net.AlphaCycInit()", "piece": "train = False"}
{"function_name": "ApplyInputs", "function_define": "    ss.Net.InitExt()\n    for lnm in lays:\n    pats = en.State(ly.Nm)", "piece": "for lnm in lays:"}
{"function_name": "TrainTrial", "function_define": "    if ss.NeedsNewRun:\n    ss.NewRun()\n    ss.TrainEnv.Step()", "piece": "ss.NewRun()"}
{"function_name": "InitStats", "function_define": "    ss.SumErr = 0\n    ss.SumSSE = 0\n    ss.SumAvgSSE = 0", "piece": "ss.SumSSE = 0"}
{"function_name": "TrialStats", "function_define": "    ss.TrlSSE = out.SSE(0.5)\n    if ss.TrlSSE > 0:\n    ss.TrlErr = 1", "piece": "if ss.TrlSSE > 0:"}
{"function_name": "TrainEpoch", "function_define": "    ss.StopNow = False\n    curEpc = ss.TrainEnv.Epoch.Cur\n    while True:", "piece": "curEpc = ss.TrainEnv.Epoch.Cur"}
{"function_name": "TrainRun", "function_define": "    ss.StopNow = False\n    curRun = ss.TrainEnv.Run.Cur\n    while True:", "piece": "curRun = ss.TrainEnv.Run.Cur"}
{"function_name": "TestTrial", "function_define": "    ss.TestEnv.Step()\n    ss.UpdateView(False)\n    ss.LogTstEpc(ss.TstEpcLog)", "piece": "ss.UpdateView(False)"}
{"function_name": "RunTestAll", "function_define": "    ss.StopNow = False\n    ss.TestAll()\n    ss.Stopped()", "piece": "ss.TestAll()"}
{"function_name": "SOATestTrial", "function_define": "    ss.SOATestEnv.Step()\n    ss.UpdateView(False)\n    if returnOnChg:", "piece": "ss.UpdateView(False)"}
{"function_name": "SOATestAll", "function_define": "    ss.SOATrlLog.SetNumRows(0)\n    while True:\n    ss.SOATestTrial(True)", "piece": "while True:"}
{"function_name": "RunSOATestAll", "function_define": "    ss.StopNow = False\n    ss.SOATestAll()\n    ss.Stopped()", "piece": "ss.SOATestAll()"}
{"function_name": "SetParams", "function_define": "    otherwise just the named sheet\n    if sheet == '':\n    sps = ss.ParamSet.split()", "piece": "if sheet == '':"}
{"function_name": "SetParamsSet", "function_define": "    otherwise just the named sheet\n    if 'Network' in pset.Sheets:\n    ss.Net.ApplyParams(netp, setMsg)", "piece": "if 'Network' in pset.Sheets:"}
{"function_name": "LogTrnEpc", "function_define": "    row = dt.Rows\n    dt.SetNumRows(row + 1)\n    epc = ss.TrainEnv.Epoch.Prv", "piece": "dt.SetNumRows(row + 1)"}
{"function_name": "LogTstTrl", "function_define": "    epc = ss.TrainEnv.Epoch.Prv\n    row = dt.Rows\n    if dt.Rows <= row:", "piece": "row = dt.Rows"}
{"function_name": "ConfigTstTrlLog", "function_define": "    nt = ss.TestEnv.Table.Len()\n    for lnm in ss.TstRecLays:\n    dt.SetFromSchema(sch, nt)", "piece": "for lnm in ss.TstRecLays:"}
{"function_name": "ConfigTstTrlPlot", "function_define": "    plt.Params.XAxisCol = 'Trial'\n    plt.SetTable(dt)\n    plt.Params.Points = True", "piece": "plt.SetTable(dt)"}
{"function_name": "LogSOATrl", "function_define": "    epc = ss.TrainEnv.Epoch.Prv\n    row = dt.Rows\n    if dt.Rows <= row:", "piece": "row = dt.Rows"}
{"function_name": "ConfigSOATrlLog", "function_define": "    nt = ss.SOATestEnv.Table.Len()\n    for lnm in ss.TstRecLays:\n    dt.SetFromSchema(sch, nt)", "piece": "for lnm in ss.TstRecLays:"}
{"function_name": "ConfigSOATrlPlot", "function_define": "    plt.Params.XAxisCol = 'SOA'\n    plt.SetTable(dt)\n    plt.Params.Points = True", "piece": "plt.SetTable(dt)"}
{"function_name": "LogTstEpc", "function_define": "    row = dt.Rows\n    dt.SetNumRows(row + 1)\n    trl = ss.TstTrlLog", "piece": "dt.SetNumRows(row + 1)"}
{"function_name": "ConfigNetView", "function_define": "    nv.ViewDefaults()\n    nv.ConfigLabels(labs)\n    for li, lnm in enumerate(lays):", "piece": "nv.ConfigLabels(labs)"}
{"function_name": "ConfigGui", "function_define": "    width = 1600\n    height = 1200\n    gi.SetAppName('stroop')", "piece": "height = 1200"}
{"function_name": "freeze_weights", "function_define": "    print(' >> Freeze Weights:')\n    if module == 'generation':\n    param.requires_grad = False", "piece": "if module == 'generation':"}
{"function_name": "save_images", "function_define": "    for k, v in val_samples.items():\n    if isinstance(v, list):\n    for i in range(len(v)):", "piece": "if isinstance(v, list):"}
{"function_name": "test_tool", "function_define": "    LOGGER.info(result)\n    LOGGER.info(execute_cmd)\n    LOGGER.info(result)", "piece": "LOGGER.info(execute_cmd)"}
{"function_name": "test_run", "function_define": "    self.login()\n    cmd += 'txaio.use_asyncio();'\n    self.assertEqual(exit_code, 0)", "piece": "cmd += 'txaio.use_asyncio();'"}
{"function_name": "test_as_tuple", "function_define": "    assert name == 'foo'\n    assert version == '1.1'\n    assert extras == ()", "piece": "assert version == '1.1'"}
{"function_name": "api_handler", "function_define": "    API main entry point.\n    Parameters\n    req: HttpRequest", "piece": "Parameters"}
{"function_name": "process_test", "function_define": "    if expected_list_ids is None:\n    expected_list_ids = []\n    if expected_range is None:", "piece": "expected_list_ids = []"}
{"function_name": "test_cif", "function_define": "    Test download of cif file\n    from aiida.orm import load_node\n    rv_obj = client.get(url)", "piece": "from aiida.orm import load_node"}
{"function_name": "test_comments", "function_define": "    Get the node comments\n    rv_obj = client.get(url)\n    all_comments = []", "piece": "rv_obj = client.get(url)"}
{"function_name": "test_repo", "function_define": "    from aiida.orm import load_node\n    response_value = client.get(url)\n    response_obj = client.get(url)", "piece": "response_value = client.get(url)"}
{"function_name": "add_by_console", "function_define": "    print('Input new alert data:')\n    print('---------------------')\n    if self.market is None:", "piece": "print('---------------------')"}
{"function_name": "choose_market", "function_define": "    self.market = input()\n    print('Supported markets:')\n    print('Input not recognized.')", "piece": "print('Supported markets:')"}
{"function_name": "dp_setup", "function_define": "    s3 = boto3.client('s3')\n    module = FakeModule(**params)\n    if os.getenv('PLACEBO_RECORD'):", "piece": "module = FakeModule(**params)"}
{"function_name": "fail_json", "function_define": "    self.exit_args = args\n    self.exit_kwargs = kwargs\n    raise Exception('FAIL')", "piece": "self.exit_kwargs = kwargs"}
{"function_name": "bench_rtt_time", "function_define": "    self.run_rtt('rtt idle')\n    self.start_load()\n    self.run_rtt('rtt load (+10x)')", "piece": "self.start_load()"}
{"function_name": "stop_load", "function_define": "    for list in self.load_listener:\n    list.cancel()\n    self.load_listener.clear()", "piece": "list.cancel()"}
{"function_name": "proceed_item_val", "function_define": "    LOCK.release()\n    self.item_values.popleft()\n    except IndexError:", "piece": "self.item_values.popleft()"}
{"function_name": "test_dedupe", "function_define": "    for i in range(4):\n    for j in range(7):\n    test0 = midi.Pattern()", "piece": "for j in range(7):"}
{"function_name": "hex_to_b64", "function_define": "    str_array = []\n    for item in split_hex_array:\n    item_new = bytes.fromhex(item)", "piece": "for item in split_hex_array:"}
{"function_name": "going_backwards", "function_define": "    b64_decode_array = []\n    for int in b64_array:\n    print(whole_array)", "piece": "for int in b64_array:"}
{"function_name": "test_parse_date", "function_define": "    path = '/some/file-20190101.nc'\n    expect = dt.datetime(2019, 1, 1)\n    self.assertEqual(expect, result)", "piece": "expect = dt.datetime(2019, 1, 1)"}
{"function_name": "test_valid_times", "function_define": "    writer = Formatter(dataset)\n    writer.define(self.times)\n    expect = self.times", "piece": "writer.define(self.times)"}
{"function_name": "test_pressures", "function_define": "    writer = Formatter(dataset)\n    writer.define(self.times)\n    expect = []", "piece": "writer.define(self.times)"}
{"function_name": "calculate", "function_define": "    if not que:\n    que.reverse()\n    num1 = int(que.pop())", "piece": "que.reverse()"}
{"function_name": "InitBasicSetting", "function_define": "    self.Win.title('Plotter Gui 3D')\n    self.Win.geometry('430x279')\n    self.Win.resizable(False, False)", "piece": "self.Win.geometry('430x279')"}
{"function_name": "VSA_EState_", "function_define": "    if bins is None:\n    bins = vsaBins\n    volContribs = VSAContribs_(mol)", "piece": "bins = vsaBins"}
{"function_name": "EState_VSA_", "function_define": "    if bins is None:\n    bins = estateBins\n    volContribs = VSAContribs_(mol)", "piece": "bins = estateBins"}
{"function_name": "send_command", "function_define": "    self.abort_flag = False\n    timer.start()\n    while self.response is None:", "piece": "timer.start()"}
{"function_name": "set_abort_flag", "function_define": "    Sets self.abort_flag to True.\n    timeout has occurred.\n    self.abort_flag = True", "piece": "timeout has occurred."}
{"function_name": "extract_keywords", "function_define": "    if len(self.new_column) == 0:\n    text = self.new_column\n    text = self.new_column", "piece": "text = self.new_column"}
{"function_name": "acl_direction", "function_define": "    if r['direction'] == 'ingress':\n    portdir = 'outport'\n    portdir = 'inport'", "piece": "portdir = 'outport'"}
{"function_name": "acl_ethertype", "function_define": "    match = ''\n    ip_version = None\n    icmp = None", "piece": "ip_version = None"}
{"function_name": "add_acl_dhcp", "function_define": "    acl_list = []\n    acl_list.append(acl)\n    acl_list.append(acl)", "piece": "acl_list.append(acl)"}
{"function_name": "add_acls", "function_define": "    acl_list = []\n    if not is_sg_enabled():\n    if not sec_groups:", "piece": "if not is_sg_enabled():"}
{"function_name": "in_array", "function_define": "    inArray = set()\n    for i in a1:\n    for x in a2:", "piece": "for i in a1:"}
{"function_name": "test_get_branch", "function_define": "    os.environ['GITHUB_REF'] = ''\n    os.putenv('GITHUB_REF', '')\n    branch = get_branch()", "piece": "os.putenv('GITHUB_REF', '')"}
{"function_name": "upload_courses", "function_define": "    df = parse_data(file_path)\n    df = merge_gpa_data(df, gpa_df)\n    engine.insert_df(df, 'courses')", "piece": "df = merge_gpa_data(df, gpa_df)"}
{"function_name": "tag_courses", "function_define": "    Adds all tags to courses\n    f = open(file_path, 'r')\n    course_tags = json.load(f)", "piece": "f = open(file_path, 'r')"}
{"function_name": "remove_nas", "function_define": "    df_ret = df\n    if not inplace:\n    df_ret = pd.DataFrame(df)", "piece": "if not inplace:"}
{"function_name": "__getnested__", "function_define": "    stripped from prefix.\n    if self._nested is None:\n    prefix = item + '__'", "piece": "if self._nested is None:"}
{"function_name": "from_model", "function_define": "    Work-in-progress constructor,\n    d = ModelDict()\n    if not (fields or named_fields):", "piece": "d = ModelDict()"}
{"function_name": "test_scan_keys", "function_define": "    for key in keys:\n    db.connection.set(key, 0)\n    generator = db.scan_keys('fo*')", "piece": "db.connection.set(key, 0)"}
{"function_name": "sub_test", "function_define": "    class Bike(TestRedisModel):\n    name = fields.StringField()\n    class Bike2(TestRedisModel):", "piece": "name = fields.StringField()"}
{"function_name": "test_removed", "function_define": "    assert removed is not None\n    assert removed is not None\n    assert removed is None", "piece": "assert removed is not None"}
{"function_name": "draw_car", "function_define": "    if extended_car:\n    rlWheel = wheel.copy()\n    rrWheel = wheel.copy()", "piece": "rlWheel = wheel.copy()"}
{"function_name": "quadratize", "function_define": "    for index_i in range(index_j):\n    for index_j in range(index_k):\n    for index_i in range(index_j):", "piece": "for index_j in range(index_k):"}
{"function_name": "argmin_QUBO", "function_define": "    num_of_qubits = len(qubo)\n    result_eigenvalue = []\n    result_eigenvector = []", "piece": "result_eigenvalue = []"}
{"function_name": "execute_task", "function_define": "    Execute a task\n    task_id = str(uuid.uuid4())\n    if self.dry_run:", "piece": "task_id = str(uuid.uuid4())"}
{"function_name": "local_task", "function_define": "    Create a local workflow task\n    in log messages\n    decorator_task_config = {}", "piece": "in log messages"}
{"function_name": "remote_task", "function_define": "    Create a remote workflow task\n    used by the called task\n    if total_retries is not None:", "piece": "used by the called task"}
{"function_name": "get_operations", "function_define": "    ops = []\n    offset = 0\n    while True:", "piece": "offset = 0"}
{"function_name": "_task_callback", "function_define": "    error = response.get('error')\n    if error:\n    state = TASK_RESCHEDULED", "piece": "if error:"}
{"function_name": "get_client", "function_define": "    if target == MGMTWORKER_QUEUE:\n    if None not in self._clients:\n    client.add_handler(handler)", "piece": "if None not in self._clients:"}
{"function_name": "search_by", "function_define": "    if column_name is None:\n    if callable(search_method):\n    if tokens and search_lookups:", "piece": "if callable(search_method):"}
{"function_name": "discount", "function_define": "    x: ndarray\n    gamma: float\n    where k = len(x) - t - 1", "piece": "gamma: float"}
{"function_name": "unflatten_vector", "function_define": "    arrs = []\n    for shape in shapes:\n    size = np.prod(shape)", "piece": "for shape in shapes:"}
{"function_name": "compute_blockdim", "function_define": "    blockdim = 1\n    if isinstance(shape, int):\n    shape = [shape]", "piece": "if isinstance(shape, int):"}
{"function_name": "softmax_execute", "function_define": "    if 'tuning' in attrs.keys():\n    t = attrs.get('tuning', False)\n    args = [inputs, output]", "piece": "t = attrs.get('tuning', False)"}
{"function_name": "gen_data", "function_define": "    axis = axis[0]\n    inputsExp = np.exp(inputsSub)\n    outShape = expect.shape", "piece": "inputsExp = np.exp(inputsSub)"}
{"function_name": "softmax_compile", "function_define": "    var_shape = []\n    for i in range(len(shape)):\n    build_shape = var_shape", "piece": "for i in range(len(shape)):"}
{"function_name": "minMeetingRooms", "function_define": "    if not intervals:\n    result = 0\n    count = 0", "piece": "result = 0"}
{"function_name": "from_keras_model", "function_define": "    ground truth as its second.\n    Returns:\n    A `tff.learning.Model` object.", "piece": "Returns:"}
{"function_name": "_forward_pass", "function_define": "    inputs = batch_input.get('x')\n    inputs = batch_input[0]\n    if inputs is None:", "piece": "inputs = batch_input[0]"}
{"function_name": "finalize_metric", "function_define": "    keras_metric = None\n    except TypeError as e:\n    assignments = []", "piece": "except TypeError as e:"}
{"function_name": "update_state", "function_define": "    if len(self._loss_fns) == 1:\n    batch_size = tf.shape(y_pred)[0]\n    batch_loss = tf.zeros(())", "piece": "batch_size = tf.shape(y_pred)[0]"}
{"function_name": "time_step", "function_define": "    x1 = self.x[-1]\n    y1 = self.y[-1]\n    z1 = self.z[-1]", "piece": "y1 = self.y[-1]"}
{"function_name": "bump_fitness", "function_define": "    if len(fitness) == 0:\n    major = 0\n    minor = 1", "piece": "major = 0"}
{"function_name": "filter_word", "function_define": "    if not word:\n    if word.isdigit():\n    word = self.replace_number", "piece": "if word.isdigit():"}
{"function_name": "preprocess_state", "function_define": "    if self.lowercase:\n    token = token.lower()\n    new_state = DialogState()", "piece": "token = token.lower()"}
{"function_name": "raise_to_power", "function_define": "    result = 1\n    for index in range(pow_num):\n    result = result * base_num", "piece": "for index in range(pow_num):"}
{"function_name": "sample_vis", "function_define": "    fig.clf()\n    batch_size = images.shape[0]\n    gt_objcorners2d = None", "piece": "batch_size = images.shape[0]"}
{"function_name": "valid_route", "function_define": "    route (str): Route url pattern.\n    Returns:\n    bool: True if valid, else False.", "piece": "Returns:"}
{"function_name": "quicksort", "function_define": "    if len(xs) == 0:\n    pivot = xs[0]\n    xs = xs[1:]", "piece": "pivot = xs[0]"}
{"function_name": "setColorDialog", "function_define": "    assert colorDialog is not None\n    assert self._dialog is None\n    self._dialog = colorDialog", "piece": "assert self._dialog is None"}
{"function_name": "_updateColormap", "function_define": "    if self._dialog is None:\n    colormap = image.getColormap()\n    mode = image.getComplexMode()", "piece": "colormap = image.getColormap()"}
{"function_name": "draw_forward", "function_define": "    o = self.cur_loc\n    l = self.length\n    a = self.cur_rot", "piece": "l = self.length"}
{"function_name": "add_mint", "function_define": "    update entries\n    self.mint_sign.append(mint_sign)\n    db.session.commit()", "piece": "self.mint_sign.append(mint_sign)"}
{"function_name": "test___eq__", "function_define": "    rxn = deepcopy(self.rxn)\n    self.assertEqual(self.rxn, rxn)\n    rxn.set_idx_in_path(2)", "piece": "self.assertEqual(self.rxn, rxn)"}
{"function_name": "test_add_miriam", "function_define": "    db = 'bigg'\n    xref = 'bigg_ID'\n    self.rxn.add_miriam(db, xref)", "piece": "xref = 'bigg_ID'"}
{"function_name": "activate", "function_define": "    Returns:\n    project = load_project(dirname)\n    if result.failed:", "piece": "project = load_project(dirname)"}
{"function_name": "episodes", "function_define": "    Builder for rebulk object.\n    eps = matches.named('episode')\n    if match.name != other.name:", "piece": "eps = matches.named('episode')"}
{"function_name": "is_consecutive", "function_define": "    previous_match = None\n    valid = True\n    if previous_match:", "piece": "valid = True"}
{"function_name": "set_size_object", "function_define": "    returns tuple\n    x_fov = np.max(x) - np.min(x)\n    y_fov = np.max(y) - np.min(y)", "piece": "x_fov = np.max(x) - np.min(x)"}
{"function_name": "allocateMatrix", "function_define": "    rv = [0.0] * numRows\n    for i in range(numRows):\n    rv[i] = [0.0] * numCols", "piece": "for i in range(numRows):"}
{"function_name": "runpf_fast", "function_define": "    as a Python-file.\n    ppc['branch'][:, [0, 1]] -= 1\n    ppc['bus'][:, 0] -= 1", "piece": "ppc['branch'][:, [0, 1]] -= 1"}
{"function_name": "after_scenario", "function_define": "    context.browser.quit()\n    context.browser = None\n    context.display.stop()", "piece": "context.browser = None"}
{"function_name": "_iterate", "function_define": "    if 'process' in spec_branch:\n    if not isinstance(branch, dict):\n    if 'child_nodes' in spec_branch:", "piece": "if not isinstance(branch, dict):"}
{"function_name": "test_map", "function_define": "    for k, val in obj.cc.items():\n    if k == 'key1':\n    self.fail('\"key1\" not found')", "piece": "if k == 'key1':"}
{"function_name": "test_if_not_ref", "function_define": "    self.assertEqual(obj.e1[0].a, 1)\n    obj = EObj({'e2': {'a': 1}})\n    self.assertEqual(obj.e2.a, 1)", "piece": "obj = EObj({'e2': {'a': 1}})"}
{"function_name": "test_inheritance", "function_define": "    self.assertEqual(obj.a, 1)\n    self.assertEqual(obj.b, 2)\n    self.assertEqual(obj.f1, 3)", "piece": "self.assertEqual(obj.b, 2)"}
{"function_name": "test_compare", "function_define": "    obj_1 = AObj({'a': 1, 'b': 1})\n    obj_2 = AObj({'a': 2, 'b': 1})\n    obj_2 = AObj({'b': 1})", "piece": "obj_2 = AObj({'a': 2, 'b': 1})"}
{"function_name": "test_dump", "function_define": "    spec = {'b': 1}\n    obj = AObj(spec)\n    spec = {'b': 1, 'c': {'bb': 2}}", "piece": "obj = AObj(spec)"}
{"function_name": "test_resolve", "function_define": "    resolved = obj.resolve('c')\n    resolved = obj.resolve('cc')\n    resolved = obj.resolve('ccc')", "piece": "resolved = obj.resolve('cc')"}
{"function_name": "test_renamed", "function_define": "    obj = AObj({'a': 101})\n    self.assertEqual(obj.a, 101)\n    obj = FObj({'a': 102})", "piece": "self.assertEqual(obj.a, 101)"}
{"function_name": "_call_block", "function_define": "    if isinstance(block, list):\n    elif isinstance(block, tuple):\n    if fname == 'name':", "piece": "elif isinstance(block, tuple):"}
{"function_name": "_call_tuple", "function_define": "    out = []\n    for b in block:\n    if fname == 'process':", "piece": "for b in block:"}
{"function_name": "get_flipped_vars", "function_define": "    is_flipped = {}\n    is_flipped[variable.name] = 1.0\n    is_flipped[variable.name] = 0.0", "piece": "is_flipped[variable.name] = 1.0"}
{"function_name": "deprecated", "function_define": "    when the function is used.\n    newFunc.__name__ = func.__name__\n    newFunc.__doc__ = func.__doc__", "piece": "newFunc.__name__ = func.__name__"}
{"function_name": "test_full_result", "function_define": "    lb = np.array([0, -4])\n    ub = np.array([1, 0])\n    r = A.dot(res.x) - b", "piece": "ub = np.array([1, 0])"}
{"function_name": "process_handle", "function_define": "    text: \u6307\u4ee4\n    in_to_fp: \u7236\u8fdb\u7a0b\u7ed9\u5b50\u8fdb\u7a0b\u53d1\u6d88\u606f\u7684pipe \u8f93\u5165\u7aef(w)\n    son_processor: \u5b50\u8fdb\u7a0b(Process \u5b9e\u4f8b)", "piece": "in_to_fp: \u7236\u8fdb\u7a0b\u7ed9\u5b50\u8fdb\u7a0b\u53d1\u6d88\u606f\u7684pipe \u8f93\u5165\u7aef(w)"}
{"function_name": "printmenu", "function_define": "    print('Here are your options: ')\n    print('----------')\n    for key in menuops:", "piece": "print('----------')"}
{"function_name": "json_parse", "function_define": "    account_event = AccountEvent()\n    account_change_list = list()\n    account_change = AccountChange()", "piece": "account_change_list = list()"}
{"function_name": "winsorize_series", "function_define": "    q = s.quantile([0.05, 0.95])\n    s[s < q.iloc[0]] = q.iloc[0]\n    s[s > q.iloc[1]] = q.iloc[1]", "piece": "s[s < q.iloc[0]] = q.iloc[0]"}
{"function_name": "process_results", "function_define": "    columns = conf.aggregated_data\n    file_name, df = read_raw()\n    fields_to_keep = columns[t][1]", "piece": "file_name, df = read_raw()"}
{"function_name": "get_similarity", "function_define": "    count = 0\n    for query_token in query_tokens:\n    for model_token in model_tokens:", "piece": "for query_token in query_tokens:"}
{"function_name": "reverseWords", "function_define": "    words = ' '.join(string.split())\n    while left < right:\n    temp = words[left]", "piece": "while left < right:"}
{"function_name": "event_loop", "function_define": "    loop = loop_mod.new_event_loop()\n    asyncio.set_event_loop(loop)\n    if loop_mod != uvloop:", "piece": "asyncio.set_event_loop(loop)"}
{"function_name": "convert_example", "function_define": "    sentence1 = example['sentence1']\n    sentence2 = example['sentence2']\n    if not is_test:", "piece": "sentence2 = example['sentence2']"}
{"function_name": "_create_examples", "function_define": "    examples = []\n    if phase == 'train':\n    for example in datasets:", "piece": "if phase == 'train':"}
{"function_name": "store_asset", "function_define": "    asset (dict): the asset.\n    Returns:\n    The result of the operation.", "piece": "Returns:"}
{"function_name": "store_assets", "function_define": "    Returns:\n    The database response.\n    raise NotImplementedError", "piece": "The database response."}
{"function_name": "store_metadatas", "function_define": "    Returns:\n    The result of the operation.\n    raise NotImplementedError", "piece": "The result of the operation."}
{"function_name": "get_transaction", "function_define": "    Returns:\n    The result of the operation.\n    raise NotImplementedError", "piece": "The result of the operation."}
{"function_name": "get_transactions", "function_define": "    Returns:\n    The result of the operation.\n    raise NotImplementedError", "piece": "The result of the operation."}
{"function_name": "get_asset", "function_define": "    Returns:\n    The result of the operation.\n    raise NotImplementedError", "piece": "The result of the operation."}
{"function_name": "get_spent", "function_define": "    transaction.\n    Returns:\n    raise NotImplementedError", "piece": "Returns:"}
{"function_name": "get_assets", "function_define": "    the database.\n    Returns:\n    raise NotImplementedError", "piece": "Returns:"}
{"function_name": "text_search", "function_define": "    diacritic search.\n    each document.\n    Returns:", "piece": "each document."}
{"function_name": "store_block", "function_define": "    Returns:\n    The result of the operation.\n    raise NotImplementedError", "piece": "The result of the operation."}
{"function_name": "_default_categ", "function_define": "    if self._context is None:\n    self._context = {}\n    md = self.env['ir.model.data']", "piece": "self._context = {}"}
{"function_name": "_tax_incl", "function_define": "    res = {}\n    for product in self:\n    val = 0.0", "piece": "for product in self:"}
{"function_name": "action_book_req", "function_define": "    for rec in self:\n    result = action.read()[0]\n    if not book_req:", "piece": "result = action.read()[0]"}
{"function_name": "full_like", "function_define": "    Parameters\n    symbols : :class:`Symbol`\n    Symbols whose shape to copy", "piece": "symbols : :class:`Symbol`"}
{"function_name": "zeros_like", "function_define": "    Parameters\n    symbols : :class:`Symbol`\n    Symbols whose shape to copy", "piece": "symbols : :class:`Symbol`"}
{"function_name": "ones_like", "function_define": "    Parameters\n    symbols : :class:`Symbol`\n    Symbols whose shape to copy", "piece": "symbols : :class:`Symbol`"}
{"function_name": "find_bubble_sort", "function_define": "    complexity : O(nk)\n    if not nums:\n    for i in range(k):", "piece": "if not nums:"}
{"function_name": "find_heap", "function_define": "    complexity : O(n + k log n)\n    space complecity : O(n)\n    if not nums:", "piece": "space complecity : O(n)"}
{"function_name": "build_scheme", "function_define": "    scheme = []\n    for identity_id in tqdm(h5f):\n    scheme = sorted(scheme)", "piece": "for identity_id in tqdm(h5f):"}
{"function_name": "word_contexts", "function_define": "    contexts = []\n    for sentence in sentences:\n    for i, token in enumerate(strs):", "piece": "for sentence in sentences:"}
{"function_name": "char_contexts", "function_define": "    contexts = []\n    for sentence in sentences:\n    contexts.append(context)", "piece": "for sentence in sentences:"}
{"function_name": "_is_single", "function_define": "    sequence as `obj`.\n    obj_iter = iter(obj)\n    temp_iter = obj_iter", "piece": "obj_iter = iter(obj)"}
{"function_name": "analyze_sentence", "function_define": "    last_uncommon = None\n    in_between = []\n    for word in s + [None]:", "piece": "in_between = []"}
{"function_name": "get_phrase", "function_define": "    if not is_single:\n    new_s = []\n    for words, score in bigrams:", "piece": "new_s = []"}
{"function_name": "split_ngrams", "function_define": "    all_ngrams = []\n    for x in range(n):\n    str_ngrams = []", "piece": "for x in range(n):"}
{"function_name": "get_intptr_type", "function_define": "    if self.intptr_type != False:\n    if ptr_type == None:\n    self.intptr_type = None", "piece": "if ptr_type == None:"}
{"function_name": "test_pneumon", "function_define": "    pneumon.csv and testing shape of\n    test_path = tempfile.mkdtemp()\n    shutil.rmtree(test_path)", "piece": "test_path = tempfile.mkdtemp()"}
{"function_name": "append_group", "function_define": "    group = root.groups[groupname]\n    if self.udim not in dims:\n    continue", "piece": "if self.udim not in dims:"}
{"function_name": "estimate_ts", "function_define": "    Parameters\n    Datasets\n    parameter : `Parameter`", "piece": "Datasets"}
{"function_name": "estimate_scan", "function_define": "    Parameters\n    parameter : `Parameter`\n    result : dict", "piece": "parameter : `Parameter`"}
{"function_name": "estimate_ul", "function_define": "    Parameters\n    parameter : `Parameter`\n    result : dict", "piece": "parameter : `Parameter`"}
{"function_name": "send_commands", "function_define": "    self._check_exists()\n    for command in commands:\n    sleep(0.02)", "piece": "for command in commands:"}
{"function_name": "dragMoveEvent", "function_define": "    event.accept()\n    event.ignore()\n    self.update(updateRect)", "piece": "event.ignore()"}
{"function_name": "addPiece", "function_define": "    if random.random() < 0.5:\n    row = len(self.pixmaps)\n    self.pixmaps.insert(row, pixmap)", "piece": "row = len(self.pixmaps)"}
{"function_name": "removeRows", "function_define": "    if parent.isValid():\n    beginRow = max(0, row)\n    self.endRemoveRows()", "piece": "beginRow = max(0, row)"}
{"function_name": "mimeData", "function_define": "    mimeData = QtCore.QMimeData()\n    for index in indexes:\n    if index.isValid():", "piece": "for index in indexes:"}
{"function_name": "dropMimeData", "function_define": "    if column > 0:\n    if not parent.isValid():\n    if row < 0:", "piece": "if not parent.isValid():"}
{"function_name": "addPieces", "function_define": "    self.pixmaps = []\n    self.locations = []\n    self.endRemoveRows()", "piece": "self.locations = []"}
{"function_name": "openImage", "function_define": "    if not path:\n    if path:\n    newImage = QtGui.QPixmap()", "piece": "if path:"}
{"function_name": "setupWidgets", "function_define": "    frame = QtGui.QFrame()\n    self.piecesList.setSpacing(10)\n    self.model = PiecesModel(self)", "piece": "self.piecesList.setSpacing(10)"}
{"function_name": "find_tag", "function_define": "    result_list: List[str] = []\n    if isinstance(tags, str):\n    tags = [tags]", "piece": "if isinstance(tags, str):"}
{"function_name": "discover_modules", "function_define": "    if module.startswith('__'):\n    continue\n    continue", "piece": "continue"}
{"function_name": "vet_phrase", "function_define": "    print('-' * 50)\n    print(phrase, len(ids))\n    while True:", "piece": "print(phrase, len(ids))"}
{"function_name": "maxSubArray", "function_define": "    ret = max(nums)\n    sub_sum = 0\n    for num in nums:", "piece": "sub_sum = 0"}
{"function_name": "mix_streams", "function_define": "    while True:\n    if random.random() < mix_prob:\n    yield next(stream1)", "piece": "if random.random() < mix_prob:"}
{"function_name": "play_env_problem", "function_define": "    observations = env.reset()\n    while not np.all(done_so_far):\n    if not traj.done:", "piece": "while not np.all(done_so_far):"}
{"function_name": "list_entries", "function_define": "    if only_servers:\n    new_config_data = []\n    new_config_data.append(value)", "piece": "new_config_data = []"}
{"function_name": "create_element", "function_define": "    if element_type == 'allOf':\n    elif element_type == 'codeList':\n    elif element_type == 'object':", "piece": "elif element_type == 'codeList':"}
{"function_name": "create_role_type", "function_define": "    ref = properties.get('$ref')\n    role = Role()\n    role.max_occurs = '1'", "piece": "role = Role()"}
{"function_name": "create_attribute", "function_define": "    attribute = Attribute()\n    attribute.max_occurs = '1'\n    if properties:", "piece": "attribute.max_occurs = '1'"}
{"function_name": "schedule_request", "function_define": "    sel = self.view.sel()\n    if len(sel) < 1:\n    current_point = sel[0].begin()", "piece": "if len(sel) < 1:"}
{"function_name": "handle_response", "function_define": "    phantoms = []\n    for color_info in color_infos:\n    color = color_info['color']", "piece": "for color_info in color_infos:"}
{"function_name": "crop_mvs_input", "function_define": "    for view in range(len(images)):\n    h, w = images[view].shape[0:2]\n    new_h = h", "piece": "h, w = images[view].shape[0:2]"}
{"function_name": "write_cam", "function_define": "    f = file_io.FileIO(file, 'w')\n    f.write('extrinsic\\n')\n    for i in range(0, 4):", "piece": "f.write('extrinsic\\n')"}
{"function_name": "build_skia", "function_define": "    env = os.environ.copy()\n    if sys.platform == 'win32':\n    build_cmd.append('--shared-lib')", "piece": "if sys.platform == 'win32':"}
{"function_name": "finalize_options", "function_define": "    if with_cython:\n    force = linetrace or self.force\n    build_ext.finalize_options(self)", "piece": "force = linetrace or self.force"}
{"function_name": "build_extension", "function_define": "    sources = ext.sources\n    sources = list(sources)\n    depends = sources + ext.depends", "piece": "sources = list(sources)"}
{"function_name": "test_index", "function_define": "    Story: Bookmark pages loads.\n    In order to access the bookmarks\n    When someone sends /bookmarks", "piece": "In order to access the bookmarks"}
{"function_name": "get_word2ind_dic", "function_define": "    word2ind_dic = {}\n    with open(dic_path, 'r') as f:\n    for line in f:", "piece": "with open(dic_path, 'r') as f:"}
{"function_name": "firstFit", "function_define": "    bin_rem = [0] * n\n    for i in range(n):\n    min = c + 1", "piece": "for i in range(n):"}
{"function_name": "test_energy_term", "function_define": "    coords1 = np.random.rand(N, 3)\n    coords2 = np.random.rand(M, 3)\n    weights = np.ones((5,))", "piece": "coords2 = np.random.rand(M, 3)"}
{"function_name": "to_unicode", "function_define": "    if isinstance(s, unicode):\n    if not isinstance(s, str):\n    s = str(s)", "piece": "if not isinstance(s, str):"}
{"function_name": "cleanFishData", "function_define": "    self.hideStaminaBar()\n    self.lurePosition = None\n    self.lfStruggleSequence.pause()", "piece": "self.lurePosition = None"}
{"function_name": "test_uboot", "function_define": "    class UBoot(StringIo):\n    prompt = 'u-boot> '\n    uboot = expect.Handler(UBoot())", "piece": "prompt = 'u-boot> '"}
{"function_name": "test_eol", "function_define": "    iostream = StringIO()\n    handler.send('')\n    handler.send('', send_eol=False)", "piece": "handler.send('')"}
{"function_name": "test_no_split", "function_define": "    class Handler(StringIo):\n    INDATA = '\\nfoo\\nbar\\n'\n    handler.expect('foo\\\\nbar')", "piece": "INDATA = '\\nfoo\\nbar\\n'"}
{"function_name": "frequency_score", "function_define": "    frequency_in_defendant_docs(t))\n    defendant corpora into account\n    Loading six test documents", "piece": "defendant corpora into account"}
{"function_name": "_call_callbacks", "function_define": "    irq, data = irq_data\n    for callback in _callbacks[irq]:\n    callback(*data)", "piece": "for callback in _callbacks[irq]:"}
{"function_name": "wait_for_event", "function_define": "    start_time = time.ticks_ms()\n    event_queue = _events[irq][key]\n    while not event_queue:", "piece": "event_queue = _events[irq][key]"}
{"function_name": "gap_scan", "function_define": "    start_time = time.ticks_ms()\n    args = []\n    if interval_us is not None:", "piece": "args = []"}
{"function_name": "get_candidates", "function_define": "    lines = file_reader.readlines()\n    file_reader.close()\n    overall_list = []", "piece": "file_reader.close()"}
{"function_name": "print_winner", "function_define": "    most_votes = [0, 0]\n    for i in range(len(chart_list)):\n    for i in range(len(chart_list)):", "piece": "for i in range(len(chart_list)):"}
{"function_name": "rectangle", "function_define": "    turtle.pendown()\n    turtle.pensize(1)\n    turtle.color(color)", "piece": "turtle.pensize(1)"}
{"function_name": "parse_argument", "function_define": "    argument = sys.argv[index + 1]\n    except IndexError:\n    print(__doc__)", "piece": "except IndexError:"}
{"function_name": "axis_alignment", "function_define": "    of cutting an axis.\n    train probe. Defaults to CPU.\n    Returns:", "piece": "train probe. Defaults to CPU."}
{"function_name": "insert_in_db", "function_define": "    conn = sqlite3.connect(db)\n    cursor = conn.cursor()\n    conn.commit()", "piece": "cursor = conn.cursor()"}
{"function_name": "get_vehicles_dic", "function_define": "    conn = sqlite3.connect(db)\n    cursor = conn.cursor()\n    vehicles = []", "piece": "cursor = conn.cursor()"}
{"function_name": "get_all_info", "function_define": "    conn = sqlite3.connect(db)\n    cursor = conn.cursor()\n    except Exception as exp:", "piece": "cursor = conn.cursor()"}
{"function_name": "get_all_t", "function_define": "    all_vehicles_array = []\n    for row in vehicles_info_array:\n    id = row[0]", "piece": "for row in vehicles_info_array:"}
{"function_name": "get_t_by_device", "function_define": "    conn = sqlite3.connect(db)\n    cursor = conn.cursor()\n    cursor.execute(sql, [idDev])", "piece": "cursor = conn.cursor()"}
{"function_name": "get_t_by_org", "function_define": "    conn = sqlite3.connect(db)\n    cursor = conn.cursor()\n    cursor.execute(sql, [idOrg])", "piece": "cursor = conn.cursor()"}
{"function_name": "change_ops", "function_define": "    index = 0\n    found = False\n    indices = []", "piece": "found = False"}
{"function_name": "optimize_access", "function_define": "    accessed_names = []\n    accessed_varnames = []\n    for op in ops:", "piece": "accessed_varnames = []"}
{"function_name": "init_caffe_input", "function_define": "    caffe_string = ''\n    layer_counter = 0\n    caffe_string += 'layer{\\n'", "piece": "layer_counter = 0"}
{"function_name": "pad_correction", "function_define": "    for i in range(outchn):\n    res[1, 1, i] = 1\n    caffe_string = ''", "piece": "res[1, 1, i] = 1"}
{"function_name": "_write_caffe", "function_define": "    caffe_string = ''\n    layer_counter = 0\n    caffe_string += 'layer{\\n'", "piece": "layer_counter = 0"}
{"function_name": "_get_weights", "function_define": "    w = np.float32(w)\n    for i in range(self.chn):\n    w[:, :, i, i] = 1", "piece": "for i in range(self.chn):"}
{"function_name": "download_stream", "function_define": "    url (str): recording url\n    LOGGER.error(str(e))\n    with open(fname, 'wb') as file:", "piece": "LOGGER.error(str(e))"}
{"function_name": "download_chat", "function_define": "    url (str): recording url\n    LOGGER.error(str(e))\n    if chat_file.status_code == 200:", "piece": "LOGGER.error(str(e))"}
{"function_name": "search_router", "function_define": "    for package in package_details:\n    continue\n    name = package['name']", "piece": "continue"}
{"function_name": "generate_license", "function_define": "    except StopIteration:\n    template_name = None\n    if template_name:", "piece": "template_name = None"}
{"function_name": "test_valid_env", "function_define": "    key = 'ENV_1'\n    os.environ[key] = 'test'\n    app.get_or_raise(key)", "piece": "os.environ[key] = 'test'"}
{"function_name": "init_networks", "function_define": "    if self._noisy:\n    if self._dueling:\n    if self._noisy:", "piece": "if self._dueling:"}
{"function_name": "plot_win", "function_define": "    import matplotlib.pyplot as plt\n    with open(csv_path) as csvfile:\n    reader = csv.DictReader(csvfile)", "piece": "with open(csv_path) as csvfile:"}
{"function_name": "plot_win_all", "function_define": "    import matplotlib.pyplot as plt\n    with open(csv_path) as csvfile:\n    reader = csv.DictReader(csvfile)", "piece": "with open(csv_path) as csvfile:"}
{"function_name": "close_files", "function_define": "    if self.txt_path is not None:\n    self.txt_file.close()\n    if self.csv_path is not None:", "piece": "self.txt_file.close()"}
{"function_name": "pte_sieve", "function_define": "    status_filename = status_path\n    if not resume:\n    num_x = 0", "piece": "if not resume:"}
{"function_name": "lognormal", "function_define": "    model = model_pb2.Model()\n    model.params['mean'] = mean\n    model.params['stddev'] = stddev", "piece": "model.params['mean'] = mean"}
{"function_name": "get_video_info", "function_define": "    mysql.execute_command(command)\n    video_list = mysql.fetchall()\n    result = {}", "piece": "video_list = mysql.fetchall()"}
{"function_name": "handleRequest", "function_define": "    reqStr = request.query.req[16:]\n    if len(reqStr) % 16 is not 0:\n    except IndexError:", "piece": "if len(reqStr) % 16 is not 0:"}
{"function_name": "compute_overlap", "function_define": "    to x patches.\n    if sizes is None:\n    sizes = self.d / 2.0", "piece": "if sizes is None:"}
{"function_name": "add_gt_pixels", "function_define": "    artificial_gt_pixels = []\n    if coords.shape[0]:\n    for v in np.unique(db):", "piece": "if coords.shape[0]:"}
{"function_name": "submit_celery", "function_define": "    file_id = str(uuid.uuid4())\n    cmd_args = ''\n    os.system(total_cmd)", "piece": "cmd_args = ''"}
{"function_name": "upload_tool", "function_define": "    data = request.files.items()\n    arguments = request.form\n    for d in data:", "piece": "arguments = request.form"}
{"function_name": "test_create_file", "function_define": "    mocker.patch('os.walk')\n    mocker.patch('yara.compile')\n    compile.create_output()", "piece": "mocker.patch('yara.compile')"}
{"function_name": "jazz_high_hat", "function_define": "    rhy = intempo(1, tmpo)\n    dur = intempo(1 / 3, tmpo)\n    amp = 0.5", "piece": "dur = intempo(1 / 3, tmpo)"}
{"function_name": "jazz_drums", "function_define": "    elec_snare = 40\n    bass_drum = 35\n    rhys = cycle([2 / 3, 1 / 3])", "piece": "bass_drum = 35"}
{"function_name": "jazz_cymbals", "function_define": "    ride2 or a rest:\n    ride1 = 51\n    ride2 = 59", "piece": "ride1 = 51"}
{"function_name": "jazz_piano", "function_define": "    eights for a given measure.\n    reps = odds(0.65, 8, 12)\n    scal = jumble(jazz_scale)", "piece": "reps = odds(0.65, 8, 12)"}
{"function_name": "jazz_bass", "function_define": "    rhy = intempo(1 / 3, tmpo)\n    for x in meas:\n    if x == 't':", "piece": "for x in meas:"}
{"function_name": "jazz_combo", "function_define": "    roots = cycle(jazz_changes)\n    ampl = 0.9\n    for meas in range(measures):", "piece": "ampl = 0.9"}
{"function_name": "createWidgets", "function_define": "    self.module = tk.StringVar()\n    self.buildnum = tk.StringVar()\n    self.owner = tk.StringVar()", "piece": "self.buildnum = tk.StringVar()"}
{"function_name": "getvalue", "function_define": "    way = self.path.get()\n    module = self.module.get()\n    buildnum = self.buildnum.get()", "piece": "module = self.module.get()"}
{"function_name": "is_port_external", "function_define": "    capabilities = []\n    if isinstance(port, dict):\n    bindings = port.port_bindings", "piece": "if isinstance(port, dict):"}
{"function_name": "multiply1", "function_define": "    num1: \u5b57\u7b26\u4e32\u6570\u5b571\n    num2: \u5b57\u7b26\u4e32\u6570\u5b572\n    Returns:", "piece": "num2: \u5b57\u7b26\u4e32\u6570\u5b572"}
{"function_name": "multiply2", "function_define": "    num1: \u5b57\u7b26\u4e32\u65701\n    num2: \u5b57\u7b26\u4e32\u65702\n    Returns:", "piece": "num2: \u5b57\u7b26\u4e32\u65702"}
{"function_name": "_sort_apps", "function_define": "    arun = self._running.get(a)\n    brun = self._running.get(b)\n    if arun and (not brun):", "piece": "brun = self._running.get(b)"}
{"function_name": "_build_widget", "function_define": "    row = Gtk.ListBoxRow()\n    g = Gtk.Grid()\n    if not a.get_name():", "piece": "g = Gtk.Grid()"}
{"function_name": "_on_add_clicked", "function_define": "    a.show_all()\n    resp = a.run()\n    if resp == Gtk.ResponseType.OK:", "piece": "resp = a.run()"}
{"function_name": "compare_images", "function_define": "    duplicates = []\n    lower_res = []\n    if similarity == 'low':", "piece": "lower_res = []"}
{"function_name": "show_img_figs", "function_define": "    fig = plt.figure()\n    plt.suptitle('MSE: %.2f' % err)\n    ax = fig.add_subplot(1, 2, 1)", "piece": "plt.suptitle('MSE: %.2f' % err)"}
{"function_name": "delete_imgs", "function_define": "    deleted = 0\n    for filename in filenames_set:\n    os.remove(directory + filename)", "piece": "for filename in filenames_set:"}
{"function_name": "prepareData", "function_define": "    img_rows, img_cols = (256, 256)\n    X, Y = loadDataset()\n    print('X.shape=', X.shape)", "piece": "X, Y = loadDataset()"}
{"function_name": "dice_coef", "function_define": "    smooth = 1.0\n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)", "piece": "y_true_f = K.flatten(y_true)"}
{"function_name": "plot_trajectory", "function_define": "    TrajDataFrame to be plotted.\n    folium's `tiles` parameter.\n    initial zoom.", "piece": "folium's `tiles` parameter."}
{"function_name": "plot_stops", "function_define": "    folium's `tiles` parameter.\n    initial zoom.\n    size of the markers.", "piece": "initial zoom."}
{"function_name": "plot_diary", "function_define": "    Parameters\n    user : str or int\n    ax : matplotlib.axes, optional", "piece": "user : str or int"}
{"function_name": "plot_flows", "function_define": "    folium's `tiles` parameter.\n    initial zoom.\n    color of the flow edges", "piece": "initial zoom."}
{"function_name": "manage_colors", "function_define": "    if color == 'random':\n    if fillColor == 'random':\n    color = random_hex()", "piece": "if fillColor == 'random':"}
{"function_name": "add_to_map", "function_define": "    styles = []\n    if k in style_func_args:\n    if callable(style_func_args[k]):", "piece": "if k in style_func_args:"}
{"function_name": "plot_gdf", "function_define": "    GeoDataFrame to visualize.\n    folium's `tiles` parameter.\n    initial zoom.", "piece": "folium's `tiles` parameter."}
{"function_name": "extract_category", "function_define": "    min_start = len(title)\n    target = None\n    if result is not None:", "piece": "target = None"}
{"function_name": "open_theme", "function_define": "    a_theme: theme name\n    Returns:\n    if not a_theme.strip():", "piece": "Returns:"}
{"function_name": "_get_theme_path", "function_define": "    out_themes = []\n    for theme_dir in theme_dirs:\n    if files:", "piece": "for theme_dir in theme_dirs:"}
{"function_name": "read_theme", "function_define": "    Returns:\n    self._temp_colors = None\n    if not path.isfile(theme_path):", "piece": "self._temp_colors = None"}
{"function_name": "_get_max_color", "function_define": "    checks = ('_8', '_16', '_256')\n    num_of_colors = 0\n    for a_check in checks:", "piece": "num_of_colors = 0"}
{"function_name": "_get_titles_ids", "function_define": "    self._title_ids = []\n    if a_theme[1] == '-':\n    self._title_ids.append(i)", "piece": "if a_theme[1] == '-':"}
{"function_name": "_can_use_theme", "function_define": "    If not, return True\"\"\"\n    checks = ('_8', '_16', '_256')\n    for a_check in checks:", "piece": "checks = ('_8', '_16', '_256')"}
{"function_name": "_get_metrics", "function_define": "    if num_of_themes > 4:\n    if num_of_themes + 2 < maxY - 2:\n    self._items = num_of_themes", "piece": "if num_of_themes + 2 < maxY - 2:"}
{"function_name": "selection", "function_define": "    old_selection = self._selection\n    if val < 0:\n    self._selection = 0", "piece": "if val < 0:"}
{"function_name": "set_theme", "function_define": "    if ex_theme == a_theme:\n    if self._selection != i:\n    self.selection = i", "piece": "if self._selection != i:"}
{"function_name": "_go_down", "function_define": "    self._selection += 1\n    self._selection += 1\n    self.selection = 0", "piece": "self._selection += 1"}
{"function_name": "_go_home", "function_define": "    self._selection = 0\n    self._start_pos = 0\n    self.refresh()", "piece": "self._start_pos = 0"}
{"function_name": "test_since", "function_define": "    URL.objects.hour_ago()\n    URL.objects.day_ago()\n    URL.objects.week_ago()", "piece": "URL.objects.day_ago()"}
{"function_name": "test_plot_data", "function_define": "    tmpdir = tempfile.mkdtemp()\n    curdir = os.getcwd()\n    os.chdir(tmpdir)", "piece": "curdir = os.getcwd()"}
{"function_name": "atom_dict", "function_define": "    class DictAtom(Atom):\n    untyped = Dict()\n    keytyped = Dict(Int())", "piece": "untyped = Dict()"}
{"function_name": "test_setitem", "function_define": "    atom_dict.untyped[''] = 1\n    atom_dict.keytyped[1] = ''\n    with pytest.raises(TypeError):", "piece": "atom_dict.keytyped[1] = ''"}
{"function_name": "test_setdefault", "function_define": "    with pytest.raises(TypeError):\n    with pytest.raises(TypeError):\n    with pytest.raises(TypeError):", "piece": "with pytest.raises(TypeError):"}
{"function_name": "twistPub", "function_define": "    r = rospy.Rate(50)\n    while not rospy.is_shutdown():\n    pub.publish(twist_stamped_msg)", "piece": "while not rospy.is_shutdown():"}
{"function_name": "register_backend", "function_define": "    types_name = [types_name]\n    glue = None\n    if glue is not None:", "piece": "glue = None"}
{"function_name": "get_args_backend", "function_define": "    b = None\n    for a in args:\n    for a in kwargs.values():", "piece": "for a in args:"}
{"function_name": "notify_one", "function_define": "    server_ssl.ehlo()\n    msg['Subject'] = subject\n    msg['From'] = me", "piece": "msg['Subject'] = subject"}
{"function_name": "notify_all", "function_define": "    import daff\n    import jinja2\n    import premailer", "piece": "import jinja2"}
{"function_name": "find_high_score", "function_define": "    player_scores = defaultdict(int)\n    marble_locations = deque()\n    marble_locations.append(0)", "piece": "marble_locations = deque()"}
{"function_name": "show_menu", "function_define": "    games.screen.clear()\n    games.screen.add(self.direct)\n    games.screen.add(message1)", "piece": "games.screen.add(self.direct)"}
{"function_name": "ask_yes_or_no", "function_define": "    msg (str): a message\n    print(msg)\n    while True:", "piece": "print(msg)"}
{"function_name": "convert_args", "function_define": "    for k, v in args.items():\n    if v is None:\n    args[k] = '*'", "piece": "if v is None:"}
{"function_name": "_get_notebooks", "function_define": "    Parameters\n    root_dir\n    notebooks", "piece": "root_dir"}
{"function_name": "_strip_paths", "function_define": "    mutated = False\n    if cell['cell_type'] == 'code':\n    for output in cell['outputs']:", "piece": "if cell['cell_type'] == 'code':"}
{"function_name": "get_users", "function_define": "    param_instance = ParameterMap()\n    header_instance = HeaderMap()\n    if response is not None:", "piece": "header_instance = HeaderMap()"}
{"function_name": "update_users", "function_define": "    request = BodyWrapper()\n    user_list = []\n    user_1 = ZCRMUser()", "piece": "user_list = []"}
{"function_name": "update_user", "function_define": "    request = BodyWrapper()\n    user_list = []\n    user_1 = ZCRMUser()", "piece": "user_list = []"}
{"function_name": "delete_user", "function_define": "    if response is not None:\n    if response_object is not None:\n    print('Details')", "piece": "if response_object is not None:"}
{"function_name": "toDictionary", "function_define": "    dictionary = {'Id': self.Id}\n    if hasattr(self, 'Type'):\n    dictionary['Type'] = self.Type", "piece": "if hasattr(self, 'Type'):"}
{"function_name": "fromDictionary", "function_define": "    if len(content) == 0:\n    if 'Id' in content:\n    if 'Type' in content:", "piece": "if 'Id' in content:"}
{"function_name": "_maybe_release", "function_define": "    if self._count == self._parties:\n    self._cond.notify_all()\n    self._count = 0", "piece": "self._cond.notify_all()"}
{"function_name": "categorical_cmap", "function_define": "    if nc > plt.get_cmap(cmap).N:\n    if continuous:\n    cols = np.zeros((nc * nsc, 3))", "piece": "if continuous:"}
{"function_name": "print_ar_plot", "function_define": "    ARMonthFracstarttime = timer()\n    for i in range(optimal_k):\n    if i == model.grid_width - 1:", "piece": "for i in range(optimal_k):"}
{"function_name": "print_rhum_plots", "function_define": "    rhumstarttime = timer()\n    for cluster in range(optimal_k):\n    ax_rhum.set_facecolor('white')", "piece": "for cluster in range(optimal_k):"}
{"function_name": "plot_baseline", "function_define": "    ax_rf_plot.set_title(f'{title}')\n    ax_rf_plot.xaxis.tick_top()\n    ax_rf_plot.yaxis.tick_right()", "piece": "ax_rf_plot.xaxis.tick_top()"}
{"function_name": "load_template", "function_define": "    if template_dict is None:\n    segments = []\n    if 'file' not in segment:", "piece": "segments = []"}
{"function_name": "ValueFromBits", "function_define": "    result = 0\n    bits = self.GetBits(bitCount)\n    for i in range(bitCount):", "piece": "bits = self.GetBits(bitCount)"}
{"function_name": "GetLiteralValue", "function_define": "    done = False\n    bitsRead = 0\n    result = 0", "piece": "bitsRead = 0"}
{"function_name": "WriteToDotFile", "function_define": "    dot -Tpdf -O 16.dot\n    print(line, file=dotFile)\n    print('}', file=dotFile)", "piece": "print(line, file=dotFile)"}
{"function_name": "FromBits", "function_define": "    packet = Packet()\n    packet.bitsRead = 6\n    if packet.typeId == 4:", "piece": "packet.bitsRead = 6"}
{"function_name": "write_response", "function_define": "    if options.directory is None:\n    print(response)\n    with open(ofn, 'w') as out:", "piece": "print(response)"}
{"function_name": "get_scores", "function_define": "    self.model.eval()\n    self.data_loader.init_epoch()\n    n_dev_correct = 0", "piece": "self.data_loader.init_epoch()"}
{"function_name": "_create_resource", "function_define": "    unit = db_session.get_session()\n    model = None\n    new_resource_id = 1", "piece": "model = None"}
{"function_name": "get_weather", "function_define": "    w = Weather(dt)\n    visual_space = ' ' * indent\n    if forecast:", "piece": "visual_space = ' ' * indent"}
{"function_name": "_import_config", "function_define": "    with open(path, 'r') as stream:\n    cfg = yaml.safe_load(stream)\n    except yaml.YAMLError as exc:", "piece": "cfg = yaml.safe_load(stream)"}
{"function_name": "__p_s_star", "function_define": "    sst0 = 1.0 / self.eta\n    sst1 = np.exp(sst_e1)\n    p = sst0 * sst1 * sst2", "piece": "sst1 = np.exp(sst_e1)"}
{"function_name": "__p_s_fc", "function_define": "    sfc0 = 1.0 / self.eta\n    sfc1 = np.exp(fc_e1)\n    sfc2 = sfc20 ** fc_e2", "piece": "sfc1 = np.exp(fc_e1)"}
{"function_name": "et_losses", "function_define": "    if s > self.s_fc:\n    elif s > self.s_star:\n    elif s > self.s_wilt:", "piece": "elif s > self.s_star:"}
{"function_name": "__t_s_star", "function_define": "    if s0 > self.s_star:\n    if s0 > self.s_fc:\n    s0 = self.s_fc", "piece": "if s0 > self.s_fc:"}
{"function_name": "__t_s_wilt", "function_define": "    if s0 > self.s_wilt:\n    if s0 > self.s_star:\n    s0 = self.s_star", "piece": "if s0 > self.s_star:"}
{"function_name": "get_quantiles", "function_define": "    if not shares:\n    total = sum(counts)\n    accumulator = 0", "piece": "total = sum(counts)"}
{"function_name": "order_completed", "function_define": "    if save_info:\n    if user_profile_form.is_valid():\n    user_profile_form.save()", "piece": "if user_profile_form.is_valid():"}
{"function_name": "form_view", "function_define": "    urls = schema.help_field.all()\n    if request.method == 'POST':\n    if form.is_valid():", "piece": "if request.method == 'POST':"}
{"function_name": "form_update_view", "function_define": "    load_button = False\n    if True in aggr_editables:\n    load_button = True", "piece": "if True in aggr_editables:"}
{"function_name": "_make_date_tz", "function_define": "    view in its context?\n    if instance:\n    tz = pytz.timezone(tz)", "piece": "if instance:"}
{"function_name": "cnf_to_predicate", "function_define": "    if not conds:\n    cond = conds[0]\n    for c in conds[1:]:", "piece": "cond = conds[0]"}
{"function_name": "staircase", "function_define": "    for i in range(n):\n    string = ' '\n    for j in range(n):", "piece": "string = ' '"}
{"function_name": "test_yamlable", "function_define": "    class Foo(YamlAble):\n    self.a = a\n    self.b = b", "piece": "self.a = a"}
{"function_name": "load_new_games", "function_define": "    continue_token = 0\n    games_count = 0\n    games = []", "piece": "games_count = 0"}
{"function_name": "parse_games", "function_define": "    games_set = []\n    striped_html = html.strip()\n    games = html.find_all('tr')", "piece": "striped_html = html.strip()"}
{"function_name": "parse_game_info", "function_define": "    options = column.find_all('tr')\n    game_info_dict = dict()\n    if replay_link:", "piece": "game_info_dict = dict()"}
{"function_name": "parse_game_stat", "function_define": "    game_stat_dict = {}\n    teams = []\n    team = []", "piece": "teams = []"}
{"function_name": "parse_player_ban", "function_define": "    banned = False\n    vac = False\n    vac_counts = 0", "piece": "vac = False"}
{"function_name": "cli_main", "function_define": "    if self.comm_link[-1] != '/':\n    self.comm_link += '/'\n    elif '/home/' in self.comm_link:", "piece": "self.comm_link += '/'"}
{"function_name": "dict_delta", "function_define": "    temp = dict()\n    for x in new.keys():\n    temp[x] = new[x] - old[x]", "piece": "for x in new.keys():"}
{"function_name": "create_roombook", "function_define": "    haus.room_count = 0\n    haus.geschoss_count = 0\n    mybook = dict()", "piece": "haus.geschoss_count = 0"}
{"function_name": "calc_length", "function_define": "    assert kabel.objects_associated\n    if kabel.length != 0:\n    kabel.length = 10000000.0", "piece": "if kabel.length != 0:"}
{"function_name": "get_pkgs", "function_define": "    contents = read_file(filename)\n    pkgs = []\n    for line in contents:", "piece": "pkgs = []"}
{"function_name": "find_spec", "function_define": "    print('Bump %s ...' % pkgname)\n    for f in filepaths:\n    if os.path.isfile(specfile):", "piece": "for f in filepaths:"}
{"function_name": "bump_rel", "function_define": "    orig_spec = read_file(spec_path)\n    contents = []\n    has_rel = False", "piece": "contents = []"}
{"function_name": "button_click", "function_define": "    if self.isMinimized():\n    self.show()\n    self.showNormal()", "piece": "self.show()"}
{"function_name": "test_no_vis", "function_define": "    cfg = copy.deepcopy(cfg)\n    cfg['flip'] = True\n    p = PriorBoxSSD(cfg)", "piece": "cfg['flip'] = True"}
{"function_name": "test_filp", "function_define": "    cfg = copy.deepcopy(cfg)\n    cfg['flip'] = True\n    p = PriorBoxSSD(cfg)", "piece": "cfg['flip'] = True"}
{"function_name": "test_rectangle", "function_define": "    cfg = copy.deepcopy(cfg)\n    cfg['flip'] = True\n    cfg['image_size'] = [600, 300]", "piece": "cfg['flip'] = True"}
{"function_name": "_create_prior", "function_define": "    prior = []\n    for ms in min_sizes:\n    s_i = ms / self.image_size[0]", "piece": "for ms in min_sizes:"}
{"function_name": "_prior_vis", "function_define": "    writer = tb_writer.writer\n    bboxs = bboxs.astype(np.int32)\n    image = image_ori.copy()", "piece": "bboxs = bboxs.astype(np.int32)"}
{"function_name": "align_to", "function_define": "    norm = np.linalg.norm\n    a = np.asarray(a) / norm(a)\n    b = np.asarray(b) / norm(b)", "piece": "a = np.asarray(a) / norm(a)"}
{"function_name": "kwarg_to_arg", "function_define": "    elif value is True:\n    elif isinstance(value, str):\n    except TypeError:", "piece": "elif isinstance(value, str):"}
{"function_name": "call_gmx", "function_define": "    cmd = cmd.strip()\n    if cmdline and cmd:\n    if not (cmdline or cmd):", "piece": "if cmdline and cmd:"}
{"function_name": "add_rdsq_box", "function_define": "    d = float(d)\n    a = (d, 0.0, 0.0)\n    b = (0.0, d, 0.0)", "piece": "a = (d, 0.0, 0.0)"}
{"function_name": "add_rdhex_box", "function_define": "    d = float(d)\n    a = (d, 0.0, 0.0)\n    if self.traj.unitcell_vectors:", "piece": "a = (d, 0.0, 0.0)"}
{"function_name": "calc_mindist", "function_define": "    xyz = self.coords\n    vecs = self.box\n    image_mins = []", "piece": "vecs = self.box"}
{"function_name": "write_top", "function_define": "    path = Path(path).absolute()\n    if suffix is None:\n    suffix = ''", "piece": "if suffix is None:"}
{"function_name": "write_pdb", "function_define": "    path = Path(path).absolute()\n    if suffix is None:\n    suffix = ''", "piece": "if suffix is None:"}
{"function_name": "write_gro", "function_define": "    path = Path(path).absolute()\n    if suffix is None:\n    suffix = ''", "piece": "if suffix is None:"}
{"function_name": "write_ndx", "function_define": "    path = Path(path).absolute()\n    if suffix is None:\n    suffix = ''", "piece": "if suffix is None:"}
{"function_name": "__getstate__", "function_define": "    state = self.__dict__.copy()\n    del state['ff']\n    del state['topol']", "piece": "del state['ff']"}
{"function_name": "add_solute", "function_define": "    pdbout = 'extended_ion.pdb'\n    tpr_tmp = 'genion.tpr'\n    print(stderr_data)", "piece": "tpr_tmp = 'genion.tpr'"}
{"function_name": "load_traj", "function_define": "    path = Path(path)\n    topin = self.write_top(path)\n    groout = f'{self.name}.vis.gro'", "piece": "topin = self.write_top(path)"}
{"function_name": "setup_sim", "function_define": "    cwd = Path(cwd).absolute()\n    tprinout = cwd / f'{deffnm}.tpr'\n    mdpinout = cwd / f'{deffnm}.mdp'", "piece": "tprinout = cwd / f'{deffnm}.tpr'"}
{"function_name": "get_properties", "function_define": "    if mdp is None:\n    mdp = self.mdp\n    if mindist:", "piece": "mdp = self.mdp"}
{"function_name": "_scale_c6c12", "function_define": "    c6, c12 = map(float, (c6, c12))\n    sigma = (c12 / c6) ** (1 / 6)\n    eps = c6 ** 2 / (4 * c12)", "piece": "sigma = (c12 / c6) ** (1 / 6)"}
{"function_name": "_scale_ff", "function_define": "    with open(filename) as f:\n    sect = None\n    for line in f:", "piece": "sect = None"}
{"function_name": "_get_scaled_ff", "function_define": "    urlretrieve(url, dest)\n    with open(dest, 'w') as f:\n    for line in lines_out:", "piece": "with open(dest, 'w') as f:"}
{"function_name": "_milkify_itp", "function_define": "    atomsect = False\n    for line in f:\n    data = data.strip()", "piece": "for line in f:"}
{"function_name": "martinize_m22", "function_define": "    cwd = Path(cwd).absolute()\n    if name is None:\n    name = self.name", "piece": "if name is None:"}
{"function_name": "prep_rest2", "function_define": "    rpath = Path(path).absolute()\n    frame_iter = cycle(startframes)\n    frame_iter = iter(startframes)", "piece": "frame_iter = cycle(startframes)"}
{"function_name": "hide_py2_modules", "function_define": "    inside the directory 'py2only'\n    if sys.version_info[0] == 2:\n    for module in TOP_LEVEL_MODULES:", "piece": "if sys.version_info[0] == 2:"}
{"function_name": "get_car_boxes", "function_define": "    car_boxes = []\n    for i, box in enumerate(boxes):\n    if class_ids[i] in [3, 8, 6]:", "piece": "for i, box in enumerate(boxes):"}
{"function_name": "query_database", "function_define": "    with conn:\n    cursor.execute(sql)\n    conn.commit", "piece": "cursor.execute(sql)"}
{"function_name": "find_scenes", "function_define": "    stats_manager = StatsManager()\n    video_manager.start()\n    final_scene_list = []", "piece": "video_manager.start()"}
{"function_name": "derivative", "function_define": "    a (int) : first endpoint\n    b (int) : last endpoing\n    Returns:", "piece": "b (int) : last endpoing"}
{"function_name": "load_cache", "function_define": "    apis = []\n    operations = []\n    global_params = []", "piece": "operations = []"}
{"function_name": "encode_timestamp", "function_define": "    t = int(timestamp * 1000000.0)\n    for i in range(7):\n    np_image[0][i] = t & 255", "piece": "for i in range(7):"}
{"function_name": "plot_real_system", "function_define": "    dt = 0.05\n    t = np.arange(0, tf, dt)\n    plt.figure(2)", "piece": "t = np.arange(0, tf, dt)"}
{"function_name": "get_random_users", "function_define": "    Get Random Users\n    min_follow: the minimum follow\n    Returns:", "piece": "min_follow: the minimum follow"}
{"function_name": "follow_username", "function_define": "    Follow Username\n    username: the user to follow\n    Returns:", "piece": "username: the user to follow"}
{"function_name": "get_followers", "function_define": "    Get Followers\n    Returns:\n    A list of followers", "piece": "Returns:"}
{"function_name": "get_following", "function_define": "    Get Following\n    Returns:\n    A list of following", "piece": "Returns:"}
{"function_name": "connection", "function_define": "    config = arangodoc.read_config()\n    arangoconn = connect(config)\n    if db.hasCollection(col):", "piece": "arangoconn = connect(config)"}
{"function_name": "test_create_id", "function_define": "    doc = {'PMID': '12345'}\n    doc_format = 'pubmed'\n    assert 'id' in doc", "piece": "doc_format = 'pubmed'"}
{"function_name": "test_zstd_open", "function_define": "    mode = 'rt'\n    encoding = 'utf-8'\n    lines = data.readlines()", "piece": "encoding = 'utf-8'"}
{"function_name": "read_pgm", "function_define": "    rows = 0\n    cols = 0\n    max_shade = 0", "piece": "cols = 0"}
{"function_name": "create_image", "function_define": "    with open(filename, 'w') as f:\n    for row in pgm.data:\n    for i in range(0, len(row)):", "piece": "for row in pgm.data:"}
{"function_name": "get_angle", "function_define": "    result = 0\n    result = 0\n    result = 45", "piece": "result = 0"}
{"function_name": "edge_detection", "function_define": "    img_matrix = pgm_file.data\n    for row in range(num_rows):\n    for col in range(num_cols):", "piece": "for row in range(num_rows):"}
{"function_name": "edge_thinning", "function_define": "    img_matrix = pgm_file.data\n    for row in range(num_rows):\n    top = row", "piece": "for row in range(num_rows):"}
{"function_name": "noise_suppress", "function_define": "    img_matrix = pgm_file.data\n    max_pixel = np.amax(img_matrix)\n    for row in range(num_rows):", "piece": "max_pixel = np.amax(img_matrix)"}
{"function_name": "application", "function_define": "    body = b'Hello world!\\n'\n    status = '200 OK'\n    start_response(status, headers)", "piece": "status = '200 OK'"}
{"function_name": "thread_function", "function_define": "    file1 = open('config', 'r')\n    Lines = file1.readlines()\n    outF = open('nextconfig', 'w')", "piece": "Lines = file1.readlines()"}
{"function_name": "_route_for_view", "function_define": "    endpoint = None\n    for route in app.routes:\n    if route.callback == view:", "piece": "for route in app.routes:"}
{"function_name": "mibigSubtypes", "function_define": "    subtypes = []\n    for filename in filelist:\n    with open(filename) as jsonfile:", "piece": "for filename in filelist:"}
{"function_name": "enterCluster", "function_define": "    if len(gene_data) == 0:\n    unordered_subunits = {}\n    unordered_subunits_alt = {}", "piece": "unordered_subunits = {}"}
{"function_name": "pre_receive", "function_define": "    branches = []\n    for refname in changes:\n    if set(newrev) == set(['0']):", "piece": "for refname in changes:"}
{"function_name": "test_reduction", "function_define": "    logits = torch.randn(4, 2)\n    loss = lsce(logits, target)\n    print(loss)", "piece": "loss = lsce(logits, target)"}
{"function_name": "eventsubscribe", "function_define": "    user_id = request.POST['email']\n    if user_id == '':\n    if len(event_user) > 0:", "piece": "if user_id == '':"}
{"function_name": "eventunsubscribe", "function_define": "    user_id = request.POST['email']\n    if user_id == '':\n    if len(event_user) == 0:", "piece": "if user_id == '':"}
{"function_name": "merge_dicts", "function_define": "    Examples:\n    main = {\n    complement = {", "piece": "main = {"}
{"function_name": "deploy_network", "function_define": "    images = self.config.gcp.images\n    self.tfscript += image\n    self.tfscript += network", "piece": "self.tfscript += image"}
{"function_name": "deploy_domain", "function_define": "    images = self.config.gcp.images\n    self.tfscript += image\n    self.tfscript += network", "piece": "self.tfscript += image"}
{"function_name": "get_gcp_config", "function_define": "    Returns:\n    gcp = GCloud()\n    images = gcp.images_type()", "piece": "gcp = GCloud()"}
{"function_name": "corpus_iterator", "function_define": "    text = file.read()\n    if text not in text_corpus:\n    text_corpus.append(text)", "piece": "if text not in text_corpus:"}
{"function_name": "closePara", "function_define": "    if s == '(':\n    elif s == '{':\n    elif s == '[':", "piece": "elif s == '{':"}
{"function_name": "train_new_models", "function_define": "    Selected args:\n    frames_per_eg:\n    are the top-level scripts.", "piece": "frames_per_eg:"}
{"function_name": "combine_models", "function_define": "    In the nnet3 setup, the logic\n    raw_model_strings = []\n    models_to_combine.add(num_iters)", "piece": "raw_model_strings = []"}
{"function_name": "get_download_url", "function_define": "    ret = {}\n    for item in resp:\n    e = parse_episode(item['title'])", "piece": "for item in resp:"}
{"function_name": "generate_robots", "function_define": "    if host.startswith('404'):\n    abort(404, 'No robots.txt here')\n    if host.startswith('500'):", "piece": "abort(404, 'No robots.txt here')"}
{"function_name": "generate_sitemap", "function_define": "    mylinks = ''\n    for i in range(10):\n    mylinks += sitelink.format(i)", "piece": "for i in range(10):"}
{"function_name": "submit_response", "function_define": "    for v in cur_questions.values():\n    form_data[v] = ''\n    for k, v in answers.items():", "piece": "form_data[v] = ''"}
{"function_name": "prepare_config", "function_define": "    config = Config()\n    config.init_options()\n    config.parse_args(argv)", "piece": "config.init_options()"}
{"function_name": "get_expressions", "function_define": "    for line in text.splitlines():\n    line_text = line.strip()\n    continue", "piece": "line_text = line.strip()"}
{"function_name": "strptime", "function_define": "    strptime_format_string.\n    format).\n    regex = '^'", "piece": "format)."}
{"function_name": "get_date_info", "function_define": "    if bad_types is not None:\n    for type_key in bad_types:\n    type_keys.remove(type_key)", "piece": "for type_key in bad_types:"}
{"function_name": "get_time_info", "function_define": "    if bad_formats is None:\n    bad_formats = []\n    if bad_types is None:", "piece": "bad_formats = []"}
{"function_name": "get_enriched_doc", "function_define": "    pk = '/uksi/2012/632'\n    resp.raise_for_status()\n    st.session_state.docs_list = df", "piece": "resp.raise_for_status()"}
{"function_name": "get_ner_list", "function_define": "    resp.raise_for_status()\n    print(resp.json())\n    st.session_state.ner_list = df", "piece": "print(resp.json())"}
{"function_name": "ner_search", "function_define": "    resp.raise_for_status()\n    print(resp.json())\n    st.session_state.ner_search = df", "piece": "print(resp.json())"}
{"function_name": "check_urls", "function_define": "    if not urls_to_check:\n    logging.info(msg)\n    num_checks = len(urls_to_check)", "piece": "logging.info(msg)"}
{"function_name": "png_to_ogm", "function_define": "    Returns:\n    r = png.Reader(filename)\n    img = r.read()", "piece": "r = png.Reader(filename)"}
{"function_name": "test_boolean_key", "function_define": "    self.assertEqual(0, rcode)\n    self.assertEqual(1, rcode)\n    self.assertEqual(-1, rcode)", "piece": "self.assertEqual(1, rcode)"}
{"function_name": "write_contents", "function_define": "    with os.fdopen(fd, 'w') as t:\n    t.write(contents)\n    t.flush()", "piece": "t.write(contents)"}
{"function_name": "resnet50", "function_define": "    model_dict = model.state_dict()\n    new_dict = {}\n    for k, v in checkpoint.items():", "piece": "new_dict = {}"}
{"function_name": "test_teams_list", "function_define": "    self._team_create()\n    request = self.factory.get('/')\n    response = self.view(request)", "piece": "request = self.factory.get('/')"}
{"function_name": "_team_create", "function_define": "    self._org_create()\n    response = self.view(request)\n    self.team_data = response.data", "piece": "response = self.view(request)"}
{"function_name": "create_predictor", "function_define": "    model snapshot.\n    workspace_id = str(uuid.uuid4())\n    task = config.task", "piece": "workspace_id = str(uuid.uuid4())"}
{"function_name": "add_occurrence", "function_define": "    add_occurrence(occurrence)\n    Adds the occurrence into model.\n    with length >= min_n", "piece": "Adds the occurrence into model."}
{"function_name": "get_prediction", "function_define": "    Parameters\n    previous : tuple\n    min_n : int", "piece": "previous : tuple"}
{"function_name": "_get_prediction", "function_define": "    if not indexed_input:\n    if min_n is None:\n    min_n = self._min_n", "piece": "if min_n is None:"}
{"function_name": "_set_item", "function_define": "    if np_dtype == np.float16:\n    shape = np_t.shape\n    np_t = np_t.flatten()", "piece": "shape = np_t.shape"}
{"function_name": "set_var_in_scope", "function_define": "    t = scope.var(name).get_tensor()\n    t.set(value, place)\n    if recursive_seq_len:", "piece": "t.set(value, place)"}
{"function_name": "grad_check", "function_define": "    Returns:\n    if raise_exception:\n    raise RuntimeError(msg)", "piece": "if raise_exception:"}
{"function_name": "get_connection", "function_define": "    except pymysql.Error as e:\n    logger.exception(str(e))\n    print(traceback.print_exc())", "piece": "logger.exception(str(e))"}
{"function_name": "does_table_exist", "function_define": "    query = 'SHOW TABLES'\n    cursor.execute(query)\n    tables_in_db = cursor.fetchall()", "piece": "cursor.execute(query)"}
{"function_name": "get_last_candle", "function_define": "    cursor.execute(query)\n    fetched_data = cursor.fetchone()\n    if fetched_data:", "piece": "fetched_data = cursor.fetchone()"}
{"function_name": "test_backoff", "function_define": "    sleep_times = []\n    sleep_times.append(duration)\n    now = times.popleft()", "piece": "sleep_times.append(duration)"}
{"function_name": "get_transitions", "function_define": "    prev = None\n    if prev == status:\n    continue", "piece": "if prev == status:"}
{"function_name": "test_cholera", "function_define": "    cholera.csv and testing shape of\n    test_path = tempfile.mkdtemp()\n    assert x_train.shape == (38, 15)", "piece": "test_path = tempfile.mkdtemp()"}
{"function_name": "zeropoint", "function_define": "    hdulist = fits.open(filename)\n    data = hdulist[0].data[0]\n    coicorr = hdulist[0].data[1]", "piece": "data = hdulist[0].data[0]"}
{"function_name": "apply_stylesheet", "function_define": "    if not style:\n    if not widget:\n    widget = QApplication.instance()", "piece": "if not widget:"}
{"function_name": "_get_style_data", "function_define": "    Returns:\n    global __style_data\n    if not stylesheet_file_path:", "piece": "global __style_data"}
{"function_name": "tsv_get_namesmap", "function_define": "    next(namesMap)\n    for row in namesMap:\n    row = row.strip().split()", "piece": "for row in namesMap:"}
{"function_name": "tsv_build_graph", "function_define": "    next(pairwise_tsv)\n    for row in pairwise_tsv:\n    row = row.strip().split()", "piece": "for row in pairwise_tsv:"}
{"function_name": "clustering", "function_define": "    l = registers[x]\n    if l is not None:\n    l = find(l)", "piece": "if l is not None:"}
{"function_name": "post_clustering", "function_define": "    covered_seqs = set()\n    l = registers2[x]\n    if l is not None:", "piece": "l = registers2[x]"}
{"function_name": "MassMail", "function_define": "    import csv, time\n    while len(email_list) != 0:\n    for att in attachments:", "piece": "while len(email_list) != 0:"}
{"function_name": "test_time_gaps", "function_define": "    for gap in range(1, 3):\n    res = sfd(df)\n    assert df.equals(res[0])", "piece": "res = sfd(df)"}
{"function_name": "test_backup", "function_define": "    backup = Backupy()\n    backup.add_directory('./')\n    backup.start()", "piece": "backup.add_directory('./')"}
{"function_name": "get_teacher_prob", "function_define": "    prob = 1\n    if batch_inc_flag:\n    self.teacher_cnt += 1", "piece": "if batch_inc_flag:"}
{"function_name": "test_display", "function_define": "    instance = SpecialTestStruct()\n    widget = ObjectDisplayWidget()\n    widget.data = instance", "piece": "widget = ObjectDisplayWidget()"}
{"function_name": "test_textualize", "function_define": "    instance = SpecialTestStruct()\n    print(str(instance))\n    if sys.version_info < (3, 0):", "piece": "print(str(instance))"}
{"function_name": "iter_tobject", "function_define": "    from fnmatch import fnmatch\n    import re\n    if not tobj:", "piece": "import re"}
{"function_name": "walk_tobject", "function_define": "    import ROOT\n    yield from obj\n    for key in obj.GetListOfKeys():", "piece": "yield from obj"}
{"function_name": "walk_matching", "function_define": "    import ROOT\n    from copy import copy\n    yield from obj", "piece": "from copy import copy"}
{"function_name": "get_root_object", "function_define": "    for path in paths:\n    if not is_null(found):\n    found = None", "piece": "if not is_null(found):"}
{"function_name": "parse_dbStruct", "function_define": "    matStruct = read_mat(path)\n    utmDb = matStruct[2].T\n    utmQ = matStruct[4].T", "piece": "utmDb = matStruct[2].T"}
{"function_name": "find_roots", "function_define": "    except ValueError:\n    self.eq.adjustSize()\n    for i, r in enumerate(roots):", "piece": "self.eq.adjustSize()"}
{"function_name": "derivate", "function_define": "    except ValueError:\n    self.eq.setText('')\n    self.text.adjustSize()", "piece": "self.eq.setText('')"}
{"function_name": "get_poly", "function_define": "    if 'x' in text:\n    if '/' in terms:\n    coefs = map(float, terms)", "piece": "if '/' in terms:"}
{"function_name": "predict_proba", "function_define": "    Parameters\n    K : int, optional.\n    t : int, optional", "piece": "K : int, optional."}
{"function_name": "partial_fit", "function_define": "    Parameters\n    shape = [n_samples, n_features]\n    from multiprocessing import Pool", "piece": "shape = [n_samples, n_features]"}
{"function_name": "human_rules", "function_define": "    Parameters\n    import copy as cp\n    for d in hr_rules:", "piece": "import copy as cp"}
{"function_name": "validate_rh", "function_define": "    except Exception:\n    host = None\n    if not host:", "piece": "host = None"}
{"function_name": "get_rhsm_subs", "function_define": "    json = []\n    raise error\n    except OSError as error:", "piece": "raise error"}
{"function_name": "make_list", "function_define": "    for dirlist in os.listdir(path):\n    if dirlist == 'AD':\n    name2 = str(i) + ' 0\\n'", "piece": "if dirlist == 'AD':"}
{"function_name": "get_is_noise", "function_define": "    clean_path_list = list()\n    for line in f:\n    clean_path_list.append(_path)", "piece": "for line in f:"}
{"function_name": "write_sine", "function_define": "    rate, data = wavfile.read(fp)\n    out_data = []\n    mid_data = max(data) - min(data)", "piece": "out_data = []"}
{"function_name": "get_pos_orn", "function_define": "    if self.last_pos == self.pos:\n    if type(self.orn) == tuple:\n    heading = 0", "piece": "if type(self.orn) == tuple:"}
{"function_name": "get_orn_vector", "function_define": "    v = np.array([1.0, 0.0, 0.0])\n    v_ = orn_q.rotate(v)\n    v_[2] = 0", "piece": "v_ = orn_q.rotate(v)"}
{"function_name": "theta_validation", "function_define": "    while theta < 0:\n    theta += 360.0\n    while theta >= 360.0:", "piece": "theta += 360.0"}
{"function_name": "calc_weight", "function_define": "    if not self.flg_sym:\n    sv = self.cma.get_steer(self.sa)\n    self.weight = _num / _den", "piece": "sv = self.cma.get_steer(self.sa)"}
{"function_name": "unpack_batch_a2c", "function_define": "    states = []\n    actions = []\n    rewards = []", "piece": "actions = []"}
{"function_name": "_setup_env", "function_define": "    workloads = []\n    for x in xrange(count):\n    ip_search = IP_RE.search(output)", "piece": "for x in xrange(count):"}
{"function_name": "runRemoteCmd", "function_define": "    errorFlag = False\n    ouput = ''\n    ouput = stdout.readlines()", "piece": "ouput = ''"}
{"function_name": "localCleaner", "function_define": "    print(tempPath)\n    except Exception as e:\n    print(e)", "piece": "except Exception as e:"}
{"function_name": "deleteFiles", "function_define": "    print('\u5220\u9664 %s' % gitPath)\n    except Exception as e:\n    print(e)", "piece": "except Exception as e:"}
{"function_name": "zipOnWin", "function_define": "    project = pathlib.Path(tempPath)\n    print(f'project = {project}')\n    with projectZip:", "piece": "print(f'project = {project}')"}
{"function_name": "zipOnLinux", "function_define": "    if not errFlag:\n    print(ouput)\n    print('\u538b\u7f29\u539f\u59cb\u7248\u672c\u6587\u4ef6\u5b8c\u6210~')", "piece": "print(ouput)"}
{"function_name": "remoteCleaner", "function_define": "    fileNum = 0\n    if not errFlag:\n    print('\u6267\u884c\u6587\u4ef6\u7edf\u8ba1\u547d\u4ee4\u6210\u529f!')", "piece": "if not errFlag:"}
{"function_name": "doDeploy", "function_define": "    print('step1: \u672c\u5730\u62c9\u53d6gitlab\u6700\u65b0\u4ee3\u7801~ ')\n    print(f'\u7f13\u5b58\u8def\u5f84\u4e3a: {tempPath}')\n    print('step2: \u5220\u9664\u4e00\u4e9b\u90e8\u7f72\u65e0\u5173\u7684\u6587\u4ef6~')", "piece": "print(f'\u7f13\u5b58\u8def\u5f84\u4e3a: {tempPath}')"}
{"function_name": "enable_mobile", "function_define": "    if not android_package:\n    if android_activity:\n    if device_serial:", "piece": "if android_activity:"}
{"function_name": "add_argument", "function_define": "    Adds an argument to the list\n    if argument:\n    self._arguments.append(argument)", "piece": "if argument:"}
{"function_name": "post_status", "function_define": "    project = None\n    continue\n    project = other_project", "piece": "continue"}
{"function_name": "test_ne_raises", "function_define": "    value1 = 1234\n    value2 = value1\n    asserts.ne(value1, value2)", "piece": "value2 = value1"}
{"function_name": "print_args", "function_define": "    if args.no_data:\n    if args.use_vocab:\n    if args.no_vocab:", "piece": "if args.use_vocab:"}
{"function_name": "test_mospp_large", "function_define": "    G.list_properties()\n    x = G.vertex_properties['x']\n    y = G.vertex_properties['y']", "piece": "x = G.vertex_properties['x']"}
{"function_name": "test_mospp_small", "function_define": "    G = Graph()\n    G.add_vertex(1)\n    G.add_vertex(2)", "piece": "G.add_vertex(1)"}
{"function_name": "api_all_groups", "function_define": "    groups = Group.objects.all()\n    except Group.DoesNotExist:\n    return_list = []", "piece": "except Group.DoesNotExist:"}
{"function_name": "api_detail_chat", "function_define": "    except Chat.DoesNotExist:\n    user = request.user\n    return_list = []", "piece": "user = request.user"}
{"function_name": "api_add_user", "function_define": "    user = request.user\n    if not user:\n    data = request.data", "piece": "if not user:"}
{"function_name": "api_leave_group", "function_define": "    user = request.user\n    if not user:\n    old_group.users.remove(user)", "piece": "if not user:"}
{"function_name": "api_create_group", "function_define": "    user = request.user\n    if not user:\n    data = request.data", "piece": "if not user:"}
{"function_name": "api_add_chat", "function_define": "    user = request.user\n    if not user:\n    data = request.data", "piece": "if not user:"}
{"function_name": "generate_tables", "function_define": "    if not statistics:\n    continue\n    for test in Tests.as_list():", "piece": "continue"}
{"function_name": "generate_table", "function_define": "    os.makedirs(path, exist_ok=True)\n    for metric in Metric.as_list():\n    rows = list()", "piece": "for metric in Metric.as_list():"}
{"function_name": "as_actor", "function_define": "    buf = deque[_T]()\n    gen = transform(_deiter(buf))\n    x = (yield)", "piece": "gen = transform(_deiter(buf))"}
{"function_name": "copy_conv_layer", "function_define": "    for i in layers:\n    dst_layer.W = src_layer.W\n    dst_layer.b = src_layer.b", "piece": "dst_layer.W = src_layer.W"}
{"function_name": "copy_bn_layer", "function_define": "    for i in layers:\n    src_layer = eval('src.bn%d' % i)\n    dst_layer = eval('dst.bn%d' % i)", "piece": "src_layer = eval('src.bn%d' % i)"}
{"function_name": "make_graph", "function_define": "    as a bond. If a distance is\n    then they are 'bonded'\n    graph = nx.Graph()", "piece": "then they are 'bonded'"}
{"function_name": "set_atoms", "function_define": "    assert type(atoms) is list\n    if len(atoms) > 0:\n    self.atoms = atoms", "piece": "if len(atoms) > 0:"}
{"function_name": "get_datom_nn", "function_define": "    for i, j in self.graph.edges:\n    if i == datom_idx:\n    if j == datom_idx:", "piece": "if i == datom_idx:"}
{"function_name": "parse_names", "function_define": "    for l in f:\n    split = l.split('\\t')\n    outfile.write(l)", "piece": "split = l.split('\\t')"}
{"function_name": "firstLoad", "function_define": "    if data != None and data != '':\n    self.type = 'ECG/'\n    self.type = 'EEG/'", "piece": "self.type = 'ECG/'"}
{"function_name": "changeECGType", "function_define": "    self.cleanWidget()\n    self.type = 'ECG/'\n    self.type = 'EEG/'", "piece": "self.type = 'ECG/'"}
{"function_name": "plot_patio", "function_define": "    ax = plt.subplot(111)\n    passo_x = 1 / len(COLUNAS)\n    passo_y = 0.8 / len(ALTURAS)", "piece": "passo_x = 1 / len(COLUNAS)"}
{"function_name": "to_dataframe", "function_define": "    df = self._df.copy(deep=True)\n    weights_df.index = ['Weights']\n    for col in df.columns:", "piece": "weights_df.index = ['Weights']"}
{"function_name": "_get_sw_headers", "function_define": "    headers = []\n    header = f'{c}[\u2696{w}]'\n    headers.append(header)", "piece": "header = f'{c}[\u2696{w}]'"}
{"function_name": "_repr_html_", "function_define": "    Mainly for IPython notebook.\n    d = pq.PyQuery(html)\n    stock = th.text", "piece": "d = pq.PyQuery(html)"}
{"function_name": "register_handler", "function_define": "    for handler in self.handlers:\n    print(handler.__name__)\n    self.handlers.append(func)", "piece": "print(handler.__name__)"}
{"function_name": "new_atomtype", "function_define": "    if length > 0:\n    if tup[0] == basedon:\n    yield ((newname,) + t)", "piece": "if tup[0] == basedon:"}
{"function_name": "replaceif", "function_define": "    if length > 0:\n    if tup[0] == basedon:\n    yield ((newname,) + t)", "piece": "if tup[0] == basedon:"}
{"function_name": "get_activation", "function_define": "    if activation == 'relu':\n    elif activation == 'sigmoid':\n    elif activation == 'tanh':", "piece": "elif activation == 'sigmoid':"}
{"function_name": "get_normalize", "function_define": "    if norm == 'batch_norm':\n    elif norm == 'layer_norm':\n    elif 'dropout' in norm:", "piece": "elif norm == 'layer_norm':"}
{"function_name": "construct_model", "function_define": "    if 'maxout' not in activation:\n    if 'maxout' in activation:\n    if 'maxout' in activation:", "piece": "if 'maxout' in activation:"}
{"function_name": "_rand_range", "function_define": "    if high is None:\n    low, high = (0, low)\n    if size is None:", "piece": "low, high = (0, low)"}
{"function_name": "_wake_up_timer", "function_define": "    while True:\n    prev = self._wake_up_time\n    if time_to_die:", "piece": "prev = self._wake_up_time"}
{"function_name": "split_dataset", "function_define": "    Parameters:\n    Returns:\n    length = len(df.index)", "piece": "Returns:"}
{"function_name": "order_params", "function_define": "    Parameters:\n    Returns:\n    parsed_params = []", "piece": "Returns:"}
{"function_name": "_get_uniprot_id", "function_define": "    up_id = agent.db_refs.get('UP')\n    if up_id is None:\n    if hgnc_id is None:", "piece": "if up_id is None:"}
{"function_name": "map_stmt_sites", "function_define": "    stmt_copy = deepcopy(stmt)\n    mapped_sites = []\n    new_agent_list = []", "piece": "mapped_sites = []"}
{"function_name": "map_sites", "function_define": "    the given positions.\n    Parameters\n    mapped sites.", "piece": "Parameters"}
{"function_name": "_map_agent_sites", "function_define": "    Parameters\n    new_agent = deepcopy(agent)\n    mapped_sites = []", "piece": "new_agent = deepcopy(agent)"}
{"function_name": "_map_agent_mod", "function_define": "    Parameters\n    protmapper.MappedSite or None\n    up_id = _get_uniprot_id(agent)", "piece": "protmapper.MappedSite or None"}
{"function_name": "check_terminate", "function_define": "    Termination function.\n    self.parent_calls += 1\n    if self.iterations == 0:", "piece": "self.parent_calls += 1"}
{"function_name": "abs_sobel_thresh", "function_define": "    self.image_binary = image_binary\n    self.orient = orient\n    self.sobel_kernel = sobel_kernel", "piece": "self.orient = orient"}
{"function_name": "batchClassify", "function_define": "    query:  bsz x query_len\n    response:   bsz x response_len\n    Returns:", "piece": "response:   bsz x response_len"}
{"function_name": "batchBCEloss", "function_define": "    query: bsz x query_len\n    response:   bsz x response_len\n    target: bsz (binary 0/1)", "piece": "response:   bsz x response_len"}
{"function_name": "set_value_float", "function_define": "    if value is not None:\n    if isinstance(value, str):\n    value = float(value)", "piece": "if isinstance(value, str):"}
{"function_name": "imageHoverEvent", "function_define": "    if event.isExit():\n    p1.setTitle('')\n    pos = event.pos()", "piece": "p1.setTitle('')"}
{"function_name": "initGpio", "function_define": "    GPIO.setmode(GPIO.BCM)\n    GPIO.setwarnings(False)\n    GPIO.setup(5, GPIO.OUT)", "piece": "GPIO.setwarnings(False)"}
{"function_name": "SetTimeOut", "function_define": "    TimeOut += 30\n    if TimeOut > 59:\n    TimeOut -= 59", "piece": "if TimeOut > 59:"}
{"function_name": "user_callback", "function_define": "    nonlocal last_time\n    nonlocal last_results\n    start_time = time.monotonic()", "piece": "nonlocal last_results"}
{"function_name": "_check_tag_regex", "function_define": "    if not value:\n    value = DEFAULT_TAG_REGEX\n    regex = re.compile(value)", "piece": "value = DEFAULT_TAG_REGEX"}
{"function_name": "init_lib", "function_define": "    con = sqlite3.connect(_DB_NAME)\n    curs = con.cursor()\n    con.commit()", "piece": "curs = con.cursor()"}
{"function_name": "_command", "function_define": "    if method == 'get':\n    elif method == 'post':\n    if req.status_code == 200:", "piece": "elif method == 'post':"}
{"function_name": "_db_insert_me", "function_define": "    con = sqlite3.connect(_DB_NAME)\n    curs = con.cursor()\n    con.commit()", "piece": "curs = con.cursor()"}
{"function_name": "sendPhoto", "function_define": "    if markup:\n    if photo_id:\n    payload['photo'] = photo_id", "piece": "if photo_id:"}
{"function_name": "sendAudio", "function_define": "    if markup:\n    if audio_id:\n    payload['audio'] = audio_id", "piece": "if audio_id:"}
{"function_name": "sendDocument", "function_define": "    if markup:\n    if document_id:\n    elif document_path:", "piece": "if document_id:"}
{"function_name": "sendSticker", "function_define": "    if markup:\n    if sticker_id:\n    payload['sticker'] = sticker_id", "piece": "if sticker_id:"}
{"function_name": "sendVideo", "function_define": "    if markup:\n    if video_id:\n    payload['video'] = video_id", "piece": "if video_id:"}
{"function_name": "sendVoice", "function_define": "    if markup:\n    if voice_id:\n    payload['voice'] = voice_id", "piece": "if voice_id:"}
{"function_name": "getUpdates_raw", "function_define": "    if self._update_id == 0:\n    self._db_get_update_id()\n    offset = self._update_id + 1", "piece": "self._db_get_update_id()"}
{"function_name": "getUpdates_iter", "function_define": "    if self._update_id == 0:\n    self._db_get_update_id()\n    offset = self._update_id + 1", "piece": "self._db_get_update_id()"}
{"function_name": "getFile_path", "function_define": "    payload = {'file_id': file_id}\n    if not response_str:\n    if not response['ok']:", "piece": "if not response_str:"}
{"function_name": "getFile_dl", "function_define": "    if f_path:\n    if req.status_code == 200:\n    f.write(chunk)", "piece": "if req.status_code == 200:"}
{"function_name": "set_upid", "function_define": "    if upid != None:\n    self._update_id = upid\n    self._db_set_update_id(upid)", "piece": "self._update_id = upid"}
{"function_name": "set_keys", "function_define": "    lin = len(keys)\n    if lin == 0 or force_row == 0:\n    self.keyboard = None", "piece": "if lin == 0 or force_row == 0:"}
{"function_name": "train_episode", "function_define": "    self.cur_episode += 1\n    info = dict()\n    if batch_transitions is None:", "piece": "info = dict()"}
{"function_name": "run_agent", "function_define": "    state = self.env.reset()\n    done = False\n    while not done:", "piece": "done = False"}
{"function_name": "nextNumProper", "function_define": "    c = current\n    div = math.pow(10, size)\n    while c > 0:", "piece": "div = math.pow(10, size)"}
{"function_name": "get_text", "function_define": "    while True:\n    word = get_string('Text: ')\n    if word != '':", "piece": "word = get_string('Text: ')"}
{"function_name": "the_grade", "function_define": "    if grade >= 16:\n    print('Grade 16+')\n    elif grade < 1:", "piece": "print('Grade 16+')"}
{"function_name": "compareplot", "function_define": "    Parameters\n    comp_df: DataFrame\n    insample_dev : bool", "piece": "comp_df: DataFrame"}
{"function_name": "test_my_reports", "function_define": "    username.send_keys('user1')\n    password.send_keys('<PASSWORD>')\n    btnSubmit.click()", "piece": "password.send_keys('<PASSWORD>')"}
{"function_name": "read_compas", "function_define": "    fo = open(filename, 'w')\n    for line in lines:\n    fo.write(line)", "piece": "for line in lines:"}
{"function_name": "parse_fridge", "function_define": "    fridge_stream = StringIO(fridge)\n    reformatted = dict()\n    if i[0] not in reformatted:", "piece": "reformatted = dict()"}
{"function_name": "filter_fridge", "function_define": "    to_be_deleted = []\n    while i != len(infolist):\n    if item_ub < now_time:", "piece": "while i != len(infolist):"}
{"function_name": "autocorrplot", "function_define": "    Parameters\n    trace : result of MCMC run\n    max_lag : int", "piece": "trace : result of MCMC run"}
{"function_name": "updatePID", "function_define": "    self.current_time = time.time()\n    if dt >= self.sample_time:\n    self.PTerm = error", "piece": "if dt >= self.sample_time:"}
{"function_name": "draw_xml", "function_define": "    img = cv2.imread(imgpath)\n    if img is None:\n    bbox = obj.find('bndbox')", "piece": "if img is None:"}
{"function_name": "_initNodes", "function_define": "    self.nodes = []\n    if 'nodes' in kwargs:\n    for n in kwargs['nodes']:", "piece": "if 'nodes' in kwargs:"}
{"function_name": "income_statement", "function_define": "    Description\n    ticker (string)\n    api_key (string)", "piece": "ticker (string)"}
{"function_name": "updateRow", "function_define": "    temp = []\n    if index == 'Keyword':\n    temp.append(value)", "piece": "if index == 'Keyword':"}
{"function_name": "updateRowManual", "function_define": "    temp = []\n    if index == 'Keyword':\n    temp.append(value)", "piece": "if index == 'Keyword':"}
{"function_name": "updateLabelRow", "function_define": "    temp = []\n    if index == 'Category':\n    temp.append(value)", "piece": "if index == 'Category':"}
{"function_name": "xml_parser", "function_define": "    with open(xml_path) as fd:\n    doc = xd.parse(fd.read())\n    fd.close()", "piece": "doc = xd.parse(fd.read())"}
{"function_name": "delta_spo2", "function_define": "    max_val = max(spo2_arr)\n    min_val = min(spo2_arr)\n    d = max_val - min_val", "piece": "min_val = min(spo2_arr)"}
{"function_name": "data_generator", "function_define": "    interval_df = []\n    if (i + 1) % 6 == 0:\n    a = i - 5", "piece": "if (i + 1) % 6 == 0:"}
{"function_name": "get_region_boxes", "function_define": "    boxes_list = []\n    confs_list = []\n    for item in boxes_and_confs:", "piece": "confs_list = []"}
{"function_name": "post_process", "function_define": "    bin_path = flags.bin_data_path\n    ori_path = flags.origin_jpg_path\n    num_classes = 80", "piece": "ori_path = flags.origin_jpg_path"}
{"function_name": "test_results", "function_define": "    arr1 = np.random.random((4, 5))\n    arr2 = np.random.random((4, 5))\n    by_hand = arr1 + 1j * arr2", "piece": "arr2 = np.random.random((4, 5))"}
{"function_name": "sample_action", "function_define": "    pi_s = policy(state)\n    m = Dist(*pi_s)\n    action = m.sample()", "piece": "m = Dist(*pi_s)"}
{"function_name": "handle_client", "function_define": "    broadcast(bytes(msg, 'utf8'))\n    clients[client] = name\n    while True:", "piece": "clients[client] = name"}
{"function_name": "is_email", "function_define": "    Keyword arguments:\n    address    -- address to check.\n    raise NotImplementedError()", "piece": "address    -- address to check."}
{"function_name": "get_slots", "function_define": "    slots = []\n    for i in range(0, self.cores):\n    self.slots = slots", "piece": "for i in range(0, self.cores):"}
{"function_name": "start_work", "function_define": "    self.work = work\n    work.slot = self\n    self.p = SlotProcess(self.log)", "piece": "work.slot = self"}
{"function_name": "clear_work", "function_define": "    if self.work:\n    self.work.slot = None\n    self.work = None", "piece": "self.work.slot = None"}
{"function_name": "plot_box_images", "function_define": "    imgs: list of image_paths\n    savePath: path to save images\n    img_size: size of new image", "piece": "savePath: path to save images"}
{"function_name": "database_builder", "function_define": "    sql_query = 'SELECT * FROM logs'\n    data = []\n    for f in files:", "piece": "data = []"}
{"function_name": "load_words", "function_define": "    except FileNotFoundError:\n    sys.exit(1)\n    for word in file.readlines():", "piece": "sys.exit(1)"}
{"function_name": "load_scoreboard", "function_define": "    except FileNotFoundError:\n    for line in file.readlines():\n    line = line.strip()", "piece": "for line in file.readlines():"}
{"function_name": "from_asn1", "function_define": "    data = str(data)\n    year = int(data[0:4])\n    month = int(data[4:6])", "piece": "year = int(data[0:4])"}
{"function_name": "convert_to_mp4", "function_define": "    if not exists(target_dir):\n    makedirs(target_dir)\n    subprocess.call(args)", "piece": "makedirs(target_dir)"}
{"function_name": "task_worker", "function_define": "    context = zmq.Context()\n    while True:\n    s = receiver.recv()", "piece": "while True:"}
{"function_name": "arg_move", "function_define": "    board = backlog_board()\n    except IndexError:\n    if not card:", "piece": "except IndexError:"}
{"function_name": "arg_modify", "function_define": "    board = backlog_board()\n    if cli_args.remove_due:\n    card.remove_due()", "piece": "if cli_args.remove_due:"}
{"function_name": "moment_vsk", "function_define": "    fwd: forward price\n    texp: time to expiry\n    n = len(self.weight)", "piece": "texp: time to expiry"}
{"function_name": "dataDaemon", "function_define": "    while True:\n    time.sleep(interval)\n    except Exception as e:", "piece": "time.sleep(interval)"}
{"function_name": "handlePower", "function_define": "    if self.Sleeping:\n    self.wakeUp()\n    self.sleep()", "piece": "self.wakeUp()"}
{"function_name": "handleEvents", "function_define": "    now = time.time()\n    for event in pygame.event.get():\n    if self.Sleeping:", "piece": "for event in pygame.event.get():"}
{"function_name": "make_extensions", "function_define": "    include_diagnostics = False\n    import numpy\n    except ImportError:", "piece": "import numpy"}
{"function_name": "check_open", "function_define": "    led_pin.value(0)\n    if pin.value() == 1:\n    print(name, 'open...')", "piece": "if pin.value() == 1:"}
{"function_name": "countBattleships", "function_define": "    if not board or not board[0]:\n    for i in xrange(len(board)):\n    for j in xrange(len(board[0])):", "piece": "for i in xrange(len(board)):"}
{"function_name": "date_to_string", "function_define": "    if date_format is None:\n    date_format = date_format\n    if date is not None:", "piece": "date_format = date_format"}
{"function_name": "get_reduced_row", "function_define": "    for i in range(9):\n    value = row[i].value\n    rr.append(value)", "piece": "value = row[i].value"}
{"function_name": "get_api_keys", "function_define": "    api_keys = []\n    for key in keys_in_file:\n    if len(api_keys) == 2:", "piece": "for key in keys_in_file:"}
{"function_name": "export_csv", "function_define": "    csvwriter = csv.writer(csvfile)\n    for row in data:\n    csvwriter.writerow(row)", "piece": "for row in data:"}
{"function_name": "dataReader", "function_define": "    with open(filePath) as f:\n    data = f.readlines()\n    if index == 0:", "piece": "data = f.readlines()"}
{"function_name": "_shapes_match", "function_define": "    if before.count != after.count:\n    if type(before) != type(after):\n    if len(b_members) == 0:", "piece": "if type(before) != type(after):"}
{"function_name": "remotePowershell", "function_define": "    data = json.loads(request.data)\n    path = 'c:\\\\temp'\n    client.close()", "piece": "path = 'c:\\\\temp'"}
{"function_name": "SetupTextFile", "function_define": "    saveLink.close()\n    self.FindItemUpdate()\n    findItem.close()", "piece": "self.FindItemUpdate()"}
{"function_name": "FindHappy", "function_define": "    html = urlopen(self.url)\n    if self.str == '':\n    self.FindItemUpdate()", "piece": "if self.str == '':"}
{"function_name": "testAppView", "function_define": "    from django.test import Client\n    from django.urls import reverse\n    client = Client()", "piece": "from django.urls import reverse"}
{"function_name": "get_stack", "function_define": "    if opts is None:\n    opts = pulumi.InvokeOptions()\n    if opts.version is None:", "piece": "opts = pulumi.InvokeOptions()"}
{"function_name": "get_nums", "function_define": "    if match_re:\n    nums = int(match_re.group(1))\n    nums = 0", "piece": "nums = int(match_re.group(1))"}
{"function_name": "scatter_plot_in", "function_define": "    fname is expected directory path\n    df = pd.read_csv(fname)\n    df_calc = pd.DataFrame()", "piece": "df = pd.read_csv(fname)"}
{"function_name": "_calculate_mse", "function_define": "    y_hat = 0\n    for i in range(CHROMOSOME_SIZE):\n    y_hat += x ** self.chromosome[i]", "piece": "for i in range(CHROMOSOME_SIZE):"}
{"function_name": "train_vae", "function_define": "    from railrl.core import logger\n    beta = variant['beta']\n    if use_linear_dynamics:", "piece": "beta = variant['beta']"}
{"function_name": "itemChange", "function_define": "    for i in range(len(self.edges)):\n    for edge in self.edges:\n    edge.adjust()", "piece": "for edge in self.edges:"}
{"function_name": "perp2coast", "function_define": "    method: [ mean ]\n    adjacent locations\n    perpendicular location.", "piece": "adjacent locations"}
{"function_name": "inter2vector", "function_define": "    xr_openmf_defaults = {}\n    print('Opening velocity files')\n    if u.shape != v.shape:", "piece": "print('Opening velocity files')"}
{"function_name": "mask_transport", "function_define": "    threshold [ float / list ]\n    method     [ string ]\n    if type(threshold) == list:", "piece": "method     [ string ]"}
{"function_name": "loaddata", "function_define": "    results.sort()\n    elif dataset != None:\n    data = dataset", "piece": "elif dataset != None:"}
{"function_name": "QEnvToProtobuf", "function_define": "    head = program.head\n    body = program.body\n    for circuitLine in env.circuit:", "piece": "body = program.body"}
{"function_name": "gateToProtobuf", "function_define": "    ret = PBCircuitLine()\n    ret.qRegList[:] = qRegList\n    ret.procedure_name = data.name", "piece": "ret.qRegList[:] = qRegList"}
{"function_name": "readCode", "function_define": "    time.sleep(random.random())\n    url = getRawUrl(result)\n    if url in t_history_urls:", "piece": "url = getRawUrl(result)"}
{"function_name": "test_compute", "function_define": "    mae = MeanAbsoluteError()\n    y = torch.zeros(2)\n    mae.update((y_pred, y))", "piece": "y = torch.zeros(2)"}
{"function_name": "extract_ft", "function_define": "    model_ft = model_ft.to(device)\n    model_ft.eval()\n    fts = []", "piece": "model_ft.eval()"}
{"function_name": "merge_filtered", "function_define": "    for key, val in xs.items():\n    if pred(key):\n    result[key] = val", "piece": "if pred(key):"}
{"function_name": "merge_matches", "function_define": "    O, P, Q = shape\n    m1 = np.asarray(m1)\n    m2 = np.asarray(m2)", "piece": "m1 = np.asarray(m1)"}
{"function_name": "iou_distance", "function_define": "    Compute cost based on IoU\n    atlbrs = atracks\n    btlbrs = btracks", "piece": "atlbrs = atracks"}
{"function_name": "iou_ddd_distance", "function_define": "    Compute cost based on IoU\n    atlbrs = atracks\n    btlbrs = btracks", "piece": "atlbrs = atracks"}
{"function_name": "polygon_clip", "function_define": "    dp = [s[0] - e[0], s[1] - e[1]]\n    n2 = s[0] * e[1] - s[1] * e[0]\n    outputList = subjectPolygon", "piece": "n2 = s[0] * e[1] - s[1] * e[0]"}
{"function_name": "fuse_motion_ddd", "function_define": "    if cost_matrix.size == 0:\n    gating_dim = 7\n    if use_prediction:", "piece": "gating_dim = 7"}
{"function_name": "invite_register", "function_define": "    if not invite:\n    if request.method == 'POST':\n    if form.is_valid():", "piece": "if request.method == 'POST':"}
{"function_name": "setPixel", "function_define": "    if addr % pixelsize != 0:\n    sx = addr % canvas_size\n    sy = addr / canvas_size", "piece": "sx = addr % canvas_size"}
{"function_name": "allocate_buffers", "function_define": "    inputs = []\n    outputs = []\n    bindings = []", "piece": "outputs = []"}
{"function_name": "get_engine", "function_define": "    if FP16:\n    print('[INFO] Open FP16 Mode!')\n    parser.parse(model.read())", "piece": "print('[INFO] Open FP16 Mode!')"}
{"function_name": "build_engine", "function_define": "    parser.parse(model.read())\n    if fp16_mode:\n    if int8_mode:", "piece": "if fp16_mode:"}
{"function_name": "csv_number_to_ip", "function_define": "    target_eqs_source = False\n    target_eqs_source = True\n    for row in spamreader:", "piece": "target_eqs_source = True"}
{"function_name": "put_into_fgr", "function_define": "    self.length += 1\n    cha = 'filter'\n    liste = content.split()", "piece": "cha = 'filter'"}
{"function_name": "table_printout", "function_define": "    len = self.data[key].length\n    if len > -1:\n    elem = None", "piece": "if len > -1:"}
{"function_name": "put_into_tables", "function_define": "    liste = line.split()\n    liste.pop(0)\n    rest = ''", "piece": "liste.pop(0)"}
{"function_name": "_collect_metrics", "function_define": "    for key in metrics.keys():\n    values = metrics[key]\n    metrics_data.append('%s:' % key)", "piece": "values = metrics[key]"}
{"function_name": "close_file", "function_define": "    fp: A file descriptor.\n    if not fp.closed:\n    fp.close()", "piece": "if not fp.closed:"}
{"function_name": "create_ps_worker", "function_define": "    task_index: The task index.\n    ps_hosts = ps_hosts\n    worker_hosts = worker_hosts", "piece": "ps_hosts = ps_hosts"}
{"function_name": "label_smoothing", "function_define": "    epsilon: Smoothing rate.\n    Returns: The smoothed labels.\n    For example,", "piece": "Returns: The smoothed labels."}
{"function_name": "get_labels_files", "function_define": "    Returns: A list or None.\n    if labels_file is None:\n    ret = []", "piece": "if labels_file is None:"}
{"function_name": "CalibrationCurve", "function_define": "    Returns:\n    A tuple containing:\n    mean_predicted_accuracies = []", "piece": "A tuple containing:"}
{"function_name": "Calculate", "function_define": "    scalar values.\n    Returns:\n    self._calibration_by_class = {}", "piece": "Returns:"}
{"function_name": "unc_premodel", "function_define": "    model = None\n    if model_name == 'mc_dropout':\n    if model_name == 'rank1':", "piece": "if model_name == 'mc_dropout':"}
{"function_name": "uncertainty", "function_define": "    with torch.no_grad():\n    if pre_model_name == 'rapp':\n    dif = (difs ** 2).mean(axis=1)", "piece": "if pre_model_name == 'rapp':"}
{"function_name": "train_from_torch", "function_define": "    self._current_epoch += 1\n    rewards = batch['rewards']\n    terminals = batch['terminals']", "piece": "rewards = batch['rewards']"}
{"function_name": "_parse_agencies", "function_define": "    agencies = []\n    for agency_e in agencies_array:\n    agencies.append(agency)", "piece": "for agency_e in agencies_array:"}
{"function_name": "parse_main", "function_define": "    for category in categories:\n    rows = items_table.select('tr')\n    count = 0", "piece": "rows = items_table.select('tr')"}
{"function_name": "UnifyDevices", "function_define": "    if len(set(types)) != 1:\n    if types[0] == 'cuda':\n    if len(set(indices)) != 1:", "piece": "if types[0] == 'cuda':"}
{"function_name": "WrapScalar", "function_define": "    if 'float' in dtype:\n    scalar = float(scalar)\n    if 'int' in dtype:", "piece": "scalar = float(scalar)"}
{"function_name": "get_from_feed", "function_define": "    offset: :class:`int`\n    languages: :class:`list[int]`\n    subscribes: :class:`bool`", "piece": "languages: :class:`list[int]`"}
{"function_name": "test_one_mn", "function_define": "    s = SphericalHarmonics(4)\n    s.check_orthogonality()\n    s.check_identity()", "piece": "s.check_orthogonality()"}
{"function_name": "test_random", "function_define": "    s = SphericalHarmonics(16)\n    a = a[0] + 1j * a[1]\n    y = s.synthesis(a)", "piece": "a = a[0] + 1j * a[1]"}
{"function_name": "test_gaussian", "function_define": "    s = SphericalHarmonics(8)\n    a = s.analysis(y)\n    y1 = s.synthesis(a)", "piece": "a = s.analysis(y)"}
{"function_name": "check_identity", "function_define": "    ys = np.absolute(y).sum()\n    a = self.analysis(y)\n    y1 = self.synthesis(a)", "piece": "a = self.analysis(y)"}
{"function_name": "synthesis", "function_define": "    This is O(nmax^3) in time.\"\"\"\n    a = np.atleast_2d(a)\n    for i in range(self.nmax):", "piece": "a = np.atleast_2d(a)"}
{"function_name": "availableActive", "function_define": "    Returns a list of available\n    actively absorbing molecules\n    molecules: :obj:`list`", "piece": "actively absorbing molecules"}
{"function_name": "activeGases", "function_define": "    active : :obj:`list`\n    List of active gases\n    raise NotImplementedError", "piece": "List of active gases"}
{"function_name": "inactiveGases", "function_define": "    inactive : :obj:`list`\n    List of inactive gases\n    raise NotImplementedError", "piece": "List of inactive gases"}
{"function_name": "test_sp_voronoi", "function_define": "    nnodes = 100\n    np.random.seed(0)\n    x = np.random.rand(nnodes)", "piece": "np.random.seed(0)"}
{"function_name": "get_version", "function_define": "    version = None\n    file_content = handle.read()\n    if not version:", "piece": "file_content = handle.read()"}
{"function_name": "ccm_unred", "function_define": "    CCM_UNRED\n    PURPOSE:\n    EXPLANATION:", "piece": "PURPOSE:"}
{"function_name": "Cardelli_coeff", "function_define": "    import numpy as np\n    scalar = np.isscalar(lamb)\n    if any((x < 0.3) | (10 < x)):", "piece": "scalar = np.isscalar(lamb)"}
{"function_name": "get_audit_log", "function_define": "    Defaults to 1\n    this action\n    which this action was performed", "piece": "this action"}
{"function_name": "getPhsSpanStats", "function_define": "    phs_band_rate_summary = []\n    for bp in hit_rates:\n    print('Ending getPhsSpanStats')", "piece": "for bp in hit_rates:"}
{"function_name": "getPhsHitRates", "function_define": "    info_by_band_pair = dict()\n    for bp in band_pair_list:\n    for result in datalist:", "piece": "for bp in band_pair_list:"}
{"function_name": "getAvgHitRates", "function_define": "    num_tests = len(datalist)\n    print(result)\n    if toprint[1] == 0:", "piece": "print(result)"}
{"function_name": "getDataByCovRate", "function_define": "    total_event_count = 0\n    dates_seen = []\n    model_param_names = []", "piece": "dates_seen = []"}
{"function_name": "test__str__", "function_define": "    op1 = '.a'\n    operator = 'ge'\n    f = Filter(operator, op1, op2)", "piece": "operator = 'ge'"}
{"function_name": "test__repr__", "function_define": "    op1 = '.a'\n    operator = 'ge'\n    f = Filter(operator, op1, op2)", "piece": "operator = 'ge'"}
{"function_name": "get_main_feature", "function_define": "    if len(features) > 1:\n    if len(features) > 1:\n    if not features:", "piece": "if len(features) > 1:"}
{"function_name": "get_channels", "function_define": "    channels = []\n    if 'hdr' in features:\n    if 'ldr' in features:", "piece": "if 'hdr' in features:"}
{"function_name": "image_exists", "function_define": "    suffixes = features.copy()\n    if 'sh1' in suffixes:\n    suffixes.remove('sh1')", "piece": "if 'sh1' in suffixes:"}
{"function_name": "__initialize__", "function_define": "    if hasattr(_type, '__args__'):\n    print('is_args!')\n    attributes = {}", "piece": "print('is_args!')"}
{"function_name": "from_struct", "function_define": "    cls.__initialize__()\n    origin = attr.type.__origin__\n    if origin in (list, tuple):", "piece": "origin = attr.type.__origin__"}
{"function_name": "to_struct", "function_define": "    if isinstance(val, Zerofir):\n    val = val.to_struct()\n    elif isinstance(val, dict):", "piece": "val = val.to_struct()"}
{"function_name": "unstructured", "function_define": "    origin = attr.type.__origin__\n    if origin in (list, tuple):\n    type_in = attr.type.__args__[0]", "piece": "if origin in (list, tuple):"}
{"function_name": "structured", "function_define": "    if isinstance(val, Zerofir):\n    val = val.to_struct()\n    elif isinstance(val, dict):", "piece": "val = val.to_struct()"}
{"function_name": "write_pair", "function_define": "    return_value = None\n    value = None\n    for fmt in formats[::-1]:", "piece": "value = None"}
{"function_name": "read_pair", "function_define": "    if must_match:\n    if diff:\n    raise PairedFilesDiffer(diff)", "piece": "if diff:"}
{"function_name": "get_validation", "function_define": "    model.eval()\n    b_cnt, correct = (0, 0)\n    b_cnt += 1", "piece": "b_cnt, correct = (0, 0)"}
{"function_name": "CreateOverlapPNG", "function_define": "    os.mkdir(resultsDir)\n    if not os.path.exists(mainDir):\n    os.mkdir(mainDir)", "piece": "if not os.path.exists(mainDir):"}
{"function_name": "dataCheck_one", "function_define": "    logger = logging.getLogger()\n    dataCheckJobName = 'DataCheck'\n    fControl = True", "piece": "dataCheckJobName = 'DataCheck'"}
{"function_name": "checkOverlap", "function_define": "    logger = logging.getLogger()\n    overlapCheck = False\n    if overlapCheck:", "piece": "overlapCheck = False"}
{"function_name": "add_playlist", "function_define": "    p = Playlist(url)\n    if _title == 'null':\n    except Exception:", "piece": "if _title == 'null':"}
{"function_name": "sync_playlists", "function_define": "    conn = None\n    c = conn.cursor()\n    pls = c.fetchall()", "piece": "c = conn.cursor()"}
{"function_name": "show_main", "function_define": "    print('e) Exit')\n    if task == '1':\n    get_playlists()", "piece": "if task == '1':"}
{"function_name": "read_mml_evaldb", "function_define": "    Parameters\n    filepath : str\n    Path to index file to read", "piece": "filepath : str"}
{"function_name": "is_evaldb", "function_define": "    with open(filename, 'r') as fh:\n    for i in range(4):\n    if U_ROOT in fh.readline():", "piece": "for i in range(4):"}
{"function_name": "start_element", "function_define": "    sp = IND * len(self.stack)\n    stream.flush()\n    self.stack.append(name)", "piece": "stream.flush()"}
{"function_name": "end_element", "function_define": "    assert _name == name\n    sp = IND * len(self.stack)\n    stream.flush()", "piece": "sp = IND * len(self.stack)"}
{"function_name": "end_document", "function_define": "    assert _name == U_ROOT\n    stream.flush()\n    stream.close()", "piece": "stream.flush()"}
{"function_name": "write_eval_info", "function_define": "    Parameters\n    Evaluation number\n    Evaluation status", "piece": "Evaluation number"}
{"function_name": "add_adv_guards", "function_define": "    for i in xrange(num_adv_guards):\n    num_str = str(i + 1)\n    hibernating = False", "piece": "num_str = str(i + 1)"}
{"function_name": "add_adv_exits", "function_define": "    for i in xrange(num_adv_exits):\n    num_str = str(i + 1)\n    hibernating = False", "piece": "num_str = str(i + 1)"}
{"function_name": "filter_flags", "function_define": "    nodes = []\n    for fprint in cons_rel_stats:\n    for flag in no_flags:", "piece": "for fprint in cons_rel_stats:"}
{"function_name": "run_image_stitch", "function_define": "    img_val_map = color_map\n    processed_pic = to_stitch_pic\n    h, w = ref_image.shape", "piece": "processed_pic = to_stitch_pic"}
{"function_name": "extract_url", "function_define": "    except pyparsing.ParseException:\n    match = FROM_REGEX.search(sql)\n    if match:", "piece": "match = FROM_REGEX.search(sql)"}
{"function_name": "logWarning", "function_define": "    ctx.log.warn(s)\n    except Exception:\n    print(s)", "piece": "except Exception:"}
{"function_name": "logError", "function_define": "    ctx.log.error(s)\n    except Exception:\n    print(s)", "piece": "except Exception:"}
{"function_name": "indexOfDTD", "function_define": "    index: int = 0\n    for item in soup.contents:\n    if isinstance(item, Doctype):", "piece": "for item in soup.contents:"}
{"function_name": "loadUserscripts", "function_define": "    workingDirectory = os.getcwd()\n    os.chdir(directory)\n    content = open(filename).read()", "piece": "os.chdir(directory)"}
{"function_name": "response", "function_define": "    response = flow.response\n    for script in self.userscripts:\n    if isApplicable(script):", "piece": "for script in self.userscripts:"}
{"function_name": "unpack_libraries", "function_define": "    task.execute()\n    files = []\n    files.extend(filename)", "piece": "files = []"}
{"function_name": "apply_with_dict", "function_define": "    for key in dict_value:\n    value = dict_value[key]\n    df[key] = value", "piece": "value = dict_value[key]"}
{"function_name": "try_update", "function_define": "    value = source.pop(key)\n    except KeyError:\n    if callable(cast):", "piece": "except KeyError:"}
{"function_name": "try_update_enum", "function_define": "    value = source.pop(key)\n    except KeyError:\n    except (KeyError, ValueError):", "piece": "except KeyError:"}
{"function_name": "unpack_enums", "function_define": "    result = {}\n    for key, value in map.items():\n    if isinstance(value, Enum):", "piece": "for key, value in map.items():"}
{"function_name": "addParenthesis", "function_define": "    b_l = []\n    for idx, s in enumerate(str):\n    if s != '(':", "piece": "for idx, s in enumerate(str):"}
{"function_name": "_set_source", "function_define": "    if not hasattr(self, 'source'):\n    self.source = None\n    if new_source_uid is None:", "piece": "self.source = None"}
{"function_name": "ConfigCenter_add", "function_define": "    if request.method == 'POST':\n    tpl_ConfigCenter_form.save()\n    tips = '\u589e\u52a0\u6210\u529f\uff01'", "piece": "tpl_ConfigCenter_form.save()"}
{"function_name": "maxInList", "function_define": "    inLen = len(a[0])\n    index = []\n    for i in range(len(a[0])):", "piece": "index = []"}
{"function_name": "emit_line", "function_define": "    if line.startswith('}'):\n    self.dedent()\n    if line.endswith('{'):", "piece": "self.dedent()"}
{"function_name": "emit_label", "function_define": "    if isinstance(label, str):\n    text = label\n    text = self.label(label)", "piece": "text = label"}
{"function_name": "emit_inc_ref", "function_define": "    if is_int_rprimitive(rtype):\n    elif isinstance(rtype, RTuple):\n    elif not rtype.is_unboxed:", "piece": "elif isinstance(rtype, RTuple):"}
{"function_name": "emit_dec_ref", "function_define": "    x = 'X' if is_xdec else ''\n    if is_int_rprimitive(rtype):\n    elif isinstance(rtype, RTuple):", "piece": "if is_int_rprimitive(rtype):"}
{"function_name": "emit_cast", "function_define": "    src: Name of source C variable\n    dest: Name of target C variable\n    typ: Type of value", "piece": "dest: Name of target C variable"}
{"function_name": "emit_union_cast", "function_define": "    if declare_dest:\n    good_label = self.new_label()\n    if optional:", "piece": "good_label = self.new_label()"}
{"function_name": "emit_tuple_cast", "function_define": "    if declare_dest:\n    out_label = self.new_label()\n    self.emit_label(out_label)", "piece": "out_label = self.new_label()"}
{"function_name": "emit_arg_check", "function_define": "    if optional:\n    if check != '':\n    elif optional:", "piece": "if check != '':"}
{"function_name": "emit_unbox", "function_define": "    src: Name of source C variable\n    dest: Name of target C variable\n    typ: Type of value", "piece": "dest: Name of target C variable"}
{"function_name": "emit_box", "function_define": "    if declare_dest:\n    declaration = 'PyObject *'\n    declaration = ''", "piece": "declaration = 'PyObject *'"}
{"function_name": "emit_gc_visit", "function_define": "    if not rtype.is_refcounted:\n    self.emit_line('}')\n    elif isinstance(rtype, RTuple):", "piece": "self.emit_line('}')"}
{"function_name": "emit_gc_clear", "function_define": "    if not rtype.is_refcounted:\n    self.emit_line('}')\n    elif isinstance(rtype, RTuple):", "piece": "self.emit_line('}')"}
{"function_name": "buildFrame", "function_define": "    frame = [255]\n    frame.extend(map(ord, command))\n    frame.extend(map(ord, data))", "piece": "frame.extend(map(ord, command))"}
{"function_name": "readFrame", "function_define": "    length = port.read(1)\n    payload = frame[0:-1]\n    checksum = frame[-1:]", "piece": "payload = frame[0:-1]"}
{"function_name": "getRamVarInfo", "function_define": "    res = readFrame()\n    if len(res) < 4:\n    info = {}", "piece": "if len(res) < 4:"}
{"function_name": "getRamVar", "function_define": "    info = getRamVarInfo(id)\n    if not info:\n    res = readFrame()", "piece": "if not info:"}
{"function_name": "load_graph", "function_define": "    graph = nx.Graph()\n    if not os.path.isfile(path):\n    exit(-1)", "piece": "if not os.path.isfile(path):"}
{"function_name": "parse_segments", "function_define": "    msks_parsed = []\n    curr = seg[:, :, slice]\n    mask = np.asarray(msks_parsed)", "piece": "curr = seg[:, :, slice]"}
{"function_name": "parse_images", "function_define": "    slices = []\n    curr = img[:, :, slice]\n    slices.append(curr)", "piece": "curr = img[:, :, slice]"}
{"function_name": "stack_img_slices", "function_define": "    full_brain = []\n    current_slice = []\n    for mode in stack_order:", "piece": "current_slice = []"}
{"function_name": "comment_add", "function_define": "    form = CommentForm()\n    ret = {}\n    ret['code'] = 0", "piece": "ret = {}"}
{"function_name": "password", "function_define": "    form = PasswordForm()\n    if form.validate_on_submit():\n    db.session.commit()", "piece": "if form.validate_on_submit():"}
{"function_name": "alipay_nofity", "function_define": "    data = request.form.to_dict()\n    sign = data.pop('sign', None)\n    if alipay.verify(data, sign):", "piece": "sign = data.pop('sign', None)"}
{"function_name": "eyeimages2lbp", "function_define": "    new_dataset = []\n    botheye_video, label = datapoint\n    features_eyes = []", "piece": "botheye_video, label = datapoint"}
{"function_name": "set_elite", "function_define": "    idx = analyzer.top_idx\n    self.elite_idx = 0\n    if self.replace(pool_top_score):", "piece": "self.elite_idx = 0"}
{"function_name": "test_put_get", "function_define": "    f = FileOperator.create('f1')\n    f.chunks = ['c1', 'c2']\n    db.session.add(f)", "piece": "f.chunks = ['c1', 'c2']"}
{"function_name": "_classify", "function_define": "    posteriors = []\n    posterior *= likelihood\n    posteriors.append(posterior)", "piece": "posterior *= likelihood"}
{"function_name": "find_max_value", "function_define": "    find max val\n    max_val = -10000\n    tx_index = 0", "piece": "max_val = -10000"}
{"function_name": "_get_trafo", "function_define": "    trafos = []\n    if args.add_z_axis:\n    if len(trafos) == 0:", "piece": "if args.add_z_axis:"}
{"function_name": "enhance_img", "function_define": "    f = image.read()\n    image_binary = bytearray(f)\n    except Exception as e:", "piece": "image_binary = bytearray(f)"}
{"function_name": "request_stop", "function_define": "    metrics['Request-Timer'].stop()\n    if DATADOG_METRICS:\n    metrics.pop('Request-Timer')", "piece": "if DATADOG_METRICS:"}
{"function_name": "VerifyTools", "function_define": "    cmd = tool.command\n    if os.path.isabs(cmd):\n    if not os.path.exists(cmd):", "piece": "if os.path.isabs(cmd):"}
{"function_name": "resamp_slc", "function_define": "    for port in self.inputPorts:\n    if imageIn is not None:\n    self.imageIn = imageIn", "piece": "if imageIn is not None:"}
{"function_name": "createImages", "function_define": "    self.imageIn.createImage()\n    self.imageOut.createImage()\n    poly = Poly2D.Poly2D()", "piece": "self.imageOut.createImage()"}
{"function_name": "setDefaults", "function_define": "    if self.inputLines is None:\n    if self.inputWidth is None:\n    if self.startingRange is None:", "piece": "if self.inputWidth is None:"}
{"function_name": "test_link_flap", "function_define": "    assert ctrl_links\n    retry = 3\n    while retry > 0:", "piece": "retry = 3"}
{"function_name": "create_chrome", "function_define": "    ops = webdriver.ChromeOptions()\n    web.set_page_load_timeout(10)\n    web.set_script_timeout(10)", "piece": "web.set_page_load_timeout(10)"}
{"function_name": "threading_pool", "function_define": "    threadlist = []\n    for i in range(tnum):\n    threadlist.append(t)", "piece": "for i in range(tnum):"}
{"function_name": "set_interval", "function_define": "    if len(args) >= 1:\n    s = args[0]\n    if len(args) >= 2:", "piece": "s = args[0]"}
{"function_name": "serialization", "function_define": "    request_serializers = {}\n    request_deserializers = {}\n    response_serializers = {}", "piece": "request_deserializers = {}"}
{"function_name": "upload_to_drive", "function_define": "    Parameters\n    filename : str\n    folder_id : str", "piece": "filename : str"}
{"function_name": "render_icon", "function_define": "    image_url = ''\n    if icon_path:\n    elif icon:", "piece": "if icon_path:"}
{"function_name": "load_sentence", "function_define": "    under several kilobytes.\n    limit = 1000\n    attempts = 1", "piece": "limit = 1000"}
{"function_name": "value_iteration", "function_define": "    a at state s0\n    gamma       float - RL discount\n    returns:", "piece": "gamma       float - RL discount"}
{"function_name": "GetActiveScopes", "function_define": "    if self.ActualScopes is None:\n    import edk2basetools\n    self.UseBuiltInBaseTools = True", "piece": "import edk2basetools"}
{"function_name": "GetPackagesPath", "function_define": "    result = []\n    for a in self.GetDependencies():\n    result.append(a['Path'])", "piece": "for a in self.GetDependencies():"}
{"function_name": "atom_block", "function_define": "    idx_table = {}\n    lines = []\n    atom_line = []", "piece": "lines = []"}
{"function_name": "bond_block", "function_define": "    lines = []\n    for u, v, b in mol.bonds_iter():\n    bond_line = []", "piece": "for u, v, b in mol.bonds_iter():"}
{"function_name": "prop_block", "function_define": "    lines = []\n    chg_line = []\n    rad_line = []", "piece": "chg_line = []"}
{"function_name": "data_block", "function_define": "    lines = []\n    for k, v in mol.data.items():\n    lines.append('> <{}>'.format(k))", "piece": "for k, v in mol.data.items():"}
{"function_name": "mol_block", "function_define": "    chiral_flag = 0\n    lines.extend(atoms)\n    if bonds:", "piece": "lines.extend(atoms)"}
{"function_name": "mols_to_text", "function_define": "    mols: list of molecule objects\n    Returns:\n    SDFile text", "piece": "Returns:"}
{"function_name": "mols_to_file", "function_define": "    mols: list of molecule objects\n    path: file path to save\n    with open(path, 'w') as f:", "piece": "path: file path to save"}
{"function_name": "module_fuel", "function_define": "    fuel_mass = mass // 3 - 2\n    total = 0\n    if fuel_mass <= 0:", "piece": "total = 0"}
{"function_name": "test_runner", "function_define": "    test_counter = 1\n    if len(r):\n    if func(i) == int(r[0]):", "piece": "if len(r):"}
{"function_name": "reduction", "function_define": "    depth = 0\n    for i, v in enumerate(s):\n    if v.isnumeric() and depth > 4:", "piece": "for i, v in enumerate(s):"}
{"function_name": "blender2gltf", "function_define": "    if len(bpy.data.actions) > 0:\n    for act in bpy.data.actions:\n    for obj in selection:", "piece": "for act in bpy.data.actions:"}
{"function_name": "daemonconf", "function_define": "    pw = self.generatePassword()\n    ip = self.getIP()\n    coin_name = 'polis'", "piece": "ip = self.getIP()"}
{"function_name": "daemon_action", "function_define": "    if reindex == 1:\n    cmd += ' -reindex'\n    except UnexpectedExit as e:", "piece": "cmd += ' -reindex'"}
{"function_name": "download_year", "function_define": "    print(f'{year}, {month}')\n    end_year = year\n    end_month = month + 1", "piece": "end_year = year"}
{"function_name": "gen_task_ctrl", "function_define": "    years = [2019]\n    months = range(1, 13)\n    regrid_inputs = {}", "piece": "months = range(1, 13)"}
{"function_name": "build_sleep_log", "function_define": "    sleep_log = {}\n    asleep_since = None\n    for record in records:", "piece": "asleep_since = None"}
{"function_name": "producer", "function_define": "    with lock:\n    time.sleep(3)\n    print(\"I'm free\")", "piece": "time.sleep(3)"}
{"function_name": "search_rectangle", "function_define": "    x1 = Real('x1')\n    x2 = Real('x2')\n    x3 = Real('x3')", "piece": "x2 = Real('x2')"}
{"function_name": "getexample1", "function_define": "    b1 = [1, -1]\n    e1 = [-1, 1]\n    b2 = [-1, 2]", "piece": "e1 = [-1, 1]"}
{"function_name": "getexample2", "function_define": "    b1 = [-1, 0]\n    e1 = [1, 0]\n    b2 = [-2, 1]", "piece": "e1 = [1, 0]"}
{"function_name": "fdr_threshold", "function_define": "    z_vals_ = -np.sort(-z_vals)\n    p_vals = norm.sf(z_vals_)\n    n_samples = len(p_vals)", "piece": "p_vals = norm.sf(z_vals_)"}
{"function_name": "map_threshold", "function_define": "    Parameters\n    stat_img : Niimg-like object,\n    mask image", "piece": "stat_img : Niimg-like object,"}
{"function_name": "parse_brand", "function_define": "    for brand in brand_list:\n    meta = dict(response.meta)\n    meta['brand_id'] = car_id", "piece": "meta = dict(response.meta)"}
{"function_name": "parse_series", "function_define": "    meta = response.meta\n    for i, ul in enumerate(ul_list):\n    series_list = ul.xpath('./li/a')", "piece": "for i, ul in enumerate(ul_list):"}
{"function_name": "parse_power", "function_define": "    meta = response.meta\n    for power in power_list:\n    meta['power_id'] = car_id", "piece": "for power in power_list:"}
{"function_name": "parse_year", "function_define": "    meta = response.meta\n    meta['car_id'] = car_id\n    meta['year'] = year_name", "piece": "meta['car_id'] = car_id"}
{"function_name": "parse_service", "function_define": "    detail_list_list = [detail_list]\n    service_value_list = list()\n    p_name_service_id_map = dict()", "piece": "service_value_list = list()"}
{"function_name": "parse_goods", "function_define": "    db_dict = dict()\n    db_dict['cate_id'] = cate_id\n    db_dict['title'] = title", "piece": "db_dict['cate_id'] = cate_id"}
{"function_name": "concept_drift", "function_define": "    if idx == 0:\n    assert a < b\n    self.concept_drift_noise = []", "piece": "assert a < b"}
{"function_name": "rever_decorator", "function_define": "    nonlocal rever_kwargs\n    if args or kwargs:\n    r = func(*args, **kwargs)", "piece": "if args or kwargs:"}
{"function_name": "ConvFactory", "function_define": "    bn_mom = config.bn_mom\n    workspace = config.workspace\n    if not dcn:", "piece": "workspace = config.workspace"}
{"function_name": "conv_resnet", "function_define": "    ACT_BIT = config.ACT_BIT\n    bn_mom = config.bn_mom\n    workspace = config.workspace", "piece": "bn_mom = config.bn_mom"}
{"function_name": "conv_hpm", "function_define": "    ACT_BIT = config.ACT_BIT\n    bn_mom = config.bn_mom\n    workspace = config.workspace", "piece": "bn_mom = config.bn_mom"}
{"function_name": "conv_block", "function_define": "    if config.net_block == 'resnet':\n    elif config.net_block == 'hpm':\n    elif config.net_block == 'cab':", "piece": "elif config.net_block == 'hpm':"}
{"function_name": "__iptables", "function_define": "    rule_split = rule.split(' ')\n    if output:\n    print(r.stdout.decode('utf8'))", "piece": "if output:"}
{"function_name": "simple_plot", "function_define": "    with open(file_path, 'r') as f:\n    agg = U.StatisticAggregator()\n    for line in reader:", "piece": "agg = U.StatisticAggregator()"}
{"function_name": "align_xy", "function_define": "    n = x0_arr.shape[0]\n    heap_x = []\n    for i in range(n):", "piece": "heap_x = []"}
{"function_name": "test_erdataset", "function_define": "    nchunks = 3\n    ntargets = 5\n    blocklength = 5", "piece": "ntargets = 5"}
{"function_name": "predict_scores", "function_define": "    returns:\n    with tf.Session() as sess:\n    if last_checkpoint is None:", "piece": "with tf.Session() as sess:"}
{"function_name": "set_types", "function_define": "    allocation_index = 0\n    hucs = self.hucs\n    for huc in hucs:", "piece": "hucs = self.hucs"}
{"function_name": "extendMarkdown", "function_define": "    config = self.getConfigs()\n    md.registerExtension(self)\n    escape_chars = []", "piece": "md.registerExtension(self)"}
{"function_name": "add_user", "function_define": "    if user_from_db is not None:\n    avatar_type = None\n    avatar_current = None", "piece": "avatar_type = None"}
{"function_name": "_normalize_x", "function_define": "    normalized_columns = []\n    normalization_parameters = []\n    column = x[:, column_index]", "piece": "normalization_parameters = []"}
{"function_name": "_get_theta", "function_define": "    time_frames = x.shape[0] - 1\n    library = [1]\n    x_vectors = []", "piece": "library = [1]"}
{"function_name": "_optimum_sindy", "function_define": "    x_dot_train = x_dot[:cv_index]\n    x_dot_cv = x_dot[cv_index:]\n    theta_train = theta[:cv_index]", "piece": "x_dot_cv = x_dot[cv_index:]"}
{"function_name": "run_client", "function_define": "    global bot\n    while True:\n    loadPlugins()", "piece": "while True:"}
{"function_name": "loadPlugins", "function_define": "    activadedPlugins = []\n    activadedPlugins = f.readlines()\n    except Exception as e:", "piece": "activadedPlugins = f.readlines()"}
{"function_name": "list_box", "function_define": "    local_parent = parent\n    x_local = x\n    y_local = y", "piece": "x_local = x"}
{"function_name": "show_hide", "function_define": "    if action == 'show':\n    object.grid(row=x, column=y)\n    elif action == 'hide':", "piece": "object.grid(row=x, column=y)"}
{"function_name": "bind_evt", "function_define": "    if evt == 'click':\n    obj.bind('<ButtonRelease>', fct)\n    obj.bind('<ButtonPress>', fct)", "piece": "obj.bind('<ButtonRelease>', fct)"}
{"function_name": "radio_button", "function_define": "    v = IntVar()\n    local_parent = parent\n    x_local = x", "piece": "local_parent = parent"}
{"function_name": "quitevent", "function_define": "    keys = pg.key.get_pressed()\n    for k in quit_k:\n    if keys[k] == 0:", "piece": "for k in quit_k:"}
{"function_name": "runTrial", "function_define": "    if wrtfl is None:\n    wrtfl = os.tmpfile()\n    if switch:", "piece": "wrtfl = os.tmpfile()"}
{"function_name": "uniqueid", "function_define": "    seed = random.getrandbits(1)\n    while True:\n    yield seed", "piece": "while True:"}
{"function_name": "get_lyrics", "function_define": "    Example:\n    lyrics = get_lyrics('madonna')\n    url_ext = '/wiki/'", "piece": "lyrics = get_lyrics('madonna')"}
{"function_name": "getCommands", "function_define": "    print('Server Commands')\n    while True:\n    cmd = input('0- Halt')", "piece": "while True:"}
{"function_name": "call_back", "function_define": "    print('I tried.')\n    print('I failed.')\n    html_doc = response.read()", "piece": "print('I failed.')"}
{"function_name": "train_knn", "function_define": "    scores = []\n    print(f'KNN')\n    for neighbor in neighbors:", "piece": "print(f'KNN')"}
{"function_name": "_login_action", "function_define": "    if username and password:\n    user.set_last(self.get_ip())\n    self.set_user(user)", "piece": "user.set_last(self.get_ip())"}
{"function_name": "_archive_action", "function_define": "    if action == 'add':\n    archive_query = Archive()\n    archive_query.title = title", "piece": "archive_query = Archive()"}
{"function_name": "_user_action", "function_define": "    if action == 'add':\n    user_query = User()\n    user_query.username = username", "piece": "user_query = User()"}
{"function_name": "collect_demo", "function_define": "    scene_kwargs = None\n    online_sampling = True\n    if not disable_scene_cache:", "piece": "online_sampling = True"}
{"function_name": "dump_json", "function_define": "    Dump json into filepath.\n    Parameters\n    obj: python object", "piece": "Parameters"}
{"function_name": "find_all", "function_define": "    be easily used.\n    Last Update: 03/01/2017\n    By: LB023593", "piece": "Last Update: 03/01/2017"}
{"function_name": "show_parameter", "function_define": "    print('')\n    print('-------------------')\n    print('')", "piece": "print('-------------------')"}
{"function_name": "open_connection", "function_define": "    if self.robot.alive:\n    self.robot.connect('/dev/ttyS0')\n    if self.robot.alive:", "piece": "self.robot.connect('/dev/ttyS0')"}
{"function_name": "move_to_pos", "function_define": "    angles_deg = self.angles - 90\n    angles_deg[2] -= angles_deg[1]\n    angles_deg[1] -= angles_deg[0]", "piece": "angles_deg[2] -= angles_deg[1]"}
{"function_name": "move_arm", "function_define": "    self.angles[i:] += action\n    self.update_positions()\n    self.update_distance_2_goal()", "piece": "self.update_positions()"}
{"function_name": "get_reward", "function_define": "    if forbidden_action:\n    reward_scaling_factor = 2\n    reward_scaling_factor = 1", "piece": "reward_scaling_factor = 2"}
{"function_name": "iterate_unmapped", "function_define": "    global updated\n    con = sqlite3.connect(lidar_db)\n    cur = con.cursor()", "piece": "con = sqlite3.connect(lidar_db)"}
{"function_name": "extract_tls_info", "function_define": "    s = s.split(',')\n    s = [x.split('/') for x in s]\n    s = sum(s, [])", "piece": "s = [x.split('/') for x in s]"}
{"function_name": "process_port", "function_define": "    dataset     \u539f\u59cb\u6570\u636e\u96c6\n    Returns:\n    dataset     \u66f4\u65b0\u7aef\u53e3\u503c\u540e\u7684\u6570\u636e\u96c6", "piece": "Returns:"}
{"function_name": "process_tlsSni", "function_define": "    prefix = [''] * len(tlsSni_list)\n    s = tlsSni_list[idx]\n    if s == '':", "piece": "s = tlsSni_list[idx]"}
{"function_name": "process_bytes", "function_define": "    if pktout_list[idx] > 0:\n    bytesout_rate[idx] = 1000000\n    if pktin_list[idx] > 0:", "piece": "bytesout_rate[idx] = 1000000"}
{"function_name": "ProcessData", "function_define": "    if encoders == None:\n    encoders = []\n    for key in onhot_list:", "piece": "encoders = []"}
{"function_name": "init_obstacles", "function_define": "    if obstacle_num == -1:\n    self.uniform_grid = True\n    x = self.bounds[0]", "piece": "self.uniform_grid = True"}
{"function_name": "make_obstacle", "function_define": "    obs = Obstacle()\n    obs.x = x\n    obs.y = y", "piece": "obs.x = x"}
{"function_name": "simulate", "function_define": "    if self.uniform_grid:\n    for obs in self.obstacles:\n    obs.a_x += self.acc_dt", "piece": "for obs in self.obstacles:"}
{"function_name": "escape_html", "function_define": "    translated.\n    s = s.replace('&', '&amp;')\n    s = s.replace('<', '&lt;')", "piece": "s = s.replace('&', '&amp;')"}
{"function_name": "assertJson", "function_define": "    if callable(expected):\n    ret = expected(actual)\n    except AssertionError as e:", "piece": "ret = expected(actual)"}
{"function_name": "view_bar", "function_define": "    rate = num / total\n    rate_num = int(rate * 40)\n    sys.stdout.write(r)", "piece": "rate_num = int(rate * 40)"}
{"function_name": "generate_gif", "function_define": "    filenames = sorted(filenames)\n    for filename in filenames:\n    image = imageio.imread(filename)", "piece": "for filename in filenames:"}
{"function_name": "add_report", "function_define": "    Adds a report to the dashboard\n    for report in self.reports:\n    report = report_class()", "piece": "for report in self.reports:"}
{"function_name": "GetColors", "function_define": "    global colors_table\n    val = 25.0\n    for i in range(100):", "piece": "val = 25.0"}
{"function_name": "GetColor", "function_define": "    if val <= 25.0:\n    if val >= 35.0:\n    index = int((val - 25.0) * 10)", "piece": "if val >= 35.0:"}
{"function_name": "calcColor", "function_define": "    global red\n    global green\n    global blue", "piece": "global green"}
{"function_name": "DrawLegend", "function_define": "    ii = MinTemp\n    while ii < MaxTemp:\n    j = j + 1", "piece": "while ii < MaxTemp:"}
{"function_name": "export_report", "function_define": "    output_strings = []\n    last_hash = ''\n    for char in tqdm(chars):", "piece": "last_hash = ''"}
{"function_name": "attention", "function_define": "    score = tf.exp(weights)\n    if mask is not None:\n    score = score * mask", "piece": "if mask is not None:"}
{"function_name": "get_shape_list", "function_define": "    if name is None:\n    name = tensor.name\n    shape = tensor.shape.as_list()", "piece": "name = tensor.name"}
{"function_name": "convert_to_HWC", "function_define": "    if len(input_format) == 4:\n    if len(input_format) == 3:\n    if len(input_format) == 2:", "piece": "if len(input_format) == 3:"}
{"function_name": "to_bytes", "function_define": "    instance, else acts as identity.\n    ret = item\n    if not isinstance(item, bytes):", "piece": "ret = item"}
{"function_name": "addnewipphasetwo", "function_define": "    ip = request.form['ip']\n    name = request.form['name']\n    dbhelp.add_sqf_client(name, ip)", "piece": "name = request.form['name']"}
{"function_name": "device_template", "function_define": "    selfmon = smhelp.get_pc_stats()\n    name = data_by_id[1]\n    host = data_by_id[2]", "piece": "name = data_by_id[1]"}
{"function_name": "uptime_template", "function_define": "    selfmon = smhelp.get_pc_stats()\n    host = data_by_id[2]\n    except TemplateNotFound:", "piece": "host = data_by_id[2]"}
{"function_name": "traffic_template", "function_define": "    selfmon = smhelp.get_pc_stats()\n    host = data_by_id[2]\n    interface = interface", "piece": "host = data_by_id[2]"}
{"function_name": "ping_template", "function_define": "    selfmon = smhelp.get_pc_stats()\n    host = data_by_id[2]\n    except TemplateNotFound:", "piece": "host = data_by_id[2]"}
{"function_name": "sqf_template", "function_define": "    selfmon = smhelp.get_pc_stats()\n    sqf = dbhelp.show_sqf(device_id)\n    host = data_by_id[2]", "piece": "sqf = dbhelp.show_sqf(device_id)"}
{"function_name": "route_template", "function_define": "    selfmon = smhelp.get_pc_stats()\n    logs = dbhelp.show_log()\n    except TemplateNotFound:", "piece": "logs = dbhelp.show_log()"}
{"function_name": "on_start_reached", "function_define": "    env = self.statemachine.env\n    self._ppstart.setAutoDraw(False)\n    self._ppgoal.setAutoDraw(False)", "piece": "self._ppstart.setAutoDraw(False)"}
{"function_name": "score_pair", "function_define": "    key, CSMs, spans = get_CSMs(i)\n    candidate = candidates[i]\n    scoreHA = 0", "piece": "candidate = candidates[i]"}
{"function_name": "linked_reads", "function_define": "    span = []\n    reads.sort(key=lambda x: x[0])\n    curr_LR = [0, 0, 0, [], [], 0]", "piece": "reads.sort(key=lambda x: x[0])"}
{"function_name": "get_all_CSMs", "function_define": "    global CSMs_by_cand\n    CSMs_by_cand = dict()\n    all_CSMs = []", "piece": "CSMs_by_cand = dict()"}
{"function_name": "get_cand_score", "function_define": "    global candidates\n    candidates = cands\n    map_fn = map", "piece": "candidates = cands"}
{"function_name": "predict_NAs", "function_define": "    is_interchrom = interchrom\n    plen = p_len\n    prate = p_rate", "piece": "plen = p_len"}
{"function_name": "score_CSM", "function_define": "    LRs_i, D, LRs_j = CSM\n    hap_i = max(hap_i)\n    hap_j = max(hap_j)", "piece": "hap_i = max(hap_i)"}
{"function_name": "simple_example", "function_define": "    if initial_embedding:\n    import numpy as np\n    embedding = None", "piece": "import numpy as np"}
{"function_name": "collate_fn", "function_define": "    Parameter\n    batch : tuple of length 3\n    turns them into Tensors.", "piece": "batch : tuple of length 3"}
{"function_name": "perplexities", "function_define": "    Parameters\n    of the color representations.\n    word_seqs : list of list of int", "piece": "of the color representations."}
{"function_name": "check_game_state", "function_define": "    for p in self.players[:-1]:\n    self.game_over = True\n    self.game_over = True", "piece": "self.game_over = True"}
{"function_name": "get_valid_nodes", "function_define": "    player = None\n    for p in self.players:\n    if p.name == player_name:", "piece": "for p in self.players:"}
{"function_name": "sendNextMove", "function_define": "    if node is not None:\n    player = self.players[self.turn]\n    player.tickets[ticket] -= 1", "piece": "player = self.players[self.turn]"}
{"function_name": "loadReview", "function_define": "    fp1 = open(file_meta)\n    for lines in fp1:\n    lines = lines.replace('\\n', '')", "piece": "for lines in fp1:"}
{"function_name": "loadFeature", "function_define": "    featureData = list()\n    label = list()\n    campvid = list()", "piece": "label = list()"}
{"function_name": "loadPIDFeature", "function_define": "    for p in PID_LIST:\n    for camplen in CAMPLEN:\n    if campdata:", "piece": "for camplen in CAMPLEN:"}
{"function_name": "statistic_result", "function_define": "    camp_arr = np.hstack(camptest)\n    pred_arr = np.hstack(y_pred)\n    label_arr = np.hstack(y_test)", "piece": "pred_arr = np.hstack(y_pred)"}
{"function_name": "model_test", "function_define": "    CRF\u8bad\u7ec3\u548c\u9884\u6d4b\n    each_fold_time = time.time()\n    train_id = dataId[head:tail]", "piece": "each_fold_time = time.time()"}
{"function_name": "filter_files", "function_define": "    filtered_files = []\n    for filepath in filepaths:\n    for line in file_contents:", "piece": "for filepath in filepaths:"}
{"function_name": "get_last_line", "function_define": "    last_line = lines[-1].strip()\n    if last_line == '':\n    while lines[i].strip() == '':", "piece": "if last_line == '':"}
{"function_name": "get_news", "function_define": "    print(get_news_url)\n    print(get_news_response)\n    news_results = None", "piece": "print(get_news_response)"}
{"function_name": "autofund_account", "function_define": "    assert isinstance(value, int)\n    net_id = int(web3.net.version)\n    if net_id > 100:", "piece": "net_id = int(web3.net.version)"}
{"function_name": "displayChar", "function_define": "    concatedList = []\n    for argItem in args:\n    concatedList.extend(argItem)", "piece": "for argItem in args:"}
{"function_name": "testDistclean", "function_define": "    fakeConfPaths = AutoDict()\n    if PLATFORM != 'windows':\n    lockfileName = 'testlockfile'", "piece": "if PLATFORM != 'windows':"}
{"function_name": "list_photos", "function_define": "    schema = RidePhotoSchema()\n    results = []\n    for p in photos:", "piece": "results = []"}
{"function_name": "team_leaderboard", "function_define": "    team_members = {}\n    for team_id in team_members:\n    rows = []", "piece": "for team_id in team_members:"}
{"function_name": "_geo_tracks", "function_define": "    if start_date:\n    if end_date:\n    sess = meta.scoped_session()", "piece": "if end_date:"}
{"function_name": "_2d_filter", "function_define": "    Parameters\n    mat : float\n    sigmax : int", "piece": "mat : float"}
{"function_name": "detect_stripe", "function_define": "    Parameters\n    listdata : float\n    snr : float", "piece": "listdata : float"}
{"function_name": "_find_absmax", "function_define": "    Parameters\n    values : List\n    A list of numerical values", "piece": "values : List"}
{"function_name": "_rescale", "function_define": "    Centre around zeor\n    Parameters\n    value : float", "piece": "Parameters"}
{"function_name": "_get_color_hex", "function_define": "    Parameters\n    value : float\n    cmap : str", "piece": "value : float"}
{"function_name": "run_as_service", "function_define": "    settings = Settings()\n    except JSONDecodeError as err:\n    except ValidationError as err:", "piece": "except JSONDecodeError as err:"}
{"function_name": "append_tables", "function_define": "    for i in new_cols:\n    df.loc[:, i] = np.nan\n    for obs in d.index.values:", "piece": "df.loc[:, i] = np.nan"}
{"function_name": "ai_performance", "function_define": "    for s in subject_list:\n    d = subject_data[s]\n    g = get_computer_sequence(d)", "piece": "d = subject_data[s]"}
{"function_name": "testPageRank", "function_define": "    pr = g.pagerank()\n    except Exception as ex:\n    if g.vcount() == 0:", "piece": "except Exception as ex:"}
{"function_name": "testHubScore", "function_define": "    sc = g.hub_score()\n    if g.vcount() == 0:\n    self.assertEqual([], sc)", "piece": "if g.vcount() == 0:"}
{"function_name": "test_get_sound", "function_define": "    track.current_frame = 10\n    for entry in scheme:\n    if position < entry.end:", "piece": "for entry in scheme:"}
{"function_name": "search_node", "function_define": "    l = tree\n    found = False\n    if x < l.x:", "piece": "found = False"}
{"function_name": "insert_node", "function_define": "    l1 = None\n    l2 = tree\n    while l2 != None:", "piece": "l2 = tree"}
{"function_name": "modified_Bess_I0", "function_define": "    ax = np.fabs(x)\n    if ax < 3.75:\n    y = x / 3.75", "piece": "if ax < 3.75:"}
{"function_name": "RT_ra_interp", "function_define": "    nr = mcmlConv.mcmlModel.nr\n    ir2 = r2 / mcmlConv.mcmlModel.dr\n    ia = mcmlConv.convVar.ia", "piece": "ir2 = r2 / mcmlConv.mcmlModel.dr"}
{"function_name": "RT_r_interp", "function_define": "    nr = mcmlConv.mcmlModel.nr\n    ir2 = r2 / mcmlConv.mcmlModel.dr\n    if nr < 3:", "piece": "ir2 = r2 / mcmlConv.mcmlModel.dr"}
{"function_name": "A_rz_interp", "function_define": "    A_rz = mcmlConv.mcmlModel.A_rz\n    nr = mcmlConv.mcmlModel.nr\n    ir2 = r2 / mcmlConv.mcmlModel.dr", "piece": "nr = mcmlConv.mcmlModel.nr"}
{"function_name": "flat_integration", "function_define": "    rc = mcmlConv.convVar.r\n    R = mcmlConv.beam.R\n    a = np.maximum(0, rc - R)", "piece": "R = mcmlConv.beam.R"}
{"function_name": "run_conv", "function_define": "    self.conv_Rd_ra()\n    self.conv_Rd_r()\n    self.conv_A_rz()", "piece": "self.conv_Rd_r()"}
{"function_name": "conv_Rd_ra", "function_define": "    P = self.beam.P\n    R = self.beam.R\n    for irc in range(self.nrc):", "piece": "R = self.beam.R"}
{"function_name": "conv_Rd_r", "function_define": "    P = self.beam.P\n    R = self.beam.R\n    for irc in range(self.nrc):", "piece": "R = self.beam.R"}
{"function_name": "conv_A_rz", "function_define": "    P = self.beam.P\n    R = self.beam.R\n    for irc in range(self.nrc):", "piece": "R = self.beam.R"}
{"function_name": "conv_Tt_ra", "function_define": "    P = self.beam.P\n    R = self.beam.R\n    for irc in range(self.nrc):", "piece": "R = self.beam.R"}
{"function_name": "conv_Tt_r", "function_define": "    P = self.beam.P\n    R = self.beam.R\n    for irc in range(self.nrc):", "piece": "R = self.beam.R"}
{"function_name": "conv_A2F", "function_define": "    nz = self.mcmlModel.nz\n    for irc in range(self.nrc):\n    for iz in range(nz):", "piece": "for irc in range(self.nrc):"}
{"function_name": "test_fit_pca", "function_define": "    pca.subtract_mean = True\n    pca.extra_components = 5\n    tuner.estimator = pca", "piece": "pca.extra_components = 5"}
{"function_name": "parse_typed_name", "function_define": "    tabs = self.get_tabs()\n    self.pos += 1\n    self.pos += 1", "piece": "self.pos += 1"}
{"function_name": "parse_literal", "function_define": "    tabs = self.get_tabs()\n    value = self.get_word(tabs + 8)\n    self.pos += 1", "piece": "value = self.get_word(tabs + 8)"}
{"function_name": "parse_identifier", "function_define": "    tabs = self.get_tabs()\n    name = self.get_word(tabs + 11)\n    self.pos += 1", "piece": "name = self.get_word(tabs + 11)"}
{"function_name": "parse_assignment", "function_define": "    tabs = self.get_tabs()\n    self.pos += 1\n    self.pos += 1", "piece": "self.pos += 1"}
{"function_name": "parse_if", "function_define": "    tabs = self.get_tabs()\n    self.pos += 1\n    body = self.parse_block()", "piece": "self.pos += 1"}
{"function_name": "parse_case", "function_define": "    tabs = self.get_tabs()\n    self.pos += 1\n    value = self.parse_literal()", "piece": "self.pos += 1"}
{"function_name": "parse_list", "function_define": "    items = []\n    item = parser()\n    items.append(item)", "piece": "item = parser()"}
{"function_name": "get_tabs", "function_define": "    tabs = 0\n    if self.pos < len(self.lines):\n    for c in self.lines[self.pos]:", "piece": "if self.pos < len(self.lines):"}
{"function_name": "visit_case", "function_define": "    res = '\\t' * tabs\n    if node.value is not None:\n    res += 'default '", "piece": "if node.value is not None:"}
{"function_name": "getReferrer", "function_define": "    data = {}\n    now = datetime.datetime.now()\n    str_now = now.isoformat()", "piece": "now = datetime.datetime.now()"}
{"function_name": "run_as_admin", "function_define": "    shell32 = ctypes.windll.shell32\n    if argv is None:\n    argv = sys.argv", "piece": "if argv is None:"}
{"function_name": "try_elevating", "function_define": "    ret = run_as_admin()\n    if ret is True:\n    print('I have admin privilege.')", "piece": "if ret is True:"}
{"function_name": "prox_owl", "function_define": "    and projections.\n    v_abs = np.abs(v)\n    ix = np.argsort(v_abs)[::-1]", "piece": "v_abs = np.abs(v)"}
{"function_name": "_fit_owl_fista", "function_define": "    if grad:\n    grad = safe_sparse_dot(X.T, lp)\n    coef = np.zeros(X.shape[1])", "piece": "grad = safe_sparse_dot(X.T, lp)"}
{"function_name": "set_engine", "function_define": "    self._connection = None\n    self._connection = None\n    except Exception as err:", "piece": "self._connection = None"}
{"function_name": "queryrow", "function_define": "    error = None\n    if not self._connection:\n    self.connection()", "piece": "if not self._connection:"}
{"function_name": "_test_command", "function_define": "    runner = CliRunner()\n    setup_simple_project()\n    f.write('Adds levitation')", "piece": "setup_simple_project()"}
{"function_name": "test_collision", "function_define": "    runner = CliRunner()\n    setup_simple_project()\n    f.write('Adds levitation')", "piece": "setup_simple_project()"}
{"function_name": "test_single_file", "function_define": "    runner = CliRunner()\n    os.mkdir('newsfragments')\n    f.write('Adds levitation')", "piece": "os.mkdir('newsfragments')"}
{"function_name": "load_corpus_data", "function_define": "    print(scenario_name)\n    global scenarios\n    print('Data loaded sucessfully')", "piece": "global scenarios"}
{"function_name": "redirect_users", "function_define": "    max_number_users = 5\n    min_minutes = 120\n    json_file = request.get_json()", "piece": "min_minutes = 120"}
{"function_name": "single_corpus", "function_define": "    global single_corpus_datasets\n    global client_queue\n    client_queue.enqueue(ip)", "piece": "global client_queue"}
{"function_name": "map_load", "function_define": "    mc = Map_Class()\n    os.chdir('map')\n    pickle_file.close()", "piece": "os.chdir('map')"}
{"function_name": "analysis_func", "function_define": "    ac = [-1.0, -1.0, -6.5, 0.7]\n    bc = [0.0, 0.0, 11.0, 0.6]\n    cc = [-10.0, -10.0, -6.5, 0.7]", "piece": "bc = [0.0, 0.0, 11.0, 0.6]"}
{"function_name": "analysis2map", "function_define": "    filename = 'test.mpd'\n    dimention = 2\n    map_range = (200, 200)", "piece": "dimention = 2"}
{"function_name": "map_save", "function_define": "    if not os.path.exists('map'):\n    os.mkdir('map')\n    os.chdir('map')", "piece": "os.mkdir('map')"}
{"function_name": "fit_norm_eq", "function_define": "    assert x.shape[0] == y.shape[0]\n    n, p = x.shape\n    self._init_model(p)", "piece": "n, p = x.shape"}
{"function_name": "_sendBlock", "function_define": "    self._setMode(CMD)\n    self._setMode(DATA)\n    for i in range(count):", "piece": "self._setMode(DATA)"}
{"function_name": "_sendLine", "function_define": "    sy = y * 17\n    if self._fb[sy + 16] == 0:\n    b = self._fb", "piece": "if self._fb[sy + 16] == 0:"}
{"function_name": "setWriteDelay", "function_define": "    is None\"\"\"\n    if usec is None:\n    self._writeDelay = DEFAULT_DELAY", "piece": "if usec is None:"}
{"function_name": "setTextMode", "function_define": "    if not self._textMode:\n    self._textMode = True\n    self._updateMetrics()", "piece": "self._textMode = True"}
{"function_name": "setGfxMode", "function_define": "    if self._textMode:\n    self._textMode = False\n    self._updateMetrics()", "piece": "self._textMode = False"}
{"function_name": "clearScreen", "function_define": "    if self._textMode:\n    self._setMode(CMD)\n    self._sendByte(1, 1600)", "piece": "self._setMode(CMD)"}
{"function_name": "_printText", "function_define": "    will be printed as-is\"\"\"\n    if not self._textMode:\n    if fillChar is not None:", "piece": "if not self._textMode:"}
{"function_name": "_printGfxText", "function_define": "    if self._textMode:\n    font = self._gfxFont\n    if fillChar is not None:", "piece": "font = self._gfxFont"}
{"function_name": "_demoGfxText", "function_define": "    self.clearScreen()\n    self.setGfxMode()\n    self.clearScreen(0)", "piece": "self.setGfxMode()"}
{"function_name": "_demoGfx", "function_define": "    self.clearScreen()\n    self.setGfxMode()\n    self.clearScreen(0)", "piece": "self.setGfxMode()"}
{"function_name": "_updateMetrics", "function_define": "    if self._textMode:\n    self._columns = HCGROM_COLS\n    self._lines = HCGROM_LINES", "piece": "self._columns = HCGROM_COLS"}
{"function_name": "setGfxFont", "function_define": "    ok = False\n    if type(font) is dict:\n    self._gfxFont = font", "piece": "if type(font) is dict:"}
{"function_name": "register_hooks", "function_define": "    they are registered.\n    for h in hooks:\n    assert isinstance(h, HookBase)", "piece": "for h in hooks:"}
{"function_name": "write_metrics", "function_define": "    all_metrics_dict = metrics_dict\n    if dist.is_main_process():\n    storage = get_event_storage()", "piece": "if dist.is_main_process():"}
{"function_name": "started_cluster", "function_define": "    cluster.start()\n    yield cluster\n    finally:", "piece": "yield cluster"}
{"function_name": "google_tl", "function_define": "    text ([str]): Text to translate\n    Returns:\n    is_Success = False", "piece": "Returns:"}
{"function_name": "memory_tl", "function_define": "    text ([str]): Text to translate\n    Returns:\n    is_Success = False", "piece": "Returns:"}
{"function_name": "libre_tl", "function_define": "    text ([str]): Text to translate\n    host ([str]): Server hostname\n    port ([str]): Server port", "piece": "host ([str]): Server hostname"}
{"function_name": "_find_r2", "function_define": "    Searches for the R2 region.\n    if not r1_match:\n    if not r2_match:", "piece": "if not r1_match:"}
{"function_name": "_set_mpl_backend", "function_define": "    import matplotlib\n    except ImportError:\n    matplotlib.use('Agg')", "piece": "except ImportError:"}
{"function_name": "reduce_adj", "function_define": "    total = 0.0\n    for i in range(n):\n    row_min = min(row)", "piece": "for i in range(n):"}
{"function_name": "get_total_dist", "function_define": "    if not order:\n    total = 0.0\n    for i in range(len(order) - 1):", "piece": "total = 0.0"}
{"function_name": "get_next_order", "function_define": "    if self.found_best:\n    curr_path = heappop(self.paths)\n    curr_node = curr_path.order[-1]", "piece": "curr_path = heappop(self.paths)"}
{"function_name": "get_role", "function_define": "    for role in roles:\n    if role['name'] == role_name:\n    role_details = role", "piece": "if role['name'] == role_name:"}
{"function_name": "get_nova_conf", "function_define": "    Returns parsed nova.conf\n    response = kube_exec(pod, cmd)\n    config.read_string(response)", "piece": "response = kube_exec(pod, cmd)"}
{"function_name": "data_load", "function_define": "    if rot == 0 and rot != False:\n    paths = []\n    paths_gt = []", "piece": "paths = []"}
{"function_name": "poll_create", "function_define": "    logger.info('Got create poll')\n    logger.info(event)\n    logger.info(fsx_dns_name)", "piece": "logger.info(event)"}
{"function_name": "test_flush", "function_define": "    self.test_bulk()\n    flush(from_test=True)\n    self.assertEquals(len(bulk), 2)", "piece": "flush(from_test=True)"}
{"function_name": "erase_down", "function_define": "    size = sbinfo.dwSize\n    start = sbinfo.dwCursorPosition\n    self._erase(start, length)", "piece": "start = sbinfo.dwCursorPosition"}
{"function_name": "_closest_color", "function_define": "    distance = 257 * 257 * 3\n    fg_match = 0\n    bg_match = 0", "piece": "fg_match = 0"}
{"function_name": "_color_indexes", "function_define": "    if indexes is None:\n    rgb = int(str(color), 16)\n    except ValueError:", "piece": "rgb = int(str(color), 16)"}
{"function_name": "triplet_loss", "function_define": "    y_true : FAKE\n    alpha = 0.1\n    anchor = y_pred[0, :]", "piece": "alpha = 0.1"}
{"function_name": "RunGoToTest_all", "function_define": "    request = common_request\n    response = test['res']\n    if isinstance(response, list):", "piece": "response = test['res']"}
{"function_name": "RunFixItTest", "function_define": "    contents = ReadFile(file_path)\n    pprint(results)\n    check(results)", "piece": "pprint(results)"}
{"function_name": "split_node", "function_define": "    node.leaf = leaf\n    node.elem = oelem[:split_idx]\n    node.children = []", "piece": "node.elem = oelem[:split_idx]"}
{"function_name": "get_tools", "function_define": "    import importlib\n    tool_instances = []\n    for tool in tools:", "piece": "tool_instances = []"}
{"function_name": "configureSeats", "function_define": "    seatList = []\n    tempSeat = seat()\n    tempSeat.id = i", "piece": "tempSeat = seat()"}
{"function_name": "assignSeats", "function_define": "    seatList[j].weight = 0\n    if j < MAX_FIRST_CLASS:\n    if j % 4 == 0 or j % 4 == 2:", "piece": "if j < MAX_FIRST_CLASS:"}
{"function_name": "make_pdtype", "function_define": "    from gym import spaces\n    assert len(ac_space.shape) == 1\n    raise NotImplementedError", "piece": "assert len(ac_space.shape) == 1"}
{"function_name": "read_protocol", "function_define": "    if protocol_type == 'binary':\n    elif protocol_type == 'json':\n    elif protocol_type == 'compact':", "piece": "elif protocol_type == 'json':"}
{"function_name": "generate_list", "function_define": "    data = []\n    for i in range(size):\n    data.append(i)", "piece": "for i in range(size):"}
{"function_name": "generate_set", "function_define": "    data = set()\n    for i in range(size):\n    data.add(i)", "piece": "for i in range(size):"}
{"function_name": "generate_map", "function_define": "    data = {}\n    for i in range(size):\n    data[i] = i", "piece": "for i in range(size):"}
{"function_name": "run_game", "function_define": "    pygame.init()\n    clock = pygame.time.Clock()\n    active_scene = starting_scene", "piece": "clock = pygame.time.Clock()"}
{"function_name": "verify_args", "function_define": "    if not args.domain:\n    if args.output is not None:\n    if os.path.isdir(args.output):", "piece": "if args.output is not None:"}
{"function_name": "get_args", "function_define": "    Returns:\n    add_args(parser)\n    args = parser.parse_args()", "piece": "add_args(parser)"}
{"function_name": "get_source_path", "function_define": "    used for subdomain enumeration\n    Returns:\n    if os.path.isabs(path):", "piece": "Returns:"}
{"function_name": "update_domains", "function_define": "    subdomains-10000.txt\n    Returns:\n    List: list of subdomains", "piece": "Returns:"}
{"function_name": "handle_output", "function_define": "    if output:\n    if args.uni:\n    elif args.uni:", "piece": "if args.uni:"}
{"function_name": "handle_single", "function_define": "    inspected\n    headers = make_request(url)\n    if args.output:", "piece": "headers = make_request(url)"}
{"function_name": "_javadoc", "function_define": "    target_name = ctx.label.name\n    src_list = []\n    for src in ctx.files.srcs:", "piece": "src_list = []"}
{"function_name": "createOutputDF", "function_define": "    diff = n - 1\n    outputDF = pd.DataFrame()\n    if i == 0:", "piece": "outputDF = pd.DataFrame()"}
{"function_name": "apply_fuzzing", "function_define": "    if inspect.ismethod(attribute):\n    reference_function = attribute\n    advice_key = reference_function", "piece": "reference_function = attribute"}
{"function_name": "keyPressed", "function_define": "    global wiperon, sopa, sc\n    if key == 'q':\n    print('exiting...')", "piece": "if key == 'q':"}
{"function_name": "test_info_simple", "function_define": "    ts = (yield self.empty())\n    info = (yield ts.info())\n    d1 = date(2012, 5, 15)", "piece": "info = (yield ts.info())"}
{"function_name": "test_istats", "function_define": "    data = self.data\n    ts1 = self.ts1\n    self.assertEqual(len(fields), 6)", "piece": "ts1 = self.ts1"}
{"function_name": "test_stats", "function_define": "    data = self.data\n    ts1 = self.ts1\n    self.assertEqual(len(fields), 6)", "piece": "ts1 = self.ts1"}
{"function_name": "format_time", "function_define": "    hh = str(int(theTime))\n    sec = int((min - int(min)) * 60)\n    zone = UTCzone", "piece": "sec = int((min - int(min)) * 60)"}
{"function_name": "format_lat_long", "function_define": "    hh = str(abs(int(latLong)))\n    if latLong == 0:\n    coordTag = ' '", "piece": "if latLong == 0:"}
{"function_name": "Move_sun", "function_define": "    if Sun.PP.UsageMode == 'HDR':\n    Sun.Phi = -Sun.Azimuth\n    envTex = nt.get(Sun.HDR_texture)", "piece": "Sun.Phi = -Sun.Azimuth"}
{"function_name": "getSunPosition", "function_define": "    longitude *= -1\n    utcTime = localTime + utcZone\n    if latitude > 89.93:", "piece": "utcTime = localTime + utcZone"}
{"function_name": "getJulianDay", "function_define": "    if month <= 2:\n    year -= 1\n    month += 12", "piece": "year -= 1"}
{"function_name": "reset_buffer", "function_define": "    if self._multi_buf:\n    for b in self.buffer:\n    b.reset()", "piece": "for b in self.buffer:"}
{"function_name": "reset_env", "function_define": "    self._obs = self.env.reset()\n    if self._multi_env:\n    for b in self._cached_buf:", "piece": "if self._multi_env:"}
{"function_name": "safe_norm", "function_define": "    x: A np.array\n    Returns:\n    Equivalent to np.linalg.norm(d)", "piece": "Returns:"}
{"function_name": "_safe_norm_jvp", "function_define": "    x, = primals\n    x_dot, = tangents\n    safe_tol = max(tol, 1e-30)", "piece": "x_dot, = tangents"}
{"function_name": "jacobian_to_curl", "function_define": "    dfx_dy = jacobian[..., 0, 1]\n    dfx_dz = jacobian[..., 0, 2]\n    dfy_dx = jacobian[..., 1, 0]", "piece": "dfx_dz = jacobian[..., 0, 2]"}
{"function_name": "record_time", "function_define": "    start = time.time()\n    elapsed = time.time() - start\n    self.update(key, elapsed)", "piece": "elapsed = time.time() - start"}
{"function_name": "play_game", "function_define": "    Parameters\n    if is_remote_game:\n    is_ship_buy = True", "piece": "if is_remote_game:"}
{"function_name": "initialize_game", "function_define": "    Parameters\n    game_data: new game stats (dic).\n    open('log.txt', 'w').close()", "piece": "game_data: new game stats (dic)."}
{"function_name": "do_moves", "function_define": "    Apply move to ships.\n    Parameters\n    for ship in game_data['ships']:", "piece": "Parameters"}
{"function_name": "is_game_continue", "function_define": "    Check if the game continue.\n    Parameter\n    not_loser = []", "piece": "Parameter"}
{"function_name": "calculate_value", "function_define": "    Parameters\n    total_value = 0\n    for ship in game_data['ships']:", "piece": "total_value = 0"}
{"function_name": "get_game_input", "function_define": "    Parameters\n    player_input = ''\n    if player_type == 'human':", "piece": "player_input = ''"}
{"function_name": "get_human_input", "function_define": "    Get input from a human player.\n    Parameters\n    show_game_screen(game_data)", "piece": "Parameters"}
{"function_name": "get_ai_input", "function_define": "    Get input from an AI player.\n    Parameter\n    ai_input = ''", "piece": "Parameter"}
{"function_name": "get_nearby_ship", "function_define": "    Parameters\n    x, y = (0, 0)\n    nearby_ships = []", "piece": "x, y = (0, 0)"}
{"function_name": "do_random_action", "function_define": "    Parameters\n    action = random.choice(actions)\n    if action == 'attack':", "piece": "action = random.choice(actions)"}
{"function_name": "path_finding", "function_define": "    Parameters\n    dict_sort(steps, 'distance')\n    max_distance -= 1", "piece": "dict_sort(steps, 'distance')"}
{"function_name": "get_next_step", "function_define": "    Parameters\n    nodes = []\n    speed = start_node['speed']", "piece": "nodes = []"}
{"function_name": "show_path", "function_define": "    Parameters\n    for n in path:\n    print_canvas(c)", "piece": "for n in path:"}
{"function_name": "show_splash_game", "function_define": "    Show the splash screen.\n    Parameter\n    clear the canvas.", "piece": "Parameter"}
{"function_name": "show_game_screen", "function_define": "    Show game board on the teminal.\n    Parameter\n    print_canvas(c)", "piece": "Parameter"}
{"function_name": "render_ship_list", "function_define": "    Render the ship_list.\n    Parameter\n    c = create_canvas(width, height)", "piece": "Parameter"}
{"function_name": "render_game_logs", "function_define": "    Render the game logs.\n    Parameter\n    c = create_canvas(width, height)", "piece": "Parameter"}
{"function_name": "show_end_game", "function_define": "    Show the end game screen.\n    Parameter\n    line_index = 0", "piece": "Parameter"}
{"function_name": "parse_command", "function_define": "    Parameters\n    game_data: game's data (dic).\n    commands = commands.split(' ')", "piece": "game_data: game's data (dic)."}
{"function_name": "command_rotate", "function_define": "    Rotate the ship.\n    Parameters\n    v = (0, 0)", "piece": "Parameters"}
{"function_name": "command_attack", "function_define": "    Parameters\n    ship: focus ships (str).\n    Alisson Leist (v3. 17/03/17)", "piece": "ship: focus ships (str)."}
{"function_name": "rotate_vector_2d", "function_define": "    Parameters\n    theta = radians(theta)\n    x, y = (vector[0], vector[1])", "piece": "theta = radians(theta)"}
{"function_name": "to_unit_vector", "function_define": "    Parameter\n    if value > 0.25:\n    elif value < -0.25:", "piece": "if value > 0.25:"}
{"function_name": "parse_game_file", "function_define": "    Parameter\n    cis_file = open(path, 'r')\n    cis_file.close()", "piece": "cis_file = open(path, 'r')"}
{"function_name": "filter_ships", "function_define": "    Parameters\n    founded_ships = []\n    for ship in ships:", "piece": "founded_ships = []"}
{"function_name": "clear_canvas", "function_define": "    clear the canvas.\n    Parameter\n    canvas: canva to clear (dic).", "piece": "Parameter"}
{"function_name": "__open_file", "function_define": "    if not self.merge_files:\n    if document.subpath:\n    if filename != None:", "piece": "if document.subpath:"}
{"function_name": "__open_unique", "function_define": "    attempts = 0\n    prefix = ''\n    while True:", "piece": "prefix = ''"}
{"function_name": "perform_dws", "function_define": "    bbox_list = []\n    bbox_map = np.squeeze(bbox_map)\n    labels_inv = {}", "piece": "bbox_map = np.squeeze(bbox_map)"}
{"function_name": "generate_row", "function_define": "    Example:\n    groups = []\n    for _ in range(group_count):", "piece": "groups = []"}
{"function_name": "compose_tree", "function_define": "    if treex.function == 'combine':\n    vis_dist = self.vis_dist(ohe)\n    pos_dist = self.pos_dist(ohe)", "piece": "vis_dist = self.vis_dist(ohe)"}
{"function_name": "assign_util", "function_define": "    if mode == 'assign':\n    elif mode == 'add':\n    elif mode == 'slice':", "piece": "elif mode == 'add':"}
{"function_name": "overlap_box", "function_define": "    ox1 = max(x1, x2)\n    oy1 = max(y1, y2)\n    ox2 = min(x1 + h1, x2 + h2)", "piece": "oy1 = max(y1, y2)"}
{"function_name": "check_valid", "function_define": "    flag = True\n    flag = False\n    flag = False", "piece": "flag = False"}
{"function_name": "_clean_tree", "function_define": "    if treex.function == 'combine':\n    treex.vis_dist = None\n    treex.pos_dist = None", "piece": "treex.vis_dist = None"}
{"function_name": "copy_source_code", "function_define": "    if not os.path.isdir(path):\n    os.makedirs(path)\n    denylist = ['./__pycache__/']", "piece": "os.makedirs(path)"}
{"function_name": "validate_pgd", "function_define": "    batch_time = AverageMeter()\n    losses = AverageMeter()\n    top1 = AverageMeter()", "piece": "losses = AverageMeter()"}
{"function_name": "run_validation", "function_define": "    data = []\n    indptr = [0]\n    indices = []", "piece": "indptr = [0]"}
{"function_name": "encode_nodes", "function_define": "    net.eval()\n    torch.set_grad_enabled(False)\n    embed = torch.mean(embed, dim=1)", "piece": "torch.set_grad_enabled(False)"}
{"function_name": "get_profit", "function_define": "    initial_value = 0\n    final_value = 0\n    for stock in self.stocks:", "piece": "final_value = 0"}
{"function_name": "remove_stock", "function_define": "    for stock in self.stocks:\n    if stock.name == stock_name:\n    self.stocks.remove(stock)", "piece": "if stock.name == stock_name:"}
{"function_name": "convert_to_atf", "function_define": "    visitor = AtfVisitor(prefix)\n    for token in tokens:\n    token.accept(visitor)", "piece": "for token in tokens:"}
{"function_name": "visit_erasure", "function_define": "    self._state.append_separator()\n    self._state.set_omit(True)\n    self._state.set_omit(True)", "piece": "self._state.set_omit(True)"}
{"function_name": "create_voabulary", "function_define": "    if os.path.exists(cache_path):\n    vocabulary_word2index = {}\n    vocabulary_index2word = {}", "piece": "vocabulary_word2index = {}"}
{"function_name": "read_topic_info", "function_define": "    lines = f.readlines()\n    dict_questionid_title = {}\n    for i, line in enumerate(lines):", "piece": "dict_questionid_title = {}"}
{"function_name": "_parse_ldau", "function_define": "    next(lines)\n    newline = next(lines).split()\n    while len(newline) > 1:", "piece": "newline = next(lines).split()"}
{"function_name": "_parse_stress", "function_define": "    stress = []\n    for i in range(3):\n    newline = next(lines)", "piece": "for i in range(3):"}
{"function_name": "_parse_forces", "function_define": "    next(lines)\n    newline = next(lines)\n    total = []", "piece": "newline = next(lines)"}
{"function_name": "read_excel", "function_define": "    should_close = False\n    should_close = True\n    if max_rows and max_rows < 0:", "piece": "should_close = True"}
{"function_name": "viewsource", "function_define": "    fp = __file__\n    if fp.endswith('.pyc'):\n    fp = fp[:-1]", "piece": "if fp.endswith('.pyc'):"}
{"function_name": "docker_task", "function_define": "    run_cmd(build_cmd)\n    bname = os.path.basename(name)\n    upload_file(f'/tmp/{bname}.tgz')", "piece": "bname = os.path.basename(name)"}
{"function_name": "array_to_bst", "function_define": "    if root is None:\n    array_to_bst(arr, root.left)\n    root.data = arr[0]", "piece": "array_to_bst(arr, root.left)"}
{"function_name": "bt_to_bst", "function_define": "    if root is None:\n    n = count_nodes(root)\n    arr = []", "piece": "n = count_nodes(root)"}
{"function_name": "cache_clear", "function_define": "    if key is CLEAR_ENTIRE_CACHE:\n    cached._cache.clear()\n    del cached._cache[key]", "piece": "cached._cache.clear()"}
{"function_name": "_process_list", "function_define": "    expressions = []\n    for atom in items:\n    if isinstance(atom, Primitive):", "piece": "for atom in items:"}
{"function_name": "expression", "function_define": "    mask = items[0].value\n    mask = items[0].value\n    raise NotImplementedError()", "piece": "mask = items[0].value"}
{"function_name": "test_range", "function_define": "    e = Parameters()\n    e.float1 = 150.0\n    e.float2 = 400.0", "piece": "e.float1 = 150.0"}
{"function_name": "getYesOrNoInput", "function_define": "    while True:\n    value = input(prompt)\n    except ValueError:", "piece": "value = input(prompt)"}
{"function_name": "let_user_pick", "function_define": "    print(label + '\\n')\n    while True:\n    i = input('\\nEnter number: ')", "piece": "while True:"}
{"function_name": "checkFilePath", "function_define": "    while True:\n    value = input(prompt)\n    except ValueError:", "piece": "value = input(prompt)"}
{"function_name": "checkFileName", "function_define": "    while True:\n    value = input(prompt)\n    except ValueError:", "piece": "value = input(prompt)"}
{"function_name": "create_samples", "function_define": "    pathnames = []\n    label_pathnames = []\n    numpy.save(pathname, data)", "piece": "label_pathnames = []"}
{"function_name": "load_samples", "function_define": "    if label == 'g1':\n    targets[index] = 0\n    elif label == 'g2':", "piece": "targets[index] = 0"}
{"function_name": "resample", "function_define": "    columns = []\n    for c in df.columns:\n    op = dict_params[c]", "piece": "for c in df.columns:"}
{"function_name": "clip_bounds", "function_define": "    for c in df.columns:\n    up_bound = dict_params[c]['max']\n    df[c] = df_c_clipped", "piece": "up_bound = dict_params[c]['max']"}
{"function_name": "clip_std", "function_define": "    for c in df.columns:\n    std_mult = dict_params[c]\n    while True:", "piece": "std_mult = dict_params[c]"}
{"function_name": "get_contacts", "function_define": "    contact = Contact(*row[1:])\n    contact.rowid = row[0]\n    yield contact", "piece": "contact.rowid = row[0]"}
{"function_name": "add_contact", "function_define": "    with self.conn:\n    cursor = self.conn.cursor()\n    contact.rowid = cursor.lastrowid", "piece": "cursor = self.conn.cursor()"}
{"function_name": "append_element", "function_define": "    new_node.next = self.__trailer\n    self.__trailer.prev = new_node\n    self.__size = self.__size + 1", "piece": "self.__trailer.prev = new_node"}
{"function_name": "get_element_at", "function_define": "    if index >= self.__size:\n    raise IndexError\n    if index < 0:", "piece": "raise IndexError"}
{"function_name": "benchmark_step", "function_define": "    global batch_idx\n    optimizer.zero_grad()\n    output = model(data)", "piece": "optimizer.zero_grad()"}
{"function_name": "get_contact_list", "function_define": "    if self.contact_cache is None:\n    wd = self.app.wd\n    self.app.open_home_page()", "piece": "wd = self.app.wd"}
{"function_name": "add_to_group", "function_define": "    wd = self.app.wd\n    self.app.open_home_page()\n    if not el.is_selected():", "piece": "self.app.open_home_page()"}
{"function_name": "dircheck", "function_define": "    if isinstance(targetpaths, str):\n    os.makedirs(targetpaths)\n    for path in targetpaths:", "piece": "os.makedirs(targetpaths)"}
{"function_name": "listfiles", "function_define": "    filelist = []\n    fileabslist = []\n    for file_name in file_names:", "piece": "fileabslist = []"}
{"function_name": "getpendinglist", "function_define": "    srclist = srclist['fileabslist']\n    oplist = oplist['fileabslist']\n    oplist_basename = []", "piece": "oplist = oplist['fileabslist']"}
{"function_name": "get_soup", "function_define": "    content = ''\n    while content == '':\n    time.sleep(5)", "piece": "while content == '':"}
{"function_name": "printTitles", "function_define": "    soup = get_soup(domain + url)\n    for i in temp:\n    f.write(i['title'] + '\\n')", "piece": "for i in temp:"}
{"function_name": "test_close_file", "function_define": "    samplerate = 0\n    hop_size = 256\n    f.close()", "piece": "hop_size = 256"}
{"function_name": "read_from_source", "function_define": "    total_frames = 0\n    while True:\n    samples, read = f.do_multi()", "piece": "while True:"}
{"function_name": "test_duration", "function_define": "    total_frames = 0\n    f = source(p)\n    duration = f.duration", "piece": "f = source(p)"}
{"function_name": "test_wrong_seek", "function_define": "    f = source(default_test_sound)\n    with assert_raises(ValueError):\n    f.seek(-1)", "piece": "with assert_raises(ValueError):"}
{"function_name": "update_pb", "function_define": "    pb_bin = r.json().get('pb_bin')\n    fp.write(pb_bin)\n    except Exception:", "piece": "fp.write(pb_bin)"}
{"function_name": "checarCli", "function_define": "    a = open(arq, 'rt')\n    print('ERRO ao ler arquivo')\n    ok = False", "piece": "print('ERRO ao ler arquivo')"}
{"function_name": "checarCli2", "function_define": "    a = open(arq, 'rt')\n    print('ERRO ao ler arquivo')\n    ok = False", "piece": "print('ERRO ao ler arquivo')"}
{"function_name": "alteraCli", "function_define": "    a = open('cadcli.txt', 'rt')\n    for lin in a:\n    if codcli in lin:", "piece": "for lin in a:"}
{"function_name": "cabe\u00e7alho", "function_define": "    print(linha())\n    print(f'{msg}'.center(42))\n    print(linha())", "piece": "print(f'{msg}'.center(42))"}
{"function_name": "exibirCliente", "function_define": "    ok = False\n    a = open(arq, 'rt')\n    for lin in a:", "piece": "a = open(arq, 'rt')"}
{"function_name": "alteraLinhaCli", "function_define": "    msg = ''\n    indice = 0\n    indicefinal = 0", "piece": "indice = 0"}
{"function_name": "from_any", "function_define": "    Parameters\n    regions : supported input\n    Currently supported inputs:", "piece": "regions : supported input"}
{"function_name": "make_viewframe", "function_define": "    Parameters\n    regions : supported input type\n    Currently supported input types:", "piece": "regions : supported input type"}
{"function_name": "test_meta_v1", "function_define": "    model_name = 'complex'\n    optimizer_name = 'adagrad'\n    embedding_size = 100", "piece": "optimizer_name = 'adagrad'"}
{"function_name": "add_to_image", "function_define": "    u = int(uv[0])\n    v = int(uv[1])\n    spot_size = inset.shape", "piece": "v = int(uv[1])"}
{"function_name": "merge_dct_scans", "function_define": "    import numpy as np\n    import os\n    import h5py", "piece": "import os"}
{"function_name": "all_dif_spots", "function_define": "    for i in range(g_proj.shape[0]):\n    spot = g_proj[i]\n    if verbose:", "piece": "spot = g_proj[i]"}
{"function_name": "tt_stack", "function_define": "    using the variable `TOPO_N`.\n    if n_topo < 0:\n    import glob", "piece": "if n_topo < 0:"}
{"function_name": "load_grain", "function_define": "    g.om_exp = gmat['om_exp'][0, :]\n    g.uv_exp = gmat['uv_exp'][:, :]\n    g.center = gmat['center'][:, 0]", "piece": "g.uv_exp = gmat['uv_exp'][:, :]"}
{"function_name": "dct_projection", "function_define": "    if len(self.reflections) == 0:\n    omegar = omega * np.pi / 180\n    if include_direct_beam:", "piece": "omegar = omega * np.pi / 180"}
{"function_name": "vote_post", "function_define": "    if not post:\n    found_vote = vote_query.first()\n    if vote.dir == 1:", "piece": "found_vote = vote_query.first()"}
{"function_name": "getColorEntry", "function_define": "    if not args.colorized:\n    if val < 0.2:\n    elif val < 0.4:", "piece": "if val < 0.2:"}
{"function_name": "getCsFileInfo", "function_define": "    parts = baseName.split('_')\n    if not parts:\n    if len(parts) == 5:", "piece": "if not parts:"}
{"function_name": "ensurePath", "function_define": "    if not path:\n    if not os.path.isdir(path):\n    os.makedirs(path)", "piece": "if not os.path.isdir(path):"}
{"function_name": "check_candidate", "function_define": "    control_result = None\n    candidate_result = None\n    control_exception = None", "piece": "candidate_result = None"}
{"function_name": "test_url", "function_define": "    base = 'foo'\n    base_q = base + '?'\n    assert url() == base", "piece": "base_q = base + '?'"}
{"function_name": "_navigateTo", "function_define": "    tab_name = tab.name\n    button = None\n    if tab == TabBarTabs.HOME:", "piece": "button = None"}
{"function_name": "_post_owner", "function_define": "    post_owner_clickable = False\n    for _ in range(2):\n    post_owner_clickable = True", "piece": "for _ in range(2):"}
{"function_name": "_open_likers", "function_define": "    while True:\n    if likes_view.exists(True):\n    random_sleep()", "piece": "if likes_view.exists(True):"}
{"function_name": "_check_if_liked", "function_define": "    STR = 'Liked'\n    if bnt_like_obj.exists(True):\n    logger.debug('Like is present.')", "piece": "if bnt_like_obj.exists(True):"}
{"function_name": "changeToUsername", "function_define": "    if action_bar.exists():\n    action_bar.click()\n    random_sleep()", "piece": "action_bar.click()"}
{"function_name": "likePost", "function_define": "    if click_btn_like:\n    if not like_btn_view:\n    like_btn_view.click()", "piece": "if not like_btn_view:"}
{"function_name": "navigateToPost", "function_define": "    OFFSET = 1\n    if not row_view.exists():\n    if not post_view.exists():", "piece": "if not row_view.exists():"}
{"function_name": "_parseCounter", "function_define": "    multiplier = 1\n    text = text.replace(',', '')\n    text = text.replace('.', '')", "piece": "text = text.replace(',', '')"}
{"function_name": "_navigateToTab", "function_define": "    attempts = 0\n    while not button.exists():\n    attempts += 1", "piece": "while not button.exists():"}
{"function_name": "getTimestamp", "function_define": "    if timestamp[-1] == 's':\n    elif timestamp[-1] == 'm':\n    elif timestamp[-1] == 'h':", "piece": "elif timestamp[-1] == 'm':"}
{"function_name": "_swipe_points", "function_define": "    if start_point_y == -1:\n    if direction == Direction.UP:\n    if start_point_y - delta_y < 0:", "piece": "if direction == Direction.UP:"}
{"function_name": "test_no_args", "function_define": "    Tests search without arguments.\n    rv = client.get('/search')\n    response = json.loads(rv.data)", "piece": "rv = client.get('/search')"}
{"function_name": "test_limit", "function_define": "    keyword = 'test'\n    limit = 1\n    matches = []", "piece": "limit = 1"}
{"function_name": "to_steps_list", "function_define": "    plan = deepcopy(self.plan)\n    nodes = []\n    if node.get('_visited', False):", "piece": "nodes = []"}
{"function_name": "_train_conv", "function_define": "    self.net.train()\n    loss_all = 0\n    for i in range(self.num_batch):", "piece": "loss_all = 0"}
{"function_name": "_validation_conv", "function_define": "    self.net.eval()\n    loss_all = 0\n    with torch.no_grad():", "piece": "loss_all = 0"}
{"function_name": "_fit_embedding", "function_define": "    start_time = time.time()\n    recursive_step = 'pre'\n    if epoch == 0:", "piece": "recursive_step = 'pre'"}
{"function_name": "apply_deferred", "function_define": "    results = []\n    for child in self.children:\n    if result is not None:", "piece": "for child in self.children:"}
{"function_name": "recurse_comp", "function_define": "    if isinstance(a, np.ndarray):\n    if a.dtype == object:\n    elif isinstance(a, dict):", "piece": "if a.dtype == object:"}
{"function_name": "test_async_env", "function_define": "    if has_ray():\n    test_cls += [RayVectorEnv]\n    for cls in test_cls:", "piece": "test_cls += [RayVectorEnv]"}
{"function_name": "test_vecenv", "function_define": "    if has_ray():\n    venv += [RayVectorEnv(env_fns)]\n    for v in venv:", "piece": "venv += [RayVectorEnv(env_fns)]"}
{"function_name": "test_env_obs", "function_define": "    obs = envs.reset()\n    assert obs.dtype == object\n    obs = envs.step([1, 1, 1, 1])[0]", "piece": "assert obs.dtype == object"}
{"function_name": "get_question_sub", "function_define": "    if query1 is None:\n    if query1 is not None:\n    db.session.close()", "piece": "if query1 is not None:"}
{"function_name": "Check_answer", "function_define": "    if query1 is None:\n    if query1 is not None:\n    db.session.add(test)", "piece": "if query1 is not None:"}
{"function_name": "create_question", "function_define": "    db.session.add(new_question)\n    db.session.commit()\n    db.session.close()", "piece": "db.session.commit()"}
{"function_name": "delete_questions", "function_define": "    if para.L2QuestionID:\n    db.session.delete(data)\n    db.session.commit()", "piece": "db.session.delete(data)"}
{"function_name": "check_answer", "function_define": "    if query1 is not None:\n    db.session.commit()\n    db.session.close()", "piece": "db.session.commit()"}
{"function_name": "find_settings", "function_define": "    if regex:\n    for m in matches:\n    print('Port:', ports)", "piece": "for m in matches:"}
{"function_name": "buildPronounDict", "function_define": "    for pr in pList:\n    if len(pr) > 0:\n    spl = re.split(':', pr)", "piece": "if len(pr) > 0:"}
{"function_name": "generateRatio", "function_define": "    subtotal = 0\n    total = sum(args)\n    for a in args:", "piece": "total = sum(args)"}
{"function_name": "LoadAssays", "function_define": "    DB = self.database.FetchDB()\n    if not len(DB):\n    assayNames = DB.keys()", "piece": "if not len(DB):"}
{"function_name": "AddAssay", "function_define": "    items = ('MIC', 'MTT')\n    name = self.SetAssayName()\n    conc = self.SetConcentrations()", "piece": "name = self.SetAssayName()"}
{"function_name": "AddSample", "function_define": "    items = ['1', '2', '3', '4']\n    if int(numOfSamples) == 3:\n    del items[3]", "piece": "if int(numOfSamples) == 3:"}
{"function_name": "SampleProcessor", "function_define": "    if True in exist:\n    if reply == qtw.QMessageBox.Yes:\n    if value:", "piece": "if reply == qtw.QMessageBox.Yes:"}
{"function_name": "StoreChanges", "function_define": "    toStore = len(assaysToStore)\n    toUpdate = len(assaysToUpdate)\n    toRemove = len(assaysToRemove)", "piece": "toUpdate = len(assaysToUpdate)"}
{"function_name": "DiscardChanges", "function_define": "    self.database.Abort()\n    if len(self.assaysList) > 0:\n    self.model.layoutChanged.emit()", "piece": "if len(self.assaysList) > 0:"}
{"function_name": "reset_all", "function_define": "    NeroTeam.reset_all(self)\n    self.generation += 1\n    self.pop.epoch(self.generation)", "piece": "self.generation += 1"}
{"function_name": "get_object", "function_define": "    if not book_id:\n    if current_cart_pk:\n    if current_buyer.is_anonymous:", "piece": "if current_cart_pk:"}
{"function_name": "get_redirect_url", "function_define": "    if not current_cart_pk:\n    print(cart_items_from_form)\n    if action == 'checkout':", "piece": "print(cart_items_from_form)"}
{"function_name": "_compute_target", "function_define": "    gamma = training_variables.gamma\n    v_max = self._config.v_max\n    v_min = self._config.v_min", "piece": "v_max = self._config.v_max"}
{"function_name": "_match_values", "function_define": "    values = []\n    if isinstance(cfnelem, dict):\n    for key in cfnelem:", "piece": "if isinstance(cfnelem, dict):"}
{"function_name": "_get_lattices", "function_define": "    s, target_s: Structure objects\n    for l, _, scale_m in lattices:\n    yield (l, scale_m)", "piece": "for l, _, scale_m in lattices:"}
{"function_name": "_get_supercells", "function_define": "    it makes them of s2\n    s2_fc = np.array(s2.frac_coords)\n    if fu == 1:", "piece": "s2_fc = np.array(s2.frac_coords)"}
{"function_name": "_cart_dists", "function_define": "    Returns:\n    if len(s2) > len(s1):\n    lin = LinearAssignment(d_2)", "piece": "if len(s2) > len(s1):"}
{"function_name": "_get_mask", "function_define": "    aabbcc (rather than abcabc)\n    Returns:\n    inner = []", "piece": "Returns:"}
{"function_name": "_process_species", "function_define": "    copied_structures = []\n    for s in structures:\n    if self._ignored_species:", "piece": "for s in structures:"}
{"function_name": "_preprocess", "function_define": "    struct1 = struct1.copy()\n    struct2 = struct2.copy()\n    if niggli:", "piece": "struct2 = struct2.copy()"}
{"function_name": "_strict_match", "function_define": "    struct2).\n    struct1 (vs struct2)\n    valid match", "piece": "struct1 (vs struct2)"}
{"function_name": "group_structures", "function_define": "    them by structural equality.\n    Returns:\n    if self._subset:", "piece": "Returns:"}
{"function_name": "_anonymous_match", "function_define": "    Returns:\n    List of (mapping, match)\n    if len(sp1) != len(sp2):", "piece": "List of (mapping, match)"}
{"function_name": "fit_anonymous", "function_define": "    structures are similar.\n    Returns:\n    if matches:", "piece": "Returns:"}
{"function_name": "get_s2_like_s1", "function_define": "    matching to existing sites.\n    Returns:\n    if trans is None:", "piece": "Returns:"}
{"function_name": "get_mapping", "function_define": "    Returns:\n    if self._supercell:\n    if self._primitive_cell:", "piece": "if self._supercell:"}
{"function_name": "sc_generator", "function_define": "    s2_fc = np.array(s2.frac_coords)\n    if fu == 1:\n    cc = np.array(s1.cart_coords)", "piece": "if fu == 1:"}
{"function_name": "test_transform", "function_define": "    X_rules = _create_data\n    X_rules_ = bf.transform(X_rules)\n    X_rules_ = bf.transform(X_rules)", "piece": "X_rules_ = bf.transform(X_rules)"}
{"function_name": "GenFileData", "function_define": "    if stats is None:\n    stats = []\n    if files is None:", "piece": "stats = []"}
{"function_name": "AMI_matrix", "function_define": "    NMI_array = []\n    if cluster_1 == cluster_2:\n    continue", "piece": "if cluster_1 == cluster_2:"}
{"function_name": "_make_word_lists", "function_define": "    item = sentence[i]\n    if type(item) == list:\n    plainWordSent.append(item[0])", "piece": "if type(item) == list:"}
{"function_name": "_synset_search", "function_define": "    Parameters\n    word : str\n    myMap = self.dictionary", "piece": "word : str"}
{"function_name": "listAlternatives", "function_define": "    synonyms = set([])\n    if not mostLikelySynset is None:\n    synonyms.add(synonym.name())", "piece": "if not mostLikelySynset is None:"}
{"function_name": "test_unsubscribe", "function_define": "    domain = 'www.example.com'\n    email = '<EMAIL>'\n    sub_id = '1234'", "piece": "email = '<EMAIL>'"}
{"function_name": "_GetEventData", "function_define": "    Returns:\n    event_identifier = None\n    event_data.recovered = recovered", "piece": "event_identifier = None"}
{"function_name": "_ParseRecord", "function_define": "    creation_time = None\n    if creation_time:\n    written_time = None", "piece": "if creation_time:"}
{"function_name": "_ParseRecords", "function_define": "    if parser_mediator.abort:\n    except IOError as exception:\n    if parser_mediator.abort:", "piece": "except IOError as exception:"}
{"function_name": "ParseFileObject", "function_define": "    evt_file = pyevt.file()\n    except IOError as exception:\n    finally:", "piece": "except IOError as exception:"}
{"function_name": "which_colnames", "function_define": "    idx = []\n    if self.colnames[i] in args:\n    idx.append(i)", "piece": "if self.colnames[i] in args:"}
{"function_name": "FormattedInput", "function_define": "    partObjects = []\n    for i in range(len(Labels)):\n    Dims = inputPartDict[Labels[i]]", "piece": "for i in range(len(Labels)):"}
{"function_name": "set_level", "function_define": "    global _current_level\n    global _info, _result, _err\n    if level == OutputLevel.Info:", "piece": "global _info, _result, _err"}
{"function_name": "convert_fields", "function_define": "    if is_mapping(data):\n    for field in fields:\n    value = data.pop(field, None)", "piece": "for field in fields:"}
{"function_name": "convert_address", "function_define": "    if not is_mapping(address):\n    entity.add('address', address)\n    convert_address(entity, addr)", "piece": "entity.add('address', address)"}
{"function_name": "convert_party", "function_define": "    party_id = party.pop('id', None)\n    if party_id is None:\n    party_id = identifier.get('id')", "piece": "if party_id is None:"}
{"function_name": "convert_buyer", "function_define": "    buyer_id = buyer.pop('id', None)\n    if buyer_id is not None:\n    authority.make_id(buyer_id)", "piece": "if buyer_id is not None:"}
{"function_name": "convert_item", "function_define": "    tender = item.pop('tender', {})\n    if contract_id is None:\n    contract.make_id(contract_id)", "piece": "if contract_id is None:"}
{"function_name": "convert_record", "function_define": "    if record.get('tag'):\n    yield entity\n    yield entity", "piece": "yield entity"}
{"function_name": "add_inference", "function_define": "    cnn.mpool(2, 2)\n    cnn.mpool(2, 2)\n    cnn.conv(512, 3, 3)", "piece": "cnn.mpool(2, 2)"}
{"function_name": "grand_ascent", "function_define": "    data_matrix = mat(data_matrix)\n    m, n = shape(data_matrix)\n    alpha = 0.001", "piece": "m, n = shape(data_matrix)"}
{"function_name": "colic_test", "function_define": "    training_set = []\n    training_labels = []\n    for l in f.readlines():", "piece": "training_labels = []"}
{"function_name": "create_class", "function_define": "    postfix = ''\n    if use_namespace:\n    use_namespace = '-ns'", "piece": "if use_namespace:"}
{"function_name": "_find_class", "function_define": "    class_files = []\n    for file in files:\n    file_basename = file", "piece": "for file in files:"}
{"function_name": "do_persistence", "function_define": "    if not data_serialized:\n    with open(path, 'w') as fp:\n    json.dump(data_serialized, fp)", "piece": "with open(path, 'w') as fp:"}
{"function_name": "_scrape_n_render", "function_define": "    if not url:\n    url = self.url\n    response.html.render()", "piece": "url = self.url"}
{"function_name": "plot_solar_flux", "function_define": "    Assumptions:\n    solar_flux\n    battery_power_draw", "piece": "solar_flux"}
{"function_name": "set_axes", "function_define": "    Assumptions:\n    Outputs:\n    Properties Used:", "piece": "Outputs:"}
{"function_name": "stops_before", "function_define": "    other interval's starting time.\n    other (Interval): other Interval\n    Returns:", "piece": "other (Interval): other Interval"}
{"function_name": "starts_after", "function_define": "    other interval's stopping time.\n    other (Interval): other Interval\n    Returns:", "piece": "other (Interval): other Interval"}
{"function_name": "_merge_timeslot", "function_define": "    timeslot: Timeslot to merge\n    Returns:\n    PulseError: If timeslots overlap", "piece": "Returns:"}
{"function_name": "d_div_grad", "function_define": "    sh = grad1.shape\n    if fmode == 2:\n    out[:] = aux", "piece": "if fmode == 2:"}
{"function_name": "get_fargs", "function_define": "    if diff_var is None:\n    fmode = 0\n    fmode = 1", "piece": "fmode = 0"}
{"function_name": "_to_json", "function_define": "    result = []\n    p_dict = dict()\n    p_dict['body'] = post.body", "piece": "p_dict = dict()"}
{"function_name": "hailstone", "function_define": "    print(n)\n    if n <= 1:\n    elif n % 2 == 0:", "piece": "if n <= 1:"}
{"function_name": "my_service", "function_define": "    logging.debug('starting')\n    time.sleep(3)\n    logging.debug('exiting')", "piece": "time.sleep(3)"}
{"function_name": "importing_model", "function_define": "    if args.model_name == 'vae':\n    from models.VAE import VAE\n    from models.new_vae import VAE", "piece": "from models.VAE import VAE"}
{"function_name": "_pimp_facets", "function_define": "    options = {}\n    if facet != 'keywords':\n    new_values = []", "piece": "if facet != 'keywords':"}
{"function_name": "Validate", "function_define": "    results = dict()\n    results['valid'] = True\n    results['error_types'] = []", "piece": "results['valid'] = True"}
{"function_name": "get_13f_listings", "function_define": "    ed_i = edgar_index.edgar_index()\n    df['File'] = np.nan\n    if populate:", "piece": "df['File'] = np.nan"}
{"function_name": "viewStore", "function_define": "    global storeWindow\n    store = Store()\n    for item in storeItems:", "piece": "store = Store()"}
{"function_name": "viewCart", "function_define": "    cartWindow = Toplevel()\n    cartWindow.title('The Cart')\n    cartWindow.grab_set()", "piece": "cartWindow.title('The Cart')"}
{"function_name": "removeFromCart", "function_define": "    global cart\n    cart.removeFromCart(itemIndex)\n    cartWindow.destroy()", "piece": "cart.removeFromCart(itemIndex)"}
{"function_name": "buyCommand", "function_define": "    global cart\n    cartitems = cart.getCartItems()\n    for items in cartitems:", "piece": "cartitems = cart.getCartItems()"}
{"function_name": "text_to_pixels", "function_define": "    draw = ImageDraw.Draw(image)\n    del draw\n    if as_numpy_array:", "piece": "del draw"}
{"function_name": "alphabet_soup", "function_define": "    if len(shape) != 4:\n    array = np.zeros(shape)\n    for batch in range(shape[0]):", "piece": "array = np.zeros(shape)"}
{"function_name": "random_word", "function_define": "    if len(shape) != 4:\n    array = np.zeros(shape)\n    letters = '<KEY>'", "piece": "array = np.zeros(shape)"}
{"function_name": "single_shape", "function_define": "    if len(shape) != 4:\n    array = np.zeros(shape)\n    for batch in range(shape[0]):", "piece": "array = np.zeros(shape)"}
{"function_name": "variables", "function_define": "    variables = []\n    for x, ab in self.limits:\n    variables.append(x)", "piece": "for x, ab in self.limits:"}
{"function_name": "larger_model", "function_define": "    model = Sequential()\n    model.add(MaxPooling2D())\n    model.add(MaxPooling2D())", "piece": "model.add(MaxPooling2D())"}
{"function_name": "comparable", "function_define": "    string_parts = []\n    if self.inode is not None:\n    if self.location is not None:", "piece": "if self.inode is not None:"}
{"function_name": "_process_step", "function_define": "    training_features = []\n    training_labels = []\n    for event in events:", "piece": "training_labels = []"}
{"function_name": "save_unique_item", "function_define": "    data_obj:\n    primary_key:\n    is_overwrite:", "piece": "primary_key:"}
{"function_name": "test_sort_series", "function_define": "    series = folder.series(12)\n    print(data.shape)\n    print(loc)", "piece": "print(data.shape)"}
{"function_name": "test_retrieve", "function_define": "    folder.scan()\n    for series in folder.series():\n    print(series.SeriesDescription)", "piece": "for series in folder.series():"}
{"function_name": "test_find", "function_define": "    folder.scan()\n    for s in series:\n    print(s.SeriesDescription)", "piece": "for s in series:"}
{"function_name": "test_read_item", "function_define": "    folder.scan()\n    series = folder.series(0)\n    print(series.PatientID)", "piece": "series = folder.series(0)"}
{"function_name": "test_set_item", "function_define": "    folder.scan()\n    series = folder.series(0)\n    instance = series.instances(1)", "piece": "series = folder.series(0)"}
{"function_name": "test_copy_remove", "function_define": "    folder.scan()\n    folder.print()\n    folder.series(0).copy_to(study)", "piece": "folder.print()"}
{"function_name": "test_merge", "function_define": "    folder.scan()\n    print('')\n    patient1 = folder.new_child()", "piece": "print('')"}
{"function_name": "test_export", "function_define": "    folder.scan()\n    instance = folder.instances(0)\n    series = folder.series(0)", "piece": "instance = folder.instances(0)"}
{"function_name": "test_checking", "function_define": "    folder.open()\n    folder.check()\n    folder.uncheck()", "piece": "folder.check()"}
{"function_name": "bass_boost", "function_define": "    if opt == 0:\n    elif opt == 1:\n    self.audio = bass", "piece": "elif opt == 1:"}
{"function_name": "high_boost", "function_define": "    if opt == 0:\n    elif opt == 1:\n    self.audio = high", "piece": "elif opt == 1:"}
{"function_name": "_setup_helpers", "function_define": "    if self.backend == 'cython':\n    cls = AccelerationEvalGPUHelper\n    self._setup_integrator_helper()", "piece": "cls = AccelerationEvalGPUHelper"}
{"function_name": "poll_events", "function_define": "    keys = []\n    for i in range(50):\n    key = self.stdscr.getch()", "piece": "for i in range(50):"}
{"function_name": "get_tvshow_art", "function_define": "    url = base_url % ('tv', '%s')\n    art = json.loads(art)\n    poster2 = art['tvposter']", "piece": "art = json.loads(art)"}
{"function_name": "get_movie_art", "function_define": "    art = json.loads(art)\n    poster2 = art['movieposter']\n    poster2 = '0'", "piece": "poster2 = art['movieposter']"}
{"function_name": "_check_font", "function_define": "    font_path = font['path']\n    font = TTFont(font_path)\n    valid_char = 0", "piece": "font = TTFont(font_path)"}
{"function_name": "text2vectors", "function_define": "    acc_vecs = []\n    for word in text:\n    if len(acc_vecs) < maxlen:", "piece": "for word in text:"}
{"function_name": "get_centroids", "function_define": "    m.append(w2v_model.wv[k])\n    m = np.matrix(m)\n    km.fit(m)", "piece": "m = np.matrix(m)"}
{"function_name": "format_list", "function_define": "    if len(items) < 2:\n    new_items = []\n    for i in items:", "piece": "new_items = []"}
{"function_name": "Geolocation", "function_define": "    if geoip is not None:\n    update_threat(ip)\n    geo = Geolocation_ApiCall(ip)", "piece": "update_threat(ip)"}
{"function_name": "calculate_threat", "function_define": "    r = False\n    for _, v in threat.items():\n    r = True", "piece": "for _, v in threat.items():"}
{"function_name": "GetWeather", "function_define": "    r_key = f'weather:{data.ip}'\n    cached = cache.get(r_key)\n    if cached:", "piece": "cached = cache.get(r_key)"}
{"function_name": "convertdata", "function_define": "    if waconn == -1:\n    contacts = {}\n    if waconn != -1:", "piece": "contacts = {}"}
{"function_name": "wsedi_get", "function_define": "    if file_reference:\n    if file_type:\n    url += '&file-type=' + file_type", "piece": "if file_type:"}
{"function_name": "wsedi_execute", "function_define": "    if ws and (not ws.enabled):\n    soap_call.full_clean()\n    soap_call.save()", "piece": "soap_call.full_clean()"}
{"function_name": "LoadImages", "function_define": "    print('Loading image files...')\n    image_list = []\n    print(filename)", "piece": "image_list = []"}
{"function_name": "_reaction_press", "function_define": "    if self._count < 1:\n    tag = constants.STATE_NORMAL\n    tag = constants.STATE_PRESSED", "piece": "tag = constants.STATE_NORMAL"}
{"function_name": "_force_unpress", "function_define": "    self._count = 0\n    Clickable._unpress(self)\n    post(ev_untog)", "piece": "Clickable._unpress(self)"}
{"function_name": "test_arithm_ops", "function_define": "    with pipe:\n    pipe.build()\n    o = pipe.run()", "piece": "pipe.build()"}
{"function_name": "test_arg_input", "function_define": "    with pipe:\n    pipe.build()\n    o = pipe.run()", "piece": "pipe.build()"}
{"function_name": "wrapped_f", "function_define": "    generator = fn(*args)\n    for v in generator:\n    if isinstance(v, dict):", "piece": "for v in generator:"}
{"function_name": "test_pos_or_kw", "function_define": "    a, b, c = f(1, 2, 3)\n    self.assertEqual(a, 1)\n    self.assertEqual(b, 2)", "piece": "self.assertEqual(a, 1)"}
{"function_name": "test_ndarray", "function_define": "    a = numpy.array([1, 2, 3])\n    nutils.types.nutils_hash(a)\n    a.flags.writeable = False", "piece": "nutils.types.nutils_hash(a)"}
{"function_name": "test_property", "function_define": "    for withslots in (False, True):\n    if withslots:\n    nonlocal ncalls", "piece": "if withslots:"}
{"function_name": "test_eq_same_id", "function_define": "    src = {'spam': 1, 'eggs': 2.3}\n    a = nutils.types.frozendict(src)\n    self.assertEqual(a, a)", "piece": "a = nutils.types.frozendict(src)"}
{"function_name": "test_eq_other_id", "function_define": "    src = {'spam': 1, 'eggs': 2.3}\n    a = nutils.types.frozendict(src)\n    b = nutils.types.frozendict(src)", "piece": "a = nutils.types.frozendict(src)"}
{"function_name": "test_nutils_hash", "function_define": "    class T(self.cls):\n    class T1(self.cls, version=1):\n    class U(self.cls):", "piece": "class T1(self.cls, version=1):"}
{"function_name": "test_cast", "function_define": "    a = numpy.array([1, 2, 3])\n    a.flags.writeable = False\n    self.assertEqual(f.dtype, float)", "piece": "a.flags.writeable = False"}
{"function_name": "test_passthrough", "function_define": "    a = numpy.array([1, 2, 3])\n    a.flags.writeable = False\n    b = a[1:][:-1]", "piece": "a.flags.writeable = False"}
{"function_name": "test_nocopy", "function_define": "    a = numpy.array([1, 2, 3])\n    b = a[1:]\n    self.assertIs(f, b)", "piece": "b = a[1:]"}
{"function_name": "initQRTable", "function_define": "    self.rTable = {}\n    self.qTable = {}\n    if j > 0:", "piece": "self.qTable = {}"}
{"function_name": "getReward", "function_define": "    v = self.gameMap[x][y]\n    if v == 1:\n    if v == 2:", "piece": "if v == 1:"}
{"function_name": "_fit_dual", "function_define": "    self.b = 0.0\n    self._cal_gram_matrix()\n    while i < n_samples:", "piece": "self._cal_gram_matrix()"}
{"function_name": "_cal_gram_matrix", "function_define": "    n_sample = self.X.shape[0]\n    for i in range(n_sample):\n    for j in range(n_sample):", "piece": "for i in range(n_sample):"}
{"function_name": "show_anim", "function_define": "    if self.X.shape[1] != 2:\n    minX = np.min(self.X[:, 0])\n    maxX = np.max(self.X[:, 0])", "piece": "minX = np.min(self.X[:, 0])"}
{"function_name": "MandarCorreo", "function_define": "    correo = '<EMAIL>'\n    if id_chat != 'nothing':\n    for m in mensajes_chat:", "piece": "if id_chat != 'nothing':"}
{"function_name": "batchLookup", "function_define": "    r.raise_for_status()\n    except requests.HTTPError:\n    raise ApiError(r.json())", "piece": "except requests.HTTPError:"}
{"function_name": "singleLookup", "function_define": "    r.raise_for_status()\n    except requests.HTTPError:\n    raise ApiError(r.json())", "piece": "except requests.HTTPError:"}
{"function_name": "load_streams", "function_define": "    all_inst = []\n    for stream_file in stream_files:\n    all_inst.append(inst)", "piece": "for stream_file in stream_files:"}
{"function_name": "heartbeat", "function_define": "    data = misc.retrieve_data()\n    latest_data = {}\n    for d in data.get('result', {}):", "piece": "latest_data = {}"}
{"function_name": "test_patterns", "function_define": "    them to stdout.\n    for pattern, desc in patterns:\n    print('  {!r}'.format(text))", "piece": "for pattern, desc in patterns:"}
{"function_name": "ex_cdasws", "function_define": "    cdas = CdasWs()\n    mission_list = ['ARTEMIS']\n    dataset = ['THB_L2_FIT']", "piece": "mission_list = ['ARTEMIS']"}
{"function_name": "test_ground_draw", "function_define": "    surf = T.create_surface()\n    ground = Ground()\n    ground.draw(surf)", "piece": "ground = Ground()"}
{"function_name": "test_ground_move", "function_define": "    surf = T.create_surface()\n    ground = Ground()\n    remaining_time = 10", "piece": "ground = Ground()"}
{"function_name": "attachment", "function_define": "    self._attachment = attachment\n    self.attachment.setup()\n    self.attachment_sound.stop()", "piece": "self.attachment.setup()"}
{"function_name": "move_forward", "function_define": "    if not release:\n    self.moving_forward = True\n    self.moving_forward = False", "piece": "self.moving_forward = True"}
{"function_name": "move_backward", "function_define": "    if not release:\n    self.moving_backward = True\n    self.moving_backward = False", "piece": "self.moving_backward = True"}
{"function_name": "fire_projectile", "function_define": "    if self.fire_sound:\n    self.fire_sound = None\n    self.fire_sound.play()", "piece": "self.fire_sound = None"}
{"function_name": "compute_pi", "function_define": "    h = 1.0 / num_step\n    for i in range(num_step):\n    x = h * (i + 0.5)", "piece": "for i in range(num_step):"}
{"function_name": "addAtIndex", "function_define": "    if index > self.size:\n    if index < 0:\n    index = 0", "piece": "if index < 0:"}
{"function_name": "deleteAtIndex", "function_define": "    self.size -= 1\n    predecessor = self.dummy_head\n    for _ in range(index):", "piece": "predecessor = self.dummy_head"}
{"function_name": "make_app", "function_define": "    controller.check_config()\n    app = flask.Flask(__name__)\n    response.status_code = 400", "piece": "app = flask.Flask(__name__)"}
{"function_name": "delete_segment", "function_define": "    controller.delete_segment(id)\n    except KeyError as e:\n    flask.abort(404)", "piece": "except KeyError as e:"}
{"function_name": "write_compose", "function_define": "    services = {}\n    for sensor in sensors:\n    service = {}", "piece": "for sensor in sensors:"}
{"function_name": "provision", "function_define": "    os.makedirs('sensors')\n    except OSError as e:\n    if e.errno != errno.EEXIST:", "piece": "except OSError as e:"}
{"function_name": "station1", "function_define": "    GPIO.output(TRIG, True)\n    time.sleep(1)\n    GPIO.output(TRIG, False)", "piece": "time.sleep(1)"}
{"function_name": "station2", "function_define": "    GPIO.output(38, True)\n    time.sleep(1)\n    GPIO.output(38, False)", "piece": "time.sleep(1)"}
{"function_name": "station4", "function_define": "    GPIO.output(3, True)\n    time.sleep(1)\n    GPIO.output(3, False)", "piece": "time.sleep(1)"}
{"function_name": "station3", "function_define": "    GPIO.output(31, True)\n    time.sleep(1)\n    GPIO.output(31, False)", "piece": "time.sleep(1)"}
{"function_name": "station6", "function_define": "    GPIO.output(35, True)\n    time.sleep(1)\n    GPIO.output(35, False)", "piece": "time.sleep(1)"}
{"function_name": "station5", "function_define": "    GPIO.output(19, True)\n    time.sleep(1)\n    GPIO.output(19, False)", "piece": "time.sleep(1)"}
{"function_name": "load_extensions", "function_define": "    failed = 0\n    for ext in exts:\n    ext = f'src.cogs.{ext}'", "piece": "for ext in exts:"}
{"function_name": "test_can_switch", "function_define": "    proc.run_step(step)\n    result = proc.stochastic\n    assert isinstance(result, bool)", "piece": "result = proc.stochastic"}
{"function_name": "identifier_split", "function_define": "    split_data = []\n    split_data.append(tok)\n    continue", "piece": "split_data.append(tok)"}
{"function_name": "test_min_open", "function_define": "    b = Position('Button')\n    p = int(b.min_open() * 100)\n    p /= 100", "piece": "p = int(b.min_open() * 100)"}
{"function_name": "stack1UI", "function_define": "    layout = QFormLayout()\n    layout.addWidget(label)\n    self.stack1.setLayout(layout)", "piece": "layout.addWidget(label)"}
{"function_name": "stack2UI", "function_define": "    hbox = QHBoxLayout(self)\n    paramVBox = QVBoxLayout(self)\n    self.loadPage()", "piece": "paramVBox = QVBoxLayout(self)"}
{"function_name": "stack3UI", "function_define": "    layout = QFormLayout()\n    layout.addWidget(label)\n    self.stack3.setLayout(layout)", "piece": "layout.addWidget(label)"}
{"function_name": "addParamLine", "function_define": "    paramBox = QHBoxLayout(self)\n    paramName = QLabel(param)\n    paramName.setMaximumWidth(150)", "piece": "paramName = QLabel(param)"}
{"function_name": "lstm_layer", "function_define": "    with tf.variable_scope(name):\n    if batch_size is None:\n    batch_size = 1", "piece": "if batch_size is None:"}
{"function_name": "conv_layer", "function_define": "    ksize = [ksize, ksize]\n    stride = [stride, stride]\n    if len(X.shape) == 2:", "piece": "stride = [stride, stride]"}
{"function_name": "fc_layer", "function_define": "    with tf.variable_scope(name):\n    if callable(weight_initializer):\n    Y = tf.matmul(X, w)", "piece": "if callable(weight_initializer):"}
{"function_name": "getTokens", "function_define": "    response.raise_for_status()\n    except HTTPError as http_err:\n    except Exception as err:", "piece": "except HTTPError as http_err:"}
{"function_name": "work_func", "function_define": "    print('Working on', arg)\n    print('Square is', arg ** 2)\n    print('Cube is', arg ** 3)", "piece": "print('Square is', arg ** 2)"}
{"function_name": "test_crud", "function_define": "    db.init_app(app)\n    db.app = app\n    db.create_all()", "piece": "db.app = app"}
{"function_name": "stu_detail", "function_define": "    print(request.user)\n    if request.method == 'POST':\n    form = studentform(request.POST)", "piece": "if request.method == 'POST':"}
{"function_name": "_pdbcls_callback", "function_define": "    if x in [None, 'None', 'none']:\n    x = None\n    elif isinstance(x, str):", "piece": "x = None"}
{"function_name": "post_mortem", "function_define": "    p.reset()\n    p.interaction(None, t)\n    if p.quitting:", "piece": "p.interaction(None, t)"}
{"function_name": "_import_pdb_cls", "function_define": "    if not cls._config:\n    import pdb\n    if usepdb_cls:", "piece": "import pdb"}
{"function_name": "_init_pdb", "function_define": "    if cls._pluginmanager is None:\n    capman = None\n    live_manager = None", "piece": "capman = None"}
{"function_name": "do_debug", "function_define": "    cls._recursive_debug += 1\n    ret = super().do_debug(arg)\n    cls._recursive_debug -= 1", "piece": "ret = super().do_debug(arg)"}
{"function_name": "do_continue", "function_define": "    ret = super().do_continue(arg)\n    if cls._recursive_debug == 0:\n    assert cls._config is not None", "piece": "if cls._recursive_debug == 0:"}
{"function_name": "contestLookup", "function_define": "    if self.checkContestAccess(cid):\n    c = dict()\n    sessionId = getSession()", "piece": "c = dict()"}
{"function_name": "publicLookup", "function_define": "    c = dict()\n    sessionId = getSession()\n    c['sessionid'] = sessionId", "piece": "sessionId = getSession()"}
{"function_name": "showResults", "function_define": "    self.tableWidget.setRowCount(0)\n    self.row = 0\n    for i in data:", "piece": "self.row = 0"}
{"function_name": "trySolve", "function_define": "    buttonClicked = self.sender()\n    self.threads = []\n    self.threads.append(st)", "piece": "self.threads = []"}
{"function_name": "finishAutoSolve", "function_define": "    self.prog.close()\n    if len(data) == 0:\n    self.error(string_solve_failed)", "piece": "if len(data) == 0:"}
{"function_name": "pushCode", "function_define": "    sessionId = getSession()\n    s = requests.Session()\n    s.cookies.set_cookie(cookie_obj)", "piece": "s = requests.Session()"}
{"function_name": "showProgress", "function_define": "    self.prog = QProgressDialog()\n    self.prog.setLabelText(text)\n    self.prog.setValue(-1)", "piece": "self.prog.setLabelText(text)"}
{"function_name": "_on_response", "function_define": "    import json\n    body_str = body.decode('utf8')\n    body_json = json.loads(body_str)", "piece": "body_str = body.decode('utf8')"}
{"function_name": "hash_test", "function_define": "    output = json.loads(output)\n    print('A: {}'.format(hex_dig))\n    print('B: {}'.format(hex_dig))", "piece": "print('A: {}'.format(hex_dig))"}
{"function_name": "check_rf_grow", "function_define": "    model_type = None\n    if reg_or_class == 'reg':\n    if reg_or_class == 'class':", "piece": "if reg_or_class == 'reg':"}
{"function_name": "depth_error_vis", "function_define": "    Arguments:\n    cv_mat : array (m, d, nfold)\n    n_sim = cv_mat.shape[1]", "piece": "cv_mat : array (m, d, nfold)"}
{"function_name": "cost_vis", "function_define": "    Arguments:\n    array of cost values\n    if depth_range is None:", "piece": "array of cost values"}
{"function_name": "smart_open", "function_define": "    if filename and filename != '-':\n    fh = open(filename, 'w')\n    fh = sys.stdout", "piece": "fh = open(filename, 'w')"}
{"function_name": "smart_in", "function_define": "    fh = open(filename, 'r')\n    fh = filename\n    yield fh", "piece": "fh = filename"}
{"function_name": "load_dict", "function_define": "    with open(dict_path, 'rb') as f:\n    file_content = f.read()\n    zd = ZstdDict(file_content)", "piece": "file_content = f.read()"}
{"function_name": "add_fasta", "function_define": "    if dict_path is not None:\n    session.commit()\n    if zd is None:", "piece": "session.commit()"}
{"function_name": "write_fasta", "function_define": "    zd = None\n    if provided_dict:\n    if strains:", "piece": "if provided_dict:"}
{"function_name": "gen_dict", "function_define": "    if not passed_session:\n    engine = connect_to_db(db_path)\n    session = start_session(engine)", "piece": "engine = connect_to_db(db_path)"}
{"function_name": "create_chart", "function_define": "    blue = '#2e7eb3'\n    light_blue = '#81b1d1'\n    green = '#4aa635'", "piece": "light_blue = '#81b1d1'"}
{"function_name": "minOperations", "function_define": "    ans = [0] * len(boxes)\n    lcost = 0\n    rcost = 0", "piece": "lcost = 0"}
{"function_name": "insert_data", "function_define": "    if state_onoff == 'on':\n    state_onoff = 1\n    state_onoff = 0", "piece": "state_onoff = 1"}
{"function_name": "update_graph", "function_define": "    if lines > 1:\n    fig, ax1 = plt.subplots()\n    if data['Temp'].shape:", "piece": "fig, ax1 = plt.subplots()"}
{"function_name": "start_camera", "function_define": "    global camera_on\n    if not camera_on:\n    camera_on = True", "piece": "if not camera_on:"}
{"function_name": "stop_camera", "function_define": "    global camera_on\n    global camera_listener_thread\n    global led_listener_thread", "piece": "global camera_listener_thread"}
{"function_name": "eval_genomes", "function_define": "    global current_best_accuracy\n    accuracy = MAX_ACCURACY\n    for input in X:", "piece": "accuracy = MAX_ACCURACY"}
{"function_name": "make_blocks", "function_define": "    if shared_spatial_func:\n    spatial_func = None\n    blocks = []", "piece": "spatial_func = None"}
{"function_name": "forward_features", "function_define": "    x = self.stem(x)\n    x = reshape2n(x)\n    x = self.norm1(x)", "piece": "x = reshape2n(x)"}
{"function_name": "get_usuario", "function_define": "    while True:\n    print('Pedra, Papel, Tesoura')\n    if escolha in 'ped':", "piece": "print('Pedra, Papel, Tesoura')"}
{"function_name": "unpack_fields", "function_define": "    fields = []\n    for w_tup in fields_w:\n    if not len(l_w) == 2:", "piece": "for w_tup in fields_w:"}
{"function_name": "push_field", "function_define": "    TP = lltype.typeOf(value)\n    T = lltype.Ptr(rffi.CArray(TP))\n    rffi.cast(T, ptr)[0] = value", "piece": "T = lltype.Ptr(rffi.CArray(TP))"}
{"function_name": "recover_label", "function_define": "    seq_len = gold_variable.size(1)\n    pred_label = []\n    gold_label = []", "piece": "pred_label = []"}
{"function_name": "read_one_split", "function_define": "    N = len(index_names)\n    frames = [None] * N\n    timer = Timer()", "piece": "frames = [None] * N"}
{"function_name": "_load_trash", "function_define": "    if fflags.short_fixed_trash():\n    if self.deck['12']:\n    del self.deck['12']", "piece": "if self.deck['12']:"}
{"function_name": "max_speeds", "function_define": "    pipette.\n    or assign it to ``None``.\n    For instance,", "piece": "or assign it to ``None``."}
{"function_name": "clear_commands", "function_define": "    self._commands.clear()\n    if self._unsubscribe_commands:\n    self._unsubscribe_commands()", "piece": "if self._unsubscribe_commands:"}
{"function_name": "temp_connect", "function_define": "    with ctx.temp_connect(hw):\n    ctx.home()\n    yield self", "piece": "ctx.home()"}
{"function_name": "loaded_labwares", "function_define": "    the locations.\n    yield (slotnum, slotitem)\n    if slotitem.labware:", "piece": "yield (slotnum, slotitem)"}
{"function_name": "load_instrument", "function_define": "    location.\n    the version.\n    and `'right'`.", "piece": "the version."}
{"function_name": "reset_tipracks", "function_define": "    for tiprack in self.tip_racks:\n    tiprack.reset()\n    self.starting_tip = None", "piece": "tiprack.reset()"}
{"function_name": "aspirate", "function_define": "    from the specified location\n    current position.\n    if isinstance(location, Well):", "piece": "current position."}
{"function_name": "dispense", "function_define": "    into the specified location.\n    current position.\n    if isinstance(location, Well):", "piece": "current position."}
{"function_name": "blow_out", "function_define": "    Blow liquid out of the tip.\n    the tip will be empty.\n    if isinstance(location, Well):", "piece": "the tip will be empty."}
{"function_name": "touch_tip", "function_define": "    removing left-over droplets\n    Default: -1.0 mm\n    if speed > 80.0:", "piece": "Default: -1.0 mm"}
{"function_name": "return_tip", "function_define": "    if not isinstance(loc, Well):\n    bot = loc.bottom()\n    except AssertionError:", "piece": "bot = loc.bottom()"}
{"function_name": "pick_up_tip", "function_define": "    pick up a tip from.\n    be used for dry-run).\n    tiprack = location.labware", "piece": "be used for dry-run)."}
{"function_name": "drop_tip", "function_define": "    Drop the current tip.\n    the fixed trash in slot 12.\n    several ways:", "piece": "the fixed trash in slot 12."}
{"function_name": "distribute", "function_define": "    Specifically,\n    minimum volume of the pipette\n    kwargs['mode'] = 'distribute'", "piece": "minimum volume of the pipette"}
{"function_name": "transfer", "function_define": "    the cost of specificity.\n    dispense to each destination.\n    will be aspirated.", "piece": "dispense to each destination."}
{"function_name": "_mix_from_kwargs", "function_define": "    This handles all these cases.\n    val = kwargs.get(opt)\n    if None is val:", "piece": "val = kwargs.get(opt)"}
{"function_name": "execute_profile", "function_define": "    and 'hold_time_minutes'.\n    and finite for each step.\n    if repetitions <= 0:", "piece": "and finite for each step."}
{"function_name": "on_command", "function_define": "    payload = message.get('payload')\n    text = payload.get('text')\n    if text is None:", "piece": "text = payload.get('text')"}
{"function_name": "_mix_requested", "function_define": "    This handles all these cases.\n    val = kwargs.get(opt)\n    if None is val:", "piece": "val = kwargs.get(opt)"}
{"function_name": "crop_split", "function_define": "    h, w, n = masks00.size()\n    xc = (x1 + x2) / 2\n    yc = (y1 + y2) / 2", "piece": "xc = (x1 + x2) / 2"}
{"function_name": "_init_layers", "function_define": "    self.cls_convs = nn.ModuleList()\n    self.reg_convs = nn.ModuleList()\n    self.nc = 32", "piece": "self.reg_convs = nn.ModuleList()"}
{"function_name": "get_bboxes", "function_define": "    num_levels = len(cls_scores)\n    result_list = []\n    result_list.append(det_bboxes)", "piece": "result_list = []"}
{"function_name": "get_points", "function_define": "    Returns:\n    tuple: points of each image.\n    mlvl_points = []", "piece": "tuple: points of each image."}
{"function_name": "center_target", "function_define": "    stride = 8\n    h, w = featmap_size\n    center_targets = []", "piece": "h, w = featmap_size"}
{"function_name": "fcos_target", "function_define": "    num_levels = len(points)\n    concat_lvl_labels = []\n    concat_lvl_bbox_targets = []", "piece": "concat_lvl_labels = []"}
{"function_name": "fast_nms", "function_define": "    scores = scores[:, :top_k]\n    iou = self.jaccard(boxes, boxes)\n    iou.triu_(diagonal=1)", "piece": "iou = self.jaccard(boxes, boxes)"}
{"function_name": "get_dates", "function_define": "    Parameters\n    start_year : int\n    months : int", "piece": "start_year : int"}
{"function_name": "get_days", "function_define": "    Parameters\n    rng : int\n    defaultdict(list)", "piece": "rng : int"}
{"function_name": "get_file_pths", "function_define": "    Parameters\n    dates : list\n    sat : str", "piece": "dates : list"}
{"function_name": "read_lazy", "function_define": "    Parameters\n    pth : str\n    Path of geotiff to open", "piece": "pth : str"}
{"function_name": "_seasonal_norm", "function_define": "    Parameters\n    rng : int\n    sat : str", "piece": "rng : int"}
{"function_name": "_daily_norm", "function_define": "    Parameters\n    rng : int\n    Year range to consider [10 | 20]", "piece": "rng : int"}
{"function_name": "_build_dirs", "function_define": "    Local directory builder\n    for d in dirs:\n    os.makedirs(d)", "piece": "for d in dirs:"}
{"function_name": "calculate_norms", "function_define": "    for sat in ['modis', 'viirs']:\n    for rng in [10, 20]:\n    daily_norm(rng, sat)", "piece": "for rng in [10, 20]:"}
{"function_name": "on_timer_task", "function_define": "    if self.stop_req:\n    if self.listener:\n    self.listener.close()", "piece": "if self.listener:"}
{"function_name": "from_instance", "function_define": "    fn_ngrams = []\n    ln_ngrams = []\n    doc.email = user.email", "piece": "ln_ngrams = []"}
{"function_name": "get_asjp_pairs", "function_define": "    cont = infile.readlines()\n    meta = cont.pop(0)\n    data = []", "piece": "meta = cont.pop(0)"}
{"function_name": "parseBranches", "function_define": "    Parse top level of markdown\n    parent = True\n    elif not parent:", "piece": "parent = True"}
{"function_name": "free_test", "function_define": "    rval = dict()\n    rval['body'] = body\n    rval['headers'] = headers", "piece": "rval['body'] = body"}
{"function_name": "getGTmatrix", "function_define": "    for i in range(TLWE.n + 1):\n    zeros = [0] * (TGSW.l * TLWE.n)\n    zeros[i * TGSW.l:i * TGSW.l] = B", "piece": "zeros = [0] * (TGSW.l * TLWE.n)"}
{"function_name": "nthprime", "function_define": "    numberofprime = 0\n    prime = 1\n    while numberofprime < n:", "piece": "prime = 1"}
{"function_name": "source_load", "function_define": "    for img in self.plane_imgs:\n    for img in self.destory_imgs:\n    if self.destory_sound:", "piece": "for img in self.destory_imgs:"}
{"function_name": "borken_down", "function_define": "    if self._destory_sound:\n    self._destory_sound.play()\n    for img in self._destory_imgs:", "piece": "self._destory_sound.play()"}
{"function_name": "crop_img", "function_define": "    left = f.bbox[0] * 0.99\n    top = f.bbox[1] * 0.99\n    right = f.bbox[2] * 1.01", "piece": "top = f.bbox[1] * 0.99"}
{"function_name": "check_face_blur", "function_define": "    left = f.bbox[0]\n    top = f.bbox[1]\n    right = f.bbox[2]", "piece": "top = f.bbox[1]"}
{"function_name": "check_num_faces", "function_define": "    if len(faces) == 0:\n    err(NO_FACES_EXCEPTION)\n    draw_errors(err, None)", "piece": "err(NO_FACES_EXCEPTION)"}
{"function_name": "package_version", "function_define": "    except PackageNotFoundError:\n    version = '<unavailable>'\n    if package_name == 'pyzmq':", "piece": "version = '<unavailable>'"}
{"function_name": "generate_tube", "function_define": "    p1 (``np.ndarray``): Top center.\n    assert len(p0) == 3\n    assert len(p1) == 3", "piece": "assert len(p0) == 3"}
{"function_name": "generate_sphere", "function_define": "    faces = []\n    tri_faces = []\n    verts[0] = [0.0, radius, 0.0]", "piece": "tri_faces = []"}
{"function_name": "generate_cone", "function_define": "    faces = []\n    tri_faces = []\n    verts[0] = [0.0, 0.0, 0.0]", "piece": "tri_faces = []"}
{"function_name": "hello_proc", "function_define": "    cores = bsp.cores\n    pid = bsp.pid\n    for destination in range(cores):", "piece": "pid = bsp.pid"}
{"function_name": "save_wordfile", "function_define": "    train_words = []\n    for i in fastafile:\n    f = open(i)", "piece": "for i in fastafile:"}
{"function_name": "save_csv", "function_define": "    wv = model.wv\n    vocab_list = wv.index2word\n    feature = []", "piece": "vocab_list = wv.index2word"}
{"function_name": "selectMarker", "function_define": "    global markers, dewarped\n    markers.append((x, y))\n    if len(markers) == 27:", "piece": "markers.append((x, y))"}
{"function_name": "crear_persona", "function_define": "    acabado = False\n    while acabado == False:\n    acabado = True", "piece": "while acabado == False:"}
{"function_name": "sumar_edad", "function_define": "    for i in range(0, 1000):\n    if persona.id != -1:\n    persona.edad = persona.edad + 1", "piece": "if persona.id != -1:"}
{"function_name": "remove_readonly", "function_define": "    print(path)\n    os.chmod(path, stat.S_IWRITE)\n    func(path)", "piece": "os.chmod(path, stat.S_IWRITE)"}
{"function_name": "get_node_attrs", "function_define": "    attributes = {}\n    if key in schema_properties:\n    attributes[key] = value", "piece": "if key in schema_properties:"}
{"function_name": "DownloadIOC", "function_define": "    result = ApiResult()\n    if result.status_code == 200:\n    iocs = json.loads(r.content)", "piece": "if result.status_code == 200:"}
{"function_name": "ExportIOC", "function_define": "    if r.status_code == 200:\n    if fileType == FileType.json:\n    if fileType == FileType.csv:", "piece": "if fileType == FileType.json:"}
{"function_name": "UpdateIOC", "function_define": "    result = ApiResult()\n    if result.status_code == 200:\n    if result.status_code == 202:", "piece": "if result.status_code == 200:"}
{"function_name": "BulkUpdateIOC", "function_define": "    result = ApiResult()\n    data = ''\n    if fileType == FileType.json:", "piece": "data = ''"}
{"function_name": "on_request_data", "function_define": "    if chan != self.chan:\n    if not visible_channels[chan]:\n    if self.viewer.t != t:", "piece": "if not visible_channels[chan]:"}
{"function_name": "on_param_change", "function_define": "    self.change_color_scale()\n    self.create_grid()\n    self.initialize_time_freq()", "piece": "self.create_grid()"}
{"function_name": "on_data_ready", "function_define": "    if self.images[chan] is None:\n    self.last_wt_maps[chan] = wt_map\n    image = self.images[chan]", "piece": "self.last_wt_maps[chan] = wt_map"}
{"function_name": "inProgress", "function_define": "    messages = list()\n    if noupdated < 7:\n    continue", "piece": "if noupdated < 7:"}
{"function_name": "scheduled", "function_define": "    messages = list()\n    if noupdated < 7:\n    continue", "piece": "if noupdated < 7:"}
{"function_name": "answered", "function_define": "    messages = list()\n    if noupdated < 7:\n    continue", "piece": "if noupdated < 7:"}
{"function_name": "rejected", "function_define": "    messages = list()\n    if noupdated < 1:\n    continue", "piece": "if noupdated < 1:"}
{"function_name": "parse_time_input", "function_define": "    if time_val is None:\n    if time_val_alts:\n    time_val_alts.sort()", "piece": "if time_val_alts:"}
{"function_name": "chocolateFeast", "function_define": "    c = int(n / c)\n    while w >= m:\n    c += int(w / m)", "piece": "while w >= m:"}
{"function_name": "list_view", "function_define": "    View of the list of sols\n    data = {'lang': lang}\n    request.session['data'] = data", "piece": "data = {'lang': lang}"}
{"function_name": "cargar_datos", "function_define": "    datos_entrenamiento = []\n    nombres_entrenamiento = []\n    for fila in csv.reader(csvfile):", "piece": "nombres_entrenamiento = []"}
{"function_name": "train_pass", "function_define": "    loss_train_batch = 0\n    acc_train_batch = 0\n    bs, ncrops, c, h, w = X.shape", "piece": "acc_train_batch = 0"}
{"function_name": "val_pass", "function_define": "    loss_val_batch = 0\n    acc_val_batch = 0\n    bs, ncrops, c, h, w = X.shape", "piece": "acc_val_batch = 0"}
{"function_name": "get_color", "function_define": "    ratio = x / max * 5\n    i = math.floor(ratio)\n    j = math.ceil(ratio)", "piece": "i = math.floor(ratio)"}
{"function_name": "gen_scales", "function_define": "    scales = []\n    minhw = min(w, h) * scale\n    while minhw > net_imgsize:", "piece": "minhw = min(w, h) * scale"}
{"function_name": "regularize_rect", "function_define": "    w, h, _ = img_shape\n    x1, y1, x2, y2, prob = rect\n    x1 = max(0, min(x1, w))", "piece": "x1, y1, x2, y2, prob = rect"}
{"function_name": "test_pnet", "function_define": "    h, w, c = norm_img.shape\n    rects = []\n    for scale in scales:", "piece": "rects = []"}
{"function_name": "test_rnet", "function_define": "    h, w, c = norm_img.shape\n    for i, rect in enumerate(rects):\n    out = net.forward()", "piece": "for i, rect in enumerate(rects):"}
{"function_name": "RecvNewUpFrame", "function_define": "    if frameDict['\u6587\u672c']:\n    text = frameDict['\u6587\u672c']\n    if gFlyerInitDoneStr in text:", "piece": "text = frameDict['\u6587\u672c']"}
{"function_name": "get_api_response", "function_define": "    name = request['header']['name']\n    if endpoint_type == 'device':\n    if endpoint_type == 'scene':", "piece": "if endpoint_type == 'device':"}
{"function_name": "api_message", "function_define": "    payload = payload or {}\n    if token:\n    if 'endpoint' in request:", "piece": "if token:"}
{"function_name": "get_property", "function_define": "    if name != 'powerState':\n    raise _UnsupportedProperty(name)\n    if self.device.is_on is True:", "piece": "raise _UnsupportedProperty(name)"}
{"function_name": "set_qt_lib", "function_define": "    from anima.ui import SET_PYSIDE2\n    SET_PYSIDE2()\n    from anima.ui import SET_PYSIDE", "piece": "SET_PYSIDE2()"}
{"function_name": "version_creator", "function_define": "    do_db_setup()\n    set_qt_lib()\n    from anima.env import nukeEnv", "piece": "set_qt_lib()"}
{"function_name": "create_csv_file", "function_define": "    thewriter.writeheader()\n    now = datetime.datetime.now()\n    for i in range(8):", "piece": "now = datetime.datetime.now()"}
{"function_name": "new_line", "function_define": "    a new line, do nothing.\n    This method is equivalent to\n    if (last line is not empty):", "piece": "This method is equivalent to"}
{"function_name": "__update_records", "function_define": "    log file.\n    Arguments:\n    n_lines = len(lines)", "piece": "Arguments:"}
{"function_name": "__get_last_line", "function_define": "    file_name = self.__tmp_file_path\n    if os.path.isfile(file_name):\n    last_line = fobj.read()", "piece": "if os.path.isfile(file_name):"}
{"function_name": "recombine", "function_define": "    if self.rec == 'bin':\n    u_i = []\n    for i, v_i in enumerate(v):", "piece": "u_i = []"}
{"function_name": "select_survivors", "function_define": "    survivors = []\n    u_i = self.validate_bounds(u[i])\n    gx_i = gx[i]", "piece": "u_i = self.validate_bounds(u[i])"}
{"function_name": "records_readable", "function_define": "    df = self.records.copy()\n    for col_name in df.columns:\n    if col_name in field_settings:", "piece": "for col_name in df.columns:"}
{"function_name": "map_array", "function_define": "    a = np.asarray(a)\n    if idx_arr is None:\n    idx_arr = self.idx_arr", "piece": "if idx_arr is None:"}
{"function_name": "information", "function_define": "    Parameters\n    theta : np.float(k)\n    Natural parameter.", "piece": "theta : np.float(k)"}
{"function_name": "total_examples", "function_define": "    total_rows = 0\n    for file in files:\n    except Exception:", "piece": "for file in files:"}
{"function_name": "_subscribe", "function_define": "    while True:\n    except socket.error:\n    thread.start()", "piece": "except socket.error:"}
{"function_name": "_update_model", "function_define": "    with QMutexLocker(self._mutex):\n    updates = self._update_queue\n    self._update_queue = []", "piece": "updates = self._update_queue"}
{"function_name": "chairs_build", "function_define": "    pic_list = [pic_2, pic_3]\n    random.shuffle(pic_list)\n    kind = random.randint(0, 3)", "piece": "random.shuffle(pic_list)"}
{"function_name": "h2v2_build", "function_define": "    pic_list_1 = [pic_1, pic_2]\n    random.shuffle(pic_list_1)\n    pic_list_2 = [pic_3, pic_4]", "piece": "random.shuffle(pic_list_1)"}
{"function_name": "h2v2_spin_build", "function_define": "    pic_list_1 = [pic_1, pic_2]\n    random.shuffle(pic_list_1)\n    pic_list_2 = [pic_3, pic_4]", "piece": "random.shuffle(pic_list_1)"}
{"function_name": "store_blob", "function_define": "    if not self._enabled:\n    if key in self._delete_cache:\n    self._delete_cache.remove(key)", "piece": "if key in self._delete_cache:"}
{"function_name": "delete_blob", "function_define": "    if not self._enabled:\n    if not self.has_blob(key):\n    self._delete_cache.add(key)", "piece": "if not self.has_blob(key):"}
{"function_name": "has_blob", "function_define": "    if not self._enabled:\n    if key in self._delete_cache:\n    if key in self._update_cache:", "piece": "if key in self._delete_cache:"}
{"function_name": "simulator", "function_define": "    seed = 0\n    for ii in range(idx):\n    torch.manual_seed(seed)", "piece": "for ii in range(idx):"}
{"function_name": "calc_aggs", "function_define": "    obs_std = all_data['flux_err']\n    if exact:\n    q_list = [0.25, 0.75]", "piece": "if exact:"}
{"function_name": "most_extreme", "function_define": "    df = df_in.copy()\n    if positive:\n    extreme_data = first_k_after", "piece": "if positive:"}
{"function_name": "_walk_lgnet", "function_define": "    if value is None:\n    save(key)\n    lgnetmap = walk(lgnetmapkey)", "piece": "save(key)"}
{"function_name": "store_transact", "function_define": "    transact_object = dict()\n    if values[i + 1] is None:\n    obj.info.append(e)", "piece": "if values[i + 1] is None:"}
{"function_name": "allocate_ip", "function_define": "    for e in list(values[0].info):\n    values[0].info.remove(e)\n    for e in list(values[0].info):", "piece": "values[0].info.remove(e)"}
{"function_name": "release_ip", "function_define": "    new_list = []\n    for e in values[0].info:\n    new_list.append(e)", "piece": "for e in values[0].info:"}
{"function_name": "performance_test", "function_define": "    n_epochs = 1000\n    n_attributes = 10\n    n_labels = 3", "piece": "n_attributes = 10"}
{"function_name": "calculate_sum", "function_define": "    if type(accounts) == str:\n    elif type(accounts) == int:\n    elif type(accounts) == list:", "piece": "elif type(accounts) == int:"}
{"function_name": "load_traces", "function_define": "    traces = np.load(tracefile)\n    plaintext = np.load(ptfile)\n    keys = np.load(keyfile)", "piece": "plaintext = np.load(ptfile)"}
{"function_name": "test_execute", "function_define": "    MyOperand.unregister_executor()\n    MyOperand2.unregister_executor()\n    with pytest.raises(KeyError):", "piece": "MyOperand2.unregister_executor()"}
{"function_name": "google_client", "function_define": "    import google.cloud.storage\n    client = MagicMock()\n    yield client", "piece": "client = MagicMock()"}
{"function_name": "s3_client", "function_define": "    import boto3\n    client = MagicMock()\n    yield client", "piece": "client = MagicMock()"}
{"function_name": "azure_service", "function_define": "    import azure.storage.blob\n    service = MagicMock()\n    storage = MagicMock(blob=blob)", "piece": "service = MagicMock()"}
{"function_name": "_delete_click", "function_define": "    deletable_guids = []\n    for act in deletable_activities:\n    deletable_guids.append(act.guid)", "piece": "for act in deletable_activities:"}
{"function_name": "_split_click", "function_define": "    activity_split = ActivitySplit()\n    self.after(1, self.destroy())\n    activity_split.mainloop()", "piece": "self.after(1, self.destroy())"}
{"function_name": "alltests", "function_define": "    import logging\n    import pkg_resources\n    import unittest", "piece": "import pkg_resources"}
{"function_name": "to_optimize_", "function_define": "    Parameters\n    w_n = 1 - sum(abs(w_i))\n    probs = np.array(self.probs_)", "piece": "w_n = 1 - sum(abs(w_i))"}
{"function_name": "add_metadata", "function_define": "    geo feature files\n    logical file\n    if xml_file:", "piece": "logical file"}
{"function_name": "extract_metadata", "function_define": "    metadata_dict = {}\n    original_coverage_dict = {}\n    field_info_array = []", "piece": "original_coverage_dict = {}"}
{"function_name": "parse_shp", "function_define": "    output dictionary format\n    dict {\"fieldname\": dict {\n    shp_metadata_dict = {}", "piece": "dict {\"fieldname\": dict {"}
{"function_name": "parse_shp_xml", "function_define": "    elements:\n    abstract\n    keywords", "piece": "abstract"}
{"function_name": "get_html", "function_define": "    if self.spatial_coverage:\n    if self.originalcoverage:\n    if self.temporal_coverage:", "piece": "if self.originalcoverage:"}
{"function_name": "get_html_forms", "function_define": "    with root_div:\n    with div(cls='content-block'):\n    with div(cls='content-block'):", "piece": "with div(cls='content-block'):"}
{"function_name": "set_file_type", "function_define": "    log = logging.getLogger()\n    res_file = ft_ctx.res_file\n    except ValidationError as ex:", "piece": "res_file = ft_ctx.res_file"}
{"function_name": "fit_predict", "function_define": "    Parameters\n    X : iterable\n    the pipeline.", "piece": "X : iterable"}
{"function_name": "compare_elements", "function_define": "    if el1.tag != el2.tag:\n    if el1.attrib != el2.attrib:\n    if len(el1) != len(el2):", "piece": "if el1.attrib != el2.attrib:"}
{"function_name": "animate_objects", "function_define": "    in objects.\n    for obj in objs:\n    obj.select = True", "piece": "for obj in objs:"}
{"function_name": "bake_simulation", "function_define": "    print('Baking objects')\n    geo_util.ensure_object_mode()\n    obj.select = True", "piece": "geo_util.ensure_object_mode()"}
{"function_name": "create_floor", "function_define": "    floor = bpy.context.object\n    floor.scale[0] = 100\n    floor.scale[1] = 100", "piece": "floor.scale[0] = 100"}
{"function_name": "obj_import", "function_define": "    if len(activeObjects) == 0:\n    if do_join_objects:\n    bpy.ops.object.join()", "piece": "if do_join_objects:"}
{"function_name": "check_prime", "function_define": "    if num == 1 or num == 0:\n    sq_root = 2\n    while sq_root * sq_root <= num:", "piece": "sq_root = 2"}
{"function_name": "minimax_decision", "function_define": "    player = game.to_move(state)\n    if game.terminal_test(state):\n    v = -infinity", "piece": "if game.terminal_test(state):"}
{"function_name": "alphabeta_search", "function_define": "    player = game.to_move(state)\n    if cutoff_test(state, depth):\n    v = -infinity", "piece": "if cutoff_test(state, depth):"}
{"function_name": "query_player", "function_define": "    move = eval(move_string)\n    except NameError:\n    move = move_string", "piece": "except NameError:"}
{"function_name": "max_value", "function_define": "    if cutoff_test(state, depth):\n    v = -infinity\n    for a in game.actions(state):", "piece": "v = -infinity"}
{"function_name": "min_value", "function_define": "    if cutoff_test(state, depth):\n    v = infinity\n    for a in game.actions(state):", "piece": "v = infinity"}
{"function_name": "k_in_row", "function_define": "    delta_x, delta_y = delta_x_y\n    x, y = move\n    x, y = move", "piece": "x, y = move"}
{"function_name": "mouse_click", "function_define": "    player = self.players[self.turn]\n    if player == 'human':\n    move = (x, y)", "piece": "if player == 'human':"}
{"function_name": "_get_mod", "function_define": "    b1 = sch.get_block(name='A')\n    b2 = sch.get_block(name='B')\n    sch.compute_inline(block=b1)", "piece": "b2 = sch.get_block(name='B')"}
{"function_name": "data_pack", "function_define": "    sch.unroll(loop=l19)\n    sch.unroll(loop=l20)\n    sch.unroll(loop=l23)", "piece": "sch.unroll(loop=l20)"}
{"function_name": "get_stats", "function_define": "    and recall score.\n    a good match or not.\n    a dict that contains:", "piece": "a good match or not."}
{"function_name": "write_changes", "function_define": "    f = os.fdopen(tmpfd, 'wb')\n    f.write(contents)\n    f.close()", "piece": "f.write(contents)"}
{"function_name": "check_file_attrs", "function_define": "    if changed:\n    message += ' and '\n    changed = True", "piece": "message += ' and '"}
{"function_name": "query_info", "function_define": "    parts = []\n    stacktrace = query['stacktrace']\n    frameinfo = stacktrace[-1]", "piece": "stacktrace = query['stacktrace']"}
{"function_name": "assert_queries", "function_define": "    Shortcut to assert everything\n    if table_counts is not None:\n    if double_tables:", "piece": "if table_counts is not None:"}
{"function_name": "origin_num", "function_define": "    value = 10\n    nonlocal value\n    value += 10", "piece": "nonlocal value"}
{"function_name": "setup_sorting", "function_define": "    self.FINISHED_SORTING = False\n    self.number_samples.set(str(10))\n    self.canvas.delete('all')", "piece": "self.number_samples.set(str(10))"}
{"function_name": "get_speed", "function_define": "    speed = self.speed.get()\n    if speed == 'Slow':\n    elif speed == 'Normal':", "piece": "if speed == 'Slow':"}
{"function_name": "bubble_sort", "function_define": "    len_arr = len(self.boxes)\n    for i in range(len_arr):\n    self.update_counter()", "piece": "for i in range(len_arr):"}
{"function_name": "insertion_sort", "function_define": "    len_arr = len(self.boxes)\n    for i in range(1, len_arr):\n    self.update_counter()", "piece": "for i in range(1, len_arr):"}
{"function_name": "selection_sort", "function_define": "    len_arr = len(self.boxes)\n    for i in range(len_arr):\n    min_index = i", "piece": "for i in range(len_arr):"}
{"function_name": "findEncoding", "function_define": "    file = open(s, mode='rb')\n    buf = file.read()\n    result = chardet.detect(buf)", "piece": "buf = file.read()"}
{"function_name": "convertEncoding", "function_define": "    if os.access(s, os.W_OK):\n    encoding = findEncoding(s)\n    contents = ''", "piece": "encoding = findEncoding(s)"}
{"function_name": "getAllFile", "function_define": "    f = os.walk(path)\n    fpath = []\n    for root, dir, fname in f:", "piece": "fpath = []"}
{"function_name": "check_database", "function_define": "    db_conn = connections['default']\n    c = db_conn.cursor()\n    except OperationalError:", "piece": "c = db_conn.cursor()"}
{"function_name": "check_es", "function_define": "    if not content:\n    data = json.loads(content)\n    except json.JSONDecodeError:", "piece": "data = json.loads(content)"}
{"function_name": "check_tika", "function_define": "    if not content:\n    version_string = str(content)\n    if not matches:", "piece": "version_string = str(content)"}
{"function_name": "check_gpg", "function_define": "    if not path_exists(gpg_path):\n    version = get_version(gpg_path)\n    if not version:", "piece": "version = get_version(gpg_path)"}
{"function_name": "wrap_errno", "function_define": "    errno if possible\n    except KeyError:\n    raise FuseOSError(errno.ENOENT)", "piece": "except KeyError:"}
{"function_name": "to_breadcrumbs", "function_define": "    res = []\n    while name:\n    res = [name] + res", "piece": "while name:"}
{"function_name": "children", "function_define": "    if not self.is_dir:\n    if self.is_category:\n    elif self.is_course:", "piece": "if self.is_category:"}
{"function_name": "buttonClick", "function_define": "    start_icon = QIcon()\n    stop_icon = QIcon()\n    btn = self.sender()", "piece": "stop_icon = QIcon()"}
{"function_name": "__random_tests", "function_define": "    failData = []\n    print('Random test case check')\n    for _ in range(40):", "piece": "print('Random test case check')"}
{"function_name": "test_case", "function_define": "    result = self.__goose_filter(g)\n    equalCheck = result == expected\n    if not equalCheck:", "piece": "equalCheck = result == expected"}
{"function_name": "_case_two_setup", "function_define": "    any_changes = False\n    for comp in comp_classes:\n    if any_changes:", "piece": "for comp in comp_classes:"}
{"function_name": "text_from_dict", "function_define": "    Parameters\n    outfile : string\n    Name of the output text file", "piece": "outfile : string"}
{"function_name": "hdf5_from_dict", "function_define": "    Parameters\n    outfile : str\n    Name of the output file", "piece": "outfile : str"}
{"function_name": "dict_from_text", "function_define": "    Parameters\n    infile : str\n    Input file name", "piece": "infile : str"}
{"function_name": "dict_from_hdf5", "function_define": "    Parameters\n    infile : str\n    Name of hdf5 file", "piece": "infile : str"}
{"function_name": "format_post", "function_define": "    html = md.convert(data)\n    post = md.Meta\n    post[key] = get_only(post, key)", "piece": "post = md.Meta"}
{"function_name": "read_posts", "function_define": "    postlist = list()\n    for i in filelist:\n    with open(i, 'r') as opened:", "piece": "for i in filelist:"}
{"function_name": "check_name", "function_define": "    if isinstance(n, str):\n    n = n.split('.')\n    if n[-1] == '':", "piece": "n = n.split('.')"}
{"function_name": "pack_name", "function_define": "    output_index = 0\n    for part in string:\n    part_length = len(part)", "piece": "for part in string:"}
{"function_name": "_makedirs", "function_define": "    os.makedirs(path)\n    except OSError as x:\n    if x.errno == 17:", "piece": "except OSError as x:"}
{"function_name": "size_file", "function_define": "    if file_exists:\n    path = self.full_uri(path)\n    except OSError:", "piece": "path = self.full_uri(path)"}
{"function_name": "list_content", "function_define": "    results = []\n    for path in paths:\n    if path == self.METADATA_DIR:", "piece": "for path in paths:"}
{"function_name": "save_bytes", "function_define": "    if isinstance(obj, tuple):\n    byte_obj, metadata = obj\n    byte_obj, metadata = (obj, None)", "piece": "byte_obj, metadata = obj"}
{"function_name": "load_bytes", "function_define": "    for path in paths:\n    full_path = self.full_uri(path)\n    metadata = None", "piece": "full_path = self.full_uri(path)"}
{"function_name": "iter_results", "function_define": "    for path in paths:\n    full_path = self.full_uri(path)\n    metadata = None", "piece": "full_path = self.full_uri(path)"}
{"function_name": "test_groups", "function_define": "    assert len(hfile) == 2\n    grp1 = hfile['group1']\n    grp2 = hfile['group2']", "piece": "grp1 = hfile['group1']"}
{"function_name": "apply_to_node", "function_define": "    if self.color is not None:\n    node.setColor(self.color)\n    if self.shape is not None:", "piece": "node.setColor(self.color)"}
{"function_name": "simplify_event", "function_define": "    If the original name is\n    Parameters\n    name : `str`", "piece": "Parameters"}
{"function_name": "simplify_name", "function_define": "    Parameters\n    name : `str`\n    simplified_name : `str`", "piece": "name : `str`"}
{"function_name": "compile_file", "function_define": "    accept_action = bpf.Allow()\n    if entries:\n    reject_action.accept(visitor)", "piece": "if entries:"}
{"function_name": "output_results", "function_define": "    w.write(token + ' ')\n    if gold == 0:\n    w_gold.write(token + ' ')", "piece": "if gold == 0:"}
{"function_name": "_parse_payload", "function_define": "    except Exception:\n    except Exception:\n    except Exception:", "piece": "except Exception:"}
{"function_name": "set_match", "function_define": "    self._match = match\n    if match_type == 'command':\n    self._payload['command'] = match", "piece": "if match_type == 'command':"}
{"function_name": "gen_graph", "function_define": "    G = nx.DiGraph()\n    for k, op in enumerate(ops):\n    G.add_node(k, op=op)", "piece": "for k, op in enumerate(ops):"}
{"function_name": "load_bert_state", "function_define": "    ParlAI model state_dict\n    path to pretrained DPR model\n    if pretrained_dpr_path:", "piece": "path to pretrained DPR model"}
{"function_name": "load_dpr_model", "function_define": "    bert model to load\n    prefix_len = len(prefix)\n    except RuntimeError:", "piece": "prefix_len = len(prefix)"}
{"function_name": "is_empty", "function_define": "    for x in range(self.height):\n    for y in range(self.width):\n    if self.grid[x][y] == 1:", "piece": "for y in range(self.width):"}
{"function_name": "scroll_down", "function_define": "    old = copy.deepcopy(self.grid)\n    for x in range(self.width):\n    for y in range(self.height):", "piece": "for x in range(self.width):"}
{"function_name": "scroll_up", "function_define": "    old = copy.deepcopy(self.grid)\n    for x in range(self.width):\n    for y in range(self.height):", "piece": "for x in range(self.width):"}
{"function_name": "scroll_right", "function_define": "    old = copy.deepcopy(self.grid)\n    for x in range(self.width):\n    for y in range(self.height):", "piece": "for x in range(self.width):"}
{"function_name": "scroll_left", "function_define": "    old = copy.deepcopy(self.grid)\n    for x in range(self.width):\n    for y in range(self.height):", "piece": "for x in range(self.width):"}
{"function_name": "AddClass", "function_define": "    if Cls not in self:\n    self.append(Cls)\n    if notify:", "piece": "self.append(Cls)"}
{"function_name": "RemoveClass", "function_define": "    if Cls in self:\n    self.remove(Cls)\n    if notify:", "piece": "self.remove(Cls)"}
{"function_name": "read_image", "function_define": "    img = Image.open(path)\n    img = img.resize((w, h))\n    img = img.convert('RGB')", "piece": "img = img.resize((w, h))"}
{"function_name": "compareTwoStores", "function_define": "    print('Reading Data Store...')\n    data = []\n    for objectType in objectTypesL:", "piece": "data = []"}
{"function_name": "test_headers", "function_define": "    print('Running test_headers')\n    header = read_header(testfile)\n    header = read_header(testfile)", "piece": "header = read_header(testfile)"}
{"function_name": "test_format", "function_define": "    print('Running test_format')\n    inputs = {}\n    inputs['inputfile'] = testfile1", "piece": "inputs = {}"}
{"function_name": "_content_diff", "function_define": "    printed = False\n    for diff in diffs:\n    if not printed:", "piece": "for diff in diffs:"}
{"function_name": "get_root_items", "function_define": "    files = torrent.files()\n    common = set()\n    for fid, item in files.items():", "piece": "common = set()"}
{"function_name": "split_all", "function_define": "    allparts = []\n    while True:\n    parts = os.path.split(path)", "piece": "while True:"}
{"function_name": "_check_space", "function_define": "    if self._halted:\n    self._halted = False\n    if not self._halted:", "piece": "self._halted = False"}
{"function_name": "set_group", "function_define": "    if not group:\n    group = self\n    self.group = group", "piece": "group = self"}
{"function_name": "merge_group", "function_define": "    group1 = self.get_group()\n    group2 = group.get_group()\n    if group1 != group2:", "piece": "group2 = group.get_group()"}
{"function_name": "__copy__", "function_define": "    new.last = self.last\n    new.llast = self.llast\n    new.player = self.player", "piece": "new.llast = self.llast"}
{"function_name": "get_adj_pos", "function_define": "    if not pos:\n    if direction == 0:\n    if direction == 1:", "piece": "if direction == 0:"}
{"function_name": "get_adj_list", "function_define": "    adj = []\n    if pos[0] < self.xdim:\n    adj += [(pos[0] + 1, pos[1])]", "piece": "if pos[0] < self.xdim:"}
{"function_name": "place_unchecked", "function_define": "    self.ko = None\n    adj = []\n    adj = self.get_adj_list(pos)", "piece": "adj = []"}
{"function_name": "check_fast", "function_define": "    if not pos:\n    if not self.validate_pos(pos):\n    if self.get(pos).color != EMPTY:", "piece": "if not self.validate_pos(pos):"}
{"function_name": "get_driver", "function_define": "    if not driver.isAlive():\n    driver.start()\n    except KeyError:", "piece": "driver.start()"}
{"function_name": "get_max_conc", "function_define": "    dataframes. Defaults to None.\n    maximum concentration.\n    Returns:", "piece": "maximum concentration."}
{"function_name": "libDepHelper", "function_define": "    tocheck = None\n    for a in libs.keys():\n    if a not in done:", "piece": "for a in libs.keys():"}
{"function_name": "topoSort", "function_define": "    curr = []\n    rest = libs.keys()\n    while rest:", "piece": "rest = libs.keys()"}
{"function_name": "getLibFlags", "function_define": "    the executable.\n    CFLAGS -> Include flags\n    FFLAGS -> include flags", "piece": "CFLAGS -> Include flags"}
{"function_name": "intLibFlags", "function_define": "    ans = {}\n    if subdir != '':\n    libname = subdir.lower()", "piece": "if subdir != '':"}
{"function_name": "extLibFlags", "function_define": "    ans = {}\n    if macro in self.macros:\n    ans[compiler] = '$(%s)' % macro", "piece": "if macro in self.macros:"}
{"function_name": "makeBinary", "function_define": "    pwd = os.getcwd()\n    os.chdir(libDir)\n    if os.path.isfile('Makefile.h'):", "piece": "os.chdir(libDir)"}
{"function_name": "write_libraries", "function_define": "    if args:\n    fd.write('%8s : \\n' % libname)\n    fd.close()", "piece": "fd.write('%8s : \\n' % libname)"}
{"function_name": "guessing_game", "function_define": "    print('Guess the number!')\n    while True:\n    guess = int(guess)", "piece": "while True:"}
{"function_name": "addTwoNumbers", "function_define": "    carry = 0\n    out = temp = ListNode()\n    tempsum = l1.val + l2.val", "piece": "out = temp = ListNode()"}
{"function_name": "get_recipe", "function_define": "    if 'recipe' in sat:\n    recipe = sat['recipe']\n    recipe = 'noaa-apt'", "piece": "recipe = sat['recipe']"}
{"function_name": "execute_recipe", "function_define": "    recipe_path = get_recipe(sat)\n    uid = uuid.uuid4()\n    now = datetime.datetime.utcnow()", "piece": "uid = uuid.uuid4()"}
{"function_name": "get_recipe_names", "function_define": "    recipes = []\n    for filename in filenames:\n    if not filename.endswith('.sh'):", "piece": "for filename in filenames:"}
{"function_name": "test_sysctl", "function_define": "    feed_back = 'test'\n    assert feed_back == output\n    feed_back_b = '1'", "piece": "assert feed_back == output"}
{"function_name": "get_trigger", "function_define": "    if opts is None:\n    opts = pulumi.InvokeOptions()\n    if opts.version is None:", "piece": "opts = pulumi.InvokeOptions()"}
{"function_name": "simple_merge", "function_define": "    data_frames = []\n    for x in os.listdir(count_dir):\n    data_frames.append(sample_df)", "piece": "for x in os.listdir(count_dir):"}
{"function_name": "merge_counts", "function_define": "    single dataframe.\n    Returns:\n    data_frames = []", "piece": "Returns:"}
{"function_name": "binning_loop", "function_define": "    self.r_arr = []\n    self.sigma2_arr = []\n    min_r_i = bin_arr[i]", "piece": "self.sigma2_arr = []"}
{"function_name": "r_bin_automatic", "function_define": "    x0 = self.x\n    while len(x0) < 10000 or a == 0:\n    self.r_cut_min -= 5e-06", "piece": "while len(x0) < 10000 or a == 0:"}
{"function_name": "create_flex", "function_define": "    import gym\n    cfg_env = YamlConfig(path)\n    cfg_env['gym']['rank'] = 0", "piece": "cfg_env = YamlConfig(path)"}
{"function_name": "get_env_info", "function_define": "    action_space = env.action_space\n    agents = 1\n    env.close()", "piece": "agents = 1"}
{"function_name": "columnas", "function_define": "    Nombre = newdata['Nombre']\n    plt.xticks(rotation=90)\n    plt.xlabel('Nombre del Barrio')", "piece": "plt.xticks(rotation=90)"}
{"function_name": "lineal_BD", "function_define": "    Nombre = datos_BD['Nombre']\n    plt.plot(Nombre, Estrato)\n    plt.xticks(rotation=90)", "piece": "plt.plot(Nombre, Estrato)"}
{"function_name": "columnas_BD", "function_define": "    Nombre = datos_BD['Nombre']\n    plt.xticks(rotation=90)\n    plt.xlabel('Nombre del Barrio')", "piece": "plt.xticks(rotation=90)"}
{"function_name": "puntos_BD", "function_define": "    Nombre = datos_BD['Nombre']\n    plt.scatter(Nombre, Estrato)\n    plt.plot(Nombre, Estrato, 'b--')", "piece": "plt.scatter(Nombre, Estrato)"}
{"function_name": "barras_BD", "function_define": "    Nombre = datos_BD['Nombre']\n    plt.barh(Nombre, Estrato)\n    plt.ylabel('Nombre del Barrio')", "piece": "plt.barh(Nombre, Estrato)"}
{"function_name": "inference", "function_define": "    model.eval()\n    test_true = []\n    test_prob = []", "piece": "test_true = []"}
{"function_name": "callback_cmd", "function_define": "    global front_rot\n    global rear_vel\n    front_rot = cmd.angular.z", "piece": "global rear_vel"}
{"function_name": "jacobsthal", "function_define": "    prev: int = 0\n    curr: int = 1\n    while True:", "piece": "curr: int = 1"}
{"function_name": "plot_results", "function_define": "    plt.title(title)\n    plt.xlabel('x')\n    plt.ylabel('y')", "piece": "plt.xlabel('x')"}
{"function_name": "plot_criteria", "function_define": "    plt.xlabel('Noise criteria')\n    plt.xscale('log')\n    plt.grid(linestyle='--')", "piece": "plt.xscale('log')"}
{"function_name": "make_future", "function_define": "    if request.param == 'delay':\n    yield tornado.gen.sleep(0.01)\n    if exc is None:", "piece": "yield tornado.gen.sleep(0.01)"}
{"function_name": "on_mouse_release", "function_define": "    if button == mouse.LEFT:\n    elif button == mouse.RIGHT:\n    for obj in obj_list:", "piece": "elif button == mouse.RIGHT:"}
{"function_name": "transform_fpi", "function_define": "    curr_n = self.n\n    for j in range(self.m - 1):\n    for i in range(self.m):", "piece": "for j in range(self.m - 1):"}
{"function_name": "get_aux_PL", "function_define": "    aux_pl.transform_fpi()\n    for i in range(1, self.m):\n    aux_tableau[0][-(i + 1)] = 1.0", "piece": "for i in range(1, self.m):"}
{"function_name": "enforce_b", "function_define": "    for i in range(1, self.m):\n    if self.tableau[i][-1] < 0:\n    self.enforced = True", "piece": "if self.tableau[i][-1] < 0:"}
{"function_name": "del_last_columns", "function_define": "    for i in range(self.m):\n    for j in range(column_c):\n    self.tableau[i].pop(-2)", "piece": "for j in range(column_c):"}
{"function_name": "cannonize", "function_define": "    pivot_i = pivot[0]\n    pivot_j = pivot[1]\n    for i in range(self.m):", "piece": "pivot_j = pivot[1]"}
{"function_name": "primal_simplex", "function_define": "    if not self.is_cannonic():\n    for i in range(self.m - 1):\n    pivot = (i + 1, self.basis[i])", "piece": "for i in range(self.m - 1):"}
{"function_name": "dual_simplex", "function_define": "    if not self.is_cannonic():\n    for i in range(self.m - 1):\n    pivot = (i + 1, self.basis[i])", "piece": "for i in range(self.m - 1):"}
{"function_name": "cutting_planes", "function_define": "    done = False\n    selected = []\n    while not done:", "piece": "selected = []"}
{"function_name": "branch_bound", "function_define": "    global max_int_obj_v\n    global max_int_opt_x\n    if item < self.original_n - 1:", "piece": "global max_int_opt_x"}
{"function_name": "create_package", "function_define": "    if name == 'pythia':\n    elif name == 'spatialdata':\n    elif name == 'petsc':", "piece": "elif name == 'spatialdata':"}
{"function_name": "git_clone", "function_define": "    cmd = 'git clone '\n    if self.CLONE_RECURSIVE:\n    cmd += ' --recursive'", "piece": "if self.CLONE_RECURSIVE:"}
{"function_name": "git_sync_fork", "function_define": "    if not self.config['upstream']:\n    lines += ['git fetch upstream']\n    self._display(lines)", "piece": "lines += ['git fetch upstream']"}
{"function_name": "execute_script", "function_define": "    from maintain product API\n    if option == 'None':\n    if option is not 'None':", "piece": "if option == 'None':"}
{"function_name": "download_data", "function_define": "    Parameters\n    ids : []\n    Default=chosen_ids.", "piece": "ids : []"}
{"function_name": "getAccelScale", "function_define": "    scale = (acnfg & 24) >> 3\n    if scale == 0:\n    elif scale == 1:", "piece": "if scale == 0:"}
{"function_name": "setAccelScale", "function_define": "    if not 0 <= newScale <= 3:\n    acnfg &= ~24\n    acnfg |= newScale << 3", "piece": "acnfg &= ~24"}
{"function_name": "getGyroScale", "function_define": "    scale = (gcnfg & 24) >> 3\n    if scale == 0:\n    elif scale == 1:", "piece": "if scale == 0:"}
{"function_name": "get_ratio_range", "function_define": "    Compute range ratio index\n    range_ratios = []\n    n_components = max(y_pred) + 1", "piece": "range_ratios = []"}
{"function_name": "java_files", "function_define": "    files = []\n    if java_common.provider in f:\n    if hasattr(f, 'files'):", "piece": "if java_common.provider in f:"}
{"function_name": "java_image", "function_define": "    their own layers.\n    binary_name = name + '.binary'\n    base = base or DEFAULT_JAVA_BASE", "piece": "binary_name = name + '.binary'"}
{"function_name": "war_image", "function_define": "    their own layers.\n    library_name = name + '.library'\n    base = this_name", "piece": "library_name = name + '.library'"}
{"function_name": "fancy_print", "function_define": "    print(s * 40)\n    print(n)\n    print(c)", "piece": "print(n)"}
{"function_name": "test_embedding", "function_define": "    model = model_embedding_dense()\n    fpr = dict()\n    tpr = dict()", "piece": "fpr = dict()"}
{"function_name": "run_one_setup", "function_define": "    retries = s['retries']\n    wait = s['wait']\n    if d['type'] == 'sharp':", "piece": "wait = s['wait']"}
{"function_name": "localize_obj", "function_define": "    self.img_out = None\n    self.img = img\n    with self.dg.as_default():", "piece": "self.img = img"}
{"function_name": "init_graph", "function_define": "    self.dg = tf.Graph()\n    with self.dg.as_default():\n    gdef = tf.GraphDef()", "piece": "with self.dg.as_default():"}
{"function_name": "mels2wavs", "function_define": "    input_dir = args.input_dir\n    output_dir = args.output_dir\n    chunk_size = args.chunk_size", "piece": "output_dir = args.output_dir"}
{"function_name": "resultat_tir", "function_define": "    if pos.est_valide_position():\n    i = int(0)\n    i = i + 1", "piece": "i = int(0)"}
{"function_name": "list_all", "function_define": "    Show existing collaborations.\n    for collab in collabs:\n    users = collab.get_users()", "piece": "for collab in collabs:"}
{"function_name": "__inti__", "function_define": "    self.nFeatures = nFeatures\n    self.binSize = binSize\n    self.nSamples = nSamples", "piece": "self.binSize = binSize"}
{"function_name": "install_update", "function_define": "    finally:\n    http_server = None\n    Helpers.upload_to_s3(image)", "piece": "http_server = None"}
{"function_name": "plot_glimpse", "function_define": "    img_idx_range = config.verbose\n    hw = img_h / 2\n    g_size = config.glimpse_size", "piece": "hw = img_h / 2"}
{"function_name": "plot_sed", "function_define": "    Parameters\n    y_range : list of float\n    comparison_range : list of float", "piece": "y_range : list of float"}
{"function_name": "asarray2d", "function_define": "    arr = np.asarray(a)\n    if arr.ndim == 1:\n    arr = arr.reshape(-1, 1)", "piece": "if arr.ndim == 1:"}
{"function_name": "has_nans", "function_define": "    nans = np.isnan(obj)\n    while np.ndim(nans):\n    nans = np.any(nans)", "piece": "while np.ndim(nans):"}
{"function_name": "raiseifnone", "function_define": "    result = call()\n    if result is None:\n    raise ValueError", "piece": "if result is None:"}
{"function_name": "nonnegative", "function_define": "    result = call()\n    with suppress(TypeError):\n    if result < 0:", "piece": "with suppress(TypeError):"}
{"function_name": "__deepcopy__", "function_define": "    cls = self.__class__\n    result = cls.__new__(cls)\n    memo[id(self)] = result", "piece": "result = cls.__new__(cls)"}
{"function_name": "find_nan_inds", "function_define": "    nan_inds = np.isnan(arr)\n    if arr.ndim > 1:\n    nan_inds = nan_inds.any(axis=1)", "piece": "if arr.ndim > 1:"}
{"function_name": "crossValidation", "function_define": "    if model is None:\n    score = 0\n    for i in testDrivers:", "piece": "score = 0"}
{"function_name": "zoomImpl", "function_define": "    zoomFactor = zoomOutFactor\n    if bigOrSmall:\n    zoomFactor = self.zoomInFactor", "piece": "if bigOrSmall:"}
{"function_name": "signuplogin", "function_define": "    if request.method == 'POST':\n    if request.POST.get('login'):\n    uname = request.POST['username']", "piece": "if request.POST.get('login'):"}
{"function_name": "tree_to_code", "function_define": "    tree_ = tree.tree_\n    indent = '  ' * depth\n    name = feature_name[node]", "piece": "indent = '  ' * depth"}
{"function_name": "lire_fichier", "function_define": "    in_file = open(sys.argv[1], 'r')\n    text = in_file.read()\n    lg = len(text)", "piece": "text = in_file.read()"}
{"function_name": "dupliquer", "function_define": "    grille_d = np.full((M, N), -1)\n    for i in range(M):\n    for j in range(N):", "piece": "for i in range(M):"}
{"function_name": "creer_sequence", "function_define": "    init = 1\n    sequence = []\n    if direction == 1:", "piece": "sequence = []"}
{"function_name": "coloreLig", "function_define": "    sequence = creer_sequence(i, 1)\n    l = len(sequence)\n    somme_sequence = 0", "piece": "l = len(sequence)"}
{"function_name": "coloreCol", "function_define": "    sequence = creer_sequence(j, 2)\n    l = len(sequence)\n    i = M - 1", "piece": "l = len(sequence)"}
{"function_name": "coloration", "function_define": "    grille_d = dupliquer(grille)\n    LigneAVoir = set()\n    ColonneAVoir = set()", "piece": "LigneAVoir = set()"}
{"function_name": "handle_cooldowns", "function_define": "    dt = g.dt\n    if w.countdown > 0:\n    w.countdown -= dt / 1000", "piece": "if w.countdown > 0:"}
{"function_name": "parse_elofile", "function_define": "    f = open(fpath, 'r')\n    everything = f.read()\n    f.close()", "piece": "everything = f.read()"}
{"function_name": "clean_result", "function_define": "    if res == '0-1':\n    elif res == '1-0':\n    elif res == '1/2-1/2':", "piece": "elif res == '1-0':"}
{"function_name": "data_parse", "function_define": "    check_dir(params.data_dir)\n    check_file(ce_fpath)\n    data = read_csv(ce_fpath)", "piece": "check_file(ce_fpath)"}
{"function_name": "filter_data", "function_define": "    if filter_type == 'alpha_desc':\n    elif filter_type == 'alpha_asc':\n    elif filter_type == 'price_asc':", "piece": "elif filter_type == 'alpha_asc':"}
{"function_name": "gen_html_report", "function_define": "    raise SummaryEmpty\n    if not report_template:\n    if report_file:", "piece": "if not report_template:"}
{"function_name": "do_create", "function_define": "    username = input('Username: ')\n    if found_user:\n    print('Username already taken.')", "piece": "if found_user:"}
{"function_name": "do_login", "function_define": "    username = input('Username: ')\n    if not found_user:\n    print('User not found')", "piece": "if not found_user:"}
{"function_name": "registrar", "function_define": "    if form.is_valid():\n    user = form.save(commit=False)\n    user.set_password(password)", "piece": "user = form.save(commit=False)"}
{"function_name": "update_password", "function_define": "    if request.method == 'POST':\n    if form.is_valid():\n    user = form.save()", "piece": "if form.is_valid():"}
{"function_name": "discussao", "function_define": "    quantidade_respostas = {}\n    topicos = Topico.objects.all()\n    for t in topicos:", "piece": "topicos = Topico.objects.all()"}
{"function_name": "criar_topico", "function_define": "    except Discussao.DoesNotExist:\n    if form.is_valid():\n    user = request.user", "piece": "if form.is_valid():"}
{"function_name": "createSimulation", "function_define": "    if directory is not None:\n    if comment is not None:\n    arguments['comment'] = comment", "piece": "if comment is not None:"}
{"function_name": "proportional", "function_define": "    Outputs a numpy array (k,).\n    State, x: numpy array (n,)\n    Time, t: float", "piece": "State, x: numpy array (n,)"}
{"function_name": "get_word_by_id", "function_define": "    id: int\uff0c\u8bcd\u5355\u5143ID\n    Returns:\n    word: \u8bcd\u5355\u5143", "piece": "Returns:"}
{"function_name": "get_lemmas", "function_define": "    Returns:\n    lemmas: str\uff0c\u8be5\u53e5\u5b50\u7684\u5206\u8bcd\u7ed3\u679c\n    lemmas = ''", "piece": "lemmas: str\uff0c\u8be5\u53e5\u5b50\u7684\u5206\u8bcd\u7ed3\u679c"}
{"function_name": "combine_comm", "function_define": "    Returns:\n    newword = words[0].lemma\n    words_combine = []", "piece": "newword = words[0].lemma"}
{"function_name": "judge_postag", "function_define": "    netag: string\uff0c\u8be5\u8bcd\u7684\u8bcd\u6027\u6807\u6ce8\n    Returns:\n    entity_postag = ''", "piece": "Returns:"}
{"function_name": "is_entity", "function_define": "    netag: string\uff0c\u8be5\u8bcd\u7684\u8bcd\u6027\u6807\u6ce8\n    Returns:\n    flag = False", "piece": "Returns:"}
{"function_name": "_remove_hexbytes", "function_define": "    if value is None:\n    if isinstance(value, HexBytes):\n    if isinstance(value, list):", "piece": "if isinstance(value, HexBytes):"}
{"function_name": "_add_hexbytes", "function_define": "    if value is None:\n    if isinstance(value, str):\n    int(value, 16)", "piece": "if isinstance(value, str):"}
{"function_name": "recover_message", "function_define": "    if is_deprecated_mode:\n    with warnings.catch_warnings():\n    warnings.simplefilter('ignore')", "piece": "with warnings.catch_warnings():"}
{"function_name": "publish_cmd", "function_define": "    Sends a command to the pololu\n    yaw = self.yaw\n    if self.doorway:", "piece": "yaw = self.yaw"}
{"function_name": "_init_UI", "function_define": "    font.SetPointSize(20)\n    vbox = wx.BoxSizer(wx.VERTICAL)\n    st1.SetFont(font)", "piece": "vbox = wx.BoxSizer(wx.VERTICAL)"}
{"function_name": "init_question_UI", "function_define": "    for child in self.GetChildren():\n    child.Destroy()\n    if self.worker:", "piece": "child.Destroy()"}
{"function_name": "_request_handle", "function_define": "    print('url', url)\n    print('body', body)\n    print('params', params)", "piece": "print('body', body)"}
{"function_name": "_send_request", "function_define": "    if question_index == 1:\n    occu = str(response['count'])\n    occu = str(0)", "piece": "occu = str(response['count'])"}
{"function_name": "_q1_panel", "function_define": "    print('q1')\n    label.SetFont(self.font)\n    occu_label.SetFont(self.font)", "piece": "label.SetFont(self.font)"}
{"function_name": "_q2_panel", "function_define": "    print('q2')\n    room_label.SetFont(self.font)\n    label.SetFont(self.font)", "piece": "room_label.SetFont(self.font)"}
{"function_name": "_q3_panel", "function_define": "    print('q3')\n    name_label.SetFont(self.font)\n    self._add_result_label(vbox)", "piece": "name_label.SetFont(self.font)"}
{"function_name": "_q4_panel", "function_define": "    print('q4')\n    name_label.SetFont(self.font)\n    label.SetFont(self.font)", "piece": "name_label.SetFont(self.font)"}
{"function_name": "_q5_panel", "function_define": "    print('q5')\n    vbox = wx.BoxSizer(wx.VERTICAL)\n    date_label.SetFont(self.font)", "piece": "vbox = wx.BoxSizer(wx.VERTICAL)"}
{"function_name": "grid_tuple", "function_define": "    lista_tuple = []\n    while c < n:\n    while m < n:", "piece": "while c < n:"}
{"function_name": "list_matrix", "function_define": "    list_a = []\n    while i < num:\n    list_a.append(i)", "piece": "while i < num:"}
{"function_name": "send_report", "function_define": "    server = None\n    if email_template.__len__() > 0:\n    print(email_template[0][1])", "piece": "if email_template.__len__() > 0:"}
{"function_name": "getResult", "function_define": "    cur = con.cursor()\n    cur.execute(q)\n    del email_template[:]", "piece": "cur.execute(q)"}
{"function_name": "api_add_budget", "function_define": "    vat = data['vat']\n    except BusinessException:\n    if order.paid:", "piece": "except BusinessException:"}
{"function_name": "push_arc", "function_define": "    if isinstance(r, (float, int)):\n    self.push(r, r)\n    self.push(r)", "piece": "self.push(r, r)"}
{"function_name": "__createObjects", "function_define": "    pmxModel = self.__model\n    root = self.__rig.rootObject()\n    mmd_root = root.mmd_root", "piece": "root = self.__rig.rootObject()"}
{"function_name": "__importVertices", "function_define": "    self.__importVertexGroup()\n    pmxModel = self.__model\n    pmx_vertices = pmxModel.vertices", "piece": "pmxModel = self.__model"}
{"function_name": "__importTextures", "function_define": "    pmxModel = self.__model\n    self.__textureTable = []\n    for i in pmxModel.textures:", "piece": "self.__textureTable = []"}
{"function_name": "__applyIk", "function_define": "    target_bone = pose_bones[index]\n    ik_bone = ik_target.parent\n    is_valid_ik = False", "piece": "ik_bone = ik_target.parent"}
{"function_name": "__importBones", "function_define": "    pmxModel = self.__model\n    self.__boneTable = pose_bones\n    b_bone = pose_bones[i]", "piece": "self.__boneTable = pose_bones"}
{"function_name": "__importRigids", "function_define": "    start_time = time.time()\n    self.__rigidTable = {}\n    obj.hide = True", "piece": "self.__rigidTable = {}"}
{"function_name": "__importJoints", "function_define": "    start_time = time.time()\n    obj.hide = True\n    MoveObject.set_index(obj, i)", "piece": "obj.hide = True"}
{"function_name": "__importFaces", "function_define": "    pmxModel = self.__model\n    mesh = self.__meshObj.data\n    vertex_map = self.__vertex_map", "piece": "mesh = self.__meshObj.data"}
{"function_name": "__importUVMorphs", "function_define": "    mmd_root = self.__root.mmd_root\n    categories = self.CATEGORIES\n    uv_morph.name = morph.name", "piece": "categories = self.CATEGORIES"}
{"function_name": "remove_doubles", "function_define": "    vertex_map[i] = [tuple(v.co)]\n    if not mesh_only:\n    for m in pmx_model.morphs:", "piece": "if not mesh_only:"}
{"function_name": "test_collide", "function_define": "    v = [-1000, 123, 456]\n    basic.collide(v, [1, 0, 0])\n    assert v == [0, 123, 456]", "piece": "basic.collide(v, [1, 0, 0])"}
{"function_name": "test_collide_2d", "function_define": "    v = [-200, 200]\n    with raises(IndexError):\n    basic.collide(v, [1, 0, 0])", "piece": "with raises(IndexError):"}
{"function_name": "test_friction", "function_define": "    v = [0, 100]\n    assert v == [0, 96]\n    v = [2000, 0]", "piece": "assert v == [0, 96]"}
{"function_name": "organization", "function_define": "    import tator\n    organization_id = response.id\n    yield organization_id", "piece": "organization_id = response.id"}
{"function_name": "algo_project", "function_define": "    import tator\n    project_id = response.id\n    yield project_id", "piece": "project_id = response.id"}
{"function_name": "image_type", "function_define": "    import tator\n    image_type_id = response.id\n    yield image_type_id", "piece": "image_type_id = response.id"}
{"function_name": "image_file", "function_define": "    out_path = '/tmp/test1.jpg'\n    if not os.path.exists(out_path):\n    r.raise_for_status()", "piece": "if not os.path.exists(out_path):"}
{"function_name": "image_set", "function_define": "    out_path = '/tmp/lfw.tgz'\n    extract_path = '/tmp/lfw'\n    if not os.path.exists(out_path):", "piece": "extract_path = '/tmp/lfw'"}
{"function_name": "video_type", "function_define": "    import tator\n    video_type_id = response.id\n    yield video_type_id", "piece": "video_type_id = response.id"}
{"function_name": "multi_type", "function_define": "    import tator\n    multi_type_id = response.id\n    yield multi_type_id", "piece": "multi_type_id = response.id"}
{"function_name": "video_file", "function_define": "    if not os.path.exists(out_path):\n    r.raise_for_status()\n    with open(out_path, 'wb') as f:", "piece": "r.raise_for_status()"}
{"function_name": "video_temp", "function_define": "    import tator\n    print(response.message)\n    while True:", "piece": "print(response.message)"}
{"function_name": "dot_type", "function_define": "    import tator\n    dot_type_id = response.id\n    yield dot_type_id", "piece": "dot_type_id = response.id"}
{"function_name": "line_type", "function_define": "    import tator\n    line_type_id = response.id\n    yield line_type_id", "piece": "line_type_id = response.id"}
{"function_name": "box_type", "function_define": "    import tator\n    box_type_id = response.id\n    yield box_type_id", "piece": "box_type_id = response.id"}
{"function_name": "poly_type", "function_define": "    import tator\n    poly_type_id = response.id\n    yield poly_type_id", "piece": "poly_type_id = response.id"}
{"function_name": "state_type", "function_define": "    import tator\n    state_type_id = response.id\n    yield state_type_id", "piece": "state_type_id = response.id"}
{"function_name": "track_type", "function_define": "    import tator\n    state_type_id = response.id\n    yield state_type_id", "piece": "state_type_id = response.id"}
{"function_name": "collection_type", "function_define": "    import tator\n    state_type_id = response.id\n    yield state_type_id", "piece": "state_type_id = response.id"}
{"function_name": "leaf_type", "function_define": "    import tator\n    leaf_type_id = response.id\n    yield leaf_type_id", "piece": "leaf_type_id = response.id"}
{"function_name": "clone_project", "function_define": "    import tator\n    project_id = response.id\n    yield project_id", "piece": "project_id = response.id"}
{"function_name": "clone_leaf_type", "function_define": "    import tator\n    leaf_type_id = response.id\n    yield leaf_type_id", "piece": "leaf_type_id = response.id"}
{"function_name": "attribute_video", "function_define": "    import tator\n    print(response.message)\n    while True:", "piece": "print(response.message)"}
{"function_name": "_filehash", "function_define": "    hash_md5 = hashlib.md5()\n    with open(path, 'rb') as f:\n    hash_md5.update(chunk)", "piece": "with open(path, 'rb') as f:"}
{"function_name": "calc_cosine_sim", "function_define": "    cos_sim_matrix = []\n    cs_row = []\n    cos_sim_matrix.append(cs_row)", "piece": "cs_row = []"}
{"function_name": "loop_until", "function_define": "    start = time()\n    firstrun = True\n    while True:", "piece": "firstrun = True"}
{"function_name": "on_click", "function_define": "    if self.button.isChecked():\n    self.button.setText('ON')\n    self.button.setText('OFF')", "piece": "self.button.setText('ON')"}
{"function_name": "onoff_clicked", "function_define": "    self.start_flask()\n    self.thread.terminate()\n    print('Flask off!')", "piece": "self.thread.terminate()"}
{"function_name": "install_cert", "function_define": "    import tempfile\n    os.close(fd)\n    if cert_status != 'OK':", "piece": "os.close(fd)"}
{"function_name": "load_cert_chain", "function_define": "    with open(pemfile, 'rb') as f:\n    pem = f.read() + b'\\n'\n    if len(pemblocks) == 0:", "piece": "pem = f.read() + b'\\n'"}
{"function_name": "load_pem", "function_define": "    if pem_type is None:\n    pem_type = pem_type.group(1)\n    if pem_type == b'CERTIFICATE':", "piece": "pem_type = pem_type.group(1)"}
{"function_name": "get_file_list", "function_define": "    for fn in os.listdir(ssl_root):\n    fn = os.path.join(ssl_root, fn)\n    if os.path.isfile(fn):", "piece": "fn = os.path.join(ssl_root, fn)"}
{"function_name": "batch_iter", "function_define": "    data = np.array(data)\n    data_size = len(data)\n    for epoch in range(num_epochs):", "piece": "data_size = len(data)"}
{"function_name": "parse_XML", "function_define": "    xml_tree = ET.parse(xml_file)\n    root = xml_tree.getroot()\n    list_for_dataframe = []", "piece": "root = xml_tree.getroot()"}
{"function_name": "clean_akas", "function_define": "    file = '../input/title_akas.tsv'\n    title_akas = pd.DataFrame()\n    if passed_df is not None:", "piece": "title_akas = pd.DataFrame()"}
{"function_name": "clean_principals", "function_define": "    if c.shape[0] == 0:\n    continue\n    t_count = 0", "piece": "continue"}
{"function_name": "with_postman", "function_define": "    if token is None:\n    token = os.getenv('FB_TOKEN')\n    postman = FBPostman(token)", "piece": "token = os.getenv('FB_TOKEN')"}
{"function_name": "es_primo", "function_define": "    resultado = True\n    for divisor in range(2, Numero):\n    if Numero % divisor == 0:", "piece": "for divisor in range(2, Numero):"}
{"function_name": "countRangeSum", "function_define": "    l = len(nums)\n    for i in range(l):\n    cur_val = nums[i]", "piece": "for i in range(l):"}
{"function_name": "two_of_three", "function_define": "    positive numbers x, y, and z.\n    tmp = max(x, y, z)\n    if tmp == x:", "piece": "tmp = max(x, y, z)"}
{"function_name": "largest_factor", "function_define": "    for x in range(1, n):\n    if n % x == 0:\n    tmp = max(x, tmp)", "piece": "if n % x == 0:"}
{"function_name": "quine_test", "function_define": "    import contextlib, io\n    f = io.StringIO()\n    exec(quine)", "piece": "f = io.StringIO()"}
{"function_name": "test_garbage_in", "function_define": "    c._send_output()\n    response.begin()\n    c.close()", "piece": "response.begin()"}
{"function_name": "_write_out_file", "function_define": "    valid_count = 0\n    for key in result:\n    if result[key] is None:", "piece": "for key in result:"}
{"function_name": "create_article", "function_define": "    Create a test article\n    tags = ['django-rest', 'python']\n    user = User.objects.get()", "piece": "tags = ['django-rest', 'python']"}
{"function_name": "test_get_tagList", "function_define": "    Test api can get a tagList\n    user = self.create_a_user()\n    self.verify_user(user)", "piece": "user = self.create_a_user()"}
{"function_name": "minimumWeight", "function_define": "    best = [float('inf')] * len(adj)\n    best[start] = 0\n    min_heap = [(0, start)]", "piece": "best[start] = 0"}
{"function_name": "open_dataset", "function_define": "    attributes. (default 100)\n    Returns:\n    with open(filename) as f:", "piece": "Returns:"}
{"function_name": "calculateBasis", "function_define": "    x1 = sv.getPosition()\n    v = sv.getVelocity()\n    r = MM.normalizeVector(x1)", "piece": "v = sv.getVelocity()"}
{"function_name": "baseline", "function_define": "    for port in self.inputPorts:\n    az_offset = []\n    csb = []", "piece": "az_offset = []"}
{"function_name": "polynomialFit", "function_define": "    size = len(xRef)\n    if not len(xRef) == len(yRef):\n    raise Exception", "piece": "if not len(xRef) == len(yRef):"}
{"function_name": "addMasterFrame", "function_define": "    self.masterFrame = frame\n    ellipsoid = frame._ellipsoid\n    self.radius = ellipsoid.get_a()", "piece": "ellipsoid = frame._ellipsoid"}
{"function_name": "moveServo", "function_define": "    global servoBlasterFile, i2cBus\n    angle = int(angle)\n    if 12 <= int(servoid) <= 13:", "piece": "angle = int(angle)"}
{"function_name": "initWheels", "function_define": "    global wheelCalibrationMap\n    initWheel('fr', 0, 1)\n    initWheel('fl', 2, 3)", "piece": "initWheel('fr', 0, 1)"}
{"function_name": "loadStorage", "function_define": "    subscribeWheels()\n    storagelib.waitForData()\n    ensureWheelData('fr', 0, 1)", "piece": "storagelib.waitForData()"}
{"function_name": "handleDeg", "function_define": "    if degrees >= 0:\n    wheel['deg'] = degrees\n    servoNumber = wheelCal['servo']", "piece": "wheel['deg'] = degrees"}
{"function_name": "handleSpeed", "function_define": "    servoNumber = wheelCal['servo']\n    if speedStr == '0':\n    if DEBUG_SPEED_VERBOSE:", "piece": "if speedStr == '0':"}
{"function_name": "brakeDance", "function_define": "    yield vals[0]\n    yield vals[1]\n    yield vals[0]", "piece": "yield vals[1]"}
{"function_name": "driveWheel", "function_define": "    wheel = wheelMap[wheelName]\n    speedStr = wheel['speed']\n    if 'speedServoPos' in wheel:", "piece": "speedStr = wheel['speed']"}
{"function_name": "driveWheels", "function_define": "    global pwmIndex\n    driveWheel('fl')\n    driveWheel('fr')", "piece": "driveWheel('fl')"}
{"function_name": "servoTopic", "function_define": "    servo = int(groups[0])\n    moveServo(servo, payload)\n    print('servo')", "piece": "moveServo(servo, payload)"}
{"function_name": "wheelDegTopic", "function_define": "    wheelName = groups[0]\n    if wheelName in wheelMap:\n    wheel = wheelMap[wheelName]", "piece": "if wheelName in wheelMap:"}
{"function_name": "wheelSpeedTopic", "function_define": "    wheelName = groups[0]\n    if wheelName in wheelMap:\n    wheel = wheelMap[wheelName]", "piece": "if wheelName in wheelMap:"}
{"function_name": "wheelsCombined", "function_define": "    if DEBUG_SPEED:\n    wheelCmds = payload.split(' ')\n    for wheelCmd in wheelCmds:", "piece": "wheelCmds = payload.split(' ')"}
{"function_name": "occurences", "function_define": "    if not self.verify_parsed():\n    ending = self.ending_date\n    if repeating_count is not None:", "piece": "ending = self.ending_date"}
{"function_name": "_parse_type", "function_define": "    if tokens[0] == 'day':\n    self.year_day = int(tokens[0])\n    except ValueError:", "piece": "self.year_day = int(tokens[0])"}
{"function_name": "np_l1_loss_diff", "function_define": "    original_shape = np_target.shape\n    elemcnt = np_target.size\n    label = np_target.reshape(-1)", "piece": "elemcnt = np_target.size"}
{"function_name": "fetch_prices", "function_define": "    if DEBUG:\n    data = get_random_prices()\n    data = []", "piece": "data = get_random_prices()"}
{"function_name": "get_subclasses", "function_define": "    c = list(cls.__subclasses__())\n    for sub in c:\n    c.extend(get_subclasses(sub))", "piece": "for sub in c:"}
{"function_name": "faddr_db", "function_define": "    args = parse_args_db()\n    if not rancid.is_valid():\n    logger.error(error)", "piece": "if not rancid.is_valid():"}
{"function_name": "addToSql", "function_define": "    add message data to sql\n    if sticker:\n    elif image:", "piece": "if sticker:"}
{"function_name": "decision", "function_define": "    act_abs_tcp_pose\n    act_rel_tcp_pose\n    act_abs_work_pose", "piece": "act_rel_tcp_pose"}
{"function_name": "sym_hemisphere", "function_define": "    Parameters\n    vertices : (N,3) array-like\n    hemisphere : str, optional", "piece": "vertices : (N,3) array-like"}
{"function_name": "neighbors", "function_define": "    Parameters\n    faces : (F, 3) array-like\n    adj : list", "piece": "faces : (F, 3) array-like"}
{"function_name": "vertinds_faces", "function_define": "    Parameters\n    vertex_inds : sequence\n    length N.  Indices of vertices", "piece": "vertex_inds : sequence"}
{"function_name": "argmax_from_adj", "function_define": "    routine.\n    Parameters\n    vals : (N,) array-like", "piece": "Parameters"}
{"function_name": "tuple_iter", "function_define": "    assert isinstance(triple, tuple)\n    if len(triple) == 0:\n    if len(triple) == 1:", "piece": "if len(triple) == 0:"}
{"function_name": "create_reverse", "function_define": "    rev = MLNTopology()\n    nl = len(self.layers_shape)\n    for li1 in reversed(range(nl)):", "piece": "nl = len(self.layers_shape)"}
{"function_name": "all_details", "function_define": "    payload = []\n    payload.append('connections:')\n    nl = len(self.layers_shape)", "piece": "payload.append('connections:')"}
{"function_name": "add_layer", "function_define": "    numnodes = new_layer_shape\n    assert isinstance(numnodes, int)\n    nl = len(self.layers_shape)", "piece": "assert isinstance(numnodes, int)"}
{"function_name": "iterate_layers", "function_define": "    nl = len(self.layers_shape)\n    for i in range(nl):\n    numel = self.layers_shape[i]", "piece": "for i in range(nl):"}
{"function_name": "connect_all", "function_define": "    coord_next = coords_next[i_next]\n    coord_prev = coords_prev[j_prev]\n    conn_obj = 1", "piece": "coord_prev = coords_prev[j_prev]"}
{"function_name": "coord_map", "function_define": "    assert layer_no >= 0\n    assert isinstance(newdims, int)\n    for ni in range(neurons_count):", "piece": "assert isinstance(newdims, int)"}
{"function_name": "yield_sentences", "function_define": "    inst2ans = self.get_answers()\n    if not text:\n    continue", "piece": "if not text:"}
{"function_name": "test_instances", "function_define": "    instid = instance['id']\n    lemma = instance['lemma']\n    word = instance.text", "piece": "lemma = instance['lemma']"}
{"function_name": "sentences", "function_define": "    instances = {}\n    instid = instance['id']\n    lemma = instance['lemma']", "piece": "instid = instance['id']"}
{"function_name": "create_pymd", "function_define": "    for m, n in mods.items():\n    print('<details>\\n', file=f)\n    s = syms[m]", "piece": "print('<details>\\n', file=f)"}
{"function_name": "create_pystdlib", "function_define": "    for m in mods:\n    print(file=f)\n    for m, n in mods.items():", "piece": "print(file=f)"}
{"function_name": "test_spacy2", "function_define": "    session.install('pytest')\n    session.install('spacy<3.0.0')\n    session.install('-e', '.')", "piece": "session.install('spacy<3.0.0')"}
{"function_name": "test_spacy3", "function_define": "    session.install('pytest')\n    session.install('spacy>=3.0.0')\n    session.install('-e', '.')", "piece": "session.install('spacy>=3.0.0')"}
{"function_name": "setup_vcs", "function_define": "    from ..plugin import VCS\n    vcs = VCS(None)\n    qtbot.addWidget(vcs)", "piece": "vcs = VCS(None)"}
{"function_name": "birthday", "function_define": "    numberDiveded = 0\n    if numberIteration == 0:\n    numberIteration = 1", "piece": "if numberIteration == 0:"}
{"function_name": "walk_dict", "function_define": "    for key, value in node.items():\n    key_parent = [*parent, key]\n    if isinstance(value, dict):", "piece": "key_parent = [*parent, key]"}
{"function_name": "dot_to_dict", "function_define": "    result = {}\n    path = result\n    parts = key.lower().split('.')", "piece": "path = result"}
{"function_name": "mean_swap", "function_define": "    channel = 3\n    f_index = 0\n    slices = [78]", "piece": "f_index = 0"}
{"function_name": "adverserial", "function_define": "    sess = K.get_session()\n    image = test_image[None, ...]\n    gt = gt[None, ...]", "piece": "image = test_image[None, ...]"}
{"function_name": "add_event", "function_define": "    abort(400)\n    if result is None:\n    abort(400)", "piece": "if result is None:"}
{"function_name": "parse_url", "function_define": "    p = urlparse(url)\n    if p.hostname:\n    host = p.hostname", "piece": "if p.hostname:"}
{"function_name": "addResource", "function_define": "    if color in self.mDataIndexMap:\n    self.mId = self.mId + 1\n    element.text = color", "piece": "self.mId = self.mId + 1"}
{"function_name": "weighted_avg", "function_define": "    if len(predicate) == 1:\n    support = np.zeros(dim)\n    for word in predicate:", "piece": "support = np.zeros(dim)"}
{"function_name": "resetEncoders", "function_define": "    self.leftEncoder.reset()\n    self.rightEncoder.reset()\n    self.rearEncoder.reset()", "piece": "self.rightEncoder.reset()"}
{"function_name": "_fix_uris", "function_define": "    if 'URI' in self.observables:\n    if 'fields' in observable:\n    if 'value' in field:", "piece": "if 'fields' in observable:"}
{"function_name": "available_margin", "function_define": "    for asset in self.assets:\n    continue\n    if position is None:", "piece": "continue"}
{"function_name": "read_metadata", "function_define": "    if 'metadata' not in h5_handle:\n    thickness = 0.05\n    thickness = 0.3", "piece": "thickness = 0.05"}
{"function_name": "set_index", "function_define": "    assert index < len(self._images)\n    self.index = index\n    self._raw_data = None", "piece": "self.index = index"}
{"function_name": "_detector", "function_define": "    if self.RECONST_MODE:\n    detector = Detector()\n    root = detector.hierarchy()", "piece": "detector = Detector()"}
{"function_name": "split_panels", "function_define": "    tmp = []\n    for i in range(8):\n    if bool:", "piece": "for i in range(8):"}
{"function_name": "get_raw_data", "function_define": "    self.set_index(index)\n    if self._raw_data is None:\n    if self.RECONST_MODE:", "piece": "if self._raw_data is None:"}
{"function_name": "reconst_image", "function_define": "    det.fill(-1)\n    h5_handle.close()\n    self.active_areas = []", "piece": "h5_handle.close()"}
{"function_name": "get_beam", "function_define": "    self.set_index(index)\n    self._beam_instance = None\n    if self._beam_instance is None:", "piece": "self._beam_instance = None"}
{"function_name": "file_exists", "function_define": "    out, _ = server.run('ls')\n    print(out)\n    files = out.strip().split('\\n')", "piece": "print(out)"}
{"function_name": "list_trades", "function_define": "    List of Trade IDs to retrieve.\n    Returns:\n    status [200]", "piece": "Returns:"}
{"function_name": "get_trade", "function_define": "    Specifier for the Trade\n    Returns:\n    status [200]", "piece": "Returns:"}
{"function_name": "close_trade", "function_define": "    Specifier for the Trade\n    Returns:\n    status [200]", "piece": "Returns:"}
{"function_name": "admin_required", "function_define": "    func: Callabe to wrap.\n    Returns:\n    raise IllegalAccessError", "piece": "Returns:"}
{"function_name": "reverse_number", "function_define": "    while n > 0:\n    r += n % 10\n    n //= 10", "piece": "r += n % 10"}
{"function_name": "add_genome", "function_define": "    for specie in current_genomes:\n    first = specie.get_champion()\n    specie.add_genome(genome)", "piece": "first = specie.get_champion()"}
{"function_name": "remove_genome", "function_define": "    for specie in current_genomes:\n    if genome in specie.genomes:\n    specie.remove_genome(genome)", "piece": "if genome in specie.genomes:"}
{"function_name": "cleanup_species", "function_define": "    for specie in current_genomes:\n    specie.consec_stagnate = 0\n    specie.consec_stagnate += 1", "piece": "specie.consec_stagnate = 0"}
{"function_name": "population_size", "function_define": "    for specie in current_genomes:\n    for _ in specie.genomes:\n    pop += 1", "piece": "for _ in specie.genomes:"}
{"function_name": "batch_remove", "function_define": "    for id in ids:\n    power.role = []\n    db.session.commit()", "piece": "power.role = []"}
{"function_name": "colorGraph", "function_define": "    solution = {}\n    numColors = 0\n    group = []", "piece": "numColors = 0"}
{"function_name": "write_imgf_R_t", "function_define": "    with open(dst, 'w') as f:\n    for i in range(11):\n    if not os.path.isfile(src):", "piece": "for i in range(11):"}
{"function_name": "parse_frames", "function_define": "    ims = f['sim']['states'][:]\n    acts = f['sim']['actions'][:]\n    for step in range(EPLEN):", "piece": "acts = f['sim']['actions'][:]"}
{"function_name": "together", "function_define": "    for i in range(1, 12):\n    if Flag.color[i] == 2:\n    if i == me:", "piece": "if Flag.color[i] == 2:"}
{"function_name": "cencer_callback", "function_define": "    print('hi')\n    print(ch)\n    path = snap.capture_camera()", "piece": "print(ch)"}
{"function_name": "canPlaceFlowers", "function_define": "    l = len(flowerbed)\n    for i in range(1, l + 1):\n    flowerbed[i] = 1", "piece": "for i in range(1, l + 1):"}
{"function_name": "_nested_map", "function_define": "    if isinstance(struct, tuple):\n    if isinstance(struct, list):\n    if isinstance(struct, dict):", "piece": "if isinstance(struct, list):"}
{"function_name": "samplePolygon", "function_define": "    maxX = torch.max(P[:, 0])\n    maxY = torch.max(1 - P[:, 1])\n    minX = torch.min(P[:, 0])", "piece": "maxY = torch.max(1 - P[:, 1])"}
{"function_name": "find_max_meals", "function_define": "    maxx = 0\n    searching = True\n    while searching:", "piece": "searching = True"}
{"function_name": "get_jenv", "function_define": "    import frappe\n    set_filters(jenv)\n    frappe.local.jenv = jenv", "piece": "set_filters(jenv)"}
{"function_name": "get_jloader", "function_define": "    import frappe\n    apps = ['frappe']\n    if not apps:", "piece": "apps = ['frappe']"}
{"function_name": "set_filters", "function_define": "    import frappe\n    jenv.filters['len'] = len\n    jenv.filters['int'] = cint", "piece": "jenv.filters['len'] = len"}
{"function_name": "tile_concat", "function_define": "    if b_list is None:\n    b_list = []\n    for i, b in enumerate(b_list):", "piece": "b_list = []"}
{"function_name": "minmax_norm", "function_define": "    x = tf.to_float(x)\n    min_val = tf.reduce_min(x)\n    max_val = tf.reduce_max(x)", "piece": "min_val = tf.reduce_min(x)"}
{"function_name": "mapper_build", "function_define": "    for i in values:\n    z.update(i)\n    yield (key, z)", "piece": "z.update(i)"}
{"function_name": "walk_s3_bucket", "function_define": "    response = []\n    for file in result['Contents']:\n    response.append(file['Key'])", "piece": "for file in result['Contents']:"}
{"function_name": "Wav_2_Im", "function_define": "    Parameters\n    im : array-like image.\n    Input data.", "piece": "im : array-like image."}
{"function_name": "AreaFraction", "function_define": "    Parameters\n    im : array-like image.\n    Image slice to measure.", "piece": "im : array-like image."}
{"function_name": "ensure_type", "function_define": "    if isinstance(resource, int):\n    ip = IPy.IP(resource)\n    except ValueError:", "piece": "ip = IPy.IP(resource)"}
{"function_name": "allocator", "function_define": "    if self.baseip is None:\n    if not lastip:\n    startip = lastip[0].value", "piece": "if not lastip:"}
{"function_name": "get_ip_manager", "function_define": "    ipman = None\n    if isinstance(ip, Attribute):\n    ipman = ip.entity", "piece": "if isinstance(ip, Attribute):"}
{"function_name": "espelho_linhas", "function_define": "    res = []\n    for linha in lst:\n    linha_res = linha[::-1]", "piece": "for linha in lst:"}
{"function_name": "espelho_colunas", "function_define": "    res = []\n    for linha in lst:\n    res = [linha] + res", "piece": "for linha in lst:"}
{"function_name": "cpu_test", "function_define": "    data = f.readlines()\n    f.close()\n    z.close()", "piece": "f.close()"}
{"function_name": "total_test", "function_define": "    time_init = int(time.time())\n    time_end = time_init + test_time\n    current_time = int(time.time())", "piece": "time_end = time_init + test_time"}
{"function_name": "open_day", "function_define": "    if isinstance(value, list):\n    self._open_day = list()\n    for i in value:", "piece": "self._open_day = list()"}
{"function_name": "internal", "function_define": "    keys = cls.get_base_keys(func)\n    except TypeError:\n    arg_keys = []", "piece": "except TypeError:"}
{"function_name": "parameters_pulse", "function_define": "    delta_ts = 0.02\n    deltas_ha = [0.1]\n    n_discrete_steps = 10", "piece": "deltas_ha = [0.1]"}
{"function_name": "main_task", "function_define": "    print('inside main_task()')\n    x = f(1, 'asdf', True)\n    inc(R, 1)", "piece": "x = f(1, 'asdf', True)"}
{"function_name": "load_jpg", "function_define": "    image_list = []\n    label_list = []\n    print('start loading hr data')", "piece": "label_list = []"}
{"function_name": "torch_cov", "function_define": "    Returns:\n    if m.dim() > 2:\n    if m.dim() < 2:", "piece": "if m.dim() > 2:"}
{"function_name": "overlay_boxes", "function_define": "    Arguments:\n    boxes = predictions.bbox\n    box = box.to(torch.int64)", "piece": "boxes = predictions.bbox"}
{"function_name": "testCommas", "function_define": "    tests = testSpec.split()\n    count = len(tests)\n    while i < count:", "piece": "count = len(tests)"}
{"function_name": "testWordWrap", "function_define": "    if margin == 78:\n    s = wordWrap(msg)\n    s = wordWrap(msg, margin)", "piece": "s = wordWrap(msg)"}
{"function_name": "testHostName", "function_define": "    host = hostName()\n    self.assertIsNotNone(host)\n    self.assertIsInstance(host, str)", "piece": "self.assertIsNotNone(host)"}
{"function_name": "testLocalIP", "function_define": "    ip = localIP()\n    self.assertTrue(ip)\n    self.assertEqual(localIP(), ip)", "piece": "self.assertTrue(ip)"}
{"function_name": "testTimestamp", "function_define": "    d = timestamp()\n    self.assertIsInstance(d, dict)\n    t = time.time()", "piece": "self.assertIsInstance(d, dict)"}
{"function_name": "testUniqueId", "function_define": "    past = set()\n    self.assertEqual(len(i), 32)\n    for c in i:", "piece": "self.assertEqual(len(i), 32)"}
{"function_name": "get_side", "function_define": "    if side is Facing.DOWN:\n    elif side is Facing.UP:\n    elif side is Facing.NORTH:", "piece": "elif side is Facing.UP:"}
{"function_name": "set_components", "function_define": "    self.x = x\n    self.y = y\n    self.z = z", "piece": "self.y = y"}
{"function_name": "run_eval1_m1", "function_define": "    for i in range(100):\n    print(i)\n    for w in enzian.wires.values():", "piece": "print(i)"}
{"function_name": "run_eval1_m2", "function_define": "    for i in range(500):\n    print(i)\n    for w in enzian.wires.values():", "piece": "print(i)"}
{"function_name": "run_eval1_m3", "function_define": "    for i in range(500):\n    print(i)\n    for w in enzian.wires.values():", "piece": "print(i)"}
{"function_name": "run_eval1_m4", "function_define": "    for i in range(500):\n    print(i)\n    for w in enzian.wires.values():", "piece": "print(i)"}
{"function_name": "run_eval2", "function_define": "    time = 0\n    for i in range(3):\n    print(initial)", "piece": "for i in range(3):"}
{"function_name": "run_eval3", "function_define": "    graph = eval(graph_file.read())\n    graph_file.close()\n    for w in conductors | {c}:", "piece": "graph_file.close()"}
{"function_name": "parejas_desnudas", "function_define": "    respuesta = False\n    respuesta_final = []\n    for i in range(0, len(matriz)):", "piece": "respuesta_final = []"}
{"function_name": "procesar_matriz", "function_define": "    respuesta = False\n    matriz_temp = []\n    lista = []", "piece": "matriz_temp = []"}
{"function_name": "get_headers", "function_define": "    if document_type is not None:\n    headers = []\n    for metric in data['metrics']:", "piece": "headers = []"}
{"function_name": "get_author_info", "function_define": "    for directory in dirs:\n    a = a.iloc[:-1, [1, 3, 4, 5, 6]]\n    a = a.mean()", "piece": "a = a.iloc[:-1, [1, 3, 4, 5, 6]]"}
{"function_name": "get_funding_info", "function_define": "    for directory in dirs:\n    serie = pd.Series(index=headers)\n    serie.name = index", "piece": "serie = pd.Series(index=headers)"}
{"function_name": "get_country_info", "function_define": "    for directory in dirs:\n    except FileNotFoundError:\n    result = result.append(serie)", "piece": "except FileNotFoundError:"}
{"function_name": "fix_csv_names", "function_define": "    dirs = os.listdir('Data/Scopus')\n    for directory in dirs:\n    if 'List_of_authors' in file:", "piece": "for directory in dirs:"}
{"function_name": "expand_data", "function_define": "    headers = data.columns\n    for item in items:\n    avg = selected_df.mean(axis=1)", "piece": "for item in items:"}
{"function_name": "write_arff_file", "function_define": "    for header in dataset.columns:\n    column_type = 'NUMERIC'\n    column_type = 'STRING'", "piece": "column_type = 'NUMERIC'"}
{"function_name": "make_assembly", "function_define": "    Returns:\n    import malcolm.assemblies\n    takes_arguments = []", "piece": "import malcolm.assemblies"}
{"function_name": "collection", "function_define": "    ssections = dict()\n    ssections[name] = []\n    for section in section_l:", "piece": "ssections[name] = []"}
{"function_name": "use_context", "function_define": "    set_context(context)\n    finally:\n    del_context(type(context))", "piece": "finally:"}
{"function_name": "filter_queryset", "function_define": "    Provide support for:\n    if computed_fields is not None:\n    cf = computed_fields.get(cfn)", "piece": "if computed_fields is not None:"}
{"function_name": "dictTolist", "function_define": "    result = []\n    result.append(data)\n    result = data", "piece": "result.append(data)"}
{"function_name": "generate_report", "function_define": "    os.mkdir(report_file)\n    with open(html_path, 'w') as f:\n    f.write(html_output)", "piece": "with open(html_path, 'w') as f:"}
{"function_name": "test_SolutionMat", "function_define": "    DELTA = 1e-10\n    solution = SolutionMat()\n    solution.axis_size = [2, 3]", "piece": "solution = SolutionMat()"}
{"function_name": "connectionMade", "function_define": "    for ch in 'ok!':\n    self.transport.write(ch)\n    self.transport.loseConnection()", "piece": "self.transport.write(ch)"}
{"function_name": "plotScatter", "function_define": "    columncount = len(data.columns)\n    columncount = 4\n    while i < columncount - 1:", "piece": "columncount = 4"}
{"function_name": "cliqueDroite", "function_define": "    if Variables.selectionType == 1:\n    if Variables.pion1[1] != 8:\n    Variables.select_case = coord", "piece": "if Variables.pion1[1] != 8:"}
{"function_name": "cliqueGauche", "function_define": "    if Variables.selectionType == 1:\n    if Variables.pion1[1] != 0:\n    Variables.select_case = coord", "piece": "if Variables.pion1[1] != 0:"}
{"function_name": "cliqueBas", "function_define": "    if Variables.selectionType == 1:\n    if Variables.pion1[0] != 8:\n    Variables.select_case = coord", "piece": "if Variables.pion1[0] != 8:"}
{"function_name": "cliqueHaut", "function_define": "    if Variables.selectionType == 1:\n    if Variables.pion1[0] != 0:\n    Variables.select_case = coord", "piece": "if Variables.pion1[0] != 0:"}
{"function_name": "cliqueEntrer", "function_define": "    if Variables.confirmation == 1:\n    if Variables.select_barriere[0]:\n    if Variables.tour == 1:", "piece": "if Variables.select_barriere[0]:"}
{"function_name": "cliqueEspace", "function_define": "    Variables.select_barriere[0] = 1\n    Variables.select_barriere[0] = 0\n    actualiserFenetre()", "piece": "Variables.select_barriere[0] = 0"}
{"function_name": "delta_files", "function_define": "    branch_1.mkdir(parents=True)\n    branch_2.mkdir(parents=True)\n    files = []", "piece": "branch_2.mkdir(parents=True)"}
{"function_name": "verify_auth", "function_define": "    args = parser.parse_args()\n    if token is None:\n    abort(401)", "piece": "if token is None:"}
{"function_name": "read_lines", "function_define": "    lines = []\n    for line in fr.readlines():\n    lines.append(line.strip())", "piece": "for line in fr.readlines():"}
{"function_name": "get_all_wav_path", "function_define": "    wav_list = []\n    for file_name in file_list:\n    wav_list.append(wav_path)", "piece": "for file_name in file_list:"}
{"function_name": "_inverse", "function_define": "    Parameters:\n    bonds: torch.Tensor\n    angles: torch.Tensor", "piece": "bonds: torch.Tensor"}
{"function_name": "check_auth_token", "function_define": "    with log.indent():\n    log.success('ok')\n    sys.exit(1)", "piece": "log.success('ok')"}
{"function_name": "check_system", "function_define": "    log.info('System check')\n    with log.indent():\n    check_api_endpoint(api)", "piece": "with log.indent():"}
{"function_name": "add_roles", "function_define": "    added = 0\n    tenant_name = session.tenant\n    if roles:", "piece": "tenant_name = session.tenant"}
{"function_name": "test_repr_quote", "function_define": "    a = rdflib.Literal('\"')\n    b = eval(repr(a))\n    self.assertEqual(a, b)", "piece": "b = eval(repr(a))"}
{"function_name": "test_backslash", "function_define": "    g = rdflib.Graph()\n    g.parse(data=d, format='xml')\n    a = rdflib.Literal('a\\\\b')", "piece": "g.parse(data=d, format='xml')"}
{"function_name": "testBinding", "function_define": "    class a:\n    self.v = v[3:-3]\n    dtA = rdflib.URIRef('urn:dt:a')", "piece": "self.v = v[3:-3]"}
{"function_name": "log_value", "function_define": "    c = conn.cursor()\n    now = datetime.now()\n    commit(conn)", "piece": "now = datetime.now()"}
{"function_name": "behavior", "function_define": "    behavior = {}\n    behavior.update(base.behavior)\n    behavior.update(vector.behavior)", "piece": "behavior.update(base.behavior)"}
{"function_name": "initspecbtns", "function_define": "    spectbox = QGroupBox()\n    spectvbox = QVBoxLayout()\n    vbox1 = QVBoxLayout()", "piece": "spectvbox = QVBoxLayout()"}
{"function_name": "matrix_exp", "function_define": "    Explanation\n    matrix multiplication:\n    then the initial value problem", "piece": "matrix multiplication:"}
{"function_name": "jordan_chains", "function_define": "    P, blocks = A.jordan_cells()\n    chains = {}\n    for b in blocks:", "piece": "chains = {}"}
{"function_name": "rec_evaluate", "function_define": "    rec_predict = rec_predict.cpu()\n    rec_ranks = rec_ranks.tolist()\n    item_label = item_label.tolist()", "piece": "rec_ranks = rec_ranks.tolist()"}
{"function_name": "step_default", "function_define": "    stage: ['policy', 'rec', 'conv']\n    mode: ['train', 'val', 'test]\n    for k, v in batch.items():", "piece": "mode: ['train', 'val', 'test]"}
{"function_name": "test_recommender", "function_define": "    with torch.no_grad():\n    self.evaluator.reset_metrics()\n    self.evaluator.report()", "piece": "self.evaluator.reset_metrics()"}
{"function_name": "validate_results", "function_define": "    if len(results) <= 0:\n    for result_item in results:\n    if result_item not in source:", "piece": "for result_item in results:"}
{"function_name": "computeArea", "function_define": "    left = max(A, E)\n    right = max(min(C, G), left)\n    bottom = max(B, F)", "piece": "right = max(min(C, G), left)"}
{"function_name": "generate_toolset", "function_define": "    cflags = ' -DSTM32F7_DISCOVERY'\n    cflags = ''\n    if rtems_makefile_path:", "piece": "cflags = ''"}
{"function_name": "generate_file", "function_define": "    libraries = set()\n    output = StringIO.StringIO()\n    w = Writer(output)", "piece": "output = StringIO.StringIO()"}
{"function_name": "__dumpToFile", "function_define": "    dFile = open(filePath, 'w+')\n    dFile.write(json.dumps(toDump))\n    dFile.close()", "piece": "dFile.write(json.dumps(toDump))"}
{"function_name": "__getSearchHref", "function_define": "    href = None\n    while not href:\n    if date in keyList:", "piece": "while not href:"}
{"function_name": "getPlayer", "function_define": "    for href in hrefs:\n    response = requests.get(href)\n    if len(hrefs) == 1:", "piece": "response = requests.get(href)"}
{"function_name": "is_action_in_mid", "function_define": "    h_s, h_e, h_step = head\n    t_s, t_e, t_step = tail\n    if h_step == t_step:", "piece": "t_s, t_e, t_step = tail"}
{"function_name": "rel_group", "function_define": "    head_ent = rel['span1']\n    tail_ent = rel['span2']\n    rel_type = rel['label']", "piece": "tail_ent = rel['span2']"}
{"function_name": "_read_all_blocks", "function_define": "    result = []\n    for i in itertools.count():\n    except Exception:", "piece": "for i in itertools.count():"}
{"function_name": "_store_records", "function_define": "    lines = []\n    if os.path.exists(filename):\n    with open(filename, 'rb') as f:", "piece": "if os.path.exists(filename):"}
{"function_name": "on_connected", "function_define": "    if not raw_balance_records:\n    except Exception as e:\n    if new_record_count:", "piece": "except Exception as e:"}
{"function_name": "run_once", "function_define": "    device = ['usb']\n    for path in device:\n    except IOError as error:", "piece": "for path in device:"}
{"function_name": "restart_client", "function_define": "    while True:\n    if status == 0:\n    print('tinyproxy \u91cd\u542f\u6210\u529f')", "piece": "if status == 0:"}
{"function_name": "get_time_index", "function_define": "    error if this does not exist.\"\"\"\n    if len(t) > 1:\n    elif len(t) == 0:", "piece": "if len(t) > 1:"}
{"function_name": "get_time_indices", "function_define": "    i_times = []\n    if t.date() == time.date():\n    i_times.append(i)", "piece": "if t.date() == time.date():"}
{"function_name": "get_l_time_range", "function_define": "    l_start = time >= start_time\n    l_end = time <= end_time\n    l_time = l_start & l_end", "piece": "l_end = time <= end_time"}
{"function_name": "workhorse", "function_define": "    source = f.read()\n    bytype = defaultdict(set)\n    bytype[type].add(keyword)", "piece": "bytype = defaultdict(set)"}
{"function_name": "planet_geometry", "function_define": "    mu = const.M_sun * const.G\n    r2 = np.sqrt(np.sum(x2 ** 2))\n    drdt = np.sum(x2 * v2) / r2", "piece": "r2 = np.sqrt(np.sum(x2 ** 2))"}
{"function_name": "get_library_info", "function_define": "    is trying to register\"\"\"\n    if status:\n    library_info['status'] = status", "piece": "if status:"}
{"function_name": "process_get", "function_define": "    collections = []\n    libraries = []\n    if library_info:", "piece": "libraries = []"}
{"function_name": "map_states", "function_define": "    if object.admin_state == '0':\n    if type == 'subrack':\n    object.admin_state = 'lock'", "piece": "if type == 'subrack':"}
{"function_name": "user_input", "function_define": "    self._write(prompt)\n    if not allow_history:\n    self.history_enabled = False", "piece": "if not allow_history:"}
{"function_name": "do_scroll", "function_define": "    if args == ():\n    if self._model.smart_mode:\n    elif self._validate(args, str):", "piece": "if self._model.smart_mode:"}
{"function_name": "create_spacers", "function_define": "    spacers = []\n    previous_pos = 0\n    for position in positions:", "piece": "previous_pos = 0"}
{"function_name": "replace_links", "function_define": "    the correct previous version\n    html_str = html.read()\n    updated_html.write(html_str)", "piece": "html_str = html.read()"}
{"function_name": "preserve", "function_define": "    dest = version_name\n    if os.path.exists(dest):\n    print('done')", "piece": "if os.path.exists(dest):"}
{"function_name": "truncate_repr", "function_define": "    if len(items) > 0:\n    items = items[:length]\n    items = str(items).strip('[]')", "piece": "items = items[:length]"}
{"function_name": "chainable", "function_define": "    instance_class = type(instance)\n    if items:\n    elif isinstance(items, list):", "piece": "if items:"}
{"function_name": "dict_to_class", "function_define": "    name = cls.__name__.lower()\n    if name in attrs:\n    value = attrs.pop(name)", "piece": "if name in attrs:"}
{"function_name": "crawl_job", "function_define": "    Job to start spiders.\n    runner = CrawlerRunner(settings)\n    for spider_name in classes:", "piece": "runner = CrawlerRunner(settings)"}
{"function_name": "get_loss", "function_define": "    if loss_name == 'CE':\n    elif loss_name == 'ClusterLoss':\n    criterion = ClusterLoss().cuda()", "piece": "elif loss_name == 'ClusterLoss':"}
{"function_name": "distances", "function_define": "    assert A.dim() == 2\n    if distance_type == 'Euclidean':\n    B = A.unsqueeze(1)", "piece": "if distance_type == 'Euclidean':"}
{"function_name": "state_decoder", "function_define": "    info_time = None\n    delay = None\n    if delay_raw != '':", "piece": "delay = None"}
{"function_name": "get_train", "function_define": "    vs = ViewState(state_value)\n    state = vs.decode()\n    trips = []", "piece": "state = vs.decode()"}
{"function_name": "open_link", "function_define": "    if BROWSER_PATH is None:\n    webbrowser.open(url)\n    Popen([BROWSER_PATH, url])", "piece": "webbrowser.open(url)"}
{"function_name": "open_links", "function_define": "    if BROWSER_PATH is None:\n    for url in urls:\n    webbrowser.open(url)", "piece": "for url in urls:"}
{"function_name": "swap_xy_coords", "function_define": "    if len(coords) == 2:\n    x, y = coords\n    elif len(coords) == 3:", "piece": "x, y = coords"}
{"function_name": "justTwoInitSylls", "function_define": "    beforeThisIndex = 0\n    for vowel1 in word:\n    if vowel1 in 'aeiou':", "piece": "for vowel1 in word:"}
{"function_name": "countVowels", "function_define": "    vowels = 'aeiou'\n    word = word.lower()\n    count = 0", "piece": "word = word.lower()"}
{"function_name": "buildSentence", "function_define": "    sentence = ''\n    translation = ''\n    trackLastLetterOfLastWord = ''", "piece": "translation = ''"}
{"function_name": "get_energy", "function_define": "    mappings.\n    Returns:\n    reaction energy", "piece": "Returns:"}
{"function_name": "read_from_file", "function_define": "    if os.path.exists(file_path):\n    with open(file_path) as file:\n    data = file.readlines()", "piece": "with open(file_path) as file:"}
{"function_name": "format_data", "function_define": "    new_data = []\n    doc = None\n    except Exception as e:", "piece": "doc = None"}
{"function_name": "del_file", "function_define": "    if os.path.exists(file_path):\n    os.remove(file_path)\n    except Exception as e:", "piece": "os.remove(file_path)"}
{"function_name": "pathInZigZagTree", "function_define": "    count = 2 ** label.bit_length()\n    ans = []\n    while label >= 1:", "piece": "ans = []"}
{"function_name": "cpi_array", "function_define": "    cpi_array = numpy.zeros(328)\n    count = 0\n    reader = csv.reader(csvfile)", "piece": "count = 0"}
{"function_name": "myTradingSystem", "function_define": "    nMarkets = CLOSE.shape[1]\n    pos = numpy.zeros(nMarkets)\n    settings['countDays'] += 1", "piece": "pos = numpy.zeros(nMarkets)"}
{"function_name": "mySettings", "function_define": "    settings = {}\n    settings['lookback'] = 21\n    settings['budget'] = 10 ** 6", "piece": "settings['lookback'] = 21"}
{"function_name": "assign_rollno", "function_define": "    for rec in self:\n    number = 1\n    for student in student_ids:", "piece": "number = 1"}
{"function_name": "service_callback", "function_define": "    self.start_service()\n    pid = os.getpid()\n    su = '/sbin/su -c'", "piece": "pid = os.getpid()"}
{"function_name": "compare_models", "function_define": "    seed = 5\n    folds = 5\n    metric = 'roc_auc'", "piece": "folds = 5"}
{"function_name": "test_onnx", "function_define": "    for i in range(0, len(res)):\n    mask_perc = res[i][0]\n    no_mask_perc = res[i][1]", "piece": "mask_perc = res[i][0]"}
{"function_name": "policy_evaluate", "function_define": "    win_cnt = defaultdict(int)\n    threads = []\n    for ii in range(n_games):", "piece": "threads = []"}
{"function_name": "test_load_report", "function_define": "    hosts = report.host_names()\n    for hh in hosts:\n    self.assertNotEqual(0, runtime)", "piece": "for hh in hosts:"}
{"function_name": "get_setting_nts", "function_define": "    an operand with name opname\n    nt_set = set()\n    gi = agi.generator_dict[nt_name]", "piece": "nt_set = set()"}
{"function_name": "get_nt_seq", "function_define": "    we look for in the pattern\n    pattern (e.g. OSZ_NONTERM)\n    example it's OSZ_NONTERM)", "piece": "pattern (e.g. OSZ_NONTERM)"}
{"function_name": "gen_lookup_dict", "function_define": "    gi = agi.generator_dict[nt_name]\n    options = agi.common.options\n    all_values = []", "piece": "options = agi.common.options"}
{"function_name": "get_lufn", "function_define": "    lu_name = '_'.join(nt_seq)\n    if len(flevel) > 0:\n    lu_fn += '_%s' % flevel", "piece": "if len(flevel) > 0:"}
{"function_name": "gen_lookup_array", "function_define": "    if not optype:\n    luf_return_type = optype\n    argnames = {}", "piece": "luf_return_type = optype"}
{"function_name": "dump_lu_arrays", "function_define": "    header_file.start()\n    c_file.start()\n    for array in array_list:", "piece": "c_file.start()"}
{"function_name": "override_mapping", "function_define": "    for row in indices:\n    temp_map = []\n    for base_row in base_indices:", "piece": "temp_map = []"}
{"function_name": "add_op_deciders", "function_define": "    of their legal values.\n    for bt in ipattern.bits:\n    if bt.is_operand_decider():", "piece": "for bt in ipattern.bits:"}
{"function_name": "extend_2d_dict", "function_define": "    for key1 in src:\n    if key1 in dst:\n    dst[key1].update(src[key1])", "piece": "if key1 in dst:"}
{"function_name": "personality_info", "function_define": "    if isinstance(value, list):\n    self._personality_info = list()\n    for i in value:", "piece": "self._personality_info = list()"}
{"function_name": "admincommands", "function_define": "    commands.sort()\n    if len(commands) == 0:\n    elif len(commands) == 1:", "piece": "if len(commands) == 0:"}
{"function_name": "commands", "function_define": "    commands.sort()\n    if len(commands) == 0:\n    elif len(commands) == 1:", "piece": "if len(commands) == 0:"}
{"function_name": "assignParams", "function_define": "    self.parameters = dictionary\n    if '-o ' in dictionary.keys():\n    if '-e ' in dictionary.keys():", "piece": "if '-o ' in dictionary.keys():"}
{"function_name": "setDependencies", "function_define": "    if dependencies:\n    if dependencies[0] != None:\n    line = ''", "piece": "if dependencies[0] != None:"}
{"function_name": "to_dnf_set", "function_define": "    if sympy_dst_expr == sympy_true:\n    cubes_list = []\n    for cube in cubes:", "piece": "cubes_list = []"}
{"function_name": "visit_binary_op", "function_define": "    if binary_op.name == '=':\n    sympy_prop = Symbol(sig.name)\n    if binary_op.name == '*':", "piece": "sympy_prop = Symbol(sig.name)"}
{"function_name": "wordPattern", "function_define": "    words = str.split(' ')\n    d = dict()\n    if value not in d:", "piece": "d = dict()"}
{"function_name": "getDrones", "function_define": "    resp = []\n    for drone in drones:\n    if 'battery' in drone:", "piece": "for drone in drones:"}
{"function_name": "test_write_yaml", "function_define": "    lines = infile.readlines()\n    lines2 = infile.readlines()\n    self.assertEqual(line, line2)", "piece": "lines2 = infile.readlines()"}
{"function_name": "get_normals", "function_define": "    Parameters\n    self : MeshVTK\n    a MeshVTK object", "piece": "self : MeshVTK"}
{"function_name": "reliability", "function_define": "    nbin = 10\n    y_true = y.copy()\n    y_true[y_true == 0] = 4", "piece": "y_true = y.copy()"}
{"function_name": "_coreExecution", "function_define": "    schedd = htcondor.Schedd()\n    conf = self.submitf\n    sys.exit(1)", "piece": "conf = self.submitf"}
{"function_name": "complete_name", "function_define": "    name = self._name\n    if self._features:\n    name = f'{name}[{features}]'", "piece": "if self._features:"}
{"function_name": "open_websocket", "function_define": "    print('message:')\n    print('error:')\n    print(error)", "piece": "print('error:')"}
{"function_name": "run_sauce_test", "function_define": "    testObjectAppStorage = {}\n    unifiedPlatformAppStorage = {}\n    sauceParameters = {}", "piece": "unifiedPlatformAppStorage = {}"}
{"function_name": "get_old_schema", "function_define": "    catalog = Catalog(spark)\n    except BaseException as ex:\n    sys.exit(-1)", "piece": "except BaseException as ex:"}
{"function_name": "get_model_type", "function_define": "    if model_name.lower() == 'sage':\n    if model_name.lower() == 'gat':\n    if model_name.lower() == 'gin':", "piece": "if model_name.lower() == 'gat':"}
{"function_name": "run_driver", "function_define": "    trial_results = []\n    setup_runtime_stats(args)\n    drv.reset()", "piece": "setup_runtime_stats(args)"}
{"function_name": "_get_node_args", "function_define": "    AssertionError\n    Defensive check.\n    args = []", "piece": "Defensive check."}
{"function_name": "visit_Assign", "function_define": "    Parameters\n    Function call.\n    AssertionError", "piece": "Function call."}
{"function_name": "visit_Expr", "function_define": "    Parameters\n    Function call.\n    magic_type: Optional[str] = None", "piece": "Function call."}
{"function_name": "stats_url", "function_define": "    call shorter.\n    addon = context['addon']\n    if metric:", "piece": "addon = context['addon']"}
{"function_name": "to_buckets", "function_define": "    bucket_set = set()\n    for cs in cs_set:\n    bucket_set.add(bucket)", "piece": "for cs in cs_set:"}
{"function_name": "estimate", "function_define": "    Estimate minor contamination.\n    sites = sample.pileup\n    if len(hom_sites) == 0:", "piece": "sites = sample.pileup"}
{"function_name": "wgt_areaave", "function_define": "    lat = indat.lat\n    lon = indat.lon\n    lon = (lon + 180) % 360 - 180", "piece": "lon = indat.lon"}
{"function_name": "axis_features", "function_define": "    diff = 0\n    low = curve[0]\n    d0_low = low", "piece": "low = curve[0]"}
{"function_name": "dendrogram", "function_define": "    Parameters\n    Annotated data matrix.\n    crowdedness", "piece": "Annotated data matrix."}
{"function_name": "hierarchy_pos", "function_define": "    hierarchical layout.\n    G: the graph (must be a tree)\n    the root will be found and used", "piece": "G: the graph (must be a tree)"}
{"function_name": "_hierarchy_pos", "function_define": "    if pos is None:\n    pos[root] = (xcenter, vert_loc)\n    children.remove(parent)", "piece": "pos[root] = (xcenter, vert_loc)"}
{"function_name": "key_scan", "function_define": "    if self.face_img.size > 0:\n    self.img_num += 1\n    if key == ord('s'):", "piece": "self.img_num += 1"}
{"function_name": "face_detecting", "function_define": "    face_location = []\n    all_face_location = []\n    self.face_num = len(faces)", "piece": "all_face_location = []"}
{"function_name": "get_projfile", "function_define": "    import urllib.parse\n    foundpom = ''\n    folderarr = entry.split('/')", "piece": "foundpom = ''"}
{"function_name": "prepare_upgrade", "function_define": "    pom_contents = ''\n    groupid = self.org\n    artifactid = self.name", "piece": "groupid = self.org"}
{"function_name": "finalise_upgrade", "function_define": "    with open('pom.xml', 'a') as fp:\n    except Exception as e:\n    print(e)", "piece": "except Exception as e:"}
{"function_name": "test_fileCopyIn", "function_define": "    createClient.start(ContainerID)\n    time.sleep(1)\n    createClient.stop(ContainerID)", "piece": "time.sleep(1)"}
{"function_name": "test_fileCopyOut", "function_define": "    as a tarfile.\n    createClient.start(ContainerID)\n    time.sleep(1)", "piece": "createClient.start(ContainerID)"}
{"function_name": "init_layer", "function_define": "    if 'conv' in key:\n    elif 'bn' in key:\n    self.state_dict()[key][...] = 1", "piece": "elif 'bn' in key:"}
{"function_name": "feat_conv", "function_define": "    x_list = []\n    block0 = self.resnet.conv1(x)\n    block0 = self.resnet.bn1(block0)", "piece": "block0 = self.resnet.conv1(x)"}
{"function_name": "fit_transform", "function_define": "    Parameters\n    Xs : array-like\n    ys : array-like, optional", "piece": "Xs : array-like"}
{"function_name": "_mk_options", "function_define": "    formatter.start_section(None)\n    formatter.add_text(None)\n    formatter.end_section()", "piece": "formatter.add_text(None)"}
{"function_name": "read_vtk_sowfa", "function_define": "    reader = vtk.vtkPolyDataReader()\n    reader.SetFileName(filename)\n    reader.Update()", "piece": "reader.SetFileName(filename)"}
{"function_name": "read_power_sowfa", "function_define": "    data = np.loadtxt(filename)\n    for idx in range(num_turbines):\n    print(idx)", "piece": "for idx in range(num_turbines):"}
{"function_name": "load_jacobian", "function_define": "    if power_idx is None:\n    power_idx = -1\n    dj_dm = np.load(f)", "piece": "power_idx = -1"}
{"function_name": "block_make", "function_define": "    blank = False\n    for i in block_value:\n    for j in i:", "piece": "for i in block_value:"}
{"function_name": "block_draw", "function_define": "    if value == 0:\n    if value < 99:\n    elif value < 9999:", "piece": "if value < 99:"}
{"function_name": "block_down", "function_define": "    for i in range(4):\n    for j in range(4):\n    if block_value[j][i] != 0:", "piece": "for j in range(4):"}
{"function_name": "block_up", "function_define": "    for i in range(4):\n    for j in range(4):\n    if block_value[j][i] != 0:", "piece": "for j in range(4):"}
{"function_name": "block_left", "function_define": "    for i in block_value:\n    for j in range(4):\n    if i[j] != 0:", "piece": "for j in range(4):"}
{"function_name": "block_right", "function_define": "    for i in block_value:\n    for j in range(4):\n    if i[j] != 0:", "piece": "for j in range(4):"}
{"function_name": "run_sync_command", "function_define": "    out = io.StringIO()\n    args = ['atsync']\n    if command_name:", "piece": "args = ['atsync']"}
{"function_name": "test_full_sync", "function_define": "    run_sync_command()\n    pre_full_sync_counts = {}\n    mocks.wrapper_query_api_calls()", "piece": "pre_full_sync_counts = {}"}
{"function_name": "make_update", "function_define": "    if self.unbiased_update:\n    self.make_unbiased_update()\n    super().make_update()", "piece": "self.make_unbiased_update()"}
{"function_name": "add_custom_loss", "function_define": "    if self.custom_loss:\n    self.loss['ddpg'] = loss.item()\n    if self.norm_closs:", "piece": "self.loss['ddpg'] = loss.item()"}
{"function_name": "compute_pi_loss", "function_define": "    action, _ = self._actor(obs)\n    if self.acm_critic:\n    critic_action = denorm_action", "piece": "if self.acm_critic:"}
{"function_name": "read_profile", "function_define": "    status = 0\n    errors = []\n    data = json.load(f)", "piece": "errors = []"}
{"function_name": "read_searches", "function_define": "    status = 0\n    errors = []\n    data = json.load(f)", "piece": "errors = []"}
{"function_name": "read_connections", "function_define": "    status = 0\n    errors = []\n    data = json.load(f)", "piece": "errors = []"}
{"function_name": "read_media", "function_define": "    status = 0\n    errors = []\n    data = json.load(f)", "piece": "errors = []"}
{"function_name": "read_comments", "function_define": "    status = 0\n    errors = []\n    data = json.load(f)", "piece": "errors = []"}
{"function_name": "read_messages", "function_define": "    GENERATED = False\n    if not os.path.isfile(filename):\n    GENERATED = True", "piece": "if not os.path.isfile(filename):"}
{"function_name": "read_devices", "function_define": "    status = 0\n    errors = []\n    data = json.load(f)", "piece": "errors = []"}
{"function_name": "instaview", "function_define": "    result = 0\n    complete_log = ''\n    if title is None:", "piece": "complete_log = ''"}
{"function_name": "get_avatar", "function_define": "    json_data = json.loads(data)\n    except Exception as e:\n    avatar_url = default", "piece": "except Exception as e:"}
{"function_name": "add_player", "function_define": "    player_id = seat_id\n    new_player.set_seat(player_id)\n    self.emptyseats -= 1", "piece": "new_player.set_seat(player_id)"}
{"function_name": "remove_player", "function_define": "    player_id = seat_id\n    del self._player_dict[player_id]\n    self.emptyseats += 1", "piece": "del self._player_dict[player_id]"}
{"function_name": "_resolve", "function_define": "    self._new_round()\n    self._deal_next_round()\n    if self._debug:", "piece": "self._deal_next_round()"}
{"function_name": "_deal_next_round", "function_define": "    if self._round == 0:\n    self._deal()\n    elif self._round == 1:", "piece": "self._deal()"}
{"function_name": "_post_bigblind", "function_define": "    if self._debug:\n    player.playedthisround = False\n    self._lastraise = self._bigblind", "piece": "player.playedthisround = False"}
{"function_name": "_ready_players", "function_define": "    for p in self._seats:\n    p.sitting_out = False\n    p.playing_hand = True", "piece": "p.sitting_out = False"}
{"function_name": "_new_round", "function_define": "    player.currentbet = 0\n    player.playedthisround = False\n    self._round += 1", "piece": "player.playedthisround = False"}
{"function_name": "_resolve_round", "function_define": "    if len(players) == 1:\n    self._totalpot = 0\n    for player in players:", "piece": "self._totalpot = 0"}
{"function_name": "_reset_game", "function_define": "    playing = 0\n    for player in self._seats:\n    player.reset_hand()", "piece": "for player in self._seats:"}
{"function_name": "get_blocks", "function_define": "    Returns:\n    list: A list of block configs.\n    if num_layers == 50:", "piece": "list: A list of block configs."}
{"function_name": "gen_rows", "function_define": "    import csv\n    for k in self.metadata.sources:\n    fn = self.filesystem.download(k)", "piece": "for k in self.metadata.sources:"}
{"function_name": "build_load", "function_define": "    p.clean()\n    lr = self.init_log_rate(10000)\n    good = 0", "piece": "lr = self.init_log_rate(10000)"}
{"function_name": "mark_contains", "function_define": "    p.clean()\n    with p.inserter() as ins:\n    while True:", "piece": "with p.inserter() as ins:"}
{"function_name": "export_to_string", "function_define": "    bibtex_keys = set()\n    publications = [publications]\n    formatter = BibTeXFormatter()", "piece": "publications = [publications]"}
{"function_name": "integrator_func", "function_define": "    global fd\n    for k, v in tag.items():\n    fd.clear()", "piece": "for k, v in tag.items():"}
{"function_name": "read_sudoku", "function_define": "    n = read_num()\n    if not n:\n    n = read_num()", "piece": "if not n:"}
{"function_name": "_undo_move", "function_define": "    x, y = self._moves.pop()\n    self._board[x][y] = 0\n    self._nfree += 1", "piece": "self._board[x][y] = 0"}
{"function_name": "_make_move", "function_define": "    self._moves.append((x, y))\n    self._board[x][y] = value\n    self._nfree -= 1", "piece": "self._board[x][y] = value"}
{"function_name": "setup_tensors", "function_define": "    df = df.reset_index(drop=True)\n    for col in numerical_columns:\n    del df[col]", "piece": "for col in numerical_columns:"}
{"function_name": "_update_counts", "function_define": "    Update the counters.\n    if mode == MODE_FUN:\n    if 0 in sensi_orders:", "piece": "if mode == MODE_FUN:"}
{"function_name": "_update_trace", "function_define": "    if self.trace is None:\n    if mode == MODE_FUN:\n    res = None", "piece": "if mode == MODE_FUN:"}
{"function_name": "_update_vals", "function_define": "    update_trace().\n    if mode == MODE_FUN:\n    self.fval0 = result[FVAL]", "piece": "if mode == MODE_FUN:"}
{"function_name": "setup_cursor", "function_define": "    rect.x, rect.y = (220, 357)\n    self.cursor.rect = rect\n    self.cursor.state = '1P'", "piece": "self.cursor.rect = rect"}
{"function_name": "update_cursor", "function_define": "    if keys[pygame.K_UP]:\n    self.cursor.state = '1P'\n    self.cursor.rect.y = 357", "piece": "self.cursor.state = '1P'"}
{"function_name": "get_img_url_list", "function_define": "    Keywords arguments:\n    out = StringIO()\n    response.download(arguments)", "piece": "out = StringIO()"}
{"function_name": "get_img_url", "function_define": "    Keywords arguments:\n    if len(used_links_list) > 0:\n    arguments['keywords'] = keywords", "piece": "if len(used_links_list) > 0:"}
{"function_name": "isadiabatic", "function_define": "    au_c / T < \\\\epsilon_t\n    respectively.\n    eps_sp = params['epss']", "piece": "respectively."}
{"function_name": "_BrizardChanEOM", "function_define": "    ppar = Y[3]\n    B = self.field.B(tpos)\n    Bmag = np.sqrt(np.dot(B, B))", "piece": "B = self.field.B(tpos)"}
{"function_name": "getgamma", "function_define": "    mc = self.mass * c\n    mc2 = mc * c\n    pp = self.trajectory[:, 4]", "piece": "mc2 = mc * c"}
{"function_name": "bounceperiod", "function_define": "    Bmag = self.field.magB(tpos)\n    if gamma - 1 < 1e-06:\n    v = p / self.mass", "piece": "if gamma - 1 < 1e-06:"}
{"function_name": "mock_response", "function_define": "    class MockResponse:\n    self.json_data = json_data\n    self.status_code = status_code", "piece": "self.json_data = json_data"}
{"function_name": "cidr_atoi", "function_define": "    Supports IPv4 and IPv6.\n    Returns:\n    v6 = is_v6(cidrAndNetmask[0])", "piece": "Returns:"}
{"function_name": "aHandler", "function_define": "    str_m = '{}'.format(m)\n    d, _ = m\n    assert len(d['random']) == size", "piece": "d, _ = m"}
{"function_name": "bHandler", "function_define": "    print(beta.msgHandler)\n    a = m[1]\n    except zmq.Again:", "piece": "a = m[1]"}
{"function_name": "loadQueries", "function_define": "    queries = []\n    with open(filename, 'r') as f:\n    for l in f:", "piece": "with open(filename, 'r') as f:"}
{"function_name": "getVectors", "function_define": "    bc = BertClient()\n    query = 'who founded microsoft'\n    with open(filename, 'w') as w:", "piece": "query = 'who founded microsoft'"}
{"function_name": "restrict", "function_define": "    Valid combinations are:\n    Returns:\n    a tuple containing", "piece": "Returns:"}
{"function_name": "_basis_generator", "function_define": "    Keyword Args:\n    Returns:\n    the basis built", "piece": "Returns:"}
{"function_name": "get_vector_loop", "function_define": "    self.offset += len(data)\n    if self.offset >= self.size:\n    if self.d is not None:", "piece": "if self.offset >= self.size:"}
{"function_name": "get_vector_data", "function_define": "    if size is None:\n    if self.d is not None:\n    self.d.callback(None)", "piece": "if self.d is not None:"}
{"function_name": "_binary_search", "function_define": "    hi = len(self.frequency_index)\n    while lo < hi:\n    mid = (lo + hi) // 2", "piece": "while lo < hi:"}
{"function_name": "buffer_to_vector", "function_define": "    if buffer_in is None:\n    raise ValueError\n    if len(buffer_in) < 8 + 40:", "piece": "raise ValueError"}
{"function_name": "plan_sweep", "function_define": "    Plan the sweep given the inputs\n    sweep_settings = SweepSettings()\n    sweep_settings.rfe_mode = mode", "piece": "sweep_settings = SweepSettings()"}
{"function_name": "_vrt_receive", "function_define": "    if packet.is_context_packet():\n    geo = {}\n    if field in packet.fields:", "piece": "geo = {}"}
{"function_name": "_copy_data", "function_define": "    srclen = len(src_psd)\n    dstlen = len(dst_psd)\n    if src_fstart < dst_fstart:", "piece": "dstlen = len(dst_psd)"}
{"function_name": "_get_correction", "function_define": "    v_type = v_type.upper()\n    raise ValueError\n    max_buf_size = 16 * 1024", "piece": "raise ValueError"}
{"function_name": "SendData", "function_define": "    print(datapoint)\n    except Exception as e:\n    print('Error: ' + str(e))", "piece": "except Exception as e:"}
{"function_name": "test_get_metaids", "function_define": "    rdf = RDF()\n    metaids = editor.get_metaids()\n    actual = metaids", "piece": "metaids = editor.get_metaids()"}
{"function_name": "test_get_xml", "function_define": "    rdf = RDF()\n    actual = xml_with_metaids\n    print(actual)", "piece": "actual = xml_with_metaids"}
{"function_name": "debounce", "function_define": "    dkey = dtokey(data)\n    now = time.time()\n    with self.nolock:", "piece": "now = time.time()"}
{"function_name": "_sub_thread", "function_define": "    for item in ps.listen():\n    if item['type'] == 'message':\n    data = decode(item['data'])", "piece": "if item['type'] == 'message':"}
{"function_name": "test_client", "function_define": "    event1 = threading.Event()\n    event2 = threading.Event()\n    connected = threading.Event()", "piece": "event2 = threading.Event()"}
{"function_name": "setResult", "function_define": "    if avId and self.enabled:\n    self.power += 1\n    self.d_updateState()", "piece": "self.power += 1"}
{"function_name": "__gameOver", "function_define": "    self.enabled = 0\n    self.time = 0\n    self.d_updateState()", "piece": "self.time = 0"}
{"function_name": "__startNewGame", "function_define": "    self.enabled = 1\n    self.__newGame()\n    self.d_updateState()", "piece": "self.__newGame()"}
{"function_name": "Binary_search", "function_define": "    start = 0\n    end = len(L) - 1\n    while start <= end:", "piece": "end = len(L) - 1"}
{"function_name": "get_current_spec", "function_define": "    curr_spec_entry = None\n    for s in all_spec_entry_list:\n    curr_spec_entry = s", "piece": "for s in all_spec_entry_list:"}
{"function_name": "sn_checker", "function_define": "    if row is None:\n    row = ''\n    if initial_key is None:", "piece": "row = ''"}
{"function_name": "pk_checker", "function_define": "    if row is None:\n    row = ''\n    if initial_key is None:", "piece": "row = ''"}
{"function_name": "get_outfile", "function_define": "    directory as root.\n    if not os.path.exists(out_dir):\n    os.makedirs(out_dir)", "piece": "if not os.path.exists(out_dir):"}
{"function_name": "create_fc_layer", "function_define": "    res.append(nn.Dropout(p=p))\n    if actn:\n    res.append(actn)", "piece": "if actn:"}
{"function_name": "get_fc_layers", "function_define": "    res = []\n    ni = self.nf\n    if self.is_reg:", "piece": "ni = self.nf"}
{"function_name": "save_fc1", "function_define": "    self.get_activations()\n    m = self.models.top_model\n    if self.data.test_dl:", "piece": "m = self.models.top_model"}
{"function_name": "unfreeze", "function_define": "    Returns:\n    self.freeze_to(0)\n    self.precompute = False", "piece": "self.freeze_to(0)"}
{"function_name": "parse_file", "function_define": "    found_start = False\n    found_end = False\n    str_list = []", "piece": "found_end = False"}
{"function_name": "test_LakeIndex", "function_define": "    eq_(len(indices), 1)\n    index = indices[0]\n    eq_(index.get('unique'), False)", "piece": "index = indices[0]"}
{"function_name": "test_WKT", "function_define": "    l = Lake('LINESTRING(0 0,1 1)')\n    session.add(l)\n    session.flush()", "piece": "session.add(l)"}
{"function_name": "test_WKTElement", "function_define": "    session.add(l)\n    session.flush()\n    session.expire(l)", "piece": "session.flush()"}
{"function_name": "test_ST_Buffer", "function_define": "    lake_id = self._create_one()\n    r1 = session.execute(s).scalar()\n    ok_(isinstance(r1, WKBElement))", "piece": "r1 = session.execute(s).scalar()"}
{"function_name": "test_reflection", "function_define": "    from sqlalchemy import Table\n    from geoalchemy2 import Geometry\n    type_ = t.c.geom.type", "piece": "from geoalchemy2 import Geometry"}
{"function_name": "get_learner", "function_define": "    x0 = policy.variable\n    if optimizer == 'adam':\n    elif optimizer == 'natgrad':", "piece": "if optimizer == 'adam':"}
{"function_name": "natural_t", "function_define": "    if horizon < float('Inf'):\n    p0 = gamma ** np.arange(horizon)\n    sump0 = np.sum(p0)", "piece": "p0 = gamma ** np.arange(horizon)"}
{"function_name": "cyclic_t", "function_define": "    cyclic_t._itr = 0\n    assert horizon < float('Inf')\n    p = 1.0 / horizon", "piece": "assert horizon < float('Inf')"}
{"function_name": "geometric_t", "function_define": "    prob = 1 / mean\n    if t_switch > horizon - 1:\n    t_switch = horizon - 1", "piece": "if t_switch > horizon - 1:"}
{"function_name": "update_envelope", "function_define": "    vel: final velocity value\n    continued in the next block.\n    be reached.", "piece": "continued in the next block."}
{"function_name": "samplerate", "function_define": "    global fs, attack, release\n    fs = samplerate\n    voices.clear()", "piece": "fs = samplerate"}
{"function_name": "list_extensions", "function_define": "    List up available extensions.\n    Returns: list of str\n    Names of available extensions.", "piece": "Returns: list of str"}
{"function_name": "getFeatures", "function_define": "    instructionName = None\n    if len(self.parsestring) > 2:\n    instructionName = self.inst_name", "piece": "if len(self.parsestring) > 2:"}
{"function_name": "setFeatures", "function_define": "    self._enabledfeatures = {}\n    for key in features:\n    if key in availableFeatures:", "piece": "for key in features:"}
{"function_name": "resetFeatures", "function_define": "    if self.features is None:\n    for key in self.features:\n    self._setInstructionAssembly()", "piece": "for key in self.features:"}
{"function_name": "get_face_images", "function_define": "    images = list(lazy)\n    if transform:\n    images = torch.stack(images)", "piece": "if transform:"}
{"function_name": "convertAll", "function_define": "    with open(d, 'r') as f:\n    lines = []\n    for line in f.readlines():", "piece": "lines = []"}
{"function_name": "_mode_changed", "function_define": "    if action == self._mode_off:\n    self._stop_session()\n    self._start_session()", "piece": "self._stop_session()"}
{"function_name": "_start_session", "function_define": "    if self._session is not None:\n    self._session = QProcess(self)\n    settings = QSettings()", "piece": "self._session = QProcess(self)"}
{"function_name": "_create_ui", "function_define": "    self._keyboard_ui = KeyboardUI()\n    self._keyboard_ui.show()\n    self._letter_ui = QLabel('-')", "piece": "self._keyboard_ui.show()"}
{"function_name": "findScripts", "function_define": "    parents = node.parents\n    node_type = node.key\n    result = []", "piece": "node_type = node.key"}
{"function_name": "autentica", "function_define": "    if self._senha == senha:\n    print('acesso permitido')\n    print('acesso negado')", "piece": "print('acesso permitido')"}
{"function_name": "cmd_steamid", "function_define": "    s = SteamID(args.s_input)\n    if s.community_url:\n    if s.invite_url:", "piece": "if s.community_url:"}
{"function_name": "testBuildLMSeq", "function_define": "    seq = self._buildDummySequence()\n    for i, ts in enumerate(lm_seq):\n    if i == len(lm_seq) - 1:", "piece": "for i, ts in enumerate(lm_seq):"}
{"function_name": "testBuildSAESeq", "function_define": "    seq = self._buildDummySequence()\n    for i, ts in enumerate(sa_seq):\n    for i in range(len(seq) - 1):", "piece": "for i, ts in enumerate(sa_seq):"}
{"function_name": "testReverseSeq", "function_define": "    seq = self._buildDummySequence()\n    self.assertEqual(ts.token, i)\n    self.assertEqual(ts.label, 0)", "piece": "self.assertEqual(ts.token, i)"}
{"function_name": "testBidirSeq", "function_define": "    seq = self._buildDummySequence()\n    self.assertEqual(ts.label, 0)\n    self.assertEqual(ts.weight, 0.0)", "piece": "self.assertEqual(ts.label, 0)"}
{"function_name": "testLabelGain", "function_define": "    seq = self._buildDummySequence()\n    self.assertEqual(ts.token, i)\n    self.assertEqual(ts.label, 1)", "piece": "self.assertEqual(ts.token, i)"}
{"function_name": "post_json", "function_define": "    if globs.debug_backtrace:\n    query = urlencode(query)\n    resp = urlopen(req)", "piece": "query = urlencode(query)"}
{"function_name": "get_mffc", "function_define": "    if self.use_preemph:\n    signal = self.signal\n    frame_length = frames.shape[1]", "piece": "signal = self.signal"}
{"function_name": "pre_emphasize", "function_define": "    Parameters\n    signal : array (n)\n    Raw audio signal", "piece": "signal : array (n)"}
{"function_name": "split_frames", "function_define": "    Parameters\n    signal : array (n)\n    Signal to be split", "piece": "signal : array (n)"}
{"function_name": "liftering", "function_define": "    Parameters\n    mfcc :  np.array\n    mfcc : np.array", "piece": "mfcc :  np.array"}
{"function_name": "json2list", "function_define": "    source, target = ([], [])\n    if need_preprocess:\n    print('ERROR: ABORT !')", "piece": "if need_preprocess:"}
{"function_name": "reset_parms", "function_define": "    self.slider_dict = {}\n    for param, val in parm.items():\n    label = QLabel(self.param_list)", "piece": "for param, val in parm.items():"}
{"function_name": "start_dialogs", "function_define": "    print(fname)\n    if fname[0]:\n    self.test_case = fname[0]", "piece": "if fname[0]:"}
{"function_name": "sample_plot", "function_define": "    xs = list(range(0, 30))\n    ys = list(range(2, 32))\n    self.ax.clear()", "piece": "ys = list(range(2, 32))"}
{"function_name": "CreateHistogram", "function_define": "    mu = np.mean(data)\n    sigma = np.std(data)\n    p.x_range.end = mu + 4 * sigma", "piece": "sigma = np.std(data)"}
{"function_name": "Logistic", "function_define": "    A = matrix(A)\n    if x is None:\n    e = A * x[:d + 1]", "piece": "if x is None:"}
{"function_name": "look_at_target", "function_define": "    pkt.addressable = True\n    pkt.tagged = True\n    pkt.tagged = False", "piece": "pkt.tagged = True"}
{"function_name": "ultrassom", "function_define": "    acionador.low()\n    utime.sleep_us(2)\n    acionador.high()", "piece": "utime.sleep_us(2)"}
{"function_name": "scrape_product", "function_define": "    if input1 != 'Product Name':\n    grailed_bot.scrape_product()\n    raise PreventUpdate", "piece": "grailed_bot.scrape_product()"}
{"function_name": "seq_reader", "function_define": "    hasher = hashlib.md5()\n    for key, value in db.items():\n    hasher.update(key)", "piece": "for key, value in db.items():"}
{"function_name": "test_1910958", "function_define": "    setup_config(DATA_ROOT=dtmp)\n    with open(logfile, 'w') as fd:\n    fd.write(RABBITMQ_CHARM_LOGS)", "piece": "with open(logfile, 'w') as fd:"}
{"function_name": "test_unit_checks", "function_define": "    setup_config(DATA_ROOT=dtmp)\n    with open(logfile, 'w') as fd:\n    fd.write(UNIT_LEADERSHIP_ERROR)", "piece": "with open(logfile, 'w') as fd:"}
{"function_name": "Group_Teams", "function_define": "    if self.Bot_Kind == 0:\n    elif self.Bot_Kind == 1:\n    Role = '\ud83d\udc96 \u0644\u0627\u0648\u0631 \ud83d\udc96'", "piece": "elif self.Bot_Kind == 1:"}
{"function_name": "Start_Command", "function_define": "    if self.Bot_Kind == 0:\n    elif self.Bot_Kind == 1:\n    elif self.Bot_Kind == 2:", "piece": "elif self.Bot_Kind == 1:"}
{"function_name": "get_levels", "function_define": "    Parameters\n    node : Node\n    starting node", "piece": "node : Node"}
{"function_name": "maxProfit", "function_define": "    n = len(prices)\n    if n == 0:\n    if k > n // 2:", "piece": "if n == 0:"}
{"function_name": "_raise_fail_if", "function_define": "    if not self._is_ok(r):\n    if timeout:\n    j = r.json()['status']", "piece": "if timeout:"}
{"function_name": "__makeRequest", "function_define": "    if request.getToken():\n    timeout = False\n    isGet = False", "piece": "timeout = False"}
{"function_name": "_init_items", "function_define": "    self.full_path = None\n    self.full_path = full_path\n    self._load_items(full_path)", "piece": "self.full_path = full_path"}
{"function_name": "_load_items", "function_define": "    lc = self.udefs_lc\n    lc.DeleteAllItems()\n    f = ft[1]", "piece": "lc.DeleteAllItems()"}
{"function_name": "_chunked_upload", "function_define": "    chunk_count = len(chunks)\n    headers = {}\n    if chunk_number == chunk_count:", "piece": "headers = {}"}
{"function_name": "get_permissions", "function_define": "    query_params = {}\n    if users is not None:\n    if groups is not None:", "piece": "if users is not None:"}
{"function_name": "full_update", "function_define": "    Full update of this group.\n    if members is not None:\n    self._update_attributes(json)", "piece": "if members is not None:"}
{"function_name": "sms_exports", "function_define": "    time.sleep(3)\n    print('Newest:', newest_file)\n    print('Export successful')", "piece": "print('Newest:', newest_file)"}
{"function_name": "manage_forms", "function_define": "    self.switch_to_next_tab()\n    assert normal_form_data != ''\n    print('normal_form has data')", "piece": "assert normal_form_data != ''"}
{"function_name": "wait_for_file", "function_define": "    end_time = 0\n    time.sleep(delay)\n    end_time += delay", "piece": "time.sleep(delay)"}
{"function_name": "put_text", "function_define": "    x, y, w, h = rect\n    font = cv2.FONT_HERSHEY_SIMPLEX\n    font_scale = h / 30.0", "piece": "font = cv2.FONT_HERSHEY_SIMPLEX"}
{"function_name": "score_multi_all", "function_define": "    inputs = []\n    for summary in summaries:\n    grouped_scores = []", "piece": "for summary in summaries:"}
{"function_name": "downloadGsuit", "function_define": "    print('IT IS A Gsuit Document')\n    fh = io.BytesIO()\n    done = False", "piece": "fh = io.BytesIO()"}
{"function_name": "test_what", "function_define": "    ica = ICA(max_iter=1)\n    with pytest.warns(None):\n    ica.fit(raw)", "piece": "with pytest.warns(None):"}
{"function_name": "scatter_corner", "function_define": "    Draw a matrix of scatter plots.\n    Parameters\n    frame : DataFrame", "piece": "Parameters"}
{"function_name": "_label_axis", "function_define": "    if kind == 'x':\n    ax.xaxis.set_visible(True)\n    if rotate:", "piece": "ax.xaxis.set_visible(True)"}
{"function_name": "override_running", "function_define": "    tftp://server/sourcefile\n    i.e. handles yes/no prompts\n    if match_error:", "piece": "i.e. handles yes/no prompts"}
{"function_name": "visualize_reward", "function_define": "    actions = pair_data['action']\n    if summary_writer:\n    if summary_writer:", "piece": "if summary_writer:"}
{"function_name": "_set_labels", "function_define": "    ax.set_xlabel(state_names[0])\n    ax.set_ylabel(state_names[1])\n    if hasattr(ax, 'zaxis'):", "piece": "ax.set_ylabel(state_names[1])"}
{"function_name": "parse_conf", "function_define": "    for i in ['ps1', 'ps2', 'lang']:\n    check = self.add_conf(i)\n    if not check:", "piece": "check = self.add_conf(i)"}
{"function_name": "parse_content", "function_define": "    for i in range(len(self.lines)):\n    base = self.lines[i]\n    if i == 0:", "piece": "base = self.lines[i]"}
{"function_name": "permutations", "function_define": "    yield items\n    while i < len(items):\n    if c[i] < i:", "piece": "while i < len(items):"}
{"function_name": "combinations", "function_define": "    people_count = len(people)\n    if seat_count < 1:\n    seat_count = len(people)", "piece": "if seat_count < 1:"}
{"function_name": "quantize", "function_define": "    xhat = np.zeros(np.size(x))\n    indx = 0\n    for xc in x:", "piece": "indx = 0"}
{"function_name": "check_sum", "function_define": "    Returns:\n    The digest value in bytes.\n    algorithm = hashlib.sha256()", "piece": "The digest value in bytes."}
{"function_name": "sumNumbers", "function_define": "    self.sum = 0\n    if root:\n    pathsum += root.val", "piece": "if root:"}
{"function_name": "delaunay_2d", "function_define": "    on those alone.\n    Parameters\n    progress_bar : bool, optional", "piece": "Parameters"}
{"function_name": "findSubsequences", "function_define": "    ans = []\n    if len(path) >= 2:\n    ans.append(tuple(path + []))", "piece": "if len(path) >= 2:"}
{"function_name": "conf_interval", "function_define": "    Parameters\n    p_names : list, optional\n    prob : float, optional", "piece": "p_names : list, optional"}
{"function_name": "calc_all_ci", "function_define": "    self.prob = prob\n    self.method = method\n    self.ci_values = OrderedDict()", "piece": "self.method = method"}
{"function_name": "_populate_traces", "function_define": "    proc_pool = Pool()\n    arl = []\n    results = []", "piece": "arl = []"}
{"function_name": "_process_ci", "function_define": "    t = self.threshold\n    if self.log:\n    lo = allx[spl(allx) <= t][0]", "piece": "if self.log:"}
{"function_name": "_calc_dchi", "function_define": "    using multiprocessing.\n    para.vary = False\n    para.value = val", "piece": "para.vary = False"}
{"function_name": "calc_dchi", "function_define": "    a given parameter value.\n    if restore:\n    self._reset_vals()", "piece": "if restore:"}
{"function_name": "_calc_threshold", "function_define": "    the given probability.\n    nfree = self.result.nfree\n    nfix = 1", "piece": "nfree = self.result.nfree"}
{"function_name": "plot_all_ci", "function_define": "    num = len(self.p_names)\n    numcols = 3\n    for i in range(num):", "piece": "numcols = 3"}
{"function_name": "_CloudIdentifier", "function_define": "    measurements.\n    Parameters\n    Sensor_Package : str", "piece": "Parameters"}
{"function_name": "_CloudHeights", "function_define": "    IR method.\n    Parameters\n    sensor : int or str", "piece": "Parameters"}
{"function_name": "Superplotter", "function_define": "    if self.verbose:\n    t_begin = time.time()\n    if int(self.sensor_package) < 3:", "piece": "t_begin = time.time()"}
{"function_name": "Tephigram", "function_define": "    Parameters\n    References\n    if self.verbose is True:", "piece": "References"}
{"function_name": "Hypothesis1", "function_define": "    if self.verbose is True:\n    t_begin = time.time()\n    EPCC_Data = EPCC_Importer()", "piece": "t_begin = time.time()"}
{"function_name": "Hypothesis2_v2", "function_define": "    if self.verbose is True:\n    t_begin = time.time()\n    Sensor = self.sensor_package", "piece": "t_begin = time.time()"}
{"function_name": "Hypothesis2", "function_define": "    if self.verbose is True:\n    t_begin = time.time()\n    k = 2500000 / 22468879568420441", "piece": "t_begin = time.time()"}
{"function_name": "Hypothesis3", "function_define": "    if self.verbose is True:\n    t_begin = time.time()\n    EPCC_Data = EPCC_Importer()", "piece": "t_begin = time.time()"}
{"function_name": "RH_Comparison", "function_define": "    if self.verbose is True:\n    t_begin = time.time()\n    gu.backend_changer()", "piece": "t_begin = time.time()"}
{"function_name": "Lightning", "function_define": "    t_begin = time.time()\n    Raw_Data_Path = 'Raw_Data/'\n    Plots_Path = 'Plots/Lightning/'", "piece": "Raw_Data_Path = 'Raw_Data/'"}
{"function_name": "test_invalid_key", "function_define": "    gpu_ctl = None\n    gpu_ctl = GpuCtl(slots='aaaa')\n    self.assertEqual(gpu_ctl, None)", "piece": "gpu_ctl = GpuCtl(slots='aaaa')"}
{"function_name": "test_add_devices", "function_define": "    vendors = ['AMD', 'NVIDIA']\n    gpu_devices = []\n    for pdev in pci_devices:", "piece": "gpu_devices = []"}
{"function_name": "test_over_temp", "function_define": "    slot_name = '1111:11:11.1'\n    pci_id = '1111:1111'\n    self.assertIsNotNone(pdev)", "piece": "pci_id = '1111:1111'"}
{"function_name": "test_interval", "function_define": "    slot_name = '1111:11:11.1'\n    pci_id = '1111:1111'\n    self.assertIsNotNone(pdev)", "piece": "pci_id = '1111:1111'"}
{"function_name": "test_nak_gpu", "function_define": "    slot_name = '1111:11:11.1'\n    pci_id = '1111:1111'\n    self.assertIsNotNone(pdev)", "piece": "pci_id = '1111:1111'"}
{"function_name": "GypCheck", "function_define": "    f = open(GYP_FILE, 'r')\n    gyp = f.read()\n    f.close()", "piece": "gyp = f.read()"}
{"function_name": "makeParam", "function_define": "    if not self.data_dict:\n    self.param = []\n    for dxl_id in self.data_dict:", "piece": "self.param = []"}
{"function_name": "addParam", "function_define": "    if dxl_id in self.data_dict:\n    data = []\n    self.is_param_changed = True", "piece": "data = []"}
{"function_name": "removeParam", "function_define": "    if dxl_id not in self.data_dict:\n    del self.data_dict[dxl_id]\n    self.is_param_changed = True", "piece": "del self.data_dict[dxl_id]"}
{"function_name": "rxPacket", "function_define": "    self.last_result = False\n    result = COMM_RX_FAIL\n    for dxl_id in self.data_dict:", "piece": "result = COMM_RX_FAIL"}
{"function_name": "_find_safe_tau", "function_define": "    if len(self.tau_history) < 2:\n    safe_tau = 0\n    safe_tau = self.tau_history[-2]", "piece": "safe_tau = 0"}
{"function_name": "estimator", "function_define": "    period = x['periodType']\n    time = x['timeToElapse']\n    beds = x['totalHospitalBeds']", "piece": "time = x['timeToElapse']"}
{"function_name": "distChamfer", "function_define": "    x, y = (a, b)\n    xx = torch.pow(x, 2).sum(2)\n    yy = torch.pow(y, 2).sum(2)", "piece": "xx = torch.pow(x, 2).sum(2)"}
{"function_name": "ticket_info", "function_define": "    if isinstance(value, list):\n    self._ticket_info = list()\n    for i in value:", "piece": "self._ticket_info = list()"}
{"function_name": "show_dialog", "function_define": "    if not self.dialog:\n    self.dialog = dialog\n    app.draw_screen()", "piece": "self.dialog = dialog"}
{"function_name": "close_dialog", "function_define": "    if self.dialog:\n    self.dialog = None\n    app.draw_screen()", "piece": "self.dialog = None"}
{"function_name": "Simulate", "function_define": "    Parameters\n    t : float\n    Time to simulate in ms", "piece": "t : float"}
{"function_name": "RunManager", "function_define": "    and  adds a Cleanup() at end.\n    with RunManager():\n    for i in range(10):", "piece": "with RunManager():"}
{"function_name": "SetKernelStatus", "function_define": "    Parameters\n    params : dict\n    Dictionary of parameters to set.", "piece": "params : dict"}
{"function_name": "GetKernelStatus", "function_define": "    Parameters\n    keys : str or list, optional\n    TypeError", "piece": "keys : str or list, optional"}
{"function_name": "get_vim_by_id", "function_define": "    ret['type'] = ret['cloud-type']\n    ret['vimId'] = vim_id\n    ret['cloud_owner'] = cloud_owner", "piece": "ret['vimId'] = vim_id"}
{"function_name": "message_listener", "function_define": "    while True:\n    data = s.recv(1024)\n    if not data:", "piece": "data = s.recv(1024)"}
{"function_name": "filename", "function_define": "    data = None\n    if not self.__filename:\n    for item in self._filenames:", "piece": "if not self.__filename:"}
{"function_name": "full_path", "function_define": "    data = None\n    if not self.__full_path:\n    for item in self._filenames:", "piece": "if not self.__full_path:"}
{"function_name": "test_exit", "function_define": "    model = mock.Mock()\n    word = 'fake'\n    WordRepeated.exit(model, word)", "piece": "word = 'fake'"}
{"function_name": "ShowTable", "function_define": "    dataCount = len(self.Data)\n    if dataCount < 1:\n    dataTableItemList = []", "piece": "if dataCount < 1:"}
{"function_name": "ChangeSelected", "function_define": "    self.selectedIndex = 1\n    self.selectedIndex += amount\n    self.page = 1", "piece": "self.selectedIndex += amount"}
{"function_name": "ChangePage", "function_define": "    elif self.page + amount < 1:\n    self.page = 1\n    self.page += amount", "piece": "self.page = 1"}
{"function_name": "get_everything", "function_define": "    if objects is Gui.game.quests:\n    quest_string = ''\n    for i in range(len(objects)):", "piece": "quest_string = ''"}
{"function_name": "startgame", "function_define": "    Gui.game = Game()\n    self.userCommand.focus()\n    self.health.place(x=200, y=130)", "piece": "self.userCommand.focus()"}
{"function_name": "get_history_up", "function_define": "    keypress = event\n    amt = len(Gui.history)\n    if amt > 0:", "piece": "amt = len(Gui.history)"}
{"function_name": "get_history_down", "function_define": "    keypress = event\n    if len(Gui.history) > 0:\n    Gui.index -= 1", "piece": "if len(Gui.history) > 0:"}
{"function_name": "write_to_outbox", "function_define": "    text = text + '\\n'\n    self.outbox.insert(END, text)\n    self.outbox.see(tkinter.END)", "piece": "self.outbox.insert(END, text)"}
{"function_name": "remove_quest", "function_define": "    arg = arg.capitalize()\n    for item in Gui.game.quests[:]:\n    if arg in item:", "piece": "for item in Gui.game.quests[:]:"}
{"function_name": "on_new_telemetry", "function_define": "    for servo in message.servos:\n    self.voltages.clear()\n    voltage = max(voltages)", "piece": "self.voltages.clear()"}
{"function_name": "get_filter_array", "function_define": "    Parameters\n    filter_name: str\n    filter_size: float", "piece": "filter_name: str"}
{"function_name": "lr_scheduler", "function_define": "    optimizer: Model optimizer.\n    Returns:\n    StepLR: Learning rate scheduler.", "piece": "Returns:"}
{"function_name": "_highlight", "function_define": "    for article in article_list:\n    source = article['_source']\n    highlight = article['highlight']", "piece": "source = article['_source']"}
{"function_name": "notification", "function_define": "    notification.create()\n    notification.reload()\n    yield notification", "piece": "notification.reload()"}
{"function_name": "hmac_key", "function_define": "    yield hmac_key\n    hmac_key.state = 'INACTIVE'\n    hmac_key.update()", "piece": "hmac_key.state = 'INACTIVE'"}
{"function_name": "file_data", "function_define": "    blob.upload_from_string(payload)\n    yield (blob, payload)\n    blob.delete()", "piece": "yield (blob, payload)"}
{"function_name": "browse_post", "function_define": "    if 'groups' not in url:\n    url = url.replace('www.', 'm.')\n    driver.get(url)", "piece": "url = url.replace('www.', 'm.')"}
{"function_name": "battle_record", "function_define": "    if boss_name in record:\n    record[boss_name] += 1\n    record[boss_name] = 1", "piece": "record[boss_name] += 1"}
{"function_name": "line_at_index", "function_define": "    if index < 0:\n    index = index % len(string)\n    end = string.find('\\n', index)", "piece": "index = index % len(string)"}
{"function_name": "split_traceback", "function_define": "    startidx = -1\n    while True:\n    if startidx < 0:", "piece": "while True:"}
{"function_name": "extractArguments", "function_define": "    result = {}\n    arg = arg.decode('ascii')\n    except UnicodeError:", "piece": "arg = arg.decode('ascii')"}
{"function_name": "finishRender", "function_define": "    if result:\n    request.write(result)\n    if not request._disconnected:", "piece": "request.write(result)"}
{"function_name": "insert_handler", "function_define": "    container = self\n    relative = ''\n    m = varmatch.match(component)", "piece": "relative = ''"}
{"function_name": "add_option", "function_define": "    type_handler = None\n    if paramtype == 'enum':\n    if not enumtype:", "piece": "if paramtype == 'enum':"}
{"function_name": "check_arguments", "function_define": "    exception will be raised.\n    result = {}\n    if arg not in arguments:", "piece": "result = {}"}
{"function_name": "init_loadcell", "function_define": "    global hx\n    global nWeightCount\n    nWeightCount = 1", "piece": "global nWeightCount"}
{"function_name": "calc_ref_Unit", "function_define": "    ref_weight_total = 0\n    for i in range(nWeightCount):\n    weight = hx.get_weight(5)", "piece": "for i in range(nWeightCount):"}
{"function_name": "get_loadcell", "function_define": "    global flag\n    global weight_arr\n    if flag == 0:", "piece": "global weight_arr"}
{"function_name": "ref_weight", "function_define": "    global reference_weight\n    reference_weight = tare_weight\n    val = val_to_json(1)", "piece": "reference_weight = tare_weight"}
{"function_name": "json_to_val", "function_define": "    if len(payloadData) == 1:\n    val = payloadData['val']\n    elif len(payloadData) == 2:", "piece": "val = payloadData['val']"}
{"function_name": "val_to_json", "function_define": "    if val2 != None:\n    json_val = {'val': val}\n    json_val = json.dumps(json_val)", "piece": "json_val = {'val': val}"}
{"function_name": "func_set_q", "function_define": "    if f_msg.topic == '/set_buzzer':\n    if buzzer_running == 0:\n    q.put_nowait(f_msg)", "piece": "if buzzer_running == 0:"}
{"function_name": "lcd_init", "function_define": "    lcd_columns = 20\n    lcd_rows = 4\n    lcd.backlight = True", "piece": "lcd_rows = 4"}
{"function_name": "displayState", "function_define": "    print(msg1)\n    if len(str(msg1)) > 5:\n    msg1 = str(msg1)", "piece": "if len(str(msg1)) > 5:"}
{"function_name": "displayTemp", "function_define": "    if len(str(msg1)) > 5:\n    msg1 = str(msg1)\n    msg1 = msg1[0:5]", "piece": "msg1 = str(msg1)"}
{"function_name": "displayLoadcell", "function_define": "    if len(str(msg1)) > 5:\n    msg1 = str(msg1)\n    msg1 = msg1[0:5]", "piece": "msg1 = str(msg1)"}
{"function_name": "displayInputDoor", "function_define": "    if len(str(msg1)) > 1:\n    msg1 = str(msg1)\n    msg1 = msg1[0:1]", "piece": "msg1 = str(msg1)"}
{"function_name": "displaySafeDoor", "function_define": "    if len(str(msg1)) > 1:\n    msg1 = str(msg1)\n    msg1 = msg1[0:1]", "piece": "msg1 = str(msg1)"}
{"function_name": "displayElapsed", "function_define": "    if len(str(msg1)) > 8:\n    msg1 = str(msg1)\n    msg1 = msg1[0:8]", "piece": "msg1 = str(msg1)"}
{"function_name": "displayMsg", "function_define": "    if len(str(msg1)) > 20:\n    msg1 = str(msg1)\n    msg1 = msg1[0:20]", "piece": "msg1 = str(msg1)"}
{"function_name": "mqtt_dequeue", "function_define": "    while True:\n    if not q.empty():\n    recv_msg = q.get(False)", "piece": "if not q.empty():"}
{"function_name": "core_func", "function_define": "    period = 10000\n    while_count = 0\n    while True:", "piece": "while_count = 0"}
{"function_name": "plot_trend_lines", "function_define": "    plotz = len(plot_cols)\n    print(ts_min, ts_max)\n    if type(ft_col) == tuple:", "piece": "print(ts_min, ts_max)"}
{"function_name": "plot_roc", "function_define": "    fig = plt.figure(figsize=(5, 4))\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.plot(fpr, tpr)", "piece": "plt.plot([0, 1], [0, 1], 'k--')"}
{"function_name": "_add_shifts", "function_define": "    if rows == 0:\n    y = np.empty([rows, cols])\n    y[:] = np.nan", "piece": "y = np.empty([rows, cols])"}
{"function_name": "getDeviceGroups", "function_define": "    r_json = getAPIResponse(apiurl)\n    Group_List = []\n    Group_List.append(group)", "piece": "Group_List = []"}
{"function_name": "RemoveGeneric", "function_define": "    if 'Device Type' in Group_List:\n    Group_List.remove('Device Type')\n    if 'Routers' in Group_List:", "piece": "Group_List.remove('Device Type')"}
{"function_name": "getDevices_old", "function_define": "    DeviceFileList = []\n    NumOfGroups = len(Group_List)\n    while i < NumOfGroups:", "piece": "NumOfGroups = len(Group_List)"}
{"function_name": "getDevices", "function_define": "    DeviceList = []\n    for group in Group_List:\n    r_json = getAPIResponse(apiurl)", "piece": "for group in Group_List:"}
{"function_name": "getIPs_old", "function_define": "    output = []\n    for group in Group_List:\n    r_json = response.json()", "piece": "for group in Group_List:"}
{"function_name": "writeDevices", "function_define": "    csvwriter.writerow(header)\n    for line in DeviceFileList:\n    csvwriter.writerow(line)", "piece": "for line in DeviceFileList:"}
{"function_name": "writeIPs", "function_define": "    IPList = open(IP_file, 'w')\n    csvwriter = csv.writer(IPList)\n    IPList.close()", "piece": "csvwriter = csv.writer(IPList)"}
{"function_name": "getAccessPoints", "function_define": "    resp = getAPIResponse(apiurl)\n    AcpList = []\n    counter = 0", "piece": "AcpList = []"}
{"function_name": "finish_episode", "function_define": "    policy_loss = []\n    returns = []\n    for r in policy.rewards:", "piece": "returns = []"}
{"function_name": "reinforce_search", "function_define": "    counter = 0\n    MAX_BUDGET = args.max_budgets\n    CURR_BEST_VALID = 0", "piece": "MAX_BUDGET = args.max_budgets"}
{"function_name": "compute_vector", "function_define": "    with torch.no_grad():\n    data = transforms(data)\n    if is_cuda:", "piece": "data = transforms(data)"}
{"function_name": "get_audio_url", "function_define": "    if word is None:\n    word = word.lower()\n    if not language_abbr:", "piece": "word = word.lower()"}
{"function_name": "showReturned", "function_define": "    iter.forward_to_line_end()\n    self.write('\\n' + text)\n    if text:", "piece": "self.write('\\n' + text)"}
{"function_name": "raw_input", "function_define": "    if self.interrupt:\n    self.interrupt = False\n    raise KeyboardInterrupt", "piece": "self.interrupt = False"}
{"function_name": "_processLine", "function_define": "    self.history_pos = 0\n    self.execute()\n    rv = self.cout.getvalue()", "piece": "self.execute()"}
{"function_name": "load_new_episode", "function_define": "    args = self.args\n    if not args.testset:\n    self.eps_data = json.load(f)", "piece": "if not args.testset:"}
{"function_name": "get_metrics", "function_define": "    Returns:\n    if dist == 0.0:\n    success = 1", "piece": "if dist == 0.0:"}
{"function_name": "get_done", "function_define": "    done = True\n    elif self.stopped:\n    done = True", "piece": "elif self.stopped:"}
{"function_name": "get_sim_location", "function_define": "    x = -agent_state.position[2]\n    y = -agent_state.position[0]\n    if o > np.pi:", "piece": "y = -agent_state.position[0]"}
{"function_name": "on_start_clicked", "function_define": "    dpos = []\n    if cb.isChecked():\n    dpos.append(dp)", "piece": "if cb.isChecked():"}
{"function_name": "execScript", "function_define": "    action = 'queue'\n    qwindow.buttonBox.setFocus()\n    result = [0]", "piece": "qwindow.buttonBox.setFocus()"}
{"function_name": "get_extra_info", "function_define": "    Parameters\n    name        : str\n    common_key  : str", "piece": "name        : str"}
{"function_name": "check_extra_info", "function_define": "    Parameters\n    postfix     : str\n    show_info   : bool", "piece": "postfix     : str"}
{"function_name": "show_extra_info", "function_define": "    Parameters\n    name        : str\n    postfix     : str", "piece": "name        : str"}
{"function_name": "clear_extra_info", "function_define": "    Parameters\n    postfix     : str\n    ui = self.parent.ui", "piece": "postfix     : str"}
{"function_name": "sifo_info", "function_define": "    self.hide_unused_combo_box()\n    self.set_income()\n    self.set_yearly_income()", "piece": "self.set_income()"}
{"function_name": "clear_all", "function_define": "    for combo_box in range(1, 8):\n    self.clear_results()\n    self.data = {}", "piece": "self.clear_results()"}
{"function_name": "parse_pose", "function_define": "    if len(param) == 62:\n    Ps = param[:12].reshape(3, -1)\n    s, R, t3d = P2sRt(Ps)", "piece": "Ps = param[:12].reshape(3, -1)"}
{"function_name": "matrix2angle", "function_define": "    x = asin(R[2, 0])\n    if R[2, 0] == -1:\n    x = np.pi / 2", "piece": "if R[2, 0] == -1:"}
{"function_name": "extract_param", "function_define": "    model = SynergyNet(args)\n    cudnn.benchmark = True\n    model.eval()", "piece": "cudnn.benchmark = True"}
{"function_name": "benchmark_FOE", "function_define": "    for i in range(params.shape[0]):\n    if i in skip_indices:\n    continue", "piece": "if i in skip_indices:"}
{"function_name": "test_gamma_vs_ks", "function_define": "    mf = pdft.KRKS(cell)\n    ek = mf.kernel()\n    scell.gs = [12, 12, 36]", "piece": "ek = mf.kernel()"}
{"function_name": "nextAppend", "function_define": "    self.rally = 0\n    self.arrayHitPlayer.append([])\n    self.arrayBounceHit.append([])", "piece": "self.arrayHitPlayer.append([])"}
{"function_name": "calcScore", "function_define": "    p.append(0)\n    p.append(0)\n    g.append(0)", "piece": "p.append(0)"}
{"function_name": "calcScore2", "function_define": "    self.arrayScore[i] = nextScore\n    self.arrayGame[i] = nextGame\n    self.arraySet[i] = nextSet", "piece": "self.arrayGame[i] = nextGame"}
{"function_name": "convert_score", "function_define": "    Parameters\n    gamePointA:int\n    gamePointB:int", "piece": "gamePointA:int"}
{"function_name": "convert_set", "function_define": "    Parameters\n    gameA:int\n    gameB:int", "piece": "gameA:int"}
{"function_name": "score2count", "function_define": "    convert string score to count\n    Parameters\n    score:string", "piece": "Parameters"}
{"function_name": "get_winner", "function_define": "    convert string score to count\n    Parameters\n    count_a:int", "piece": "Parameters"}
{"function_name": "get_winner_list", "function_define": "    Parameters\n    array_score:list[\"0-0\",\"0-15\"]\n    winner_array:list[int,int]", "piece": "array_score:list[\"0-0\",\"0-15\"]"}
{"function_name": "delete_after_end", "function_define": "    array = []\n    array.append(i)\n    self.arrayHitPlayer[num].pop(i)", "piece": "array.append(i)"}
{"function_name": "plot_map", "function_define": "    Parameters\n    Region to show, France or US.\n    ax: plt.Axes", "piece": "Region to show, France or US."}
{"function_name": "sub_account", "function_define": "    method = 'delSubAccount'\n    parameters = {}\n    if account_id:", "piece": "parameters = {}"}
{"function_name": "replica_check", "function_define": "    if self.overwrite:\n    for fname in fnames:\n    if self.name in fname:", "piece": "for fname in fnames:"}
{"function_name": "reload_data", "function_define": "    import feather\n    if fnames:\n    self.dataframe = dataset", "piece": "if fnames:"}
{"function_name": "named_graph", "function_define": "    g = nx.DiGraph()\n    elif directed and multigraph:\n    g = nx.MultiDiGraph()", "piece": "elif directed and multigraph:"}
{"function_name": "prime_generator", "function_define": "    n: int = 2\n    primes: set = set()\n    while True:", "piece": "primes: set = set()"}
{"function_name": "update_label", "function_define": "    self.label.setText(res)\n    for box in self.class_boxes:\n    box.update_values(self.subject)", "piece": "for box in self.class_boxes:"}
{"function_name": "change_handler", "function_define": "    print(class_name)\n    print(class_value)\n    if class_value == '--Removed--':", "piece": "print(class_value)"}
{"function_name": "test_tune_search", "function_define": "    overlap_loss = 0.1\n    next_sequence_prediction = 0.1\n    phenotype_prediction = 0.1", "piece": "next_sequence_prediction = 0.1"}
{"function_name": "makedirs", "function_define": "    if not os.path.exists(path):\n    os.mkdir(path)\n    os.chmod(path, mode=mode)", "piece": "os.mkdir(path)"}
{"function_name": "get_write_lock", "function_define": "    LOGGER.debug('Creating lock...')\n    if force:\n    os.remove(self.write_lock)", "piece": "if force:"}
{"function_name": "get_md_value", "function_define": "    if not os.path.exists(md_file):\n    if delete:\n    os.remove(md_file)", "piece": "if delete:"}
{"function_name": "set_md_value", "function_define": "    if os.path.exists(md_file):\n    self.catalog(md_type)\n    SIZE.write(str(int(value)))", "piece": "self.catalog(md_type)"}
{"function_name": "list_assets", "function_define": "    asset_list = list()\n    for asset_line in assets:\n    asset_line = asset_line.strip()", "piece": "for asset_line in assets:"}
{"function_name": "CheckUpToDate", "function_define": "    if RemoteUrl.startswith('http'):\n    if Python3:\n    f = urlopen(RemoteUrl)", "piece": "if Python3:"}
{"function_name": "CheckVersion", "function_define": "    if LocalVersion is None:\n    if not Url.endswith('/'):\n    Url += '/'", "piece": "if not Url.endswith('/'):"}
{"function_name": "read_sample_win", "function_define": "    Read in a sample window.\n    if duration is None:\n    num_samples = int(duration * FS)", "piece": "if duration is None:"}
{"function_name": "sample_masking", "function_define": "    num_changes = 0\n    candidates = []\n    for token in tokens:", "piece": "candidates = []"}
{"function_name": "_local_to_s3", "function_define": "    s3 = S3Hook()\n    logging.info('aws_default')\n    logging.info('emr_default')", "piece": "logging.info('aws_default')"}
{"function_name": "get_instance", "function_define": "    Get instance of class `LogUtil`.\n    Returns:\n    if LogUtil._instance is None:", "piece": "Returns:"}
{"function_name": "_validate_url", "function_define": "    p = urlparse.urlsplit(url)\n    if p.scheme != 'http':\n    host = p.netloc", "piece": "if p.scheme != 'http':"}
{"function_name": "encodeNRZS", "function_define": "    NRZ-S encode the binary data\n    outData[0] = bitData[0]\n    if bit == 1:", "piece": "outData[0] = bitData[0]"}
{"function_name": "get_GMSK_packet", "function_define": "    returns standard GMSK packet\n    if offset_freq is None:\n    offset_freq = fs / 4", "piece": "if offset_freq is None:"}
{"function_name": "get_BPSK_packet", "function_define": "    returns standard BPSK packet\n    if offset_freq is None:\n    offset_freq = fs / 4", "piece": "if offset_freq is None:"}
{"function_name": "gpu_handles", "function_define": "    if self.__gpus is None:\n    gpus = NV_ENUM_GPUS()\n    gpuCount = ctypes.c_int(-1)", "piece": "gpus = NV_ENUM_GPUS()"}
{"function_name": "get_gpu_by_bus", "function_define": "    for gpu in self.gpu_handles:\n    devBusId = ctypes.c_uint32(0)\n    devSlotId = ctypes.c_uint32(0)", "piece": "devBusId = ctypes.c_uint32(0)"}
{"function_name": "set_cooler_duty", "function_define": "    duty = max(min(duty, 100), 0)\n    levels = NvCoolerLevels()\n    levels.levels[i].level = duty", "piece": "levels = NvCoolerLevels()"}
{"function_name": "get_memory_info", "function_define": "    value = klass()\n    except NvError as ex:\n    continue", "piece": "except NvError as ex:"}
{"function_name": "parse_top_level", "function_define": "    contacts = []\n    while not self.eos:\n    contact = self.parse_contact()", "piece": "while not self.eos:"}
{"function_name": "parse_contact", "function_define": "    self.parse_whitespace()\n    name = self.parse_name()\n    if not name:", "piece": "name = self.parse_name()"}
{"function_name": "parse_whitespace", "function_define": "    a space, tab, newline.\n    while True:\n    char = self.get_char()", "piece": "while True:"}
{"function_name": "parse_name", "function_define": "    name = []\n    while True:\n    if part == '':", "piece": "while True:"}
{"function_name": "parse_email", "function_define": "    email = []\n    if not name:\n    email.append(name)", "piece": "if not name:"}
{"function_name": "onendday", "function_define": "    if self.deathwish:\n    self.player.kill()\n    self.chaos = True", "piece": "self.player.kill()"}
{"function_name": "text_to_instance", "function_define": "    fields: Dict[str, Field] = {}\n    fields['tokens'] = sequence\n    if tags:", "piece": "fields['tokens'] = sequence"}
{"function_name": "gen_feat_worker", "function_define": "    tup (tuple):\n    Returns:\n    tuple: (None, kpts, vecs)", "piece": "Returns:"}
{"function_name": "visualization", "function_define": "    from random import randint\n    length = 10\n    target = randint(0, length - 1)", "piece": "length = 10"}
{"function_name": "_coverage_inner", "function_define": "    M = p.n_primitives\n    B, N, _ = X.shape\n    translations = p.translations_r", "piece": "B, N, _ = X.shape"}
{"function_name": "_fit_shape_inner", "function_define": "    M = pr.n_primitives\n    B, N, _ = X.shape\n    translations = pr.translations_r", "piece": "B, N, _ = X.shape"}
{"function_name": "setup_method", "function_define": "    self.browser.maximize_window()\n    self.browser.get(URL)\n    login_page.signin_button.click()", "piece": "self.browser.get(URL)"}
{"function_name": "AnalyzeClient", "function_define": "    Returns:\n    keywords = [client_id]\n    if keyword:", "piece": "keywords = [client_id]"}
{"function_name": "TryAppendIP", "function_define": "    TryAppend(ip)\n    octets = str(ip).split('.')\n    if len(octets) == 4:", "piece": "octets = str(ip).split('.')"}
{"function_name": "test_filter", "function_define": "    ds = pyg_to_dicts(pyg_dataset)\n    thresh = 90\n    orig_dataset_size = len(dataset)", "piece": "thresh = 90"}
{"function_name": "clear_scene", "function_define": "    self.clear_selected_object()\n    self.clear_spline_gizmo()\n    self.effect_manager.clear()", "piece": "self.clear_spline_gizmo()"}
{"function_name": "end_open_scene", "function_define": "    self.update_scene(0.0)\n    self.renderer.reset_renderer()\n    for camera in self.cameras:", "piece": "self.renderer.reset_renderer()"}
{"function_name": "new_scene", "function_define": "    self.begin_open_scene()\n    self.ocean = self.add_ocean()\n    self.end_open_scene()", "piece": "self.ocean = self.add_ocean()"}
{"function_name": "open_scene", "function_define": "    self.begin_open_scene()\n    for camera_data in camera_datas:\n    self.add_camera(**camera_data)", "piece": "for camera_data in camera_datas:"}
{"function_name": "get_object_list", "function_define": "    if Camera == object_type:\n    elif PointLight == object_type:\n    elif LightProbe == object_type:", "piece": "elif PointLight == object_type:"}
{"function_name": "regist_object", "function_define": "    object_type = type(obj)\n    if object_list is not None:\n    object_list.append(obj)", "piece": "if object_list is not None:"}
{"function_name": "add_camera", "function_define": "    camera_data['name'] = name\n    camera.initialize()\n    self.regist_object(camera)", "piece": "camera.initialize()"}
{"function_name": "add_main_light", "function_define": "    light_data['name'] = name\n    light = MainLight(**light_data)\n    self.regist_object(light)", "piece": "light = MainLight(**light_data)"}
{"function_name": "add_light", "function_define": "    light_data['name'] = name\n    light = PointLight(**light_data)\n    self.regist_object(light)", "piece": "light = PointLight(**light_data)"}
{"function_name": "add_spline", "function_define": "    spline_data['name'] = name\n    spline = Spline3D(**spline_data)\n    self.regist_object(spline)", "piece": "spline = Spline3D(**spline_data)"}
{"function_name": "add_effect", "function_define": "    effect_data['name'] = name\n    effect = Effect(**effect_data)\n    self.regist_object(effect)", "piece": "effect = Effect(**effect_data)"}
{"function_name": "add_ocean", "function_define": "    ocean = Ocean(**object_data)\n    ocean.initialize()\n    self.regist_object(ocean)", "piece": "ocean.initialize()"}
{"function_name": "add_terrain", "function_define": "    terrain = Terrain(**object_data)\n    terrain.initialize()\n    self.regist_object(terrain)", "piece": "terrain.initialize()"}
{"function_name": "add_object", "function_define": "    model = object_data.get('model')\n    if model:\n    objType = GetClassName(model)", "piece": "if model:"}
{"function_name": "add_collision", "function_define": "    if mesh is not None:\n    collision_data['name'] = name\n    collision_data['model'] = mesh", "piece": "collision_data['name'] = name"}
{"function_name": "clear_objects", "function_define": "    self.cameras = []\n    self.point_lights = []\n    self.collision_actors = []", "piece": "self.point_lights = []"}
{"function_name": "action_object", "function_define": "    if obj is not None:\n    object_type = type(obj)\n    if LightProbe == object_type:", "piece": "object_type = type(obj)"}
{"function_name": "update_scene", "function_define": "    for camera in self.cameras:\n    camera.update()\n    if self.main_light is not None:", "piece": "camera.update()"}
{"function_name": "mutacion", "function_define": "    interc_1 = indiv[alea_1]\n    interc_2 = indiv[alea_2]\n    indiv[alea_1] = interc_2", "piece": "interc_2 = indiv[alea_2]"}
{"function_name": "evalError", "function_define": "    if size == 0:\n    self.error = DataVector(size)\n    self.error.sub(data.getValues())", "piece": "self.error = DataVector(size)"}
{"function_name": "create_batch_v6", "function_define": "    batch = Batch()\n    batch.title = title\n    batch.description = description", "piece": "batch.title = title"}
{"function_name": "edit_batch_v6", "function_define": "    schemas.\n    update_fields = {}\n    if title is not None:", "piece": "update_fields = {}"}
{"function_name": "get_batches_v6", "function_define": "    batches = Batch.objects.all()\n    if started:\n    if ended:", "piece": "if started:"}
{"function_name": "getPages", "function_define": "    pages = dict()\n    links = allPages.findAll('li')\n    for link in links:", "piece": "links = allPages.findAll('li')"}
{"function_name": "test_query", "function_define": "    yield from viewiter.future\n    count = len(list(viewiter))\n    self.assertEqual(count, 10)", "piece": "count = len(list(viewiter))"}
{"function_name": "update_mappings", "function_define": "    with a nicer symbol.\n    to have length 1.\n    self.mappings = mappings", "piece": "to have length 1."}
{"function_name": "divisors", "function_define": "    solutions = []\n    number = int(number)\n    if number % i == 0:", "piece": "number = int(number)"}
{"function_name": "expand_mode", "function_define": "    input_list = mode_code.strip()\n    mode_output = []\n    if '1' in input_list:", "piece": "mode_output = []"}
{"function_name": "conjgrad", "function_define": "    r = b - A @ x\n    rsold = np.sum(r * r, 0)\n    for i in range(T):", "piece": "rsold = np.sum(r * r, 0)"}
{"function_name": "_calculate_graph", "function_define": "    ids_by_path = {None: None}\n    for node in nodes:\n    parts = [node.name]", "piece": "for node in nodes:"}
{"function_name": "_assert_node", "function_define": "    if k == 'errors':\n    continue\n    actual = getattr(node, k)", "piece": "continue"}
{"function_name": "assert_nodes", "function_define": "    nodes = manifest.nodes\n    if assert_length:\n    errors = []", "piece": "if assert_length:"}
{"function_name": "setup_manifest", "function_define": "    if path.endswith('.py'):\n    abspath = root / path\n    if len(Path(path).parts) > 1:", "piece": "abspath = root / path"}
{"function_name": "sync_notes", "function_define": "    for note in notes:\n    except Exception as e:\n    debug(e, err=True)", "piece": "except Exception as e:"}
{"function_name": "log_job_status", "function_define": "    set_redis_job_status_pool()\n    global JOB_STATUS_POOL\n    job['resource'] = 'job'", "piece": "global JOB_STATUS_POOL"}
{"function_name": "log_job_info", "function_define": "    set_redis_job_info_pool()\n    global JOB_INFO_POOL\n    filtered_info = {}", "piece": "global JOB_INFO_POOL"}
{"function_name": "log_custom_event", "function_define": "    set_redis_event_status_pool()\n    global EVENT_STATUS_POOL\n    uuid = str(uuid4())", "piece": "global EVENT_STATUS_POOL"}
{"function_name": "log_prov_es", "function_define": "    doc = ProvEsDocument()\n    bndl = None\n    pd = json.loads(doc.serialize())", "piece": "bndl = None"}
{"function_name": "_start_feeding", "function_define": "    with observer_lock:\n    except Exception as exc:\n    with observer_lock:", "piece": "except Exception as exc:"}
{"function_name": "_stop_feeding", "function_define": "    with observer_lock:\n    if not feed_done.is_set():\n    feed_done.set()", "piece": "if not feed_done.is_set():"}
{"function_name": "_feed_loop", "function_define": "    while True:\n    if stop_feeding.is_set():\n    if connection_observer.done():", "piece": "if stop_feeding.is_set():"}
{"function_name": "silentremove", "function_define": "    os.remove(filename)\n    except OSError as e:\n    if e.errno != errno.ENOENT:", "piece": "except OSError as e:"}
{"function_name": "processShotFile", "function_define": "    numFrames = 0\n    cutList = []\n    for cnt, line in enumerate(fp):", "piece": "cutList = []"}
{"function_name": "test_fasta_re", "function_define": "    count = 0\n    count += 1\n    assert count == len(file_data)", "piece": "count += 1"}
{"function_name": "_count_re_hits", "function_define": "    count = 0\n    with open(file_name) as INF:\n    for line in INF:", "piece": "with open(file_name) as INF:"}
{"function_name": "encoding_feature", "function_define": "    print('k: ', file_key)\n    keys = ['file']\n    for key in keys:", "piece": "keys = ['file']"}
{"function_name": "test_2D_opt_EGO", "function_define": "    outputs = ['y']\n    template_dir = 'template_dir/'\n    output_scalers = [1.0]", "piece": "template_dir = 'template_dir/'"}
{"function_name": "test_constraint", "function_define": "    outputs = ['y', 'con']\n    template_dir = 'template_dir/'\n    output_scalers = [1.0, 1.0]", "piece": "template_dir = 'template_dir/'"}
{"function_name": "find_xlf", "function_define": "    fc = conf.cmd_to_list(fc)\n    conf.get_xlf_version(fc)\n    conf.env.FC_NAME = 'XLF'", "piece": "conf.get_xlf_version(fc)"}
{"function_name": "get_xlf_version", "function_define": "    cmd = fc + ['-qversion']\n    except Errors.WafError:\n    match = version_re(out or err)", "piece": "except Errors.WafError:"}
{"function_name": "test_put_bag", "function_define": "    PUT a new bag to the server.\n    http = httplib2.Http()\n    location = response['location']", "piece": "http = httplib2.Http()"}
{"function_name": "add_cswrapper", "function_define": "    from lxml import etree\n    import os\n    if outfilename is None:", "piece": "import os"}
{"function_name": "loadFiles", "function_define": "    files = {}\n    dataDir = os.fsencode(path)\n    for file in os.listdir(dataDir):", "piece": "dataDir = os.fsencode(path)"}
{"function_name": "get_gnparse_lib", "function_define": "    global _gnparse_lib\n    if _gnparse_lib is None:\n    raise RuntimeError(m)", "piece": "if _gnparse_lib is None:"}
{"function_name": "get_yt_video_id", "function_define": "    Examples of URLs:\n    Invalid:\n    url = 'http://' + url", "piece": "Invalid:"}
{"function_name": "update_job", "function_define": "    r = redis.Redis()\n    jid = 'tncore_%s' % req_id\n    r.hset(jid, key, value)", "piece": "jid = 'tncore_%s' % req_id"}
{"function_name": "slice_it", "function_define": "    start = 0\n    for i in xrange(cols):\n    stop = start + len(li[i::cols])", "piece": "for i in xrange(cols):"}
{"function_name": "cumulative_jobs", "function_define": "    r = redis.Redis()\n    res = []\n    date = r.hget(j, 'date')", "piece": "res = []"}
{"function_name": "unique_emails", "function_define": "    r = redis.Redis()\n    ip = set()\n    res = []", "piece": "ip = set()"}
{"function_name": "unique_ips", "function_define": "    r = redis.Redis()\n    ip = set()\n    res = []", "piece": "ip = set()"}
{"function_name": "move_is_valid", "function_define": "    if dist > 1:\n    visited = [old_tile]\n    queue = [old_tile]", "piece": "visited = [old_tile]"}
{"function_name": "_ip_addr_get", "function_define": "    if ip_addr:\n    target = self.target\n    if boot_ic:", "piece": "target = self.target"}
{"function_name": "_healthcheck", "function_define": "    target = self.target\n    if interconnects == {}:\n    target = self.target", "piece": "if interconnects == {}:"}
{"function_name": "update_topic", "function_define": "    update topic\n    elif subtopics is not None:\n    elif keywords is not None:", "piece": "elif subtopics is not None:"}
{"function_name": "submit_code", "function_define": "    logger.info(response.content)\n    r.start()\n    for i in range(1, 30):", "piece": "r.start()"}
{"function_name": "schedule_softmax", "function_define": "    Parameters\n    outs: Array of Tensor\n    sch: Schedule", "piece": "outs: Array of Tensor"}
{"function_name": "schedule_pool", "function_define": "    Parameters\n    outs: Array of Tensor\n    sch: Schedule", "piece": "outs: Array of Tensor"}
{"function_name": "schedule_dense", "function_define": "    Parameters\n    outs: Array of Tensor\n    sch: Schedule", "piece": "outs: Array of Tensor"}
{"function_name": "test_tasks", "function_define": "    q = question()\n    eq_(index_fun.call_count, 0)\n    q.save()", "piece": "eq_(index_fun.call_count, 0)"}
{"function_name": "test_meta_tags", "function_define": "    url_ = reverse('search')\n    doc = pq(response.content)\n    metas = doc('meta')", "piece": "doc = pq(response.content)"}
{"function_name": "test_empty_pages", "function_define": "    ques.tags.add(u'desktop')\n    self.refresh()\n    qs = {'q': 'audio', 'page': 81}", "piece": "self.refresh()"}
{"function_name": "test_created", "function_define": "    q1.tags.add(u'desktop')\n    q2.tags.add(u'desktop')\n    self.refresh()", "piece": "q2.tags.add(u'desktop')"}
{"function_name": "test_asked_by", "function_define": "    for name, number in author_vals:\n    for i in range(number):\n    ques.tags.add(u'desktop')", "piece": "for i in range(number):"}
{"function_name": "test_wiki_topics", "function_define": "    doc.topics.add(t2)\n    doc.topics.add(t2)\n    doc.topics.add(t3)", "piece": "doc.topics.add(t2)"}
{"function_name": "test_archived", "function_define": "    self.refresh()\n    eq_(1, len(results))\n    eq_(0, len(results))", "piece": "eq_(1, len(results))"}
{"function_name": "test_suggestions", "function_define": "    ques.tags.add(u'desktop')\n    self.refresh()\n    eq_(200, response.status_code)", "piece": "self.refresh()"}
{"function_name": "firmasorgula", "function_define": "    servicedata = '{'\n    if mrs != '':\n    if vrg != '':", "piece": "if mrs != '':"}
{"function_name": "test_integration", "function_define": "    servicepath = '/service/evds/'\n    servicetype = 'serieList/'\n    servicedata = ''", "piece": "servicetype = 'serieList/'"}
{"function_name": "addVertex", "function_define": "    self.vertices.append(label)\n    self.distance[label] = 0\n    self.prev[label] = None", "piece": "self.distance[label] = 0"}
{"function_name": "acts_stats", "function_define": "    assert not model.training\n    if unit is not None:\n    if not hasattr(unit, '__len__'):", "piece": "if unit is not None:"}
{"function_name": "grad_stats", "function_define": "    assert not model.training\n    if unit is not None:\n    if not hasattr(unit, '__len__'):", "piece": "if unit is not None:"}
{"function_name": "proj_c2m", "function_define": "    assert not model.training\n    tconv = unraveled.tconv\n    cloned_model(x.to(device))", "piece": "tconv = unraveled.tconv"}
{"function_name": "window_images", "function_define": "    r_sample = run(*input_sample)\n    if thumbsize is None:\n    thumbsize = x_size", "piece": "if thumbsize is None:"}
{"function_name": "label_stats", "function_define": "    seg_sample = data_sample[-2]\n    r_sample = run(*input_sample)\n    device = r_sample.device", "piece": "r_sample = run(*input_sample)"}
{"function_name": "topk_label_stats", "function_define": "    seg_sample = data_sample[-2]\n    r_sample = run(*input_sample)\n    device = r_sample.device", "piece": "r_sample = run(*input_sample)"}
{"function_name": "wgrad_stats", "function_define": "    assert not model.training\n    if layer is not None:\n    module = model", "piece": "if layer is not None:"}
{"function_name": "sep_stats", "function_define": "    assert not model.training\n    if layer is not None:\n    module = model", "piece": "if layer is not None:"}
{"function_name": "accumulate_grad", "function_define": "    with torch.enable_grad():\n    out = cloned_model(x.to(device))\n    loss.backward()", "piece": "out = cloned_model(x.to(device))"}
{"function_name": "collate_unit_iou", "function_define": "    seg = seg.to(device)\n    acts = run(imgs, labels)\n    hacts = upfn(acts)", "piece": "acts = run(imgs, labels)"}
{"function_name": "lcc_mult", "function_define": "    the sequence.\n    wsize - window size, integer\n    l2 = math.log(2)", "piece": "wsize - window size, integer"}
{"function_name": "lcc_simp", "function_define": "    sequence (as a float).\n    Reference:\n    DOI: 10.1038/npg.els.0005260", "piece": "Reference:"}
{"function_name": "iso_round", "function_define": "    import sympy\n    objc = deepcopy(obj)\n    tmp = DX(str(float(objc)))", "piece": "objc = deepcopy(obj)"}
{"function_name": "pearsonr", "function_define": "    Mimics `scipy.stats.pearsonr`\n    Arguments\n    x : 1D torch.Tensor", "piece": "Arguments"}
{"function_name": "_do_visualize", "function_define": "    if editor is None:\n    content = editor.get_content()\n    if not content.strip():", "piece": "content = editor.get_content()"}
{"function_name": "uniquePaths", "function_define": "    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = 1\n    for row in range(m):", "piece": "dp[0][0] = 1"}
{"function_name": "pylsp_hover", "function_define": "    if len(definitions) == 1:\n    definition = definitions[0]\n    if not definition:", "piece": "definition = definitions[0]"}
{"function_name": "get_address", "function_define": "    Default address is 0x40.\n    Returns:\n    addr = c_uint8()", "piece": "Returns:"}
{"function_name": "get_rx_status", "function_define": "    Returns:\n    rx_size = c_uint16()\n    if result != Ft4222Status.OK:", "piece": "rx_size = c_uint16()"}
{"function_name": "set_resp_word", "function_define": "    Default value is 0xFF.\n    if result != Ft4222Status.OK:\n    raise Ft4222Exception(result)", "piece": "if result != Ft4222Status.OK:"}
{"function_name": "query_priv_check", "function_define": "    loginUser = loginUserOb.username\n    if int(limit_num) == 0:\n    limit_num = int(user_limit_num)", "piece": "if int(limit_num) == 0:"}
{"function_name": "getdbNameList", "function_define": "    if is_master:\n    except Exception:\n    result['status'] = 1", "piece": "except Exception:"}
{"function_name": "getTableNameList", "function_define": "    if is_master:\n    except Exception:\n    result['status'] = 1", "piece": "except Exception:"}
{"function_name": "queryprivaudit", "function_define": "    if audit_remark is None:\n    audit_remark = ''\n    with transaction.atomic():", "piece": "audit_remark = ''"}
{"function_name": "querylog", "function_define": "    limit = offset + limit\n    if search is None:\n    search = ''", "piece": "if search is None:"}
{"function_name": "slowquery_review", "function_define": "    if settings.ALIYUN_RDS_MANAGE:\n    limit = offset + limit\n    if DBName:", "piece": "limit = offset + limit"}
{"function_name": "getEmailCc", "function_define": "    result['data'] = listDb\n    except Exception as e:\n    result['status'] = 1", "piece": "except Exception as e:"}
{"function_name": "query_pager", "function_define": "    limit = get_limit()\n    offset = get_offset()\n    if paginate:", "piece": "offset = get_offset()"}
{"function_name": "stringify_path", "function_define": "    to the inserted encoding type.\n    if signed_hashes is not None:\n    stringified_elems = []", "piece": "if signed_hashes is not None:"}
{"function_name": "read_log", "function_define": "    coulomb_status = ''\n    if i == 0:\n    timestamp = line.rstrip()", "piece": "if i == 0:"}
{"function_name": "Teff_from_gsd", "function_define": "    n_frames = f.nframes\n    for t in range(n_frames):\n    v[t, :, 0] = v_t[:, 0]", "piece": "for t in range(n_frames):"}
{"function_name": "match_players", "function_define": "    matches = []\n    while i < len(players):\n    except KeyError:", "piece": "while i < len(players):"}
{"function_name": "simulate_battle", "function_define": "    player1['Belligerent'].crit *= 2\n    player2['Belligerent'].crit *= 2\n    if victory_number < p1:", "piece": "player2['Belligerent'].crit *= 2"}
{"function_name": "connect_scan", "function_define": "    buffer = 'greyshell\\r\\n'\n    sock.send(buffer)\n    results = sock.recv(1000)", "piece": "sock.send(buffer)"}
{"function_name": "portScan", "function_define": "    tgtIP = gethostbyname(tgtHost)\n    tgtName = gethostbyaddr(tgtIP)\n    setdefaulttimeout(5)", "piece": "tgtName = gethostbyaddr(tgtIP)"}
{"function_name": "create_tables", "function_define": "    db.create_all()\n    print(category.id)\n    db.session.add(us)", "piece": "print(category.id)"}
{"function_name": "surface_maps", "function_define": "    if 'Diffuse' in surface_maps:\n    if 'Specular' in surface_maps:\n    if 'Roughness' in surface_maps:", "piece": "if 'Specular' in surface_maps:"}
{"function_name": "bazed_ulid", "function_define": "    bl = len(baza)\n    res = ''\n    if n == 0:", "piece": "res = ''"}
{"function_name": "group_combine", "function_define": "    Parameters\n    verbose : int\n    fmt : str, optinal.", "piece": "verbose : int"}
{"function_name": "group_save", "function_define": "    Paramters\n    combined : dict\n    if not fmt:", "piece": "combined : dict"}
{"function_name": "_update_hdr", "function_define": "    if imcmb_key != '':\n    if offset_mode is not None:\n    update_tlm(header)", "piece": "if offset_mode is not None:"}
{"function_name": "imcombine", "function_define": "    if verbose:\n    print(_t1.iso)\n    ncombine = len(items)", "piece": "print(_t1.iso)"}
{"function_name": "ndcombine", "function_define": "    if copy:\n    arr = arr.copy()\n    if np.array(arr).ndim == 1:", "piece": "arr = arr.copy()"}
{"function_name": "_group_save", "function_define": "    if not fmt:\n    if verbose:\n    if isinstance(groupname, tuple):", "piece": "if verbose:"}
{"function_name": "_smooth_maps", "function_define": "    activation maps (CAMs).\n    num_matrices = len(cam_matrices)\n    for j in range(num_matrices):", "piece": "num_matrices = len(cam_matrices)"}
{"function_name": "update_revenue", "function_define": "    self.revenue = 0\n    for y in range(5):\n    for x in range(5):", "piece": "for y in range(5):"}
{"function_name": "on_turn_start", "function_define": "    self.update_revenue(True)\n    for y in range(5):\n    for x in range(5):", "piece": "for y in range(5):"}
{"function_name": "predict_labels", "function_define": "    Function to produce predictions\n    probability P(AF) if utilized\n    config = ECGCNN_CONFIG_XL", "piece": "probability P(AF) if utilized"}
{"function_name": "prepare_inputs", "function_define": "    the bdm executable.\n    alpha, delta, tau, N = inputs\n    meta = kwinputs['meta']", "piece": "alpha, delta, tau, N = inputs"}
{"function_name": "debug_print", "function_define": "    global debug_mode\n    if debug_mode:\n    print(stringIn)", "piece": "if debug_mode:"}
{"function_name": "get_gps_data", "function_define": "    gps_data = {}\n    if not 'Image GPSInfo' in tags:\n    gps_data['latitude'] /= -1", "piece": "if not 'Image GPSInfo' in tags:"}
{"function_name": "_filename", "function_define": "    ann_id = self.samples[index][0]\n    if basename:\n    elif not absolute:", "piece": "if basename:"}
{"function_name": "NetworkMonitor", "function_define": "    buffer = None\n    if buffer:\n    for i in range(len(buffer)):", "piece": "if buffer:"}
{"function_name": "WriteOnSerial", "function_define": "    if self.runningOnRTOS == True:\n    txTime = 0.00916666667 * len\n    self._serial.rts = True", "piece": "txTime = 0.00916666667 * len"}
{"function_name": "sendMail", "function_define": "    import smtplib\n    import email.mime.text\n    msg['From'] = efrom", "piece": "import email.mime.text"}
{"function_name": "createDialog", "function_define": "    dialog = self.getDialogClass()()\n    if efrom is not None:\n    dialog.setFrom(efrom)", "piece": "if efrom is not None:"}
{"function_name": "tigetnum", "function_define": "    sys.stdout is not a terminal.\n    import curses\n    except ImportError:", "piece": "import curses"}
{"function_name": "profiler_stats", "function_define": "    os.close(fd)\n    stats.dump_stats(filename)\n    finally:", "piece": "stats.dump_stats(filename)"}
{"function_name": "list_of_tests", "function_define": "    self._enter_layer(layer_name)\n    for test in tests:\n    self._subunit.startTest(test)", "piece": "for test in tests:"}
{"function_name": "test_garbage", "function_define": "    fail the test run.\n    self._subunit.startTest(test)\n    self._subunit.stopTest(test)", "piece": "self._subunit.startTest(test)"}
{"function_name": "start_set_up", "function_define": "    tag context.\n    now = self._emit_timestamp()\n    self._subunit.startTest(test)", "piece": "now = self._emit_timestamp()"}
{"function_name": "stop_set_up", "function_define": "    self._last_layer = None\n    self._subunit.addSuccess(test)\n    self._subunit.stopTest(test)", "piece": "self._subunit.addSuccess(test)"}
{"function_name": "start_tear_down", "function_define": "    tear_down_not_supported().\n    self._exit_layer(layer_name)\n    now = self._emit_timestamp()", "piece": "self._exit_layer(layer_name)"}
{"function_name": "stop_tear_down", "function_define": "    self._last_layer = None\n    self._subunit.addSuccess(test)\n    self._subunit.stopTest(test)", "piece": "self._subunit.addSuccess(test)"}
{"function_name": "start_test", "function_define": "    test_failure().\n    self._emit_timestamp()\n    self._subunit.startTest(test)", "piece": "self._emit_timestamp()"}
{"function_name": "color_code", "function_define": "    prefix_code = ''\n    if color.startswith(prefix):\n    color = color[len(prefix):]", "piece": "if color.startswith(prefix):"}
{"function_name": "setRunnable", "function_define": "    orig_runnable = self._runnable\n    self._runnable = runnable\n    finally:", "piece": "self._runnable = runnable"}
{"function_name": "_emit_timestamp", "function_define": "    if now is None:\n    now = datetime.now(self.UTC)\n    self._subunit.time(now)", "piece": "now = datetime.now(self.UTC)"}
{"function_name": "_emit_fake_test", "function_define": "    test = FakeTest(message)\n    self._subunit.startTest(test)\n    self._subunit.tags([tag], [])", "piece": "self._subunit.startTest(test)"}
{"function_name": "_emit_error", "function_define": "    test = FakeTest(error_id)\n    self._subunit.startTest(test)\n    self._subunit.tags([tag], [])", "piece": "self._subunit.startTest(test)"}
{"function_name": "text_wrap", "function_define": "    lines = []\n    lines.append(text)\n    words = text.split(' ')", "piece": "lines.append(text)"}
{"function_name": "word_frequencies", "function_define": "    with open(filename, 'r') as f:\n    lines = f.readlines()\n    for line in lines:", "piece": "lines = f.readlines()"}
{"function_name": "sparse_eye", "function_define": "    dense_shape = (M, M)\n    indices = np.zeros((M, 2))\n    for i in range(M):", "piece": "indices = np.zeros((M, 2))"}
{"function_name": "sparse_tensor", "function_define": "    dense_shape = (M, N)\n    indices = np.zeros((M * C, 2))\n    for i in range(M):", "piece": "indices = np.zeros((M * C, 2))"}
{"function_name": "render_from_ttf", "function_define": "    font = self.key_font_dict[key]\n    img = render(font, char)\n    img = self.transform(img)", "piece": "img = render(font, char)"}
{"function_name": "count_cycles", "function_define": "    index = 0\n    count = 0\n    for i in range(len(arr)):", "piece": "count = 0"}
{"function_name": "zip_dictionary", "function_define": "    dictionary = {}\n    for i in range(len(keys)):\n    if keys[i] not in dictionary:", "piece": "for i in range(len(keys)):"}
{"function_name": "find_duplicates", "function_define": "    duplicates = []\n    for i in range(len(ar)):\n    for j in range(len(ar)):", "piece": "for i in range(len(ar)):"}
{"function_name": "letter_hist", "function_define": "    dictionary = {}\n    for c in st:\n    if c in dictionary:", "piece": "for c in st:"}
{"function_name": "reverse_dict", "function_define": "    dic2 = {}\n    for key in dic:\n    if dic[key] in dic2:", "piece": "for key in dic:"}
{"function_name": "greedy_inference", "function_define": "    model.eval()\n    inp = src.transpose(0, 1)\n    target = None", "piece": "inp = src.transpose(0, 1)"}
{"function_name": "__spread__", "function_define": "    Arguments:\n    Returns:\n    if m > 10.0:", "piece": "Returns:"}
{"function_name": "getSignificance", "function_define": "    expy = exp(-wk2)\n    effm = 2.0 * nout / ofac\n    sig = effm * expy", "piece": "effm = 2.0 * nout / ofac"}
{"function_name": "clean_index", "function_define": "    Parameters:\n    dataFrame: string\n    Returns:", "piece": "dataFrame: string"}
{"function_name": "clean_index_year", "function_define": "    Parameters:\n    dataFrame: string\n    Returns:", "piece": "dataFrame: string"}
{"function_name": "clean_regions", "function_define": "    Parameters:\n    dataFrame: string\n    Returns:", "piece": "dataFrame: string"}
{"function_name": "clean_column", "function_define": "    Parameters:\n    dataFrame: string\n    Returns:", "piece": "dataFrame: string"}
{"function_name": "clean_age", "function_define": "    Parameters:\n    dataFrame: string\n    Returns:", "piece": "dataFrame: string"}
{"function_name": "two_to_one_years", "function_define": "    Parameters:\n    data_1, data_2: strings\n    sheet_index: integer", "piece": "data_1, data_2: strings"}
{"function_name": "cds_from_regions", "function_define": "    Parameters:\n    df: string\n    Returns:", "piece": "df: string"}
{"function_name": "plot_by_regions", "function_define": "    Parameters:\n    df: string\n    Returns:", "piece": "df: string"}
{"function_name": "cds_from_age", "function_define": "    Parameters:\n    df: string\n    Returns:", "piece": "df: string"}
{"function_name": "plot_by_age", "function_define": "    Parameters:\n    df: string\n    Returns:", "piece": "df: string"}
{"function_name": "extend_tracklets", "function_define": "    if len(track) <= 16:\n    continue\n    sum_h = 0.0", "piece": "continue"}
{"function_name": "split_tracklets", "function_define": "    track_ids = []\n    detections = []\n    for d in track:", "piece": "detections = []"}
{"function_name": "trim_tracklets", "function_define": "    next_track_id = 1\n    new_tracklets = {}\n    for i in range(new_track_count):", "piece": "new_tracklets = {}"}
{"function_name": "restore_det", "function_define": "    det['orig_x'] = det['x']\n    det['orig_y'] = det['y']\n    det['orig_w'] = det['width']", "piece": "det['orig_y'] = det['y']"}
{"function_name": "make_object", "function_define": "    if classify_function:\n    valid = True\n    attrs = {}", "piece": "valid = True"}
{"function_name": "connect_test", "function_define": "    kdestroy()\n    xrdfs, path = connect()\n    assert xrdfs", "piece": "xrdfs, path = connect()"}
{"function_name": "handle_event", "function_define": "    if event_handler:\n    payload = event_handler(event)\n    payload = None", "piece": "payload = event_handler(event)"}
{"function_name": "save_audio", "function_define": "    if not isinstance(result, dict):\n    f.write(result)\n    os.popen('play *mp3')", "piece": "f.write(result)"}
{"function_name": "post_request", "function_define": "    global animal_info\n    if time.time() - nt > 3:\n    global now_time", "piece": "if time.time() - nt > 3:"}
{"function_name": "json_logger", "function_define": "    logger = logging.getLogger()\n    logger.setLevel(logging.INFO)\n    logger.addHandler(log_handler)", "piece": "logger.setLevel(logging.INFO)"}
{"function_name": "pretty_timedelta", "function_define": "    seconds = int(seconds)\n    if days > 0:\n    elif hours > 0:", "piece": "if days > 0:"}
{"function_name": "_reserve_port", "function_define": "    sock.bind(('', int(port)))\n    yield sock.getsockname()[1]\n    finally:", "piece": "yield sock.getsockname()[1]"}
{"function_name": "_run_server", "function_define": "    server.start()\n    time.sleep(1)\n    server.stop(5).wait()", "piece": "time.sleep(1)"}
{"function_name": "replace_subtree", "function_define": "    Replace a subtree.\n    del old_subtree[:]\n    for node in new_subtree:", "piece": "del old_subtree[:]"}
{"function_name": "thenelse_to_json", "function_define": "    params = ''\n    if params:\n    target.write('\"')", "piece": "if params:"}
{"function_name": "genome_to_json", "function_define": "    target.write('[\\n\\t{\\n')\n    target.write('\\t\\t\"IF\": \"')\n    target.write(' ')", "piece": "target.write('\\t\\t\"IF\": \"')"}
{"function_name": "evaluate_fitness", "function_define": "    for ind in individuals:\n    key = str(ind['genome'])\n    if key in cache.keys():", "piece": "key = str(ind['genome'])"}
{"function_name": "search_loop", "function_define": "    EVO_TESTAR_ACTIONS = 100\n    cache = {}\n    best_ever = population[0]", "piece": "cache = {}"}
{"function_name": "parse_exemplars", "function_define": "    the exemplar.\n    headers = reader.next()\n    fitness_cases = []", "piece": "headers = reader.next()"}
{"function_name": "get_symbols", "function_define": "    terminals = []\n    types = []\n    functions = []", "piece": "types = []"}
{"function_name": "fourSumCount", "function_define": "    result = 0\n    absum = {}\n    for a in A:", "piece": "absum = {}"}
{"function_name": "deep_Q_learning", "function_define": "    sample = random.random()\n    if sample <= epsilon:\n    num_actions = env.action_space.n", "piece": "if sample <= epsilon:"}
{"function_name": "test_image_types", "function_define": "    paths = []\n    in_image.save(paths[-1])\n    for img in dataset:", "piece": "in_image.save(paths[-1])"}
{"function_name": "dummy_statistics", "function_define": "    if path.endswith('1'):\n    elif path.endswith('2'):\n    raise ValueError", "piece": "elif path.endswith('2'):"}
{"function_name": "next_frame", "function_define": "    message otherwise.\n    frame = self.ttyrec.next_frame()\n    if frame is None:", "piece": "frame = self.ttyrec.next_frame()"}
{"function_name": "write_frame", "function_define": "    if trimmed:\n    ts -= self.delta\n    self.last_ts = ts", "piece": "ts -= self.delta"}
{"function_name": "dispatch_command", "function_define": "    if key not in _keybinds:\n    self.osd('')\n    finally:", "piece": "self.osd('')"}
{"function_name": "wait_frame", "function_define": "    while duration > 0:\n    now = time()\n    if not self.pause:", "piece": "now = time()"}
{"function_name": "get_group_list", "function_define": "    list = []\n    for row in cursor:\n    id, name, header, footer = row", "piece": "for row in cursor:"}
{"function_name": "drawChart", "function_define": "    if v != None:\n    col = self.hue_manager.getHue(v)\n    cx = self.computeX(x)", "piece": "col = self.hue_manager.getHue(v)"}
{"function_name": "plotSlice", "function_define": "    idlist = []\n    if slice == None:\n    for x, y, label, v, sz in query:", "piece": "if slice == None:"}
{"function_name": "set_record_video", "function_define": "    self.record_video = record_video\n    self.video_format = video_format\n    self.video_device = video_device", "piece": "self.video_format = video_format"}
{"function_name": "list_records", "function_define": "    output = []\n    if hasattr(context, 'filter'):\n    entries = context.ddb.list()", "piece": "if hasattr(context, 'filter'):"}
{"function_name": "ingest_file", "function_define": "    message = ''\n    with open(file, 'rb') as f:\n    for line in f:", "piece": "with open(file, 'rb') as f:"}
{"function_name": "get_services", "function_define": "    if args.id is None:\n    resp = requests.get(url=url)\n    if resp.status_code != 200:", "piece": "resp = requests.get(url=url)"}
{"function_name": "testIntAddition", "function_define": "    Test a simple two in example\n    The ... is a wild card\n    The ... is tabbed in TWICE", "piece": "The ... is a wild card"}
{"function_name": "setup_pgweb", "function_define": "    with jupyter-server-proxy.\n    executable = 'pgweb'\n    if not shutil.which(executable):", "piece": "executable = 'pgweb'"}
{"function_name": "majorityElement", "function_define": "    c = len(nums) / 3\n    for n in nums:\n    m[n] = m.get(n, 0) + 1", "piece": "for n in nums:"}
{"function_name": "sample_paths", "function_define": "    paths = []\n    for _ in range(traj_num):\n    observations = []", "piece": "for _ in range(traj_num):"}
{"function_name": "grad_norm", "function_define": "    res = s_g[0].flatten()\n    for i in range(1, len(s_g)):\n    l2_norm = np.linalg.norm(res)", "piece": "for i in range(1, len(s_g)):"}
{"function_name": "init_opt", "function_define": "    dist = self.policy.distribution\n    mean_kl = tf.reduce_mean(kl)\n    max_kl = tf.reduce_max(kl)", "piece": "mean_kl = tf.reduce_mean(kl)"}
{"function_name": "inner_optimize", "function_define": "    n_sub = 0\n    sub_paths_all = []\n    self.generate_mix_policy()", "piece": "sub_paths_all = []"}
{"function_name": "searchHandle", "function_define": "    redditResults = ''\n    twitterResults = ''\n    print(apiSelectArray)", "piece": "twitterResults = ''"}
{"function_name": "getCorrection", "function_define": "    it's estimated trajectory.\n    Returns:\n    xs, ys = start", "piece": "Returns:"}
{"function_name": "apply_cmd", "function_define": "    if self.search_cmd(cmd_name):\n    f = self.cmd_list[cmd_name][0]\n    if self.cmd_list[cmd_name][3]:", "piece": "f = self.cmd_list[cmd_name][0]"}
{"function_name": "help_command", "function_define": "    cmd_list = ''\n    for key in self.cmd_list:\n    show(cmd_list, serial)", "piece": "for key in self.cmd_list:"}
{"function_name": "smbpbi_command", "function_define": "    if len(args) < 3:\n    address = int(args[0], 0)\n    data_in = int(args[1], 0)", "piece": "address = int(args[0], 0)"}
{"function_name": "dbus_command", "function_define": "    gpu_index = None\n    percent = None\n    bus = smbus.SMBus(1)", "piece": "percent = None"}
{"function_name": "i2c_sub_command", "function_define": "    if name == 'hsc':\n    address_list = [64, 66, 68, 70]\n    if len(args) < 2:", "piece": "address_list = [64, 66, 68, 70]"}
{"function_name": "i2c_command", "function_define": "    val = None\n    address = None\n    offset = None", "piece": "address = None"}
{"function_name": "ip_command", "function_define": "    s.connect(('8.8.8.8', 80))\n    ip = s.getsockname()[0]\n    finally:", "piece": "ip = s.getsockname()[0]"}
{"function_name": "run_round", "function_define": "    min_raise[:] = self.BIG_BLIND\n    if round == constants.PRE_FLOP:\n    max_bets[:] = self.BIG_BLIND", "piece": "if round == constants.PRE_FLOP:"}
{"function_name": "get_diagnostics", "function_define": "    diagnostics = {}\n    diagnostics['power_level'] = 100\n    diagnostics['temperature'] = 40", "piece": "diagnostics['power_level'] = 100"}
{"function_name": "open_log_file", "function_define": "    Parameters:\n    itno: int\n    folder: str", "piece": "itno: int"}
{"function_name": "save_object", "function_define": "    Save any pickle-able object.\n    Parameters:\n    name: str", "piece": "Parameters:"}
{"function_name": "log_to_file", "function_define": "    Log data to file.\n    Parameters:\n    file: file_handle", "piece": "Parameters:"}
{"function_name": "generate_video", "function_define": "    done = False\n    state = env.reset()\n    step = 0", "piece": "state = env.reset()"}
{"function_name": "plot_error_bar", "function_define": "    Parameters:\n    color: color of the plot\n    label: string", "piece": "color: color of the plot"}
{"function_name": "reconstructQueue", "function_define": "    ans = []\n    for pep in people:\n    ans.insert(pep[1], pep)", "piece": "for pep in people:"}
{"function_name": "_text2num", "function_define": "    length = 0\n    last = None\n    for w in tokens:", "piece": "last = None"}
{"function_name": "inner_type_refs", "function_define": "    if next_level_refs:\n    yield inner_ref\n    refs_by_key = {}", "piece": "yield inner_ref"}
{"function_name": "getOutput", "function_define": "    sys.stdout.write(green + '> ')\n    ip_input = input()\n    data = checker_value.split('.')", "piece": "ip_input = input()"}
{"function_name": "is_input_ip", "function_define": "    data = checker_value.split('.')\n    if len(data) != 4:\n    for x in data:", "piece": "if len(data) != 4:"}
{"function_name": "plot_prediction", "function_define": "    idx (int): sample index\n    ax: matplotlib axes to plot on\n    Returns:", "piece": "ax: matplotlib axes to plot on"}
{"function_name": "Spearman", "function_define": "    fout = open(ofile, 'w')\n    n_out = 0\n    n_nan = 0", "piece": "n_out = 0"}
{"function_name": "Tanimoto", "function_define": "    fout = open(ofile, 'w')\n    V = exfiles.iloc[i, datacols]\n    VV[i] = numpy.dot(V, V)", "piece": "V = exfiles.iloc[i, datacols]"}
{"function_name": "loadTFGraph", "function_define": "    detection_graph = tf.Graph()\n    od_graph_def = tf.GraphDef()\n    serialized_graph = fid.read()", "piece": "od_graph_def = tf.GraphDef()"}
{"function_name": "_parse_datetime", "function_define": "    date_string: a date as a string\n    Returns:\n    the date as a datetime obj", "piece": "Returns:"}
{"function_name": "data2token", "function_define": "    if self.using_bert:\n    for sen in self.premise_data:\n    pbar.update(1)", "piece": "for sen in self.premise_data:"}
{"function_name": "token2seq", "function_define": "    if not self.using_bert:\n    self.vocab = vocab\n    self.maxlen = maxlen", "piece": "self.vocab = vocab"}
{"function_name": "remove_new_lines", "function_define": "    spaCy pipeline\n    text = text.replace('-\\n\\n', '')\n    text = text.replace('-\\n', '')", "piece": "text = text.replace('-\\n\\n', '')"}
{"function_name": "build_xml_dict", "function_define": "    for k in optional:\n    v = metadata_dict.get(k)\n    has_value = False", "piece": "v = metadata_dict.get(k)"}
{"function_name": "_add_required", "function_define": "    required[key] = get_func()\n    except Exception as e:\n    errors[key] = e", "piece": "except Exception as e:"}
{"function_name": "parse_row", "function_define": "    d = dict(song_row)\n    if songs_encoded():\n    h = Hashids(SEED + key)", "piece": "if songs_encoded():"}
{"function_name": "decode_key", "function_define": "    h = Hashids(SEED)\n    key = h.decode(key)\n    if len(key) > 0:", "piece": "key = h.decode(key)"}
{"function_name": "get_text_indeed", "function_define": "    page = requests.get(link)\n    texts = ''\n    all_text = []", "piece": "texts = ''"}
{"function_name": "extract_list", "function_define": "    for sibling in p.next_siblings:\n    if sibling.name == 'ul':\n    if sibling.name == 'p':", "piece": "if sibling.name == 'ul':"}
{"function_name": "get_text_seek", "function_define": "    page = requests.get(link)\n    all_text = []\n    for i in texts:", "piece": "all_text = []"}
{"function_name": "get_df_status", "function_define": "    if db.create_connection() == 1:\n    if jobs == None:\n    jobs_df['Index'] = jobs_df.index", "piece": "if jobs == None:"}
{"function_name": "text_template", "function_define": "    if len(lists) == 0:\n    for i in lists:\n    if type(i) != list:", "piece": "for i in lists:"}
{"function_name": "update_applied", "function_define": "    if db.create_connection() == 1:\n    db.update_applied(apply, ID)\n    if apply == 1:", "piece": "db.update_applied(apply, ID)"}
{"function_name": "update_rejected", "function_define": "    if reject not in [0, 1]:\n    reject = 0\n    if db.create_connection() == 1:", "piece": "reject = 0"}
{"function_name": "display_details", "function_define": "    if data != [] and len(row) != 0:\n    cur_index = row[0]\n    if data == None:", "piece": "cur_index = row[0]"}
{"function_name": "new_jobs", "function_define": "    the button was clicked\n    if new_role == None:\n    new_role = new_role.lower()", "piece": "if new_role == None:"}
{"function_name": "moist_percent", "function_define": "    Returns:\n    int: Moisture in percent\n    moisture = self.moist", "piece": "int: Moisture in percent"}
{"function_name": "moist_to_percent", "function_define": "    ie from a database.\n    Returns:\n    int: Moisture in percent", "piece": "Returns:"}
{"function_name": "_read_moist", "function_define": "    Returns:\n    int: Soil moisture\n    while self.busy:", "piece": "int: Soil moisture"}
{"function_name": "_read_temp", "function_define": "    Returns:\n    while self.busy:\n    time.sleep(self.busy_sleep)", "piece": "while self.busy:"}
{"function_name": "_read_light", "function_define": "    Returns:\n    while self.busy:\n    time.sleep(self.busy_sleep)", "piece": "while self.busy:"}
{"function_name": "dask_to_zarr", "function_define": "    if msg is None:\n    msg = f'Writing data to {loc}'\n    pos_start, pos_end = (0, 0)", "piece": "msg = f'Writing data to {loc}'"}
{"function_name": "average_sales", "function_define": "    total = 0\n    for sales_value in sales:\n    total = total + sales_value", "piece": "for sales_value in sales:"}
{"function_name": "pad_trajectories", "function_define": "    multiples of boundary.\n    Returns:\n    boundary = int(boundary)", "piece": "Returns:"}
{"function_name": "rewards_to_go", "function_define": "    gamma: float, discount factor.\n    Returns:\n    B, T = rewards.shape", "piece": "Returns:"}
{"function_name": "gae_advantages", "function_define": "    produced by `deltas(...)`\n    Returns:\n    GAE advantage estimates.", "piece": "Returns:"}
{"function_name": "approximate_kl", "function_define": "    mask: (B, T)\n    Returns:\n    Approximate KL.", "piece": "Returns:"}
{"function_name": "masked_entropy", "function_define": "    log_probs: (B, T+1, A) log probs\n    mask: (B, T) mask.\n    Returns:", "piece": "mask: (B, T) mask."}
{"function_name": "addCollections", "function_define": "    self.getCollection(rig)\n    if self.collection is None:\n    if self.singleGroup:", "piece": "if self.collection is None:"}
{"function_name": "getCollection", "function_define": "    self.collection = None\n    for ob in rig.children:\n    self.collection = coll", "piece": "for ob in rig.children:"}
{"function_name": "moveToCollection", "function_define": "    if ob in coll.objects.values():\n    coll.objects.unlink(ob)\n    newcoll.objects.link(ob)", "piece": "coll.objects.unlink(ob)"}
{"function_name": "createMask", "function_define": "    mod = None\n    for mod1 in ob.modifiers:\n    mod = mod1", "piece": "for mod1 in ob.modifiers:"}
{"function_name": "test_stringify", "function_define": "    use_colors(False)\n    actual = stmdp.__str__()\n    assert actual == expected", "piece": "actual = stmdp.__str__()"}
{"function_name": "edit_org", "function_define": "    if request.method == 'GET':\n    elif request.method == 'POST':\n    if form.is_valid():", "piece": "elif request.method == 'POST':"}
{"function_name": "train_chatbot_nn", "function_define": "    sentence_x = train_x[index]\n    sentence_y = train_y[index]\n    print(sentence_x, sentence_y)", "piece": "sentence_y = train_y[index]"}
{"function_name": "test_bad_change", "function_define": "    self.config['ftp_port'] = -1\n    self.config['ftp_port'] = 0\n    self.connect()", "piece": "self.config['ftp_port'] = 0"}
{"function_name": "changeVolume", "function_define": "    if self.player is None:\n    elif vol is None:\n    elif vol > 200:", "piece": "elif vol is None:"}
{"function_name": "pauseAndResume", "function_define": "    if self.player is None:\n    elif self.player.is_playing():\n    self.player.pause()", "piece": "elif self.player.is_playing():"}
{"function_name": "_get_runner", "function_define": "    runner.action = action_db\n    runner.entry_point = entry_point\n    runner.runner_parameters = {}", "piece": "runner.entry_point = entry_point"}
{"function_name": "get_emp_list", "function_define": "    condition = ''\n    if self.payroll_frequency:\n    if sal_struct:", "piece": "if self.payroll_frequency:"}
{"function_name": "get_cash_flow", "function_define": "    Returns:\n    if yearly the output will be::\n    list_values = []", "piece": "if yearly the output will be::"}
{"function_name": "get_key_metrics", "function_define": "    Returns:\n    if yearly the output will be::\n    today = date.today()", "piece": "if yearly the output will be::"}
{"function_name": "wait_for_process", "function_define": "    if not self._job_process:\n    self._job_process = None\n    if self._local_temp_file:", "piece": "self._job_process = None"}
{"function_name": "random_str", "function_define": "    string.digits\uff1a\u8fd4\u56de\u963f\u62c9\u4f2f\u6570\u5b57\u7684\u5b57\u7b26\u4e32\n    total_str = ''\n    total_str += uuid_str", "piece": "total_str = ''"}
{"function_name": "api_request", "function_define": "    Also prints timing info.\n    start = time.time()\n    if post_data:", "piece": "start = time.time()"}
{"function_name": "startTest", "function_define": "    self._error = None\n    self._failure = None\n    self._start_time = time.time()", "piece": "self._failure = None"}
{"function_name": "stopTest", "function_define": "    if self._error:\n    elif self._failure:\n    self._tests.append(info)", "piece": "elif self._failure:"}
{"function_name": "from_map", "function_define": "    m = m or dict()\n    if m.get('headers') is not None:\n    self.headers = m.get('headers')", "piece": "if m.get('headers') is not None:"}
{"function_name": "filtrage", "function_define": "    filtrage_ok = True\n    modif = True\n    while modif:", "piece": "modif = True"}
{"function_name": "sous_propagation", "function_define": "    new_ensemble[old] = e\n    new_ens = []\n    for v in new_ensemble:", "piece": "new_ens = []"}
{"function_name": "propagation", "function_define": "    from copy import deepcopy\n    if une_solution:\n    raise FinRechercheException()", "piece": "if une_solution:"}
{"function_name": "test_convert_to", "function_define": "    self.assertEqual(output, None)\n    self.assertEqual(output, '3.14')\n    self.assertEqual(error, 'OK')", "piece": "self.assertEqual(output, '3.14')"}
{"function_name": "test_git_url", "function_define": "    self.assertEqual(user, 'igor')\n    self.assertEqual(user, 'igor')\n    self.assertEqual(user, 'PRBonn')", "piece": "self.assertEqual(user, 'igor')"}
{"function_name": "compressByBundle", "function_define": "    overlapRadius = 50\n    spliced_index = []\n    bundles = []", "piece": "spliced_index = []"}
{"function_name": "compressBundle", "function_define": "    self.totalSize += len(cluster)\n    junc_lens = []\n    junc_string = b''", "piece": "junc_lens = []"}
{"function_name": "parseCigar", "function_define": "    exons = []\n    newExon = True\n    match = re.search('\\\\D', cigar)", "piece": "newExon = True"}
{"function_name": "parseSAMHeader", "function_define": "    chromNames = []\n    chromLens = []\n    for line in header.split('\\n'):", "piece": "chromLens = []"}
{"function_name": "parseGTF", "function_define": "    exons = set()\n    with open(gtf, 'r') as f:\n    for line in f:", "piece": "with open(gtf, 'r') as f:"}
{"function_name": "compressString", "function_define": "    Return the compressed string \"\"\"\n    if self.compressMethod == 0:\n    elif self.compressMethod == 1:", "piece": "if self.compressMethod == 0:"}
{"function_name": "_train_body", "function_define": "    with tf.device('/gpu:0'):\n    with tf.GradientTape() as tape:\n    with tf.GradientTape() as tape:", "piece": "with tf.GradientTape() as tape:"}
{"function_name": "convert_ast", "function_define": "    if fn is None:\n    fn = getattr(self, fn_default)\n    fn(node)", "piece": "fn = getattr(self, fn_default)"}
{"function_name": "default_depart", "function_define": "    is exited.\n    if mdnode.is_container():\n    if not hasattr(self, fn_name):", "piece": "if mdnode.is_container():"}
{"function_name": "visit_heading", "function_define": "    title_node = nodes.title()\n    new_section = nodes.section()\n    new_section.append(title_node)", "piece": "new_section = nodes.section()"}
{"function_name": "depart_heading", "function_define": "    if self.translate_section_name:\n    section['names'].append(name)\n    self.current_node = section", "piece": "section['names'].append(name)"}
{"function_name": "visit_paragraph", "function_define": "    p.line = mdnode.sourcepos[0][0]\n    self.current_node.append(p)\n    self.current_node = p", "piece": "self.current_node.append(p)"}
{"function_name": "visit_emph", "function_define": "    n = nodes.emphasis()\n    self.current_node.append(n)\n    self.current_node = n", "piece": "self.current_node.append(n)"}
{"function_name": "visit_strong", "function_define": "    n = nodes.strong()\n    self.current_node.append(n)\n    self.current_node = n", "piece": "self.current_node.append(n)"}
{"function_name": "visit_link", "function_define": "    ref_node = nodes.reference()\n    destination = mdnode.destination\n    ref_node['refuri'] = destination", "piece": "destination = mdnode.destination"}
{"function_name": "visit_image", "function_define": "    img_node = nodes.image()\n    n = mdnode.first_child\n    mdnode.first_child.literal = ''", "piece": "n = mdnode.first_child"}
{"function_name": "visit_list", "function_define": "    list_node = None\n    list_node = list_node_cls()\n    self.current_node = list_node", "piece": "list_node = list_node_cls()"}
{"function_name": "visit_item", "function_define": "    node = nodes.list_item()\n    self.current_node.append(node)\n    self.current_node = node", "piece": "self.current_node.append(node)"}
{"function_name": "visit_code_block", "function_define": "    kwargs = {}\n    kwargs['language'] = mdnode.info\n    text = ''.join(mdnode.literal)", "piece": "kwargs['language'] = mdnode.info"}
{"function_name": "_get_line", "function_define": "    while mdnode:\n    if mdnode.sourcepos:\n    mdnode = mdnode.parent", "piece": "if mdnode.sourcepos:"}
{"function_name": "reset_policy", "function_define": "    c = con.cursor()\n    c.execute('Delete from ingroup')\n    if re.status_code == 204:", "piece": "c.execute('Delete from ingroup')"}
{"function_name": "synchronized", "function_define": "    obj._acquire()\n    finally:\n    obj._release()", "piece": "finally:"}
{"function_name": "sync_function", "function_define": "    obj._acquire()\n    finally:\n    obj._release()", "piece": "finally:"}
{"function_name": "attr_recall", "function_define": "    m = len(settings.ATTRIBUTES)\n    n = rc = 0\n    n += o['n']", "piece": "n = rc = 0"}
{"function_name": "_skill_pattern", "function_define": "    pattern = []\n    if split_token:\n    split = skill.split(split_token)", "piece": "if split_token:"}
{"function_name": "_build_patterns", "function_define": "    patterns = []\n    split_tokens = ['.', '/', '-']\n    aliases = skill_info['aliases']", "piece": "split_tokens = ['.', '/', '-']"}
{"function_name": "extract_skills", "function_define": "    doc = self.nlp(text)\n    for ent in doc.ents:\n    if '|' in ent.label_:", "piece": "for ent in doc.ents:"}
{"function_name": "raw_collate", "function_define": "    mels = torch.FloatTensor(mels)\n    x_input = coarse[:, :hp.seq_len]\n    y_coarse = coarse[:, 1:]", "piece": "x_input = coarse[:, :hp.seq_len]"}
{"function_name": "discrete_collate", "function_define": "    mels = torch.FloatTensor(mels)\n    if hp.input_type == 'bits':\n    elif hp.input_type == 'mulaw':", "piece": "if hp.input_type == 'bits':"}
{"function_name": "no_test_dataset", "function_define": "    data_id_path = 'data_dir/'\n    data_path = 'data_dir/'\n    print(hp.seq_len)", "piece": "data_path = 'data_dir/'"}
{"function_name": "test_zoom", "function_define": "    data = self.create_data(shape)\n    scaler = Scaler()\n    downscaled = scaler.zoom(data)", "piece": "scaler = Scaler()"}
{"function_name": "adjustLine", "function_define": "    time.sleep(0.3)\n    global position\n    global line", "piece": "global position"}
{"function_name": "get_executor", "function_define": "    import plz\n    from distributed import Client\n    cluster.scale(80)", "piece": "from distributed import Client"}
{"function_name": "locate_corpus", "function_define": "    for d in corpus_dirs:\n    if os.path.exists(d):\n    sys.exit(1)", "piece": "if os.path.exists(d):"}
{"function_name": "_get_sms_list", "function_define": "    if not sms_request:\n    sms_list = []\n    for msisdn in sms_request.to:", "piece": "sms_list = []"}
{"function_name": "_send_smses", "function_define": "    if not self.sms_data_iter:\n    key = self.reference\n    pipe.hmset(sms_key, sms_data)", "piece": "key = self.reference"}
{"function_name": "test_dict_like", "function_define": "    results = ResultMap()\n    results['1000'] = 'dir1000'\n    results['2000'] = 'dir2000'", "piece": "results['1000'] = 'dir1000'"}
{"function_name": "test_two_nodes", "function_define": "    l_list = Node(1)\n    l_list.next = Node(2)\n    l_list.next = Node(1)", "piece": "l_list.next = Node(2)"}
{"function_name": "test_odd_nodes", "function_define": "    l_list = Node(1)\n    l_list.next = Node(2)\n    l_list.next.next = Node(3)", "piece": "l_list.next = Node(2)"}
{"function_name": "test_even_nodes", "function_define": "    l_list = Node(1)\n    l_list.next = Node(2)\n    l_list.next = Node(2)", "piece": "l_list.next = Node(2)"}
{"function_name": "retrieve_json", "function_define": "    Retrieve json from github.\n    Return None if an error happens.\n    if not use_pagination:", "piece": "Return None if an error happens."}
{"function_name": "tree_sha512sum", "function_define": "    files = []\n    blob_by_name = {}\n    name_sep = line.index(b'\\t')", "piece": "blob_by_name = {}"}
{"function_name": "time_usage", "function_define": "    fname = func.__name__\n    beg_ts = time.time()\n    retval = func(*args, **kwargs)", "piece": "beg_ts = time.time()"}
{"function_name": "_valid_error", "function_define": "    model.eval()\n    losses = []\n    if torch.cuda.is_available():", "piece": "losses = []"}
{"function_name": "train_ml", "function_define": "    print('src size - ', src.size())\n    if torch.cuda.is_available():\n    src = src.cuda()", "piece": "if torch.cuda.is_available():"}
{"function_name": "train_rl_0", "function_define": "    if torch.cuda.is_available():\n    src_list = src_list.cuda()\n    policy_loss = []", "piece": "src_list = src_list.cuda()"}
{"function_name": "train_rl_1", "function_define": "    if torch.cuda.is_available():\n    src_list = src_list.cuda()\n    policy_loss = []", "piece": "src_list = src_list.cuda()"}
{"function_name": "train_rl_2", "function_define": "    if torch.cuda.is_available():\n    src_list = src_list.cuda()\n    policy_loss = []", "piece": "src_list = src_list.cuda()"}
{"function_name": "train_rl", "function_define": "    if opt.rl_method == 0:\n    elif opt.rl_method == 1:\n    elif opt.rl_method == 2:", "piece": "elif opt.rl_method == 1:"}
{"function_name": "brief_report", "function_define": "    sampled_size = 2\n    if torch.cuda.is_available():\n    src = src.data.cpu().numpy()", "piece": "if torch.cuda.is_available():"}
{"function_name": "load_data_vocab", "function_define": "    if load_train:\n    train_one2many_loader = None\n    opt.word2id = word2id", "piece": "train_one2many_loader = None"}
{"function_name": "get_stations", "function_define": "    Parameters\n    variable : str, optional\n    if variable == 'RD':", "piece": "variable : str, optional"}
{"function_name": "to_cpp_1_dim", "function_define": "    txt = '{\\t'\n    for coeff in array[:-1]:\n    txt += str(coeff) + ',\\t'", "piece": "for coeff in array[:-1]:"}
{"function_name": "to_cpp_function", "function_define": "    out = ''\n    in_dim, out_dim = k.shape\n    for j in range(out_dim):", "piece": "in_dim, out_dim = k.shape"}
{"function_name": "matchKeypoints", "function_define": "    matches = []\n    for m in rawMatches:\n    if len(matches) > 4:", "piece": "for m in rawMatches:"}
{"function_name": "drawMatches", "function_define": "    hL, wL = imageL.shape[:2]\n    hR, wR = imageR.shape[:2]\n    vis[0:hL, 0:wL] = imageL", "piece": "hR, wR = imageR.shape[:2]"}
{"function_name": "_test_run", "function_define": "    if 1 == 0:\n    dal.execute(sql)\n    dal.execute(sql)", "piece": "dal.execute(sql)"}
{"function_name": "_receive_thread", "function_define": "    while True:\n    ip = ''.join(str(ip[0]))\n    self.tello_ip_list.append(ip)", "piece": "ip = ''.join(str(ip[0]))"}
{"function_name": "to_config", "function_define": "    entries = []\n    for form in self.ordered_forms:\n    if not form.is_valid():", "piece": "for form in self.ordered_forms:"}
{"function_name": "detail_mask", "function_define": "    import kagefunc as kgf\n    bits = get_depth(clip)\n    if bits != 16:", "piece": "bits = get_depth(clip)"}
{"function_name": "mt_xxpand_multi", "function_define": "    sh = fallback(sh, sw)\n    assert clip.format is not None\n    if mode == 'ellipse':", "piece": "assert clip.format is not None"}
{"function_name": "zzdeband", "function_define": "    import zzfunc as zzf\n    plcbo_args.update(placebo_args)\n    dumb3kdb_args.update(f3kdb_args)", "piece": "plcbo_args.update(placebo_args)"}
{"function_name": "get_project_id", "function_define": "    projects = self.list_projects()\n    project_id = []\n    project_id.append(key)", "piece": "project_id = []"}
{"function_name": "new_project", "function_define": "    if project_file is not None:\n    if project_name is None:\n    params = defaults", "piece": "if project_name is None:"}
{"function_name": "get_models", "function_define": "    from get_rows().\"\"\"\n    column_index = {}\n    name = column['name']", "piece": "column_index = {}"}
{"function_name": "compute_facets", "function_define": "    name_facet = TextFacet('name')\n    if facets:\n    self.engine.set_facets(facets)", "piece": "if facets:"}
{"function_name": "get_rows", "function_define": "    if facets:\n    self.engine.set_facets(facets)\n    if sort_by is not None:", "piece": "self.engine.set_facets(facets)"}
{"function_name": "compute_clusters", "function_define": "    if params is not None:\n    clusterer['params'] = params\n    if function is not None:", "piece": "clusterer['params'] = params"}
{"function_name": "move_column", "function_define": "    if index == 'end':\n    index = len(self.columns) - 1\n    self.get_models()", "piece": "index = len(self.columns) - 1"}
{"function_name": "take_item", "function_define": "    x = pygame.mouse.get_pos()[0]\n    y = pygame.mouse.get_pos()[1]\n    item = None", "piece": "y = pygame.mouse.get_pos()[1]"}
{"function_name": "render_bag", "function_define": "    line = -1\n    sur_bag.fill((51, 42, 31))\n    for col in range(len(bag)):", "piece": "sur_bag.fill((51, 42, 31))"}
{"function_name": "filtered_details", "function_define": "    Get the filtered output.\n    filter_dict is to be applied.\n    response = list()", "piece": "filter_dict is to be applied."}
{"function_name": "apply_operators", "function_define": "    count += 1\n    count += 1\n    elif split_list[0] == 'ilike':", "piece": "count += 1"}
{"function_name": "data_gen", "function_define": "    input_shape = [224, 224, 3]\n    while True:\n    yield (image, label)", "piece": "while True:"}
{"function_name": "soil_data", "function_define": "    data_cum = 0\n    for i in range(samples):\n    data_cum += self.SOIL_ADC.read()", "piece": "for i in range(samples):"}
{"function_name": "ideal_rankine", "function_define": "    turb.compute()\n    cond.compute()\n    pump.compute()", "piece": "cond.compute()"}
{"function_name": "rankine_reheated", "function_define": "    hp_turb.compute()\n    lp_boil.compute()\n    lp_turb.compute()", "piece": "lp_boil.compute()"}
{"function_name": "test_compute_map", "function_define": "    num_predictions = 10000\n    num_gt_bboxes = 500\n    image_size = 200", "piece": "num_gt_bboxes = 500"}
{"function_name": "int_var_lndist", "function_define": "    vovn: vov * sqrt(texp)\n    Returns:\n    v2 = vovn ** 2", "piece": "Returns:"}
{"function_name": "mass_zero", "function_define": "    ww /= np.sqrt(2 * np.pi)\n    zz += mu\n    log_max = np.amax(log_mass)", "piece": "zz += mu"}
{"function_name": "cond_spot_sigma", "function_define": "    rho_alpha = self.rho * alpha\n    w0123 = w0 * w123\n    r_vol *= rhoc", "piece": "w0123 = w0 * w123"}
{"function_name": "zhat_weight", "function_define": "    vovn: vov * sqrt(texp)\n    Returns:\n    npt = self.n_quad_vovn(vovn)", "piece": "Returns:"}
{"function_name": "cond_int_var", "function_define": "    m1 = self.condvar_m1(zhat, vovn)\n    m2 = self.condvar_m2(zhat, vovn)\n    m1m2_ratio = m2 / m1 ** 2", "piece": "m2 = self.condvar_m2(zhat, vovn)"}
{"function_name": "get_long_short", "function_define": "    Parameters\n    close : DataFrame\n    lookback_high : DataFrame", "piece": "close : DataFrame"}
{"function_name": "clear_signals", "function_define": "    Parameters\n    signals : Pandas Series\n    window_size : int", "piece": "signals : Pandas Series"}
{"function_name": "filter_signals", "function_define": "    Parameters\n    signal : DataFrame\n    lookahead_days : int", "piece": "signal : DataFrame"}
{"function_name": "run_part_one", "function_define": "    bits = read_bits('input.txt')\n    gamma_rate = ''\n    epsilon_rate = ''", "piece": "gamma_rate = ''"}
{"function_name": "to_nimble_nix", "function_define": "    pkg = {'tags': []}\n    pkg.update(req.pkg)\n    pkg['name'] = req.name", "piece": "pkg.update(req.pkg)"}
{"function_name": "find_latest_rev", "function_define": "    rev = None\n    add_tag = False\n    kind = self.version['kind']", "piece": "add_tag = False"}
{"function_name": "parse_resp", "function_define": "    if 'authenticated' in resp:\n    if resp['authenticated']:\n    self.is_authenticated = True", "piece": "if resp['authenticated']:"}
{"function_name": "_compute_metrics", "function_define": "    metrics = self.metrics\n    c = self.degree_centrality()\n    c = self.closeness_centrality()", "piece": "c = self.degree_centrality()"}
{"function_name": "mobilenet", "function_define": "    data_shape = (1, 3, 224, 224)\n    name = 'MobileNetV1_1.0x'\n    main(data_shape, cfg_file, name)", "piece": "name = 'MobileNetV1_1.0x'"}
{"function_name": "shufflenet", "function_define": "    data_shape = (1, 3, 224, 224)\n    name = 'ShuffleNetV1_1.0x'\n    main(data_shape, cfg_file, name)", "piece": "name = 'ShuffleNetV1_1.0x'"}
{"function_name": "set_pixel", "function_define": "    if self.is_setup is False:\n    if type(r) is tuple:\n    r, g, b = r", "piece": "if type(r) is tuple:"}
{"function_name": "brightness", "function_define": "    self.brightness_val = b\n    if self.gui is not None:\n    self.gui.set_brightness(b)", "piece": "if self.gui is not None:"}
{"function_name": "shade_pixels", "function_define": "    width, height = self.get_shape()\n    for x in range(width):\n    for y in range(height):", "piece": "for x in range(width):"}
{"function_name": "handle_starttag", "function_define": "    if tag == 'a':\n    for variables, value in attrs:\n    if variables == 'href':", "piece": "for variables, value in attrs:"}
{"function_name": "test_leaky_relu", "function_define": "    test_alpha = tf.constant(0.1)\n    test_inp_1 = tf.constant(1.0)\n    test_inp_2 = tf.constant(-1.0)", "piece": "test_inp_1 = tf.constant(1.0)"}
{"function_name": "eventCreate", "function_define": "    if request.method == 'POST':\n    if form.is_valid():\n    form = form.save()", "piece": "if form.is_valid():"}
{"function_name": "round_filters", "function_define": "    min_depth = divisor = 8\n    orig_filters = filters\n    if not width_coefficient:", "piece": "orig_filters = filters"}
{"function_name": "mb_conv_block", "function_define": "    input_name = 'input'\n    ops = []\n    if expand_ratio > 1:", "piece": "ops = []"}
{"function_name": "mbconv_layer", "function_define": "    prefix = f'mbconv{block_id}'\n    constants = block.constants\n    ops = list(block.graph.ops)", "piece": "constants = block.constants"}
{"function_name": "efficietnet", "function_define": "    drop_connect_rate = 0.2\n    ops = []\n    constants = {}", "piece": "ops = []"}
{"function_name": "login_handler", "function_define": "    if errors:\n    if principal_id is not None:\n    request = self.request", "piece": "if principal_id is not None:"}
{"function_name": "resources", "function_define": "    request = self.request\n    if configuration is not None:\n    yield bundle", "piece": "if configuration is not None:"}
{"function_name": "flip_dim", "function_define": "    is applied across the images.\n    Returns:\n    flipped = []", "piece": "Returns:"}
{"function_name": "get_random_scale", "function_define": "    Returns:\n    returned instead.\n    if step_size == 0:", "piece": "returned instead."}
{"function_name": "resolve_shape", "function_define": "    scope: Optional name scope.\n    Returns:\n    if rank is not None:", "piece": "Returns:"}
{"function_name": "resize_to_range", "function_define": "    scope: Optional name scope.\n    Returns:\n    new_tensor_list = []", "piece": "Returns:"}
{"function_name": "gaussian_blur", "function_define": "    Returns:\n    kernel_size = radius * 2 + 1\n    if expand_batch_dim:", "piece": "kernel_size = radius * 2 + 1"}
{"function_name": "color_jitter", "function_define": "    Returns:\n    The distorted image tensor.\n    if brightness == 0:", "piece": "The distorted image tensor."}
{"function_name": "cutout_with_mask", "function_define": "    the cutout mask applied to it.\n    cutout mask applied to it.\n    Returns:", "piece": "cutout mask applied to it."}
{"function_name": "apply_transform", "function_define": "    if brightness == 0:\n    if contrast == 0:\n    if saturation == 0:", "piece": "if contrast == 0:"}
{"function_name": "form_name_view", "function_define": "    if request.method == 'POST':\n    form = FormName(request.POST)\n    if form.is_valid():", "piece": "form = FormName(request.POST)"}
{"function_name": "pull_handler", "function_define": "    chunk = self.queue.get_nowait()\n    except Empty:\n    chunk_size = len(chunk)", "piece": "except Empty:"}
{"function_name": "readCounts", "function_define": "    if diffLeft >= 32768:\n    diffLeft -= 65536\n    if diffRight >= 32768:", "piece": "diffLeft -= 65536"}
{"function_name": "cardSave", "function_define": "    if request.method == 'POST':\n    body = None\n    if request.is_ajax():", "piece": "body = None"}
{"function_name": "minCount", "function_define": "    res = []\n    for x in coins:\n    res.append(x // 2 + x % 2)", "piece": "for x in coins:"}
{"function_name": "save_profile", "function_define": "    if not hasattr(user, 'profile'):\n    profile.roll_number = profile.id\n    profile.is_email_verified = True", "piece": "profile.roll_number = profile.id"}
{"function_name": "dns_resolve", "function_define": "    addrs = []\n    for item in answer:\n    addrs.append(item.address)", "piece": "for item in answer:"}
{"function_name": "update_inputs", "function_define": "    shape = sequence.shape\n    B, L = shape\n    N = positions.shape[1]", "piece": "B, L = shape"}
{"function_name": "set_goal", "function_define": "    self.problem.goal = goal\n    if isinstance(goal, Atom):\n    raise NotImplementedError", "piece": "if isinstance(goal, Atom):"}
{"function_name": "action_generator", "function_define": "    all_ops = set()\n    fluent_candidates = set()\n    sig = fluent.signature", "piece": "fluent_candidates = set()"}
{"function_name": "test_flatten", "function_define": "    optax_sgd_params = init_params()\n    sgd = alias.sgd(0.01, 0.0)\n    optax_sgd_params = init_params()", "piece": "sgd = alias.sgd(0.01, 0.0)"}
{"function_name": "create_shelf", "function_define": "    with self._lock:\n    self._last_shelf_id += 1\n    shelf_id = self._last_shelf_id", "piece": "self._last_shelf_id += 1"}
{"function_name": "create_book", "function_define": "    with self._lock:\n    shelf_info._last_book_id += 1\n    book.id = book_id", "piece": "shelf_info._last_book_id += 1"}
{"function_name": "upload_reports", "function_define": "    g_auth = GoogleAuth()\n    drive = GoogleDrive(g_auth)\n    for report_path in report_paths:", "piece": "drive = GoogleDrive(g_auth)"}
{"function_name": "gen_run_report", "function_define": "    writer.writeheader()\n    n_run = 0\n    for run in runs:", "piece": "n_run = 0"}
{"function_name": "update_runner", "function_define": "    i = int(idx / 4)\n    j = idx % 4\n    if j == 0:", "piece": "j = idx % 4"}
{"function_name": "_type_helper", "function_define": "    pass_to_func = {}\n    keys = []\n    inpt_size_type = []", "piece": "keys = []"}
{"function_name": "_name_helper", "function_define": "    names = kwargs[kw]\n    if names is None:\n    names = []", "piece": "if names is None:"}
{"function_name": "_correct_outputs", "function_define": "    if isinstance(keys[0], str):\n    keys = [keys]\n    stack = [stack]", "piece": "keys = [keys]"}
{"function_name": "_pass_by_frames", "function_define": "    if self.as_tuple:\n    if not fr:\n    out[fr, ...] = res", "piece": "if not fr:"}
{"function_name": "readline_gzip", "function_define": "    with gzip.open(path, 'rt') as f:\n    for line in f:\n    yield line", "piece": "for line in f:"}
{"function_name": "readline", "function_define": "    with open(path, 'r') as f:\n    for line in f:\n    yield line", "piece": "for line in f:"}
{"function_name": "save_count", "function_define": "    counts = Counter(values)\n    with open(path, 'w') as f:\n    f.write('%s %d\\n' % (w, count))", "piece": "with open(path, 'w') as f:"}
{"function_name": "load_count", "function_define": "    counts = Counter()\n    with open(path, 'r') as f:\n    for line in f:", "piece": "with open(path, 'r') as f:"}
{"function_name": "parse_sentence", "function_define": "    stemmer = PorterStemmer()\n    opinion_pos = None\n    aspect_pos = None", "piece": "opinion_pos = None"}
{"function_name": "flatten_json", "function_define": "    csv_content = {}\n    if not isinstance(v, dict):\n    csv_content[k] = v", "piece": "if not isinstance(v, dict):"}
{"function_name": "dict_to_csv", "function_define": "    with open(path, 'w') as f:\n    writer.writeheader()\n    writer.writerow(json_content)", "piece": "writer.writeheader()"}
{"function_name": "array2string", "function_define": "    assert len(np.shape(x)) <= 2\n    if len(np.shape(x)) == 1:\n    elif len(np.shape(x)) == 2:", "piece": "if len(np.shape(x)) == 1:"}
{"function_name": "__do_layout", "function_define": "    self.SetSizer(grid_sizer_1)\n    grid_sizer_1.Fit(self)\n    self.Layout()", "piece": "grid_sizer_1.Fit(self)"}
{"function_name": "_build_str_forms", "function_define": "    form_str = ''\n    for key in forms_list:\n    value = self.forms[key]", "piece": "for key in forms_list:"}
{"function_name": "file_str", "function_define": "    form_str = b''\n    if self.file_size_left:\n    for key in self.files_keys[:]:", "piece": "if self.file_size_left:"}
{"function_name": "analyzeFunction", "function_define": "    fname = vw.getName(fva)\n    api = vw.getImpApi(fname)\n    if api == None:", "piece": "api = vw.getImpApi(fname)"}
{"function_name": "_dense_block", "function_define": "    outputs = []\n    outputs.append(geo_out)\n    vertex_features = outputs[-1]", "piece": "outputs.append(geo_out)"}
{"function_name": "make_layers", "function_define": "    layers = []\n    in_channels = 3\n    for v in cfg:", "piece": "in_channels = 3"}
{"function_name": "test_cmdline", "function_define": "    basedir = mkdtemp()\n    yield assert_false(path_exists)\n    rmtree(basedir)", "piece": "yield assert_false(path_exists)"}
{"function_name": "_get_access_maps", "function_define": "    exprs = list(insn.assignees)\n    if access_dir == 'any':\n    exprs.append(insn.expression)", "piece": "if access_dir == 'any':"}
{"function_name": "ChooseAction", "function_define": "    action = rand_action[1]\n    F = Actions[action]\n    max_index = 1", "piece": "F = Actions[action]"}
{"function_name": "ActionToState", "function_define": "    z_accel = (-g + F / m) * 100\n    z_accel_old = z_accel\n    z_vel_old = z_vel", "piece": "z_accel_old = z_accel"}
{"function_name": "auth_scope", "function_define": "    if group and group.name:\n    except Exception as e:\n    if self.auth == 2:", "piece": "except Exception as e:"}
{"function_name": "use_cdkey", "function_define": "    CDKey.active_cdkey(key, user_id)\n    user.auth = data['auth']\n    user.save()", "piece": "user.auth = data['auth']"}
{"function_name": "paste_image", "function_define": "    for val in self.key_type_buffer:\n    if str(current[1]) in val:\n    self.keyboard_obj.press('v')", "piece": "if str(current[1]) in val:"}
{"function_name": "paste_file", "function_define": "    for val in self.key_type_buffer:\n    if str(current[1]) in val:\n    rawData = self.buffer[buffers]", "piece": "if str(current[1]) in val:"}
{"function_name": "paste_text", "function_define": "    for val in self.key_type_buffer:\n    if str(current[1]) in val:\n    self.keyboard_obj.press('v')", "piece": "if str(current[1]) in val:"}
{"function_name": "computeLWS", "function_define": "    Compute Linsear Write Score\n    if intermediateScore > 20:\n    lws = intermediateScore / 2", "piece": "if intermediateScore > 20:"}
{"function_name": "make_async", "function_define": "    Example::\n    Non Decorator Example::\n    self.value = 1", "piece": "Non Decorator Example::"}
{"function_name": "_perc_to_color", "function_define": "    value = int(string)\n    except ValueError:\n    if value < self.threshold_bad:", "piece": "except ValueError:"}
{"function_name": "_get_percentage", "function_define": "    text = p.search(output).group()\n    int(text)\n    except ValueError:", "piece": "int(text)"}
{"function_name": "full_analysis", "function_define": "    details = describe(sequence)\n    print(details)\n    sequence_plot.show()", "piece": "print(details)"}
{"function_name": "get_entropy", "function_define": "    entropy = 0\n    for state in alphabet:\n    if alphabet_entropy == 0:", "piece": "for state in alphabet:"}
{"function_name": "get_complexity", "function_define": "    pre_log = 1 / len(alphabet)\n    hmax = -math.log(pre_log)\n    if hmax == 0:", "piece": "hmax = -math.log(pre_log)"}
{"function_name": "get_subsequences", "function_define": "    subsequences = []\n    if len(temp) > 0:\n    subsequences.extend(temp)", "piece": "if len(temp) > 0:"}
{"function_name": "get_all_ngrams", "function_define": "    all_ngrams = []\n    this_ngram = sequence[x:x + n]\n    all_ngrams.append(this_ngram)", "piece": "this_ngram = sequence[x:x + n]"}
{"function_name": "get_ngram_counts", "function_define": "    Parameters\n    sequence : list(int)\n    this_ngram = sequence[x:x + n]", "piece": "sequence : list(int)"}
{"function_name": "plot_sequence", "function_define": "    np_sequence = np.array(sequence)\n    plt.ylim(-1, len(unique_values))\n    if highlighted_ngrams != []:", "piece": "plt.ylim(-1, len(unique_values))"}
{"function_name": "plot_sequence_1d", "function_define": "    np_sequence = np.array(sequence)\n    plt.ylim(-0.3, 1.3)\n    plt.xlabel('Position, p')", "piece": "plt.ylim(-0.3, 1.3)"}
{"function_name": "color_matrix", "function_define": "    Parameters\n    matrix: DataFrame\n    cmap: string", "piece": "matrix: DataFrame"}
{"function_name": "highlight_ngram", "function_define": "    n = len(ngram)\n    match_positions = []\n    this_ngram = sequence[x:x + n]", "piece": "match_positions = []"}
{"function_name": "test_import", "function_define": "    correct_out = ''\n    class MyOut(object):\n    self.data = []", "piece": "class MyOut(object):"}
{"function_name": "test_create_ini", "function_define": "    import os.path\n    manager.create_config(_dir)\n    exists = os.path.isfile(_dir)", "piece": "manager.create_config(_dir)"}
{"function_name": "test_open_ini", "function_define": "    import os.path\n    manager.create_config(_dir)\n    import configparser", "piece": "manager.create_config(_dir)"}
{"function_name": "test_error_login", "function_define": "    request = ''\n    answer = names.LoginError\n    dict_r = json.loads(response)", "piece": "answer = names.LoginError"}
{"function_name": "all_silhouettes", "function_define": "    silhouettes = []\n    for idata in range(len(data)):\n    n_idata_cluster = 0", "piece": "for idata in range(len(data)):"}
{"function_name": "plot_silhouettes", "function_define": "    import matplotlib.pyplot as plt\n    import random\n    for i in range(len(barli)):", "piece": "import random"}
{"function_name": "get_train_norm", "function_define": "    means = []\n    stds = []\n    for img, label in self.trainset:", "piece": "stds = []"}
{"function_name": "gamma_correction", "function_define": "    for i in range(256):\n    if ch != None:\n    if benG_single:", "piece": "if ch != None:"}
{"function_name": "cmd_ci_groups", "function_define": "    tf_block.add_block(tf_key_block)\n    member_id = member_id.lower()\n    tf_block.add_block(tf_key_block)", "piece": "member_id = member_id.lower()"}
{"function_name": "tf_member", "function_define": "    member_id = member_id.lower()\n    tf_block.add_block(tf_key_block)\n    for role in roles:", "piece": "tf_block.add_block(tf_key_block)"}
{"function_name": "is_ticket_valid", "function_define": "    for n in ticket.ns:\n    valid_for_any = False\n    for rule in rules:", "piece": "valid_for_any = False"}
{"function_name": "load_state_dict", "function_define": "    if not self.reinit:\n    own_state = self.state_dict()\n    if self.args.load_transfer:", "piece": "own_state = self.state_dict()"}
{"function_name": "_unicode", "function_define": "    from functools import wraps\n    import sys\n    if sys.version_info < (3,):", "piece": "import sys"}
{"function_name": "bindeval", "function_define": "    if expr == 'g:':\n    elif expr == '{}':\n    elif expr == '[]':", "piece": "elif expr == '{}':"}
{"function_name": "_emul_getbufvar", "function_define": "    import re\n    if varname[0] == '&':\n    if bufnr == '%':", "piece": "if varname[0] == '&':"}
{"function_name": "_emul_getpos", "function_define": "    if expr == '.':\n    if expr == 'v':\n    raise NotImplementedError", "piece": "if expr == 'v':"}
{"function_name": "_emul_expand", "function_define": "    global _abuf\n    if expr == '<abuf>':\n    raise NotImplementedError", "piece": "if expr == '<abuf>':"}
{"function_name": "_emul_exists", "function_define": "    if ident.startswith('g:'):\n    elif ident.startswith(':'):\n    raise NotImplementedError", "piece": "elif ident.startswith(':'):"}
{"function_name": "_emul_line", "function_define": "    if expr == 'w0':\n    if expr == 'w$':\n    raise NotImplementedError", "piece": "if expr == 'w$':"}
{"function_name": "_start_mode", "function_define": "    global _mode\n    if mode == 'i':\n    elif _mode == 'i':", "piece": "if mode == 'i':"}
{"function_name": "_set_dict", "function_define": "    if not setfunc:\n    d[k] = v\n    old = {}", "piece": "d[k] = v"}
{"function_name": "_close_window", "function_define": "    curwinnr = self.window.number\n    win = self.windows._pop(winnr)\n    self.window = self.windows[-1]", "piece": "win = self.windows._pop(winnr)"}
{"function_name": "__setslice__", "function_define": "    self.options['modified'] = 1\n    self.vars['changedtick'] += 1\n    from copy import copy", "piece": "self.vars['changedtick'] += 1"}
{"function_name": "update_field", "function_define": "    client: the test client\n    id: the recipe ID to update\n    assert resp.is_json", "piece": "id: the recipe ID to update"}
{"function_name": "sparrows", "function_define": "    Weight (in grams)\n    Wing length (in mm)\n    path: str.", "piece": "Wing length (in mm)"}
{"function_name": "toggle_intrested", "function_define": "    rental.intrested.remove(user)\n    added = False\n    added = False", "piece": "added = False"}
{"function_name": "honeypot", "function_define": "    print('IP \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d')\n    elif result:\n    print(' \u0427\u0442\u043e-\u0442\u043e \u043f\u043e\u0448\u043b\u043e \u043d\u0435 \u0442\u0430\u043a ')", "piece": "elif result:"}
{"function_name": "get_finger", "function_define": "    img = self.cam.read()\n    if hands:\n    hand = hands[-1]", "piece": "if hands:"}
{"function_name": "fingers_click", "function_define": "    posx, posy = finger1\n    posx1, posy1 = finger2\n    if length < 40:", "piece": "posx1, posy1 = finger2"}
{"function_name": "test_got_search", "function_define": "    sSearch = 'Great Widget'\n    oSearch.save()\n    sSearch = 'Phenominal Gadget'", "piece": "oSearch.save()"}
{"function_name": "test_compare1", "function_define": "    assert compare(2, x, x) == '<'\n    assert compare(x, 2, x) == '>'\n    assert compare(2, 3, x) == '='", "piece": "assert compare(x, 2, x) == '>'"}
{"function_name": "test_sign1", "function_define": "    assert sign(Rational(0), x) == 0\n    assert sign(Rational(3), x) == 1\n    assert sign(log(x), x) == 1", "piece": "assert sign(Rational(3), x) == 1"}
{"function_name": "test_sign2", "function_define": "    assert sign(x, x) == 1\n    assert sign(-x, x) == -1\n    y = Symbol('y', positive=True)", "piece": "assert sign(-x, x) == -1"}
{"function_name": "test_rewrite1", "function_define": "    e = exp(x)\n    e = exp(x ** 2)\n    e = exp(x + 1 / x)", "piece": "e = exp(x ** 2)"}
{"function_name": "test_limit1", "function_define": "    assert gruntz(x, x, oo) == oo\n    assert gruntz(x, x, -oo) == -oo\n    assert gruntz(-x, x, oo) == -oo", "piece": "assert gruntz(x, x, -oo) == -oo"}
{"function_name": "test_issue_2073", "function_define": "    n = Symbol('n')\n    r = Symbol('r', positive=True)\n    c = Symbol('c')", "piece": "r = Symbol('r', positive=True)"}
{"function_name": "test_build", "function_define": "    postal = generate_parser()\n    item = next(postal)\n    assert item.zip == '1500013'", "piece": "item = next(postal)"}
{"function_name": "find_country", "function_define": "    cap_country = ctry.capitalize()\n    countries = json.load(file)\n    if found_country is None:", "piece": "countries = json.load(file)"}
{"function_name": "generate_code", "function_define": "    length = 6\n    if new_length is not None:\n    length = new_length", "piece": "if new_length is not None:"}
{"function_name": "filter_from_opts", "function_define": "    if not no_filters and filter_in:\n    if filter_in:\n    active = filter_in", "piece": "if filter_in:"}
{"function_name": "call_and_wrap", "function_define": "    click_exception(ex)\n    except urllib3exc.SSLError:\n    if _insecure_warning:", "piece": "except urllib3exc.SSLError:"}
{"function_name": "_do_output", "function_define": "    loglines = []\n    while remaining and wrapped:\n    loglines.append(wrapped.pop(0))", "piece": "while remaining and wrapped:"}
{"function_name": "clean_file", "function_define": "    data = ''\n    file = open(file_path, 'r')\n    line = file.readline()", "piece": "file = open(file_path, 'r')"}
{"function_name": "browse_structure", "function_define": "    child_id = None\n    for element in elements:\n    if type(element) == list:", "piece": "for element in elements:"}
{"function_name": "open_dialog", "function_define": "    See also tkinter's document.\n    filename, str\n    root = tk.Tk()", "piece": "filename, str"}
{"function_name": "saveas_dialog", "function_define": "    See also tkinter's document.\n    filename, str\n    root = tk.Tk()", "piece": "filename, str"}
{"function_name": "forward_single", "function_define": "    cls_feat = x\n    reg_feat = x\n    embedding_feat = x", "piece": "reg_feat = x"}
{"function_name": "copy_files", "function_define": "    for f in files:\n    f = Path(f)\n    parent = f.parent", "piece": "f = Path(f)"}
{"function_name": "before_request", "function_define": "    if not client_id:\n    client = Client.get(client_id)\n    if over_limit(client):", "piece": "client = Client.get(client_id)"}
{"function_name": "tokengetter", "function_define": "    if access_token:\n    if refresh_token:\n    self._tokengetter = f", "piece": "if refresh_token:"}
{"function_name": "tokensetter", "function_define": "    the other is request::\n    u'access_token': u'<KEY>',\n    u'token_type': u'Bearer',", "piece": "u'access_token': u'<KEY>',"}
{"function_name": "require_oauth", "function_define": "    server = self.server\n    valid, req = func(valid, req)\n    if not valid:", "piece": "valid, req = func(valid, req)"}
{"function_name": "validate_code", "function_define": "    if not grant:\n    log.debug('Grant not found.')\n    log.debug('Grant is expired.')", "piece": "log.debug('Grant not found.')"}
{"function_name": "decorated", "function_define": "    server = self.server\n    valid, req = func(valid, req)\n    if not valid:", "piece": "valid, req = func(valid, req)"}
{"function_name": "test_arguments", "function_define": "    with AssertRaises(ValueError):\n    with AssertRaises(ValueError):\n    print('Arguments test passed.')", "piece": "with AssertRaises(ValueError):"}
{"function_name": "test_open_close", "function_define": "    assert spi.fd > 0\n    assert spi.mode == 1\n    assert spi.max_speed == 100000", "piece": "assert spi.mode == 1"}
{"function_name": "test_loopback", "function_define": "    buf_in = list(range(256)) * 4\n    buf_out = spi.transfer(buf_in)\n    assert buf_out == buf_in", "piece": "buf_out = spi.transfer(buf_in)"}
{"function_name": "test_interactive", "function_define": "    spi.transfer([85, 170, 15, 240])\n    spi.mode = 1\n    spi.transfer([85, 170, 15, 240])", "piece": "spi.mode = 1"}
{"function_name": "reach_data_end", "function_define": "    req.reader_name = reader_name\n    req.pod_id = pod_id\n    with conn.lock:", "piece": "req.pod_id = pod_id"}
{"function_name": "webhookHandler", "function_define": "    if request.method == 'POST':\n    message = update.message\n    callback = update.callback_query", "piece": "message = update.message"}
{"function_name": "replyCommand", "function_define": "    text = text.strip()\n    lowerText = text.lower()\n    editFav(chat_id, text)", "piece": "lowerText = text.lower()"}
{"function_name": "callbackConstr", "function_define": "    chat_id = message.chat.id\n    busStopNo = data.get('s')\n    routeNo = data.get('r')", "piece": "busStopNo = data.get('s')"}
{"function_name": "reset_graph", "function_define": "    node.gradient = None\n    node.times_visited = 0\n    node.times_used = 0", "piece": "node.times_visited = 0"}
{"function_name": "define_path", "function_define": "    if node.childrens != []:\n    for child in node.childrens:\n    node_child = child['node']", "piece": "for child in node.childrens:"}
{"function_name": "_prompt_args", "function_define": "    except Exception as e:\n    if not ok or not s:\n    args = _parse_snippet(s)", "piece": "if not ok or not s:"}
{"function_name": "_show_shortcuts", "function_define": "    out = []\n    for n in sorted(shortcuts):\n    print('Keyboard shortcuts')", "piece": "for n in sorted(shortcuts):"}
{"function_name": "_show_snippets", "function_define": "    out = []\n    for n in sorted(snippets):\n    snippet = snippets[n]", "piece": "for n in sorted(snippets):"}
{"function_name": "_expected_args", "function_define": "    if isinstance(f, partial):\n    f_args = argspec.args\n    if 'self' in f_args:", "piece": "f_args = argspec.args"}
{"function_name": "_create_qaction", "function_define": "    name = kwargs.get('name', '')\n    action = QAction(name, gui)\n    args = (is_checked,) + args", "piece": "action = QAction(name, gui)"}
{"function_name": "_get_menu", "function_define": "    menu = menu or self.menu\n    view = view or self.view\n    if view:", "piece": "view = view or self.view"}
{"function_name": "separator", "function_define": "    Parameters\n    menu : str\n    if it doesn't exist.", "piece": "menu : str"}
{"function_name": "shortcuts", "function_define": "    out = {}\n    if not action.show_shortcut:\n    continue", "piece": "if not action.show_shortcut:"}
{"function_name": "mode_off", "function_define": "    self.gui.unlock_status()\n    self.actions.disable()\n    for actions in self.gui.actions:", "piece": "self.actions.disable()"}
{"function_name": "makeLayout", "function_define": "    layout = QGridLayout(self)\n    title = QLabel('Trap RF Client')\n    title.setFont(font)", "piece": "title = QLabel('Trap RF Client')"}
{"function_name": "sort_dict", "function_define": "    d = list(d.items())\n    if key is None:\n    key = lambda x: x[sort_by_index]", "piece": "if key is None:"}
{"function_name": "assemble", "function_define": "    ret_opcode = 8 << 12\n    if self.src == EAMode.DRD:\n    ret_opcode |= self.src.data << 9", "piece": "if self.src == EAMode.DRD:"}
{"function_name": "get_word_length", "function_define": "    parts = command.split('.')\n    if len(parts) == 1:\n    size = OpSize.WORD", "piece": "if len(parts) == 1:"}
{"function_name": "screenshot", "function_define": "    screenshot = Screenshot(browser)\n    yield screenshot\n    finally:", "piece": "yield screenshot"}
{"function_name": "test_tracking", "function_define": "    r = app.get('/')\n    assert r.status_code == 200\n    assert len(responses.calls) == 1", "piece": "assert r.status_code == 200"}
{"function_name": "getGameProgress", "function_define": "    max_level: int = 1\n    cur_level: int = 1\n    idle_time: int = 5", "piece": "cur_level: int = 1"}
{"function_name": "ParseArgs", "function_define": "    filePattern = None\n    strPattern = None\n    ignoreCase = False", "piece": "strPattern = None"}
{"function_name": "execute_com", "function_define": "    print(command)\n    if command == 8:\n    arduino.write(b'8')", "piece": "if command == 8:"}
{"function_name": "test_s3_glob", "function_define": "    import os\n    if profile:\n    logger.upload_dir('.', target)", "piece": "if profile:"}
{"function_name": "nuke_users", "function_define": "    users = None\n    if ctype_as_string == 'user':\n    users = queryset", "piece": "if ctype_as_string == 'user':"}
{"function_name": "JSONfromID", "function_define": "    Parameters\n    id_range : RANGE, optional\n    per_page : INTEGER, optional", "piece": "id_range : RANGE, optional"}
{"function_name": "searchVinted", "function_define": "    Parameters\n    searchText : STRING, optional\n    catalog : LIST, optional", "piece": "searchText : STRING, optional"}
{"function_name": "getField", "function_define": "    Parameters\n    items : LIST\n    field_names : LIST, optional", "piece": "items : LIST"}
{"function_name": "brandIds", "function_define": "    Parameters\n    id_name : STRING\n    id_supported : DICTIONARY", "piece": "id_name : STRING"}
{"function_name": "regexMatching", "function_define": "    Parameters\n    id_name : STRING\n    id_supported : DICTIONARY", "piece": "id_name : STRING"}
{"function_name": "matchingIDs", "function_define": "    Parameters\n    ID_name : STRING\n    IDs : LIST", "piece": "ID_name : STRING"}
{"function_name": "treeWalk", "function_define": "    Parameters\n    ID_name : STRING\n    ID : STRING", "piece": "ID_name : STRING"}
{"function_name": "matchNames", "function_define": "    Parameters\n    ID_name : STRING\n    ID : STRING", "piece": "ID_name : STRING"}
{"function_name": "data_received", "function_define": "    data = data.decode('utf-8')\n    if len(data) < expected_length:\n    if len(data) > expected_length:", "piece": "if len(data) < expected_length:"}
{"function_name": "_new_message", "function_define": "    if not self.uuid:\n    if 'server' in message:\n    self.server = message['server']", "piece": "if 'server' in message:"}
{"function_name": "get_history", "function_define": "    if not queues:\n    queues = self.subscriptions\n    if not queues:", "piece": "queues = self.subscriptions"}
{"function_name": "subscribe", "function_define": "    if not queues:\n    queues = [queues]\n    for q in queues:", "piece": "queues = [queues]"}
{"function_name": "unsubscribe", "function_define": "    if not queues:\n    queues = [queues]\n    for q in queues:", "piece": "queues = [queues]"}
{"function_name": "list_traded", "function_define": "    Returns:\n    List[Dict]: [description]\n    include_api_key = True", "piece": "List[Dict]: [description]"}
{"function_name": "vocab_size", "function_define": "    Return the size of vocabulary.\n    Returns:\n    int: The size of vocabulary.", "piece": "Returns:"}
{"function_name": "make_window", "function_define": "    label = Gtk.Label(label=text)\n    box.add(label)\n    box.add(button)", "piece": "box.add(label)"}
{"function_name": "prepare_dirs", "function_define": "    if os.path.isdir(path_to_subj):\n    shutil.rmtree(path_to_subj)\n    os.makedirs(model_path)", "piece": "shutil.rmtree(path_to_subj)"}
{"function_name": "cv_per_subj_test", "function_define": "    best_val_epochs = []\n    best_val_aucs = []\n    folds = 4", "piece": "best_val_aucs = []"}
{"function_name": "get_sqrt_inv_cov", "function_define": "    num_classes = len(set(Y))\n    num_features = X.shape[1]\n    for y in set(Y):", "piece": "num_features = X.shape[1]"}
{"function_name": "get_data_params", "function_define": "    num_classes = len(set(Y))\n    num_features = X.shape[1]\n    class_map = get_class_map()", "piece": "num_features = X.shape[1]"}
{"function_name": "add_points", "function_define": "    if num_copies == 0:\n    x = np.array(x).reshape(-1)\n    if sparse.issparse(X):", "piece": "x = np.array(x).reshape(-1)"}
{"function_name": "signal_flow", "function_define": "    Parameters\n    A : [type]\n    A = A.copy()", "piece": "A : [type]"}
{"function_name": "add_bubble", "function_define": "    height = bubble.get_height()\n    bubble[0].set_stroke(None, 0)\n    bubble_target = bubble.copy()", "piece": "bubble[0].set_stroke(None, 0)"}
{"function_name": "count_items", "function_define": "    file_open = open(out_name, 'a')\n    label = 0\n    count = {}", "piece": "label = 0"}
{"function_name": "recreate_db", "function_define": "    db.drop_all()\n    db.create_all()\n    db.session.commit()", "piece": "db.create_all()"}
{"function_name": "setup_general", "function_define": "    Role.insert_roles()\n    if role_admin is not None:\n    user.save()", "piece": "if role_admin is not None:"}
{"function_name": "on_evaluate", "function_define": "    self.logger.log(mask_metrics)\n    model.mask_metrics = None\n    model.mask_metrics_count = 0", "piece": "model.mask_metrics = None"}
{"function_name": "binerize_fn", "function_define": "    logits = pred.predictions\n    if isinstance(logits, tuple):\n    logits, = logits[:1]", "piece": "if isinstance(logits, tuple):"}
{"function_name": "test_list_repos", "function_define": "    github = Github()\n    github.authenticate('amol9')\n    repos = github.list_repos()", "piece": "github.authenticate('amol9')"}
{"function_name": "test_create_repo", "function_define": "    github = Github()\n    github.authenticate('amol9')\n    repo_name = 'testrepo'", "piece": "github.authenticate('amol9')"}
{"function_name": "test_delete_repo", "function_define": "    github = Github()\n    github.authenticate('amol9')\n    repo_name = 'testrepo'", "piece": "github.authenticate('amol9')"}
{"function_name": "_parse_xml", "function_define": "    LOGGER.warning(msg)\n    raise CannotHandleAssertion(msg)\n    if len(name_id_policies) > 0:", "piece": "raise CannotHandleAssertion(msg)"}
{"function_name": "parse_detached", "function_define": "    except UnicodeDecodeError:\n    if signature and sig_alg:\n    if not verifier:", "piece": "if signature and sig_alg:"}
{"function_name": "set_state", "function_define": "    state = sim.get_state()\n    qpos = x[:sim.model.nq]\n    qvel = x[sim.model.nq:]", "piece": "qpos = x[:sim.model.nq]"}
{"function_name": "get_mockup_data", "function_define": "    result = json.loads(result)\n    columns = list(df.columns)\n    result.insert(0, columns)", "piece": "columns = list(df.columns)"}
{"function_name": "euler_cocycle", "function_define": "    for face in tri.faces(2):\n    for i in range(3):\n    perm = face.faceMapping(1, i)", "piece": "for i in range(3):"}
{"function_name": "coboundary", "function_define": "    it again here.\n    delta = []\n    for edge in tri.edges():", "piece": "delta = []"}
{"function_name": "transform_y_data", "function_define": "    y_train = OrderedDict()\n    y_val = OrderedDict()\n    for col in cols:", "piece": "y_val = OrderedDict()"}
{"function_name": "validate_data", "function_define": "    tokenizer = load_tokenizer()\n    y_val = {}\n    for col in constants.COLS:", "piece": "y_val = {}"}
{"function_name": "parent_loc", "function_define": "    connected.\n    sref = _h_section_ref(sec=sec)\n    parent = sref.parent().sec", "piece": "sref = _h_section_ref(sec=sec)"}
{"function_name": "set_status", "function_define": "    sfilep = sdir + '/' + hostname\n    sfile = open(sfilep, 'w')\n    sfile.write(status)", "piece": "sfile = open(sfilep, 'w')"}
{"function_name": "create_packet", "function_define": "    eth_type = bytes.fromhex('1111')\n    mac_dst = MAC_BROADCAST_B\n    if machost_dst is None:", "piece": "mac_dst = MAC_BROADCAST_B"}
{"function_name": "send_packet", "function_define": "    if data is not None:\n    s.send(data)\n    h = get_mac_arp(hostname)[0]", "piece": "s.send(data)"}
{"function_name": "check_packet", "function_define": "    res = False\n    for i in netifaces.interfaces():\n    if data[0:6].hex() == i_mac:", "piece": "for i in netifaces.interfaces():"}
{"function_name": "get_magic_packet", "function_define": "    size = WOL_SIZE\n    payload = s_rec.recv(size)\n    if check_packet(payload):", "piece": "payload = s_rec.recv(size)"}
{"function_name": "_parsed_response", "function_define": "    if response.status_code == 429:\n    print(response.text)\n    print(response.text)", "piece": "print(response.text)"}
{"function_name": "periodic_delta", "function_define": "    delta = c1 - c2\n    dx = abs(delta.x)\n    if dx > Won2:", "piece": "dx = abs(delta.x)"}
{"function_name": "add_forces", "function_define": "    collision_grid.rebuild(meshes)\n    collision_grid.collide()\n    for im1, m in enumerate(meshes):", "piece": "collision_grid.collide()"}
{"function_name": "refresh_physics", "function_define": "    if not self.fixed:\n    self.refresh_translation()\n    self.clear_forces()", "piece": "self.refresh_translation()"}
{"function_name": "apply_force", "function_define": "    r = point - self.cm\n    unit_to_cm = r.normalize()\n    self.normal_force += force", "piece": "unit_to_cm = r.normalize()"}
{"function_name": "is_in_collision", "function_define": "    for other in others:\n    distance = delta.length()\n    if distance <= rsum + COLL_TOL:", "piece": "distance = delta.length()"}
{"function_name": "collide_spring", "function_define": "    distance = delta.length()\n    if distance <= rsum + COLL_TOL:\n    gap = distance - rsum", "piece": "if distance <= rsum + COLL_TOL:"}
{"function_name": "coord2grid", "function_define": "    if x < 0:\n    x = self.nx - 1\n    if x >= self.nx:", "piece": "x = self.nx - 1"}
{"function_name": "collide_with", "function_define": "    exist = 0 <= y < self.ny\n    if not exist:\n    if x < 0:", "piece": "if not exist:"}
{"function_name": "node_xyz", "function_define": "    Parameters\n    node : int\n    Node number.", "piece": "node : int"}
{"function_name": "organize_files", "function_define": "    for item in os.scandir():\n    if item.is_dir():\n    continue", "piece": "if item.is_dir():"}
{"function_name": "describe_mask", "function_define": "    ranges = []\n    prev_hit = False\n    for i in range(len(mask) * 8):", "piece": "prev_hit = False"}
{"function_name": "createFile", "function_define": "    if not os.path.isdir(path):\n    os.makedirs(path)\n    fh.write(output)", "piece": "os.makedirs(path)"}
{"function_name": "create_db_user", "function_define": "    self._setup()\n    print('DBFile:CreateDbUser')\n    os.mkdir(self._db_path)", "piece": "print('DBFile:CreateDbUser')"}
{"function_name": "create_db_tracks", "function_define": "    self._setup()\n    print('DBFile:CreateDbTracks')\n    os.mkdir(self._db_path)", "piece": "print('DBFile:CreateDbTracks')"}
{"function_name": "_test_db_exists", "function_define": "    Private member function\n    exists = False\n    exists = True", "piece": "exists = False"}
{"function_name": "search_user", "function_define": "    self._setup()\n    User = Query()\n    if by == 'username':", "piece": "User = Query()"}
{"function_name": "mod_user_by_hash", "function_define": "    self._open_tiny_db()\n    db_entry_id = db_entry.doc_id\n    value = json.loads(value)", "piece": "db_entry_id = db_entry.doc_id"}
{"function_name": "write_branch", "function_define": "    self._open_tiny_db()\n    if find_hash is None:\n    self.db.insert(track)", "piece": "if find_hash is None:"}
{"function_name": "delete_branch", "function_define": "    self._open_tiny_db()\n    delbranch = False\n    if db_entry.doc_id is not None:", "piece": "delbranch = False"}
{"function_name": "write_leaf", "function_define": "    os.makedirs(storage_path)\n    self._open_tiny_db()\n    if find_hash is None:", "piece": "self._open_tiny_db()"}
{"function_name": "read_leaf", "function_define": "    df = None\n    df = pd.read_csv(data_path)\n    print(f'{e} found {data_path}')", "piece": "df = pd.read_csv(data_path)"}
{"function_name": "delete_leaf", "function_define": "    f.extend(filenames)\n    if backup is True:\n    path_temp = path + '.temp'", "piece": "if backup is True:"}
{"function_name": "del_path", "function_define": "    if backup is True:\n    path_temp = path + '.temp'\n    copyfile(path, path_temp)", "piece": "path_temp = path + '.temp'"}
{"function_name": "reverb_gen", "function_define": "    bucket_count = len(buckets)\n    bucket = 0\n    for frame in src:", "piece": "bucket = 0"}
{"function_name": "play_file", "function_define": "    frame = audio.AudioFrame()\n    with open(name) as file:\n    gen = from_file(file, frame)", "piece": "with open(name) as file:"}
{"function_name": "_loadDictionary", "function_define": "    for line in fh:\n    if len(__dictionary) >= 300000:\n    tokens = line.strip().split(' ')", "piece": "if len(__dictionary) >= 300000:"}
{"function_name": "imgmsg_to_cv2", "function_define": "    if img_msg.encoding != '8UC3':\n    dtype = 'uint8'\n    n_channels = 3", "piece": "dtype = 'uint8'"}
{"function_name": "cbk_network_dmp", "function_define": "    if req.reset:\n    self.req_step = 0\n    self.sfp_history = []", "piece": "self.req_step = 0"}
{"function_name": "plotTrajectory", "function_define": "    fig, ax = plt.subplots(3, 3)\n    fig.set_size_inches(9, 9)\n    for sp in range(7):", "piece": "fig.set_size_inches(9, 9)"}
{"function_name": "plotImageRegions", "function_define": "    tgt_object = np.argmax(atn)\n    for i in range(num_detected):\n    if i == tgt_object:", "piece": "for i in range(num_detected):"}
{"function_name": "quality_tag", "function_define": "    quality = '1080p'\n    quality = 'HD'\n    quality = 'SD'", "piece": "quality = 'HD'"}
{"function_name": "simple_info_card", "function_define": "    id_ (str): Component id\n    title (str): Component title\n    Returns:", "piece": "title (str): Component title"}
{"function_name": "rate_info_card", "function_define": "    com_id (str): Component id\n    com_title (str): Component title\n    rate (str): Component rate", "piece": "com_title (str): Component title"}
{"function_name": "_rate_section", "function_define": "    rate (str): Rate value\n    rate_mode (str): Rate mode\n    Returns:", "piece": "rate_mode (str): Rate mode"}
{"function_name": "f1_score", "function_define": "    Returns:\n    if self.level == 'token':\n    elif self.level == 'entity':", "piece": "if self.level == 'token':"}
{"function_name": "_get_index_list", "function_define": "    except UndefinedMetricWarning:\n    index_list = list()\n    if metric_elem != 0:", "piece": "index_list = list()"}
{"function_name": "merge_pdfs", "function_define": "    pdf_writer = PdfFileWriter()\n    paths = os.listdir(dir_path)\n    os.remove(dir_path + output)", "piece": "paths = os.listdir(dir_path)"}
{"function_name": "gen_header", "function_define": "    if has_header(in_path):\n    header = get_header(in_path)\n    header = g.DEFAULT_FIELD + '_1'", "piece": "header = get_header(in_path)"}
{"function_name": "has_header", "function_define": "    reliable.\n    out = True\n    if isinstance(inp, str):", "piece": "out = True"}
{"function_name": "check_header", "function_define": "    if not has_header(in_path):\n    log_print(s)\n    raise Exception(g.E_MH)", "piece": "log_print(s)"}
{"function_name": "represent", "function_define": "    if isinstance(obj, ndb.Key):\n    if isinstance(obj, list):\n    elif obj is None:", "piece": "if isinstance(obj, list):"}
{"function_name": "select_raw", "function_define": "    db = self.db\n    fields = fields or []\n    attributes = attributes or {}", "piece": "fields = fields or []"}
{"function_name": "plot_board", "function_define": "    if bg_color is None:\n    if white_tokens_color is None:\n    if black_tokens_color is None:", "piece": "if white_tokens_color is None:"}
{"function_name": "_check_board", "function_define": "    n = self._n\n    if self._move_count < 2 * n - 1:\n    for t in self.board[i]:", "piece": "if self._move_count < 2 * n - 1:"}
{"function_name": "analyze_line", "function_define": "    prev = None\n    count = 0\n    zeros = 0", "piece": "count = 0"}
{"function_name": "distanta", "function_define": "    curent\u0103 a cursorului.\n    ccx, ccy = (0, 0)\n    for mesaj in fin:", "piece": "ccx, ccy = (0, 0)"}
{"function_name": "forward_hidden", "function_define": "    x = self.emb_dropout(x)\n    x = self.project_emb(x)\n    if not self.training:", "piece": "x = self.project_emb(x)"}
{"function_name": "hash_iter_ref", "function_define": "    n = pos.value\n    w_key, w_val = ht.get_item(n)\n    except KeyError:", "piece": "w_key, w_val = ht.get_item(n)"}
{"function_name": "hash_map_cont", "function_define": "    w_val = check_one_val(vals)\n    if w_val is not w_missing:\n    nextindex = index + 1", "piece": "if w_val is not w_missing:"}
{"function_name": "from_assocs", "function_define": "    lsts = values.from_list(assocs)\n    keys = [None] * len(lsts)\n    vals = [None] * len(lsts)", "piece": "keys = [None] * len(lsts)"}
{"function_name": "make_hasheq", "function_define": "    lsts = values.from_list(pairs)\n    keys = []\n    vals = []", "piece": "keys = []"}
{"function_name": "make_hasheqv", "function_define": "    lsts = values.from_list(pairs)\n    keys = []\n    vals = []", "piece": "keys = []"}
{"function_name": "hash_set", "function_define": "    if not table.immutable():\n    copy = table.make_copy()\n    copy.data[key] = val", "piece": "copy = table.make_copy()"}
{"function_name": "hash_ref_cont", "function_define": "    val = check_one_val(_vals)\n    if val is not w_missing:\n    if default is None:", "piece": "if val is not w_missing:"}
{"function_name": "sliced_query", "function_define": "    slice_size \"\"\"\n    N = query.count()\n    yield record", "piece": "N = query.count()"}
{"function_name": "get_or_create", "function_define": "    obj = cls.get_by(**kwargs)\n    if not obj:\n    kwargs.update(defaults)", "piece": "if not obj:"}
{"function_name": "convert_flatten", "function_define": "    input = ctx.method_args[0]\n    if start_dim == -1:\n    start_dim = len(input.shape) - 1", "piece": "if start_dim == -1:"}
{"function_name": "sim1_day", "function_define": "    new_fish = []\n    for i, f in enumerate(fishes):\n    if f == 0:", "piece": "for i, f in enumerate(fishes):"}
{"function_name": "_get_conv_kernel", "function_define": "    Arguments:\n    batch sum during fprop\n    not a multiple of 32.", "piece": "batch sum during fprop"}
{"function_name": "_init_categories", "function_define": "    category = {}\n    category['id'] = v\n    category['name'] = k", "piece": "category['id'] = v"}
{"function_name": "_annotation", "function_define": "    label = shape['label']\n    points = shape['points']\n    annotation = {}", "piece": "points = shape['points']"}
{"function_name": "_get_box", "function_define": "    min_x = min_y = np.inf\n    max_x = max_y = 0\n    for x, y in points:", "piece": "max_x = max_y = 0"}
{"function_name": "tcr_dist", "function_define": "    dist_calc = metric\n    elif metric == 'alignment':\n    elif metric == 'identity':", "piece": "elif metric == 'alignment':"}
{"function_name": "tcr_neighbors", "function_define": "    similarity.\n    Parameters\n    annotated data matrix", "piece": "Parameters"}
{"function_name": "calc_dist_mat", "function_define": "    Parameters\n    Array of amino acid sequences\n    p = Pool(self.n_jobs)", "piece": "Array of amino acid sequences"}
{"function_name": "_compute_row", "function_define": "    target = seqs[i_row]\n    d = levenshtein_dist(target, s2)\n    if d <= self.cutoff:", "piece": "d = levenshtein_dist(target, s2)"}
{"function_name": "_align_row", "function_define": "    Parameters\n    Array of amino acid sequences\n    self_alignment_scores", "piece": "Array of amino acid sequences"}
{"function_name": "_seq_to_cell_idx", "function_define": "    Parameters\n    unique_seqs\n    cdr_seqs", "piece": "unique_seqs"}
{"function_name": "_reduce_dual_all", "function_define": "    elif chain_count == (2, 2):\n    d1 = d[1, 2] + d[2, 1] - 1\n    except KeyError:", "piece": "d1 = d[1, 2] + d[2, 1] - 1"}
{"function_name": "_reduce_arms_all", "function_define": "    arm1 = next(values)\n    except StopIteration:\n    arm2 = next(values)", "piece": "except StopIteration:"}
{"function_name": "connectivities", "function_define": "    if self.cutoff == 0:\n    d = connectivities.data - 1\n    connectivities.eliminate_zeros()", "piece": "d = connectivities.data - 1"}
{"function_name": "coord_generator", "function_define": "    d = max_score - r.score\n    if d <= self.cutoff:\n    yield (d + 1, j)", "piece": "if d <= self.cutoff:"}
{"function_name": "_add_to_dict", "function_define": "    tmp_dict = d[cell_row, cell_col]\n    tmp_dict2 = tmp_dict[arm]\n    if (c1, c2) in tmp_dict2:", "piece": "tmp_dict2 = tmp_dict[arm]"}
{"function_name": "add_noxfile", "function_define": "    an extensive list.\n    Returns:\n    content = noxfile(opts)", "piece": "Returns:"}
{"function_name": "singleton", "function_define": "    if name in _singletons:\n    old = _singletons.pop(name)\n    next(old)", "piece": "old = _singletons.pop(name)"}
{"function_name": "_dump_header", "function_define": "    An integer ASN.1 tag value\n    header = b''\n    id_num = 0", "piece": "header = b''"}
{"function_name": "print_matrix", "function_define": "    Parameters\n    matrix : numpy.array([N,M])\n    matrix to print", "piece": "matrix : numpy.array([N,M])"}
{"function_name": "test_info_dict", "function_define": "    with clib.Session() as lib:\n    assert lib.info\n    Put 'bla' in the value buffer.", "piece": "assert lib.info"}
{"function_name": "mock_defaults", "function_define": "    Return an old version.\n    if name == b'API_VERSION':\n    value.value = b'5.4.3'", "piece": "if name == b'API_VERSION':"}
{"function_name": "ent_icon", "function_define": "    if self.entity in ENTITIES:\n    if icon_name == '/':\n    icon_name = self.entity", "piece": "if icon_name == '/':"}
{"function_name": "_advance_ts", "function_define": "    job = self.ref_jobs.pop()\n    if job.compilation_ok:\n    self.buffer.append(job)", "piece": "if job.compilation_ok:"}
{"function_name": "do_adapt", "function_define": "    self._advance_ts(ts)\n    if job and job.compilation_ok:\n    self.buffer.append(job)", "piece": "if job and job.compilation_ok:"}
{"function_name": "parseXML", "function_define": "    d = feedparser.parse(xmlfile)\n    postCount = 0\n    posts = []", "piece": "postCount = 0"}
{"function_name": "tweakODT", "function_define": "    with mmguero.pushd(tmpDirName):\n    origOdt.extract('content.xml')\n    for line in content:", "piece": "origOdt.extract('content.xml')"}
{"function_name": "guessType", "function_define": "    import magic\n    except ImportError:\n    import mimetypes", "piece": "except ImportError:"}
{"function_name": "wgetPosts", "function_define": "    global args\n    global debug\n    for post in posts:", "piece": "global debug"}
{"function_name": "_read_helper", "function_define": "    keyset = KeySet(keys=KEYS)\n    INDEX = 'email-address-index'\n    LIMIT = 20", "piece": "INDEX = 'email-address-index'"}
{"function_name": "_set_globals", "function_define": "    super()._set_globals(name)\n    global RECIPROCAL\n    if name in ['divide', 'power']:", "piece": "global RECIPROCAL"}
{"function_name": "_add_calculate", "function_define": "    c = a + b\n    if c >= CHARACTERISTIC:\n    c -= CHARACTERISTIC", "piece": "if c >= CHARACTERISTIC:"}
{"function_name": "_power_calculate", "function_define": "    Square and Multiply Algorithm\n    a^13 = (1) * (a)^13\n    if a == 0 and b < 0:", "piece": "a^13 = (1) * (a)^13"}
{"function_name": "_log_calculate", "function_define": "    c = log(a, b)\n    if a == 0:\n    ORDER = CHARACTERISTIC ** DEGREE", "piece": "if a == 0:"}
{"function_name": "timer1_cb", "function_define": "    t = time.time()\n    timer.set(interval)\n    for fdg in fdg_l:", "piece": "timer.set(interval)"}
{"function_name": "timer2_cb", "function_define": "    timer.set(interval)\n    for a in aides:\n    app.process_events()", "piece": "for a in aides:"}
{"function_name": "make_data", "function_define": "    srcs = []\n    for i, name in enumerate(names):\n    srcs.append(fdg)", "piece": "for i, name in enumerate(names):"}
{"function_name": "generate_point", "function_define": "    x, y = (t, self.tv)\n    if self.tv_dir == 'up':\n    self.tv = y", "piece": "if self.tv_dir == 'up':"}
{"function_name": "init_points", "function_define": "    if start is None:\n    self.tv = start\n    data_src.set_points(points)", "piece": "self.tv = start"}
{"function_name": "translateOrder", "function_define": "    if escapedCookie == 0:\n    Order = json.loads(strCookie)\n    if len(Order['Pizza']) == 0:", "piece": "Order = json.loads(strCookie)"}
{"function_name": "trelloCard", "function_define": "    data = json.load(json_data_file)\n    if address == 'self-pickup':\n    keyList = []", "piece": "if address == 'self-pickup':"}
{"function_name": "trelloChecklist", "function_define": "    data = json.load(json_data_file)\n    response.raise_for_status()\n    quote = response.json()", "piece": "response.raise_for_status()"}
{"function_name": "__update_version", "function_define": "    Updates the schema version.\n    config = self.config\n    query = text(query)", "piece": "config = self.config"}
{"function_name": "_forward_gru", "function_define": "    if x.size(0) == rnn_hxs.size(0):\n    x = x.squeeze(0)\n    rnn_hxs = rnn_hxs.squeeze(0)", "piece": "x = x.squeeze(0)"}
{"function_name": "_visit_function", "function_define": "    if self.names is None:\n    ast.walk(n, new_visitor)\n    self.names = new_visitor.names", "piece": "ast.walk(n, new_visitor)"}
{"function_name": "find_scope_end", "function_define": "    if not scope.parent:\n    if scope_start[1] >= end:\n    if not self._is_empty_line(l):", "piece": "if scope_start[1] >= end:"}
{"function_name": "checksum2", "function_define": "    if x > y and x % y == 0:\n    elif x < y and y % x == 0:\n    raise RuntimeError()", "piece": "elif x < y and y % x == 0:"}
{"function_name": "process_row", "function_define": "    if x > y and x % y == 0:\n    elif x < y and y % x == 0:\n    raise RuntimeError()", "piece": "elif x < y and y % x == 0:"}
{"function_name": "load_profiles", "function_define": "    module = __import__(modulename)\n    dmod = module.__dict__\n    dmod = dmod[modname].__dict__", "piece": "dmod = module.__dict__"}
{"function_name": "setup_data", "function_define": "    if not os.path.exists(basedir):\n    os.makedirs(basedir)\n    for filename in self.filenames:", "piece": "os.makedirs(basedir)"}
{"function_name": "stopSound", "function_define": "    for soundData in self.sounds:\n    if soundData.name == filename:\n    soundData['sound'].stop()", "piece": "if soundData.name == filename:"}
{"function_name": "getQuadrant", "function_define": "    pi = math.pi\n    quadrants = [3, 4, 1, 2]\n    for i in range(len(boundaries)):", "piece": "quadrants = [3, 4, 1, 2]"}
{"function_name": "getTrigRatios", "function_define": "    direction = self.getDirection()\n    if quadrant == 1:\n    xfactor = math.cos(direction)", "piece": "if quadrant == 1:"}
{"function_name": "get_intro_done", "function_define": "    if not 'intro_done' in data:\n    data['intro_done'] = False\n    except TypeError:", "piece": "data['intro_done'] = False"}
{"function_name": "get_music_volume", "function_define": "    if not 'music_volume' in data:\n    data['music_volume'] = 0.08\n    except TypeError:", "piece": "data['music_volume'] = 0.08"}
{"function_name": "get_highscore", "function_define": "    if not 'highscore' in data:\n    data['highscore'] = 0\n    except TypeError:", "piece": "data['highscore'] = 0"}
{"function_name": "get_sfx_volume", "function_define": "    if not 'sfx_volume' in data:\n    data['sfx_volume'] = 0.2\n    except TypeError:", "piece": "data['sfx_volume'] = 0.2"}
{"function_name": "switch_state", "function_define": "    current_state = self.state_name\n    self.state.done = False\n    self.state_name = next_state", "piece": "self.state.done = False"}
{"function_name": "show_fps", "function_define": "    if self.fps_visible:\n    fps = self.clock.get_fps()\n    pg.display.set_caption(with_fps)", "piece": "fps = self.clock.get_fps()"}
{"function_name": "key_info", "function_define": "    unctrl = curses.unctrl(key)\n    unctrl = 'no unctrl'\n    name = curses.keyname(key)", "piece": "unctrl = 'no unctrl'"}
{"function_name": "describe_broker", "function_define": "    if broker.isdigit():\n    elif ':' not in broker:\n    host, port = broker.split(':')", "piece": "elif ':' not in broker:"}
{"function_name": "sum_10_primes", "function_define": "    p: auto = 2\n    for i in range(10):\n    while True:", "piece": "for i in range(10):"}
{"function_name": "test_both_types", "function_define": "    while True:\n    if i > 50:\n    assert match", "piece": "if i > 50:"}
{"function_name": "parse_nodes", "function_define": "    self.deploy['nodes'] = {}\n    self.deploy['switches'] = []\n    node_type = node.get('type')", "piece": "self.deploy['switches'] = []"}
{"function_name": "parse_links", "function_define": "    self.deploy['links'] = {}\n    link_type = link.get('type')\n    link_src = link.get('src')", "piece": "link_type = link.get('type')"}
{"function_name": "connect_docker", "function_define": "    except Exception as e:\n    self._docker_client = None\n    self._connected_to_docker = True", "piece": "self._docker_client = None"}
{"function_name": "_add_nodes", "function_define": "    nodes = self.topo.get('nodes')\n    node_type = node.get('type')\n    if node_type == 'container':", "piece": "node_type = node.get('type')"}
{"function_name": "_add_links", "function_define": "    links = self.topo.get('links')\n    link_type = link.get('type')\n    if link_type == 'internal':", "piece": "link_type = link.get('type')"}
{"function_name": "_add_tun_links", "function_define": "    links = self.topo.get('links')\n    link_type = link.get('type')\n    if link_type == 'external':", "piece": "link_type = link.get('type')"}
{"function_name": "get_host_ip", "function_define": "    intf = 'docker0'\n    intfs = psutil.net_if_addrs()\n    if intf_info:", "piece": "intfs = psutil.net_if_addrs()"}
{"function_name": "parse_info", "function_define": "    full_info = {}\n    if specie == 'hosts':\n    full_info['hosts'] = {}", "piece": "if specie == 'hosts':"}
{"function_name": "net_topo_info", "function_define": "    info = {}\n    logger.info('Topology info:')\n    logger.info('%s', info)", "piece": "logger.info('Topology info:')"}
{"function_name": "mn_cleanup", "function_define": "    clean.cleanup()\n    self.remove_docker_network()\n    self.prune_docker_volumes()", "piece": "self.remove_docker_network()"}
{"function_name": "end_container", "function_define": "    err_msg = None\n    ok = True\n    if node_name not in self.nodes:", "piece": "ok = True"}
{"function_name": "update_cpu_limit", "function_define": "    err_msg = None\n    ok = True\n    if node_name not in self.nodes:", "piece": "ok = True"}
{"function_name": "start_node", "function_define": "    if node not in self.nodes:\n    logger.debug(err_msg)\n    self.connect_docker()", "piece": "logger.debug(err_msg)"}
{"function_name": "stop_node", "function_define": "    if node not in self.nodes:\n    logger.debug(err_msg)\n    self.connect_docker()", "piece": "logger.debug(err_msg)"}
{"function_name": "update_link", "function_define": "    ack = False\n    if online:\n    ack = True", "piece": "if online:"}
{"function_name": "run_alyx_task", "function_define": "    filesize to save time\n    registered_dsets = []\n    if len(tdict['parents']):", "piece": "registered_dsets = []"}
{"function_name": "_setUp_remote", "function_define": "    assert self.one\n    df = self._getData()\n    self.one._download_datasets(df)", "piece": "df = self._getData()"}
{"function_name": "_setUp_SDSC", "function_define": "    assert self.one\n    df = self._getData()\n    for _, d in df.iterrows():", "piece": "df = self._getData()"}
{"function_name": "_setUp_AWS", "function_define": "    assert self.aws\n    assert self.one\n    df = self._getData()", "piece": "assert self.one"}
{"function_name": "get_config_by_id", "function_define": "    Parameters\n    model_id: str\n    The generative model's unique id", "piece": "model_id: str"}
{"function_name": "test_size", "function_define": "    self.bst.put('one', 1)\n    self.bst.put('one', 1)\n    self.bst.put('one', 2)", "piece": "self.bst.put('one', 1)"}
{"function_name": "test_put", "function_define": "    self.bst.put('bbb', 1)\n    self.bst.put('ccc', 2)\n    self.bst.put('bbb', 1)", "piece": "self.bst.put('ccc', 2)"}
{"function_name": "test_min_key", "function_define": "    for pair in self.key_val[::-1]:\n    k, v = pair\n    self.bst.put(k, v)", "piece": "k, v = pair"}
{"function_name": "test_max_key", "function_define": "    for pair in self.key_val:\n    k, v = pair\n    self.bst.put(k, v)", "piece": "k, v = pair"}
{"function_name": "test_floor_key", "function_define": "    self.bst.put('a', 1)\n    self.bst.put('c', 3)\n    self.bst.put('e', 5)", "piece": "self.bst.put('c', 3)"}
{"function_name": "test_ceiling_key", "function_define": "    self.bst.put('a', 1)\n    self.bst.put('c', 3)\n    self.bst.put('e', 5)", "piece": "self.bst.put('c', 3)"}
{"function_name": "test_select_key", "function_define": "    for pair in shuffled:\n    k, v = pair\n    self.bst.put(k, v)", "piece": "k, v = pair"}
{"function_name": "test_rank", "function_define": "    for pair in self.key_val:\n    k, v = pair\n    self.bst.put(k, v)", "piece": "k, v = pair"}
{"function_name": "test_delete_min", "function_define": "    for pair in self.key_val:\n    k, v = pair\n    self.bst.put(k, v)", "piece": "k, v = pair"}
{"function_name": "test_delete_max", "function_define": "    for pair in self.key_val:\n    k, v = pair\n    self.bst.put(k, v)", "piece": "k, v = pair"}
{"function_name": "test_keys", "function_define": "    for pair in self.key_val:\n    k, v = pair\n    self.bst.put(k, v)", "piece": "k, v = pair"}
{"function_name": "test_queue", "function_define": "    self.que = queue.Queue()\n    self.que.add(1)\n    self.que.add(2)", "piece": "self.que.add(1)"}
{"function_name": "test_stack", "function_define": "    self.sta = stack.Stack()\n    self.sta.add(5)\n    self.sta.add(8)", "piece": "self.sta.add(5)"}
{"function_name": "test_union_find", "function_define": "    self.uf.make_set(4)\n    self.uf.union(1, 0)\n    self.uf.union(3, 4)", "piece": "self.uf.union(1, 0)"}
{"function_name": "test_general", "function_define": "    self._refill_module(module_name)\n    confManager.reload()\n    os.remove(module_name)", "piece": "confManager.reload()"}
{"function_name": "symplify_path", "function_define": "    s = path.split('/')\n    count = 2\n    if count * 2 < len(s):", "piece": "count = 2"}
{"function_name": "file_related", "function_define": "    global settings\n    if ex1 == ex2:\n    if rt1 and rt2:", "piece": "if ex1 == ex2:"}
{"function_name": "get_lint_file", "function_define": "    ex = get_file_ex(filename)\n    if DEBUG:\n    hide_view_ex = ex", "piece": "if DEBUG:"}
{"function_name": "get_indent", "function_define": "    indent_len = 1\n    indent_len = 4\n    if loc_indent.a > line_end:", "piece": "indent_len = 4"}
{"function_name": "toggle_setting", "function_define": "    if True == settings.get(name):\n    print('Disable system', name)\n    settings.set(name, False)", "piece": "print('Disable system', name)"}
{"function_name": "lookup_symbol", "function_define": "    if len(symbol.strip()) == 0:\n    for l in locations:\n    if l[0] == fname:", "piece": "for l in locations:"}
{"function_name": "on_navigate", "function_define": "    global MAX_LIST_ITEM\n    if 'more' == idx:\n    self.first_show = False", "piece": "if 'more' == idx:"}
{"function_name": "on_hover", "function_define": "    load_all_settings()\n    if not is_class and (not is_id):\n    if not score('source'):", "piece": "if not is_class and (not is_id):"}
{"function_name": "createGraph", "function_define": "    wb = xlwt.Workbook()\n    ws = wb.add_sheet('test sheet')\n    extension = ' AM'", "piece": "ws = wb.add_sheet('test sheet')"}
{"function_name": "findTimeNum", "function_define": "    for each in range(158):\n    if mo is not None:\n    if mo.group(0) == num:", "piece": "if mo is not None:"}
{"function_name": "choose_one", "function_define": "    print(prompt)\n    if len(options) < 10:\n    print(f'  {i}. {option}')", "piece": "if len(options) < 10:"}
{"function_name": "read_char", "function_define": "    c = readchar.readchar()\n    if c == self.skip_key:\n    raise QuestionSkipped()", "piece": "if c == self.skip_key:"}
{"function_name": "input_bool", "function_define": "    while True:\n    c = self.read_char()\n    if c in ('y', 'n'):", "piece": "c = self.read_char()"}
{"function_name": "input_number", "function_define": "    number_query = query + '> '\n    while True:\n    r = self.read_line(number_query)", "piece": "while True:"}
{"function_name": "input_string", "function_define": "    while True:\n    v = input(query + '> ').strip()\n    if allow_empty or v:", "piece": "v = input(query + '> ').strip()"}
{"function_name": "test_vims_csv", "function_define": "    assert CHANNELS[0] == 1\n    assert CHANNELS[-1] == 352\n    assert WLNS[0] == 0.35054", "piece": "assert CHANNELS[-1] == 352"}
{"function_name": "test_vims_ir", "function_define": "    wvlns = VIMS_IR()\n    assert len(wvlns) == 256\n    assert wvlns[0] == 0.88421", "piece": "assert len(wvlns) == 256"}
{"function_name": "test_vims_vis", "function_define": "    wvlns = VIMS_VIS()\n    assert len(wvlns) == 96\n    assert wvlns[0] == 0.35054", "piece": "assert len(wvlns) == 96"}
{"function_name": "init_from_rbm", "function_define": "    enc_layers = [0, 2, 4, 6]\n    dec_layers = [6, 4, 2, 0]\n    for rbm_idx in range(4):", "piece": "dec_layers = [6, 4, 2, 0]"}
{"function_name": "generateContent", "function_define": "    if not trackedbranch:\n    table.addSeparator()\n    import log.html", "piece": "table.addSeparator()"}
{"function_name": "sample_batch", "function_define": "    if self.size() < batch_size:\n    MINIBATCH_SIZE = self.size()\n    MINIBATCH_SIZE = batch_size", "piece": "MINIBATCH_SIZE = self.size()"}
{"function_name": "get_xml_url", "function_define": "    if typ == 'album':\n    url += '/type/1'\n    elif typ == 'artist':", "piece": "url += '/type/1'"}
{"function_name": "positive_edit", "function_define": "    if self.history:\n    self.history += 1\n    self.history = 1", "piece": "self.history += 1"}
{"function_name": "negative_edit", "function_define": "    if self.history:\n    self.history += 0\n    self.history = 0", "piece": "self.history += 0"}
{"function_name": "streak_edit", "function_define": "    if value == 1:\n    if self.streak >= 0:\n    self.streak += 1", "piece": "if self.streak >= 0:"}
{"function_name": "test_registry", "function_define": "    r = Registry()\n    r.clear()\n    self.assertIsNone(r.get('Fund'))", "piece": "r.clear()"}
{"function_name": "my_XYcolWriter", "function_define": "    if file == None:\n    if not os.path.isdir(fpath):\n    os.makedirs(fpath)", "piece": "if not os.path.isdir(fpath):"}
{"function_name": "my_colWriter", "function_define": "    if file == None:\n    if not os.path.isdir(fpath):\n    os.makedirs(fpath)", "piece": "if not os.path.isdir(fpath):"}
{"function_name": "toggle_light", "function_define": "    if self.args.mode == 'master':\n    on = self.rec_enable\n    elif self.args.mode == 'track':", "piece": "on = self.rec_enable"}
{"function_name": "_service_action", "function_define": "    now = time.time()\n    if waited > self.args.interval:\n    self._ping_ardour()", "piece": "if waited > self.args.interval:"}
{"function_name": "_format_top", "function_define": "    updated = []\n    for entry in results:\n    if monetary:", "piece": "for entry in results:"}
{"function_name": "test_signup", "function_define": "    user_data = USER_DATA\n    view = SignupView.as_view()\n    resp = view(req)", "piece": "view = SignupView.as_view()"}
{"function_name": "test_login", "function_define": "    prepare_dummy_user_data()\n    view = LoginView.as_view()\n    user_data = {}", "piece": "view = LoginView.as_view()"}
{"function_name": "calc_iou_tensor", "function_define": "    box1 (N, 4)\n    box2 (M, 4)\n    IoU (N, M)", "piece": "box2 (M, 4)"}
{"function_name": "test_qnetwork", "function_define": "    x = Flatten(name='flatten')(x)\n    json_string = model.to_json()\n    clear_session()", "piece": "json_string = model.to_json()"}
{"function_name": "test_qconv1d", "function_define": "    np.random.seed(33)\n    x = Input((4, 4))\n    print_qstats(model)", "piece": "x = Input((4, 4))"}
{"function_name": "testValid", "function_define": "    username = 'Craig'\n    password = '<PASSWORD>'\n    verify = '<PASSWORD>'", "piece": "password = '<PASSWORD>'"}
{"function_name": "check_port_syn", "function_define": "    the code execute in admin mode.\n    SYNACK = 18\n    RSTACK = 20", "piece": "SYNACK = 18"}
{"function_name": "binarize_image", "function_define": "    unique_values = np.unique(image)\n    if len(unique_values) == 2:\n    mean = image.mean()", "piece": "if len(unique_values) == 2:"}
{"function_name": "get_final_result", "function_define": "    img = copy.deepcopy(grid)\n    if len(img.shape) == 2:\n    for i in range(len(elements)):", "piece": "if len(img.shape) == 2:"}
{"function_name": "segment_image", "function_define": "    mask[image > 128] = 0\n    mask[image <= 128] = 1\n    w_sum = np.sum(mask, axis=0)", "piece": "mask[image <= 128] = 1"}
{"function_name": "skel_setup", "function_define": "    if key == 'version':\n    continue\n    if _key not in inventory:", "piece": "continue"}
{"function_name": "network_entry", "function_define": "    if is_metal:\n    if bridge:\n    if net_type:", "piece": "if bridge:"}
{"function_name": "_find_lxc_hosts", "function_define": "    coupled and more testable.\n    lxc_host_nodes = []\n    nspawn_host_nodes = []", "piece": "lxc_host_nodes = []"}
{"function_name": "_check_lxc_hosts", "function_define": "    if 'lxc_hosts' in config.keys():\n    raise LxcHostsDefined()\n    raise LxcHostsDefined()", "piece": "raise LxcHostsDefined()"}
{"function_name": "thresholding_abs", "function_define": "    Parameters\n    values along the main diagonal.\n    thr : float", "piece": "values along the main diagonal."}
{"function_name": "load_mri", "function_define": "    Parameters\n    func : string\n    mask : string", "piece": "func : string"}
{"function_name": "save_mri", "function_define": "    Parameters\n    Voxel data to save to disk.\n    mask : string", "piece": "Voxel data to save to disk."}
{"function_name": "load_roi_mri", "function_define": "    Parameters\n    func : string\n    time information (n_tps)", "piece": "func : string"}
{"function_name": "save_roi_mri", "function_define": "    Parameters\n    mask : string\n    fname : string", "piece": "mask : string"}
{"function_name": "test_wipe_all", "function_define": "    resp = app.get('/:all')\n    resp = app.delete('/:wipe')\n    resp = app.get('/:all')", "piece": "resp = app.delete('/:wipe')"}
{"function_name": "parse_option", "function_define": "    if arg_tuple[0] is None:\n    type = 'str'\n    cast = locate(type)", "piece": "type = 'str'"}
{"function_name": "to_fasta", "function_define": "    m.fillna(0.5, inplace=True)\n    m_isnan = m == 0.5\n    m = (m > 0).astype('int')", "piece": "m_isnan = m == 0.5"}
{"function_name": "test_ignore", "function_define": "    foo = os.fspath(tmp_dir / 'foo')\n    target = '/foo'\n    scm.ignore(foo)", "piece": "target = '/foo'"}
{"function_name": "test_commit", "function_define": "    G = Git(self._root_dir)\n    G.add(['foo'])\n    G.commit('add')", "piece": "G.add(['foo'])"}
{"function_name": "test_is_tracked", "function_define": "    foo = os.path.abspath(self.FOO)\n    G = Git(self._root_dir)\n    G.add([self.FOO, self.UNICODE])", "piece": "G = Git(self._root_dir)"}
{"function_name": "enumerate", "function_define": "    results = []\n    for dev in devs:\n    d_data: Dict[str, Any] = {}", "piece": "for dev in devs:"}
{"function_name": "collation_key", "function_define": "    path = []\n    if step.endswith('(\u03bd)'):\n    start = 3", "piece": "if step.endswith('(\u03bd)'):"}
{"function_name": "even_or_odd", "function_define": "    if n % 2 == 0:\n    print('even')\n    print('odd')", "piece": "print('even')"}
{"function_name": "GetLatestRelease", "function_define": "    git_url: URL of git repository.\n    release.\n    Returns:", "piece": "release."}
{"function_name": "_GetStickyEBuild", "function_define": "    sticky_ebuilds = []\n    for ebuild in stable_ebuilds:\n    sticky_ebuilds.append(ebuild)", "piece": "for ebuild in stable_ebuilds:"}
{"function_name": "proj_covs_common", "function_define": "    covs = scale * np.array(covs)\n    d, V = np.linalg.eigh(covs_avg)\n    d = d[::-1]", "piece": "d, V = np.linalg.eigh(covs_avg)"}
{"function_name": "ReadLabelFile", "function_define": "    with open(file_path, 'r') as f:\n    lines = f.readlines()\n    ret = {}", "piece": "lines = f.readlines()"}
{"function_name": "detect_objects", "function_define": "    objects_in_image = []\n    labels = []\n    if img is None:", "piece": "labels = []"}
{"function_name": "detect_faces", "function_define": "    objects_detected_faces = []\n    for obj in test_image_paths:\n    for label in obj['labels']:", "piece": "for obj in test_image_paths:"}
{"function_name": "create_area", "function_define": "    if version < 27:\n    if version < 25:\n    if version == 23:", "piece": "if version < 25:"}
{"function_name": "save_asset", "function_define": "    super().save_asset()\n    self._name_strg.save_asset()\n    self._dark_strg.save_asset()", "piece": "self._name_strg.save_asset()"}
{"function_name": "update_profile", "function_define": "    if request.method == 'POST':\n    u_form.save()\n    p_form.save()", "piece": "u_form.save()"}
{"function_name": "image_form", "function_define": "    if request.method == 'POST':\n    if form.is_valid():\n    form.save()", "piece": "if form.is_valid():"}
{"function_name": "post_detail", "function_define": "    posts = Post.objects.all()\n    new_comment = None\n    if request.method == 'POST':", "piece": "new_comment = None"}
{"function_name": "mask_rgbd", "function_define": "    th:= threshold\n    mask = d4d.copy()\n    idx = mask > th", "piece": "mask = d4d.copy()"}
{"function_name": "cutmix_padding", "function_define": "    h: image height.\n    w: image width.\n    pad_left = bbx1", "piece": "w: image width."}
{"function_name": "my_cutmix", "function_define": "    batch = dict(**batch)\n    mask = batch['mask'][:bs]\n    labels = batch['labels'][:bs]", "piece": "mask = batch['mask'][:bs]"}
{"function_name": "my_mixup", "function_define": "    batch = dict(**batch)\n    labels = batch['labels'][:bs]\n    ratio = ratio[..., 0, 0, 0]", "piece": "labels = batch['labels'][:bs]"}
{"function_name": "calc_size", "function_define": "    Parameters\n    p : Path\n    nice : bool, optional", "piece": "p : Path"}
{"function_name": "test_google_info", "function_define": "    assert result.status_code == 200\n    body = loads(result.data)\n    assert body['id'] == 'foo-bar'", "piece": "body = loads(result.data)"}
{"function_name": "removeElements", "function_define": "    dummy = ListNode(-1)\n    dummy.next = head\n    if d.next:", "piece": "dummy.next = head"}
{"function_name": "pnl_calculator", "function_define": "    Parameters\n    strike: float\n    Strike price", "piece": "strike: float"}
{"function_name": "onClicked", "function_define": "    self.uuid_view.clearUuid()\n    self.tags_view.clearTags()\n    self.name_view.clearName()", "piece": "self.tags_view.clearTags()"}
{"function_name": "onFileSelected", "function_define": "    path = event.path\n    if path:\n    path += '.mhm'", "piece": "if path:"}
{"function_name": "add_forcevolmesh", "function_define": "    Parameters\n    name : str, optional\n    layer : str, optional", "piece": "name : str, optional"}
{"function_name": "add_formnetwork", "function_define": "    Parameters\n    name : str, optional\n    layer : str, optional", "piece": "name : str, optional"}
{"function_name": "find_by_name", "function_define": "    Parameters\n    name : str\n    objects = []", "piece": "name : str"}
{"function_name": "clear_layers", "function_define": "    self.objects[guid].clear_layer()\n    except Exception:\n    compas_rhino.rs.Redraw()", "piece": "except Exception:"}
{"function_name": "undo_redo", "function_define": "    if e.Tag == 'undo':\n    print('running 3gs undo')\n    if self.undo():", "piece": "print('running 3gs undo')"}
{"function_name": "maxDistance", "function_define": "    N = len(grid)\n    Q = collections.deque()\n    visited = set()", "piece": "Q = collections.deque()"}
{"function_name": "test_sum_dfsu", "function_define": "    org = mikeio.read(infilename_a)\n    orgvalue = org.data[0][0]\n    expected = orgvalue * 2", "piece": "orgvalue = org.data[0][0]"}
{"function_name": "test_diff_dfsu", "function_define": "    org = mikeio.read(infilename_a)\n    expected = 0.0\n    scaledvalue = diffed.data[0][0]", "piece": "expected = 0.0"}
{"function_name": "pack_value", "function_define": "    if sys.byteorder == 'little':\n    mask_seq.insert(0, val)\n    elif sys.byteorder == 'big':", "piece": "mask_seq.insert(0, val)"}
{"function_name": "testMissingAttr", "function_define": "    class I(Interface):\n    class C(object):\n    implements(I)", "piece": "class C(object):"}
{"function_name": "testWrongArgs", "function_define": "    class I(Interface):\n    class C(object):\n    implements(I)", "piece": "class C(object):"}
{"function_name": "testExtraArgs", "function_define": "    class I(Interface):\n    class C(object):\n    implements(I)", "piece": "class C(object):"}
{"function_name": "testNoVar", "function_define": "    class I(Interface):\n    class C(object):\n    implements(I)", "piece": "class C(object):"}
{"function_name": "testNoKW", "function_define": "    class I(Interface):\n    class C(object):\n    implements(I)", "piece": "class C(object):"}
{"function_name": "read_block", "function_define": "    signal_len = len(signal)\n    found_signal = False\n    for header in it:", "piece": "found_signal = False"}
{"function_name": "handle_alarm_msg", "function_define": "    if msg and msg.message:\n    value = msg.message.value\n    if value:", "piece": "value = msg.message.value"}
{"function_name": "get_source", "function_define": "    assert page_url is not None\n    results_response = None\n    if to_print:", "piece": "results_response = None"}
{"function_name": "test_chi_p", "function_define": "    pesummary_function = chi_p\n    assert chi_p_value == 0.75\n    for i in range(100):", "piece": "assert chi_p_value == 0.75"}
{"function_name": "test_spin_angles", "function_define": "    f_ref = [20.0] * len(mass1)\n    phase = [0.4] * len(mass1)\n    pesummary_function = spin_angles", "piece": "phase = [0.4] * len(mass1)"}
{"function_name": "skip_under_30", "function_define": "    krow = dict(zip(headers, row))\n    if krow['age'] >= 30:\n    yield (number, headers, row)", "piece": "if krow['age'] >= 30:"}
{"function_name": "convertNow", "function_define": "    global png_name\n    counter = 1\n    print(counter)", "piece": "counter = 1"}
{"function_name": "get_session_key", "function_define": "    dklen = 64\n    count = 1000000\n    part_f = keys[:32]", "piece": "count = 1000000"}
{"function_name": "make_id_graph", "function_define": "    Representing a brain ontology\n    name = dic.get('name')\n    acronym = dic.get('acronym')", "piece": "name = dic.get('name')"}
{"function_name": "get_progeny", "function_define": "    if progeny_list == None:\n    progeny_list = []\n    if input_nodename == 'root':", "piece": "progeny_list = []"}
{"function_name": "init_tool", "function_define": "    logging.debug('in init_tool()')\n    del st.status_messages['hello']\n    except KeyError:", "piece": "del st.status_messages['hello']"}
{"function_name": "contract_atlas", "function_define": "    if not selected_layer_name:\n    if named_tuple:\n    if named_tuple.value:", "piece": "if named_tuple:"}
{"function_name": "expand_atlas", "function_define": "    logging.debug('expanding atlas')\n    if not selected_layer_name:\n    if named_tuple:", "piece": "if not selected_layer_name:"}
{"function_name": "test_bad_request", "function_define": "    excraised = 0\n    except HTTPError as e:\n    excraised = 1", "piece": "except HTTPError as e:"}
{"function_name": "get_current_gw", "function_define": "    events (json): FPL API response\n    Returns:\n    if gw['is_current']:", "piece": "Returns:"}
{"function_name": "sample_ranks", "function_define": "    captain = self.players.copy()\n    for p in team:\n    self.players.loc[p, col] += 1", "piece": "for p in team:"}
{"function_name": "get_fpl_teamid", "function_define": "    rank (int): Manager rank\n    Returns:\n    int: FPL Team ID", "piece": "Returns:"}
{"function_name": "get_fpl_strategy", "function_define": "    rank (int): FPL rank\n    Returns:\n    attempts = 3", "piece": "Returns:"}
{"function_name": "get_fpl_chips", "function_define": "    team_id (int): Manager id\n    Returns:\n    if res == []:", "piece": "Returns:"}
{"function_name": "my_re_escape", "function_define": "    escape_char = '[]'\n    returned_text = ''\n    for c in text:", "piece": "returned_text = ''"}
{"function_name": "place_bomb", "function_define": "    global t\n    if x > 0 and y > 0:\n    Servidor.contador += 1", "piece": "if x > 0 and y > 0:"}
{"function_name": "clone_model", "function_define": "    split is independent.\n    Parameters\n    model: Scikit-Learn/Keras Model", "piece": "Parameters"}
{"function_name": "check_colide", "function_define": "    colided = []\n    for i in range(len(schedule)):\n    colided.append((i, j))", "piece": "for i in range(len(schedule)):"}
{"function_name": "check_colide_aux", "function_define": "    start1 = h1['date_start']\n    end1 = h1['date_end']\n    start2 = h2['date_start']", "piece": "end1 = h1['date_end']"}
{"function_name": "can_accept", "function_define": "    if output_metadata is None:\n    if method_name != 'produce':\n    if 'inputs' not in arguments:", "piece": "if method_name != 'produce':"}
{"function_name": "save_game", "function_define": "    self.settings.data.volume = vol\n    self.settings.data.music = music\n    self.settings.save()", "piece": "self.settings.data.music = music"}
{"function_name": "game_loop", "function_define": "    while self.running:\n    self.current_menu.display_menu()\n    self.save_game()", "piece": "self.current_menu.display_menu()"}
{"function_name": "check_events", "function_define": "    for event in pygame.event.get():\n    if event.type == pygame.QUIT:\n    if event.type == pygame.KEYDOWN:", "piece": "if event.type == pygame.QUIT:"}
{"function_name": "text_date_plot", "function_define": "    list of lists in `dates`\n    found at\n    defaulted to ``default``", "piece": "found at"}
{"function_name": "query_device", "function_define": "    if not device:\n    raise NotFoundError()\n    elif device.owner != username:", "piece": "raise NotFoundError()"}
{"function_name": "devices_get", "function_define": "    Requires authentication.\n    filter_args = dict()\n    filter_args[field] = value", "piece": "filter_args = dict()"}
{"function_name": "devices_post", "function_define": "    Requires authentication.\n    db.session.add(device)\n    db.session.commit()", "piece": "db.session.add(device)"}
{"function_name": "device_id_delete", "function_define": "    Requires authentication.\n    db.session.delete(device)\n    db.session.commit()", "piece": "db.session.delete(device)"}
{"function_name": "input_confirm", "function_define": "    if confirm == 'y':\n    elif confirm == 'n':\n    print('Please pick one.')", "piece": "elif confirm == 'n':"}
{"function_name": "get_grade", "function_define": "    if r.status_code is not 200:\n    print('Request errored.')\n    raise SystemExit", "piece": "print('Request errored.')"}
{"function_name": "upload_grade", "function_define": "    if r.status_code is not 200:\n    print('Request errored.')\n    raise SystemExit", "piece": "print('Request errored.')"}
{"function_name": "get_assignment", "function_define": "    if r.status_code is not 200:\n    print('Request errored.')\n    raise SystemExit", "piece": "print('Request errored.')"}
{"function_name": "input_feedback", "function_define": "    if prev_grade is None:\n    is_graded = False\n    elif self.overwrite is True:", "piece": "is_graded = False"}
{"function_name": "input_grade", "function_define": "    if suggested is not None:\n    if grade == '':\n    grade = suggested", "piece": "if grade == '':"}
{"function_name": "input_comments", "function_define": "    commentLines = []\n    while comments != '':\n    commentLines.append(comments)", "piece": "while comments != '':"}
{"function_name": "grade_psets", "function_define": "    os.makedirs(pset_name)\n    except OSError as e:\n    if e.errno != errno.EEXIST:", "piece": "except OSError as e:"}
{"function_name": "test_get_value", "function_define": "    gene = Generator()\n    self.assertIsNotNone(gene)\n    self.assertTrue(len(value) == 8)", "piece": "self.assertIsNotNone(gene)"}
{"function_name": "eating_cookies", "function_define": "    if n < 0:\n    elif n == 0:\n    elif cache and cache[n] > 0:", "piece": "elif n == 0:"}
{"function_name": "createCode", "function_define": "    if not digits:\n    digits = self.size\n    if not _chunksize:", "piece": "digits = self.size"}
{"function_name": "make_video", "function_define": "    command.extend(codecs[codec])\n    command.append(outFileName)\n    stdout, stderr = p.communicate()", "piece": "command.append(outFileName)"}
{"function_name": "door_and_prize", "function_define": "    for loop in range(loop_num):\n    prize = random.randint(0, 2)\n    doors = [0, 1, 2]", "piece": "prize = random.randint(0, 2)"}
{"function_name": "get_count", "function_define": "    c = conn.cursor()\n    count, = c.fetchone()\n    conn.commit()", "piece": "count, = c.fetchone()"}
{"function_name": "run_threads", "function_define": "    name = 'name'\n    c = conn.cursor()\n    conn.commit()", "piece": "c = conn.cursor()"}
{"function_name": "headersOverlap", "function_define": "    for k, v in expected.items():\n    assert k in actual\n    assert actual[k] == v", "piece": "assert k in actual"}
{"function_name": "GetMockDataFrame", "function_define": "    if withLabels:\n    df['Subject'] = 'testSubject'\n    df['Session'] = 'testSession'", "piece": "df['Subject'] = 'testSubject'"}
{"function_name": "GetMockEegSample", "function_define": "    subject = 'testSubject'\n    session = 'testSession'\n    condition = 'testAwakeCondition'", "piece": "session = 'testSession'"}
{"function_name": "cfg_diff_config", "function_define": "    task: nornir task object\n    Returns:\n    load_config operation", "piece": "Returns:"}
{"function_name": "read_interval", "function_define": "    intervals = {}\n    for line in infasta:\n    m = lineRE.match(line)", "piece": "for line in infasta:"}
{"function_name": "create_tree", "function_define": "    words.sort()\n    constructor = ArrayConstructor()\n    for word in words:", "piece": "constructor = ArrayConstructor()"}
{"function_name": "trace_children", "function_define": "    if cnt == 0:\n    node = self.rank1(index)\n    node = self.sub_rank1(index)", "piece": "node = self.rank1(index)"}
{"function_name": "get_below_nodes", "function_define": "    below_nodes = []\n    below_nodes.extend(node_list)\n    below_nodes.extend(tmp_list)", "piece": "below_nodes.extend(node_list)"}
{"function_name": "split_array", "function_define": "    for i in range(self.split_size):\n    if i == self.split_size - 1:\n    rank1 = self.get_rank(1)", "piece": "if i == self.split_size - 1:"}
{"function_name": "display_image", "function_define": "    im = Image.open(path)\n    im_cropped = crop_max_square(im)\n    im_bw = im_resized.convert('1')", "piece": "im_cropped = crop_max_square(im)"}
{"function_name": "integrate", "function_define": "    l = legendre(n)\n    A = np.zeros((n, n))\n    B = np.zeros((n, 1))", "piece": "A = np.zeros((n, n))"}
{"function_name": "nparray_to_list", "function_define": "    a = list(a)\n    for i in range(len(a)):\n    a[i] = list(a[i])", "piece": "for i in range(len(a)):"}
{"function_name": "get_serializer", "function_define": "    this module becomes drf_free.\n    import warnings\n    from . import drf_support", "piece": "import warnings"}
{"function_name": "int2bytes", "function_define": "    if n < 0:\n    elif n == 0:\n    while n > 0:", "piece": "elif n == 0:"}
{"function_name": "read_random_bits", "function_define": "    only the lower bits set.\n    nbytes, rbits = divmod(nbits, 8)\n    randomdata = urandom(nbytes)", "piece": "nbytes, rbits = divmod(nbits, 8)"}
{"function_name": "zoom_out", "function_define": "    if fontSize > 0:\n    fontSize -= 1\n    if scrollBarWidth > 0:", "piece": "fontSize -= 1"}
{"function_name": "testSuccess", "function_define": "    pipe = QgsRasterPipe()\n    QCoreApplication.processEvents()\n    self.assertTrue(self.success)", "piece": "QCoreApplication.processEvents()"}
{"function_name": "get_sales_id", "function_define": "    sales_ids = list()\n    sales = Sales.get_sales()\n    for sale in sales:", "piece": "sales = Sales.get_sales()"}
{"function_name": "calculate_Iw", "function_define": "    t_list_half = time.copy()\n    t_list = t_list_extra_tail[:-1]\n    w_size = len(t_list)", "piece": "t_list = t_list_extra_tail[:-1]"}
{"function_name": "_get_funcs", "function_define": "    if self.x_data_custom:\n    xFunc = getFunc(self.x_data)\n    if self.y_data_custom:", "piece": "xFunc = getFunc(self.x_data)"}
{"function_name": "_set_data", "function_define": "    df = funcs(catalog, query=query)\n    df.index = df['id']\n    if id_list:", "piece": "df.index = df['id']"}
{"function_name": "make_scatter", "function_define": "    self._set_data(**kwargs)\n    if object_type == 'all':\n    dset = self.ds", "piece": "if object_type == 'all':"}
{"function_name": "make_sky", "function_define": "    if object_type == 'all':\n    dset = self.ds\n    self._selected = dset.data.id", "piece": "dset = self.ds"}
{"function_name": "_make_hist", "function_define": "    dset = self.ds\n    if rng is None:\n    rng = [lo, hi]", "piece": "if rng is None:"}
{"function_name": "default_range", "function_define": "    x = self.ds.data.x.dropna()\n    y = self.ds.data.y.dropna()\n    xMed = np.median(x)", "piece": "y = self.ds.data.y.dropna()"}
{"function_name": "parse_line", "function_define": "    sample = json.loads(ndjson_line)\n    class_name = sample['word']\n    if not class_name:", "piece": "class_name = sample['word']"}
{"function_name": "writeRes", "function_define": "    x_j = json.dumps(x)\n    fp.write(x_j)\n    fp.write('\\n')", "piece": "fp.write(x_j)"}
{"function_name": "plot_CAMELS", "function_define": "    axes = axes.reshape(-1)\n    if att_df[att].dtype != float:\n    continue", "piece": "if att_df[att].dtype != float:"}
{"function_name": "get_entries", "function_define": "    user_email = current_user.email\n    if user_type == 'all':\n    result = []", "piece": "if user_type == 'all':"}
{"function_name": "get_entries_ssp", "function_define": "    user_email = current_user.email\n    dt_length = int(dt_length)\n    dt_start = int(dt_start)", "piece": "dt_length = int(dt_length)"}
{"function_name": "post_entry", "function_define": "    user_email = current_user.email\n    content = request.form\n    url_name = content['urlname']", "piece": "content = request.form"}
{"function_name": "delete_entry", "function_define": "    user_email = current_user.email\n    if url_name == '':\n    if row.user_id == user_name:", "piece": "if url_name == '':"}
{"function_name": "ejecutar", "function_define": "    print(str(self.ultima_linea))\n    self.doct.close()\n    self.doct.close()", "piece": "self.doct.close()"}
{"function_name": "UpdateBounds", "function_define": "    self.totals = []\n    self.max_total = 0\n    if not len(self.samples):", "piece": "self.max_total = 0"}
{"function_name": "nameNormalize", "function_define": "    name = name.split()\n    normal_name = []\n    for name_part in name:", "piece": "normal_name = []"}
{"function_name": "create_db", "function_define": "    conn = sqlite3.connect(db_name)\n    c = conn.cursor()\n    for id in range(1, 4):", "piece": "c = conn.cursor()"}
{"function_name": "dentist_list", "function_define": "    conn = sqlite3.connect(db_name)\n    conn.row_factory = dict_factory\n    c = conn.cursor()", "piece": "conn.row_factory = dict_factory"}
{"function_name": "getDocTime", "function_define": "    conn = sqlite3.connect(db_name)\n    conn.row_factory = dict_factory\n    c = conn.cursor()", "piece": "conn.row_factory = dict_factory"}
{"function_name": "timeNormal", "function_define": "    availability = True\n    if time not in available_time:\n    availability = False", "piece": "if time not in available_time:"}
{"function_name": "closestTime", "function_define": "    conn = sqlite3.connect(db_name)\n    conn.row_factory = dict_factory\n    c = conn.cursor()", "piece": "conn.row_factory = dict_factory"}
{"function_name": "cancelID", "function_define": "    conn = sqlite3.connect(db_name)\n    conn.row_factory = dict_factory\n    c = conn.cursor()", "piece": "conn.row_factory = dict_factory"}
{"function_name": "_compile", "function_define": "    result = system_class\n    parser.classdef(cgc)\n    if not system_class:", "piece": "parser.classdef(cgc)"}
{"function_name": "create_control", "function_define": "    from pyface.qt import QtGui\n    control = QtGui.QWidget(parent)\n    palette = control.palette()", "piece": "control = QtGui.QWidget(parent)"}
{"function_name": "destroy_control", "function_define": "    if self.control is not None:\n    self.control.hide()\n    self.control.deleteLater()", "piece": "self.control.hide()"}
{"function_name": "coef_FoM", "function_define": "    A = x3.sum()\n    B = x1.sum()\n    C = false_x1.sum()", "piece": "B = x1.sum()"}
{"function_name": "__file_exists", "function_define": "    such as % and & in here.\n    o_file = pathlib.Path(path)\n    o_parent = o_file.parent", "piece": "o_file = pathlib.Path(path)"}
{"function_name": "__analyze", "function_define": "    self.command_args = []\n    for o_arg in self.original_args:\n    if a_name:", "piece": "for o_arg in self.original_args:"}
{"function_name": "pascal_to_snake", "function_define": "    Assumes that\n    Examples:\n    RNAProduct -> RNA_product", "piece": "Examples:"}
{"function_name": "with_formatting", "function_define": "    case = guess_casing(s)\n    normalized = normalize(s)\n    if formatted:", "piece": "normalized = normalize(s)"}
{"function_name": "test_speed", "function_define": "    with Timer() as t1:\n    self.c.n = -1\n    with Timer() as t2:", "piece": "self.c.n = -1"}
{"function_name": "cadastro", "function_define": "    form = CadastroForm()\n    if form.validate_on_submit():\n    db.session.add(novo_usuario)", "piece": "if form.validate_on_submit():"}
{"function_name": "autenticar", "function_define": "    form = LoginForm()\n    if form.validate_on_submit():\n    session['logged_in'] = True", "piece": "if form.validate_on_submit():"}
{"function_name": "listarDisciplina", "function_define": "    form = ListarDisciplinasForm()\n    if form.submitExcluir.data:\n    disciplina.desativarDisciplina()", "piece": "if form.submitExcluir.data:"}
{"function_name": "editarDisciplina", "function_define": "    if disciplina is None:\n    if request.method == 'GET':\n    if disciplina is None:", "piece": "if request.method == 'GET':"}
{"function_name": "cadastroAssunto", "function_define": "    form = CadastroAssuntoForm()\n    if form.validate_on_submit():\n    db.session.add(novo_assunto)", "piece": "if form.validate_on_submit():"}
{"function_name": "listarAssunto", "function_define": "    form = ListarAssuntoForm()\n    form.assuntos.choices = listaAf\n    if form.validate_on_submit():", "piece": "form.assuntos.choices = listaAf"}
{"function_name": "editarAssunto", "function_define": "    if request.method == 'GET':\n    if assunto is None:\n    db.session.commit()", "piece": "if assunto is None:"}
{"function_name": "cadastroQuestao", "function_define": "    form = CadastroQuestaoForm()\n    form.assuntos.choices = listaAf\n    idAssunto = form.assuntos.data", "piece": "form.assuntos.choices = listaAf"}
{"function_name": "listarQuestao", "function_define": "    form = ListarQuestaoForm()\n    form.assuntos.choices = listaAf\n    idAssunto = form.assuntos.data", "piece": "form.assuntos.choices = listaAf"}
{"function_name": "editarQuestao", "function_define": "    if request.method == 'GET':\n    if questao is None:\n    tipo = form.novo_tipo.data", "piece": "if questao is None:"}
{"function_name": "listarAvaliacao", "function_define": "    form = ListarAvaliacaoForm()\n    semestre = form.semestre.data\n    ano = form.ano.data", "piece": "semestre = form.semestre.data"}
{"function_name": "editarAvaliacao", "function_define": "    if avaliacao is None:\n    flash('Selecione uma avaliacao')\n    if request.method == 'GET':", "piece": "flash('Selecione uma avaliacao')"}
{"function_name": "combine_wiki", "function_define": "    if current:\n    for in_name in in_names:\n    self.wikipedia = out_wikipedia", "piece": "for in_name in in_names:"}
{"function_name": "compute_articles", "function_define": "    if self.short:\n    if not self.random:\n    paths.sort()", "piece": "if not self.random:"}
{"function_name": "compute_entities", "function_define": "    self.entities = dict()\n    except AssertionError:\n    entities = []", "piece": "except AssertionError:"}
{"function_name": "compute_tuples", "function_define": "    s: set, original set.\n    Returns:\n    s = sorted(s)", "piece": "Returns:"}
{"function_name": "compute_contexts", "function_define": "    for tuple_ in self.tuples:\n    query_ids = set()\n    tuple_.query_ids = query_ids", "piece": "query_ids = set()"}
{"function_name": "compute_queries", "function_define": "    queries = dict()\n    for tuple_ in self.tuples:\n    self.queries = queries", "piece": "for tuple_ in self.tuples:"}
{"function_name": "clean_articles", "function_define": "    to_del = set()\n    for id_ in self.articles:\n    to_del.add(id_)", "piece": "for id_ in self.articles:"}
{"function_name": "clean_tuples", "function_define": "    tuples = self.tuples\n    self.tuples = []\n    for tuple_ in tuples:", "piece": "self.tuples = []"}
{"function_name": "clean_entities", "function_define": "    to_del = set()\n    for name in self.entities:\n    if name not in to_keep:", "piece": "for name in self.entities:"}
{"function_name": "filter_no_query", "function_define": "    for tuple_ in self.tuples:\n    if len(tuple_.query_ids) >= 1:\n    to_keep_tuples.add(str(tuple_))", "piece": "if len(tuple_.query_ids) >= 1:"}
{"function_name": "save_obj_pkl", "function_define": "    Save an object using pickle.\n    if self.save:\n    except PicklingError as err:", "piece": "if self.save:"}
{"function_name": "write_debug", "function_define": "    if self.debug:\n    if field == 'articles':\n    elif field == 'entities':", "piece": "if field == 'articles':"}
{"function_name": "progression", "function_define": "    count: int, current count.\n    Returns:\n    count += 1", "piece": "Returns:"}
{"function_name": "correction", "function_define": "    corrected = set()\n    if not to_correct:\n    if self.silent:", "piece": "if not to_correct:"}
{"function_name": "subtuples", "function_define": "    s: set, original set.\n    Returns:\n    s = sorted(s)", "piece": "Returns:"}
{"function_name": "write_vol", "function_define": "    path : path to write the data\n    vol : modifient volume\n    volume = np.uint8(volume)", "piece": "vol : modifient volume"}
{"function_name": "login_checker", "function_define": "    config_string = file.read()\n    users = config['users']\n    for user in users:", "piece": "users = config['users']"}
{"function_name": "event_api", "function_define": "    events = Event.query.all()\n    formatted_events = []\n    for event in events:", "piece": "formatted_events = []"}
{"function_name": "_tuneNetwork", "function_define": "    sumBiasVectors = []\n    sumWeightMatrices = []\n    for inputs, expected in batch:", "piece": "sumWeightMatrices = []"}
{"function_name": "_backpropagate", "function_define": "    deltaBiasVectors = []\n    deltaWeightMatrices = []\n    activationVector = inputs", "piece": "deltaWeightMatrices = []"}
{"function_name": "possible_subsets", "function_define": "    for i in range(1 << len(arr)):\n    for j in range(len(arr)):\n    if i & 1 << j:", "piece": "for j in range(len(arr)):"}
{"function_name": "analysis", "function_define": "    error_list = []\n    ss_params = SysParams()\n    ss_solver = Solver(ss_params)", "piece": "ss_params = SysParams()"}
{"function_name": "logsumexp", "function_define": "    y = np.exp(X - xmax)\n    S = np.log(S) + xmax\n    S = S * np.exp(xmax)", "piece": "S = np.log(S) + xmax"}
{"function_name": "find_offset", "function_define": "    x_acc = 0\n    y_acc = 0\n    h = grid.shape[0]", "piece": "y_acc = 0"}
{"function_name": "classify", "function_define": "    image[:, :, 0] = pixels[:, :]\n    image = shift(image)\n    out = net.forward_all(data=data)", "piece": "image = shift(image)"}
{"function_name": "roundline", "function_define": "    dx = end[0] - start[0]\n    dy = end[1] - start[1]\n    distance = max(abs(dx), abs(dy))", "piece": "dy = end[1] - start[1]"}
{"function_name": "loop_dataset", "function_define": "    if batch_size > 0:\n    in_list = []\n    target_list = []", "piece": "in_list = []"}
{"function_name": "input_signature", "function_define": "    with_batch_dim = False\n    input_list = []\n    target_list = []", "piece": "input_list = []"}
{"function_name": "set_size", "function_define": "    if self._size == size:\n    self._size = size\n    self._root.set_scale(size)", "piece": "self._size = size"}
{"function_name": "__define_corners", "function_define": "    minmax = (-0.5, 0.5)\n    x1, y1, z1 = corners.pop()\n    for corner in corners[:]:", "piece": "x1, y1, z1 = corners.pop()"}
{"function_name": "set_cross_size", "function_define": "    if self._cross_size == size:\n    if 'cross' in self._viz:\n    group = self.group", "piece": "if 'cross' in self._viz:"}
{"function_name": "draw_on_top", "function_define": "    if self._drawn_on_top == on_top:\n    self._drawn_on_top = on_top\n    root = self._root", "piece": "self._drawn_on_top = on_top"}
{"function_name": "set_property", "function_define": "    if prop_id == 'viz':\n    if self.set_viz(value):\n    update_app()", "piece": "if self.set_viz(value):"}
{"function_name": "make_pickable", "function_define": "    if self._is_const_size:\n    if pickable:\n    if show_through:", "piece": "if pickable:"}
{"function_name": "get_findings", "function_define": "    data = path.read_text()\n    all_lines = data.splitlines()\n    start, (ip, name) = headers[i]", "piece": "all_lines = data.splitlines()"}
{"function_name": "init_logger", "function_define": "    logger.setLevel(log_level)\n    to the logs accordingly\n    i.e. color_log", "piece": "to the logs accordingly"}
{"function_name": "decorate_emit", "function_define": "    to the logs accordingly\n    i.e. color_log\n    This method will give", "piece": "i.e. color_log"}
{"function_name": "color_log", "function_define": "    This method will give\n    different colors to the log.\n    levelno = args[0].levelno", "piece": "different colors to the log."}
{"function_name": "test_predict_se", "function_define": "    nsample = 50\n    x1 = np.linspace(0, 20, nsample)\n    np.random.seed(0)", "piece": "x1 = np.linspace(0, 20, nsample)"}
{"function_name": "load_pconfig", "function_define": "    global PCONFIG_CACHE\n    if instrument in PCONFIG_CACHE:\n    if isinstance(instrument, str):", "piece": "if instrument in PCONFIG_CACHE:"}
{"function_name": "get_config_all", "function_define": "    modules = get_module_names(None)\n    for module in modules:\n    print('=' * 50)", "piece": "for module in modules:"}
{"function_name": "get_file_names", "function_define": "    if instrument is not None:\n    directories = []\n    for filename in filelist:", "piece": "directories = []"}
{"function_name": "get_module_names", "function_define": "    if mod_list is None:\n    mod_list = SCRIPTS\n    if instrument_path is None:", "piece": "mod_list = SCRIPTS"}
{"function_name": "break_point", "function_define": "    if params is None:\n    params = load_config()\n    if allow is None:", "piece": "params = load_config()"}
{"function_name": "window_size", "function_define": "    if os.name == 'posix':\n    if shutil.which('stty') is None:\n    except Exception:", "piece": "if shutil.which('stty') is None:"}
{"function_name": "display_func", "function_define": "    if wlog is None:\n    wlog = drs_exceptions.wlogbasic\n    if textentry is None:", "piece": "wlog = drs_exceptions.wlogbasic"}
{"function_name": "_get_file_names", "function_define": "    if instrument is None:\n    user_env = params['DRS_USERENV']\n    directory = None", "piece": "user_env = params['DRS_USERENV']"}
{"function_name": "_get_subdir", "function_define": "    subdir = None\n    if cond1 and cond2:\n    subdir = filename", "piece": "if cond1 and cond2:"}
{"function_name": "_load_from_file", "function_define": "    for filename in files:\n    for it in range(len(fkey)):\n    if fkeyi in fkeys:", "piece": "for it in range(len(fkey)):"}
{"function_name": "_execute_ipdb", "function_define": "    import ipdb\n    ipdb.set_trace()\n    except Exception as _:", "piece": "ipdb.set_trace()"}
{"function_name": "_capitalise_key", "function_define": "    key is a string\n    nothing is done\n    if type(key) == str:", "piece": "nothing is done"}
{"function_name": "_copy_pdb_rc", "function_define": "    global CURRENT_PATH\n    package = params['DRS_PACKAGE']\n    path = params['DRS_PDB_RC_FILE']", "piece": "package = params['DRS_PACKAGE']"}
{"function_name": "_get_prev_count", "function_define": "    n_elements = 0\n    if debug_list[row] != previous:\n    n_elements += 1", "piece": "if debug_list[row] != previous:"}
{"function_name": "set_source", "function_define": "    key = _capitalise_key(key)\n    if key in self.keys():\n    self.sources[key] = source", "piece": "if key in self.keys():"}
{"function_name": "set_instance", "function_define": "    key = _capitalise_key(key)\n    if key in self.keys():\n    self.instances[key] = instance", "piece": "if key in self.keys():"}
{"function_name": "set_sources", "function_define": "    Set a list of keys sources\n    the source or sources to add,\n    for k_it in range(len(keys)):", "piece": "the source or sources to add,"}
{"function_name": "set_instances", "function_define": "    Set a list of keys sources\n    the source or sources to add,\n    for k_it in range(len(keys)):", "piece": "the source or sources to add,"}
{"function_name": "append_sources", "function_define": "    the source or sources to add,\n    for k_it in range(len(keys)):\n    key = keys[k_it]", "piece": "for k_it in range(len(keys)):"}
{"function_name": "set_all_sources", "function_define": "    for key in self.keys():\n    key = _capitalise_key(key)\n    self.sources[key] = source", "piece": "key = _capitalise_key(key)"}
{"function_name": "startswith", "function_define": "    return_keys = []\n    for key in self.keys():\n    if type(key) != str:", "piece": "for key in self.keys():"}
{"function_name": "endswith", "function_define": "    return_keys = []\n    for key in self.keys():\n    if type(key) != str:", "piece": "for key in self.keys():"}
{"function_name": "_string_print", "function_define": "    keys = list(self.keys())\n    values = list(self.values())\n    return_string = 'ParamDict:\\n'", "piece": "values = list(self.values())"}
{"function_name": "get_instanceof", "function_define": "    as the key\n    keydict = dict()\n    instance = self.instances[key]", "piece": "keydict = dict()"}
{"function_name": "read_params", "function_define": "    config_path = get_config_path()\n    if config_path.exists():\n    params = json.loads(fp.read())", "piece": "if config_path.exists():"}
{"function_name": "glDrawParticles", "function_define": "    glPushMatrix()\n    glDisable(GL_DEPTH_TEST)\n    glEnable(GL_BLEND)", "piece": "glDisable(GL_DEPTH_TEST)"}
{"function_name": "LoadTextureRAW", "function_define": "    file = open(filename, 'rb')\n    if file == None:\n    data = file.read()", "piece": "if file == None:"}
{"function_name": "loss_from_log", "function_define": "    lines = f.readlines()\n    val_loss = []\n    train_loss = []", "piece": "val_loss = []"}
{"function_name": "test_model", "function_define": "    self.model.eval()\n    self.model.training = False\n    with torch.no_grad():", "piece": "self.model.training = False"}
{"function_name": "ensemble_output", "function_define": "    for filename in filenames:\n    filename = filename[:-4]\n    seq = f.read()", "piece": "filename = filename[:-4]"}
{"function_name": "test_top_models", "function_define": "    for i in top_models_index:\n    self.test_model(str(i))\n    if ensemble:", "piece": "self.test_model(str(i))"}
{"function_name": "represent_dict", "function_define": "    for el in d:\n    if type(d[el]) == list:\n    elif type(d[el]) == dict:", "piece": "if type(d[el]) == list:"}
{"function_name": "represent_list", "function_define": "    for el in d:\n    if type(el) == list:\n    elif type(el) == dict:", "piece": "if type(el) == list:"}
{"function_name": "makeLayerMesh", "function_define": "    bm = bmesh.new()\n    tmxLayer = level.layers[i]\n    tw = level.width", "piece": "tmxLayer = level.layers[i]"}
{"function_name": "findTileset", "function_define": "    found = None\n    for tileset in level.tilesets:\n    if gid >= tileset.firstgid:", "piece": "for tileset in level.tilesets:"}
{"function_name": "_create_network", "function_define": "    post_body.update(kwargs)\n    network = body['network']\n    if _auto_clean_up:", "piece": "network = body['network']"}
{"function_name": "test_save_load", "function_define": "    model_file = 'TESTPOLICY.json'\n    weights_file = 'TESTWEIGHTS.h5'\n    model_file2 = 'TESTPOLICY2.json'", "piece": "weights_file = 'TESTWEIGHTS.h5'"}
{"function_name": "get_x_coordinate", "function_define": "    line associated with that year.\n    Returns:\n    with the specified year.", "piece": "Returns:"}
{"function_name": "draw_fixed_lines", "function_define": "    Returns:\n    canvas.delete('all')\n    for i in range(len(YEARS)):", "piece": "canvas.delete('all')"}
{"function_name": "draw_names", "function_define": "    Returns:\n    draw_fixed_lines(canvas)\n    years = []", "piece": "draw_fixed_lines(canvas)"}
{"function_name": "construct_prompt", "function_define": "    for example in examples or []:\n    if not example.label.islower():\n    if demo:", "piece": "if not example.label.islower():"}
{"function_name": "_parse_choice", "function_define": "    if match is None:\n    if self.soft_label:\n    logprobs = choice['logprobs']", "piece": "if self.soft_label:"}
{"function_name": "_try_augment", "function_define": "    if self.soft_label:\n    openai_kwargs['logprobs'] = 100\n    batch_examples = examples", "piece": "openai_kwargs['logprobs'] = 100"}
{"function_name": "restoreString", "function_define": "    traverse = len(indices)\n    for x in range(0, traverse):\n    mov_index = indices[x]", "piece": "for x in range(0, traverse):"}
{"function_name": "visitProgramm", "function_define": "    for glob in node.globaldefs:\n    self.visit(glob)\n    definedfunctions = set()", "piece": "self.visit(glob)"}
{"function_name": "visitCall", "function_define": "    if len(node.args) > 6:\n    for arg in node.args:\n    self.visit(arg)", "piece": "for arg in node.args:"}
{"function_name": "visitFuncdef", "function_define": "    self.localvars = OrderedDict()\n    self.localvars[arg] = 0\n    self.visit(statement)", "piece": "self.localvars[arg] = 0"}
{"function_name": "attributes", "function_define": "    if kind in self.kind:\n    header = None\n    order = None", "piece": "header = None"}
{"function_name": "run_single", "function_define": "    a configuration snapshot.\n    Arguments:\n    Returns:", "piece": "Arguments:"}
{"function_name": "find_max", "function_define": "    global max_sum\n    if not root:\n    cur_sum += root.val", "piece": "if not root:"}
{"function_name": "nip_install", "function_define": "    nipfile = nipfile_selector(ctx)\n    env = env_selector(ctx)\n    if not production:", "piece": "env = env_selector(ctx)"}
{"function_name": "launch_server", "function_define": "    appserver = ApplicationServer()\n    appserver.serve()\n    print('Killing server...')", "piece": "appserver.serve()"}
{"function_name": "test_worker_dump", "function_define": "    context = zmq.Context()\n    socket = context.socket(zmq.REQ)\n    time.sleep(15)", "piece": "socket = context.socket(zmq.REQ)"}
{"function_name": "graficarBola", "function_define": "    my_canvas.delete('all')\n    graphAcel()\n    ponerTextos()", "piece": "graphAcel()"}
{"function_name": "editPoint", "function_define": "    global editando\n    editando = not editando\n    if not editando:", "piece": "editando = not editando"}
{"function_name": "drawBezier", "function_define": "    omega = np.sqrt(k / m)\n    acel = -f(0) * 9.81\n    beta = eval(betas[betai])", "piece": "acel = -f(0) * 9.81"}
{"function_name": "movePoint", "function_define": "    if editando:\n    my_canvas.delete('all')\n    x = centrox - event.x", "piece": "my_canvas.delete('all')"}
{"function_name": "graficasNewmark", "function_define": "    global U, V, ACEL, T\n    x0 = 100\n    y0 = height - 90", "piece": "x0 = 100"}
{"function_name": "graphAcel", "function_define": "    x0 = 100\n    y0 = height - 90\n    dx = b / n", "piece": "y0 = height - 90"}
{"function_name": "importarArchivo", "function_define": "    global ARCHIVO\n    ARCHIVO = askopenfilename()\n    parseArchivo()", "piece": "ARCHIVO = askopenfilename()"}
{"function_name": "parseArchivo", "function_define": "    global f, u, v, editando, data\n    graficarBola()\n    drawBezier()", "piece": "graficarBola()"}
{"function_name": "load_weights", "function_define": "    f = open(weights, 'rb')\n    self.seen = self.header[3]\n    if layer == 'convolutional':", "piece": "self.seen = self.header[3]"}
{"function_name": "do_update", "function_define": "    sheet = SheetData()\n    data = sheet.get_sheet()\n    new_uses = []", "piece": "data = sheet.get_sheet()"}
{"function_name": "make_gl_entries", "function_define": "    if gl_map:\n    if not cancel:\n    if gl_map and len(gl_map) > 1:", "piece": "if not cancel:"}
{"function_name": "process_gl_map", "function_define": "    if merge_entries:\n    for entry in gl_map:\n    if flt(entry.debit) < 0:", "piece": "for entry in gl_map:"}
{"function_name": "make_entry", "function_define": "    gle = frappe.get_doc(args)\n    gle.flags.ignore_permissions = 1\n    gle.insert()", "piece": "gle.flags.ignore_permissions = 1"}
{"function_name": "processAlgorithm", "function_define": "    if output[-3:] != 'csv':\n    output += '.csv'\n    Coords = String2CoordList(COs)", "piece": "output += '.csv'"}
{"function_name": "averageHash", "function_define": "    hash_size = 8\n    pixels = list(image.getdata())\n    avg = sum(pixels) / len(pixels)", "piece": "pixels = list(image.getdata())"}
{"function_name": "mat_usage", "function_define": "    mat = -np.ones((5, 5))\n    res = hopcroft_solve(mat=mat)\n    print(res)", "piece": "res = hopcroft_solve(mat=mat)"}
{"function_name": "make_inference", "function_define": "    middle = mdl.inference(I0, I1)\n    if n == 1:\n    if n % 2:", "piece": "if n == 1:"}
{"function_name": "minimumBribes", "function_define": "    q_len = len(q)\n    org_q = range(q_len)\n    tot_bribes = 0", "piece": "org_q = range(q_len)"}
{"function_name": "paste_view", "function_define": "    flag = PasteAction.get(flag)\n    if commit == 'base':\n    if not file:", "piece": "if commit == 'base':"}
{"function_name": "image_view", "function_define": "    if not file:\n    if not file:\n    abort(404, 'File not found.')", "piece": "if not file:"}
{"function_name": "thumbnail", "function_define": "    if not file:\n    abort(404, 'File not found.')\n    if thumb:", "piece": "abort(404, 'File not found.')"}
{"function_name": "from_path", "function_define": "    if not os.path.exists(path):\n    config.read(path)\n    except configparser.Error as e:", "piece": "config.read(path)"}
{"function_name": "add_bias", "function_define": "    Inclui bias no vetor de entrada\n    v_bias = []\n    v_bias = [[1] + x for x in v]", "piece": "v_bias = []"}
{"function_name": "matrix_transpose", "function_define": "    Retorna a matriz transposta\n    if not isinstance(m[0], list):\n    rows = len(m)", "piece": "if not isinstance(m[0], list):"}
{"function_name": "matrix_empty", "function_define": "    Cria uma matriz vazia\n    while len(M) < rows:\n    M.append([])", "piece": "while len(M) < rows:"}
{"function_name": "vector_empty", "function_define": "    Cria um vetor vazio\n    while len(M) < rows:\n    M.append(0.0)", "piece": "while len(M) < rows:"}
{"function_name": "matrix_multiply", "function_define": "    rows_a = len(a)\n    cols_a = len(a[0])\n    rows_b = len(b)", "piece": "cols_a = len(a[0])"}
{"function_name": "matrix_inverse", "function_define": "    if len(m) == 2:\n    cofactors = []\n    for r in range(len(m)):", "piece": "cofactors = []"}
{"function_name": "weigthing", "function_define": "    Retorna vetor com x * pesos\n    rows_x = len(x_list)\n    for i in range(rows_x):", "piece": "rows_x = len(x_list)"}
{"function_name": "to_int_list", "function_define": "    if value is None:\n    value_list = value.split(',')\n    except ValueError:", "piece": "value_list = value.split(',')"}
{"function_name": "characters", "function_define": "    g = get_g()\n    novel = None\n    if novel_id is not None:", "piece": "novel = None"}
{"function_name": "get_novel", "function_define": "    g = get_g()\n    if novel is None:\n    flask.abort(404)", "piece": "if novel is None:"}
{"function_name": "get_character", "function_define": "    g = get_g()\n    if character is None:\n    flask.abort(404)", "piece": "if character is None:"}
{"function_name": "get_random_quote", "function_define": "    g = get_g()\n    if quote is None:\n    flask.abort(404)", "piece": "if quote is None:"}
{"function_name": "tutorial", "function_define": "    columns = Column.objects.all()\n    if active is None:\n    active = columns[0].slug", "piece": "if active is None:"}
{"function_name": "pretty_format", "function_define": "    output = {}\n    if data:\n    data = self.set_pts_fields(data)", "piece": "if data:"}
{"function_name": "parseOdyssey", "function_define": "    from time import time\n    t0 = time()\n    text = open(fn, 'r').read()", "piece": "t0 = time()"}
{"function_name": "ambleText", "function_define": "    while L and (not L[0]):\n    L.pop(0)\n    while L:", "piece": "L.pop(0)"}
{"function_name": "mainText", "function_define": "    while L:\n    B = L.pop(0)\n    while not L[0]:", "piece": "B = L.pop(0)"}
{"function_name": "to_python", "function_define": "    built-in Vertica functions.\n    Parameters\n    name: str, optional", "piece": "Parameters"}
{"function_name": "handle_dom_event", "function_define": "    if 'DOMEventCategory' in json:\n    if target_identifier is not '':\n    if target_identifier is not '':", "piece": "if target_identifier is not '':"}
{"function_name": "ResidualBlock", "function_define": "    skip = x\n    for i in range(3):\n    tm1 = self.pelu(tm1)", "piece": "for i in range(3):"}
{"function_name": "ThermalSR", "function_define": "    x4 = self.pelu(x4)\n    skip = x4\n    size = tf.shape(x)", "piece": "skip = x4"}
{"function_name": "get_move", "function_define": "    opponent, and 0 for open space\n    Returns:\n    start = time.time()", "piece": "Returns:"}
{"function_name": "alpha_beta", "function_define": "    nodes are end_game states.\n    check all layers.\n    Returns:", "piece": "check all layers."}
{"function_name": "get_static_value", "function_define": "    and minimizing player as -1.\n    Returns:\n    if window_sums.max() == 4:", "piece": "Returns:"}
{"function_name": "perform_step", "function_define": "    if current_app.conf.mfa_testing:\n    eppn = action.eppn\n    del session.mfa_action", "piece": "eppn = action.eppn"}
{"function_name": "fix_value", "function_define": "    if v.lower() == 'none':\n    if v[0] == '-':\n    v = v[1:]", "piece": "if v[0] == '-':"}
{"function_name": "fix_every", "function_define": "    if isinstance(v, Duration):\n    d = Duration(**v)\n    if d.total_seconds() <= 1.0:", "piece": "d = Duration(**v)"}
{"function_name": "resolve_configs", "function_define": "    pending = []\n    for conf in configs:\n    continue", "piece": "for conf in configs:"}
{"function_name": "_construct_UI", "function_define": "    Construct user interface\n    self.a_specs.setVisible(True)\n    bfont = QFont()", "piece": "self.a_specs.setVisible(True)"}
{"function_name": "update_UI", "function_define": "    spec widgets\n    self.f_specs.show()\n    self.f_specs.hide()", "piece": "self.f_specs.show()"}
{"function_name": "sim_poisson_pop", "function_define": "    Parameters\n    n_seconds : float\n    Simulation time, in seconds.", "piece": "n_seconds : float"}
{"function_name": "sim_knee", "function_define": "    Parameters\n    n_seconds : float\n    Simulation time, in seconds.", "piece": "n_seconds : float"}
{"function_name": "sim_random_walk", "function_define": "    Parameters\n    n_seconds : float\n    Simulation time, in seconds.", "piece": "n_seconds : float"}
{"function_name": "sim_powerlaw", "function_define": "    Parameters\n    n_seconds : float\n    Simulation time, in seconds.", "piece": "n_seconds : float"}
{"function_name": "_create_powerlaw", "function_define": "    Parameters\n    n_samples : int\n    fs : float", "piece": "n_samples : int"}
{"function_name": "__sizeof__", "function_define": "    if self.loss_list is not None:\n    for value in self.loss_list:\n    S += getsizeof(value)", "piece": "for value in self.loss_list:"}
{"function_name": "_set_None", "function_define": "    self.loss_list = None\n    self.meshsol_list = None\n    self.loss_index = None", "piece": "self.meshsol_list = None"}
{"function_name": "_get_loss_list", "function_define": "    if self._loss_list is not None:\n    for obj in self._loss_list:\n    if obj is not None:", "piece": "for obj in self._loss_list:"}
{"function_name": "_set_loss_list", "function_define": "    if type(value) is list:\n    for ii, obj in enumerate(value):\n    if type(obj) is dict:", "piece": "for ii, obj in enumerate(value):"}
{"function_name": "loadscript", "function_define": "    np = path.replace('\"', '')\n    str_concat = ''\n    with open(np, 'r') as f:", "piece": "str_concat = ''"}
{"function_name": "quit_yadi", "function_define": "    qe.dispose_last()\n    qe.saveconf()\n    sys.exit(0)", "piece": "qe.saveconf()"}
{"function_name": "interpret_line", "function_define": "    read_line = read_line.strip()\n    if read_line == '':\n    int_parser = IntParse()", "piece": "if read_line == '':"}
{"function_name": "get_args_kwargs", "function_define": "    Parameters\n    func : callable\n    param_dict : dict", "piece": "func : callable"}
{"function_name": "soft_nms", "function_define": "    if len(input_bboxes) == 0:\n    scores = input_scores[indices]\n    bboxes = input_bboxes[indices]", "piece": "scores = input_scores[indices]"}
{"function_name": "ssd_warp_gt", "function_define": "    all_gt = []\n    if np.sum(valid_mask) == 0:\n    all_gt.append([])", "piece": "if np.sum(valid_mask) == 0:"}
{"function_name": "action_warp_gt", "function_define": "    det_class = (bg_class + 1) % 2\n    all_gt = []\n    valid_mask = sample_labels >= 0", "piece": "all_gt = []"}
{"function_name": "ising2d_sweep", "function_define": "    m, n = s.shape\n    for i in range(m):\n    for j in range(n):", "piece": "for i in range(m):"}
{"function_name": "get_posts", "function_define": "    Get list of subcategory posts\n    self.driver.get(subcategory_url)\n    if days:", "piece": "self.driver.get(subcategory_url)"}
{"function_name": "get_post_details", "function_define": "    Get post details\n    data = {}\n    self.driver.get(post_url)", "piece": "data = {}"}
{"function_name": "market_import", "function_define": "    data_configs = market_configs()\n    url_market = url_base + '?page='\n    t0 = time.time()", "piece": "url_market = url_base + '?page='"}
{"function_name": "test_flow", "function_define": "    if drop_or_others:\n    print('start to test...')\n    if not os.path.exists(out_dir):", "piece": "print('start to test...')"}
{"function_name": "parse_shops", "function_define": "    props = {}\n    props['lat'] = pos[1]\n    props['lon'] = pos[2]", "piece": "props['lat'] = pos[1]"}
{"function_name": "local_lockout", "function_define": "    if value:\n    self.write('^R')\n    self.write('^P')", "piece": "self.write('^R')"}
{"function_name": "get_proj_root", "function_define": "    proj_root = cwd\n    if not Path(proj_root).exists():\n    print('POWERLOADER NOT FOUND!')", "piece": "if not Path(proj_root).exists():"}
{"function_name": "mock_server", "function_define": "    port = 4444\n    class Starter(ProcessStarter):\n    pattern = 'Server started!'", "piece": "class Starter(ProcessStarter):"}
{"function_name": "test_part_resume", "function_define": "    data = fi.read()\n    fo.write(data[0:400])\n    assert 'Range' in sent_headers", "piece": "fo.write(data[0:400])"}
{"function_name": "startup_check", "function_define": "    s = socket.socket()\n    address = 'localhost'\n    error = False", "piece": "address = 'localhost'"}
{"function_name": "timeTranSecond", "function_define": "    t, m, s = t.split(':')\n    if t == '1900/1/9 7:00':\n    elif t == '1900/1/1 2:30':", "piece": "if t == '1900/1/9 7:00':"}
{"function_name": "getDuration", "function_define": "    if se == -1:\n    if int(sh) > int(eh):\n    if se == '19:-20:05':", "piece": "if int(sh) > int(eh):"}
{"function_name": "caldistance", "function_define": "    dist0 = 0\n    for ii in range(0, len(lst1)):\n    tmp = abs(lst1[ii] - lst2[ii])", "piece": "for ii in range(0, len(lst1)):"}
{"function_name": "strtofloat0", "function_define": "    ans = []\n    for ii in lst:\n    tmp = [float(kk) for kk in ii]", "piece": "for ii in lst:"}
{"function_name": "buildidsmatrx", "function_define": "    permdist0 = []\n    for ii in perm0:\n    permtmp = []", "piece": "for ii in perm0:"}
{"function_name": "originaldistmtrx", "function_define": "    distlstot0 = []\n    rowdist = []\n    rowdist.append(tmpdist)", "piece": "rowdist = []"}
{"function_name": "outgpdis", "function_define": "    distmtrxarr = np.array(distmtrx)\n    if gset[1] != 3:\n    sm0 = np.sum(tmpdistmtrxarr)", "piece": "if gset[1] != 3:"}
{"function_name": "ingspdistance", "function_define": "    distmtrxarr = np.array(distmtrx)\n    permdistances = []\n    for ii in range(0, 4):", "piece": "permdistances = []"}
{"function_name": "getstderror", "function_define": "    distlst0 = distarr.tolist()\n    if in_out == 0:\n    elements0 = []", "piece": "if in_out == 0:"}
{"function_name": "make1dlist", "function_define": "    onedlist = []\n    for ii in array.tolist():\n    onedlist = onedlist + ii", "piece": "for ii in array.tolist():"}
{"function_name": "updatePrediction", "function_define": "    self.interpreter.invoke()\n    self.frameCache = []\n    self.skipFrames = 10", "piece": "self.frameCache = []"}
{"function_name": "fetchHand", "function_define": "    with the hand drawn on it.\n    if not success:\n    if results.multi_hand_landmarks:", "piece": "if not success:"}
{"function_name": "identical", "function_define": "    if isinstance(reference, list):\n    for i in range(len(reference)):\n    if isinstance(reference, dict):", "piece": "for i in range(len(reference)):"}
{"function_name": "mouse_move", "function_define": "    if not event.inaxes:\n    time = self.counter\n    self.counter += 1", "piece": "time = self.counter"}
{"function_name": "_process_inputs", "function_define": "    if self.algo == 'ppo':\n    if self.include_state_cond:\n    obs = obs[1:]", "piece": "if self.include_state_cond:"}
{"function_name": "fep_calculate", "function_define": "    with torch.no_grad():\n    if self.include_state_cond:\n    rews = rews.unsqueeze(1)", "piece": "if self.include_state_cond:"}
{"function_name": "merge_chains", "function_define": "    Parameters\n    system: vermouth.system.System\n    The system to modify.", "piece": "system: vermouth.system.System"}
{"function_name": "parse_two", "function_define": "    length = len(string)\n    j = int(length / 2)\n    while ctr < length:", "piece": "j = int(length / 2)"}
{"function_name": "execute_block", "function_define": "    env = session.env\n    env = session.env\n    env.deque.append(args)", "piece": "env = session.env"}
{"function_name": "loadcontent", "function_define": "    This is called loadcontent since\n    an actual loadrevisions.\n    data = req.submit()", "piece": "an actual loadrevisions."}
{"function_name": "preload_entities", "function_define": "    than in the underlying pagelist.\n    self._cache_entity_namespaces()\n    for p in sublist:", "piece": "self._cache_entity_namespaces()"}
{"function_name": "getPropertyType", "function_define": "    Obtain the type of a property.\n    data = req.submit()\n    except KeyError:", "piece": "data = req.submit()"}
{"function_name": "editEntity", "function_define": "    Edit entity.\n    to use for entity identification\n    data = dict(data)", "piece": "to use for entity identification"}
{"function_name": "save_claim", "function_define": "    raise NotImplementedError\n    if not claim.snak:\n    raise NoPageError(claim)", "piece": "if not claim.snak:"}
{"function_name": "editSource", "function_define": "    if isinstance(source, list):\n    sources = source\n    sources = [source]", "piece": "sources = source"}
{"function_name": "mergeItems", "function_define": "    Merge two items together.\n    should be ignored\n    params['bot'] = 1", "piece": "should be ignored"}
{"function_name": "mergeLexemes", "function_define": "    Merge two lexemes together.\n    params['bot'] = 1\n    data = req.submit()", "piece": "params['bot'] = 1"}
{"function_name": "search_entities", "function_define": "    None in case of no limit.\n    if language not in lang_codes:\n    if 'site' in kwargs:", "piece": "if language not in lang_codes:"}
{"function_name": "_wbset_action", "function_define": "    Supported actions are:\n    wbsetaliases:\n    wbsetdescription and wbsetlabel:", "piece": "wbsetaliases:"}
{"function_name": "remove_form", "function_define": "    Remove a form.\n    conflicts.\n    if baserevid:", "piece": "conflicts."}
{"function_name": "newAdmin", "function_define": "    data = request.data\n    data = json.loads(data)\n    print(data)", "piece": "data = json.loads(data)"}
{"function_name": "userAuthenticate", "function_define": "    data = toDict(request.data)\n    success = False\n    message = ''", "piece": "success = False"}
{"function_name": "topNscore", "function_define": "    prob = self.predict_proba(X)\n    idx = np.argsort(prob, axis=1)\n    ct = 0.0", "piece": "idx = np.argsort(prob, axis=1)"}
{"function_name": "is_square", "function_define": "    from sympy.core.power import Pow\n    from sympy.core.mul import Mul\n    is_square_ = False", "piece": "from sympy.core.mul import Mul"}
{"function_name": "signed_sqrt", "function_define": "    Returns:\n    from functools import reduce\n    from sympy.core.power import Pow", "piece": "from functools import reduce"}
{"function_name": "validate_circuit", "function_define": "    circuit: The circuit to validate\n    has_measurement_occurred = False\n    for moment in circuit:", "piece": "has_measurement_occurred = False"}
{"function_name": "validate_moment", "function_define": "    moment: The moment to validate.\n    super().validate_moment(moment)\n    if len(moment) > 1:", "piece": "super().validate_moment(moment)"}
{"function_name": "beam_search", "function_define": "    maxlen = truth_batch.shape[0]\n    flag = np.array(flag)\n    best_value = None", "piece": "flag = np.array(flag)"}
{"function_name": "configure_output", "function_define": "    self.verbose = verbose\n    self.traceback = traceback\n    self.print_failed = print_failed", "piece": "self.traceback = traceback"}
{"function_name": "print_exception", "function_define": "    if self.traceback:\n    elif self.verbose:\n    self.print(str(exc))", "piece": "elif self.verbose:"}
{"function_name": "trendingTopics", "function_define": "    python twitter_api.py -t\n    for topic in trending_topics:\n    util.safe_print(topic.name)", "piece": "for topic in trending_topics:"}
{"function_name": "userTweets", "function_define": "    For example,\n    for tweet in user_tweet:\n    util.safe_print(tweet.GetText())", "piece": "for tweet in user_tweet:"}
{"function_name": "trendingTweets", "function_define": "    python twitter_api.py -w\n    for tweet in trending_topics:\n    util.safe_print(tweet.GetText())", "piece": "for tweet in trending_topics:"}
{"function_name": "test_rms", "function_define": "    mol1 = propanolLowest()\n    coord1 = mol1.get_positions()\n    mol2 = propanolIntermediate()", "piece": "coord1 = mol1.get_positions()"}
{"function_name": "_resolveFileList", "function_define": "    fileList = files.split(',')\n    my_list = []\n    for file in fileList:", "piece": "my_list = []"}
{"function_name": "unbinnedAnalysis", "function_define": "    for item in parnames:\n    if item not in pars:\n    if mode == 'ql':", "piece": "if item not in pars:"}
{"function_name": "_readEvents", "function_define": "    if eventFile is not None:\n    for file in eventFiles:\n    self._eventCont.getEvents(file)", "piece": "for file in eventFiles:"}
{"function_name": "_readScData", "function_define": "    if eventFile is not None:\n    tmin = self._roiCuts.minTime()\n    tmax = self._roiCuts.maxTime()", "piece": "tmin = self._roiCuts.minTime()"}
{"function_name": "plotSourceFit", "function_define": "    self._importPlotter()\n    errors = []\n    if nsq == 0:", "piece": "errors = []"}
{"function_name": "reset_ebounds", "function_define": "    elist.sort()\n    self.energies = num.array(elist)\n    self.nobs = self._Nobs()", "piece": "self.energies = num.array(elist)"}
{"function_name": "setEnergyRange", "function_define": "    nee = 21\n    if npts < 2:\n    npts = 5", "piece": "if npts < 2:"}
{"function_name": "getFileInfo", "function_define": "    wiki = wiki.replace('wiki', '')\n    resp = request.json()\n    for key in itemlist:", "piece": "resp = request.json()"}
{"function_name": "setVariables", "function_define": "    if self.isCall:\n    value = 0\n    value.value = f\"'{value.value}'\"", "piece": "value = 0"}
{"function_name": "get_dataset_db", "function_define": "    sub_dataset\n    datasets = {}\n    for line in fin:", "piece": "datasets = {}"}
{"function_name": "find_datasets", "function_define": "    if dataset_ids is not None:\n    metadata_ids = set()\n    for dataset_id in dataset_ids:", "piece": "metadata_ids = set()"}
{"function_name": "str_to_elems", "function_define": "    string = string.decode('UTF-8')\n    ds = StringIO(string)\n    for row in reader:", "piece": "ds = StringIO(string)"}
{"function_name": "str_to_kwargs", "function_define": "    kwargs = {}\n    option, value = elem.split('=')\n    kwargs[option] = value", "piece": "option, value = elem.split('=')"}
{"function_name": "spec_to_args", "function_define": "    args = []\n    kwargs = {}\n    if spec:", "piece": "kwargs = {}"}
{"function_name": "test_darts_save", "function_define": "    keys = ['test', '\u30c6\u30b9\u30c8', '\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9']\n    darts = DoubleArray()\n    darts.save(output_file.name)", "piece": "darts = DoubleArray()"}
{"function_name": "test_darts_array", "function_define": "    keys = ['test', '\u30c6\u30b9\u30c8', '\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9']\n    darts = DoubleArray()\n    array = darts.array()", "piece": "darts = DoubleArray()"}
{"function_name": "init_state", "function_define": "    P, _ = inputs\n    inferred_batch_size = P.size(0)\n    inferred_npoints = P.size(1)", "piece": "inferred_batch_size = P.size(0)"}
{"function_name": "save_m3u8", "function_define": "    If None, decrypts file\n    if new_key:\n    playlist.version = '2'", "piece": "if new_key:"}
{"function_name": "download_to_file", "function_define": "    if not os.path.exists(filename):\n    if new_key is not False:\n    atomic_write(raw, filename)", "piece": "if new_key is not False:"}
{"function_name": "consume_resource", "function_define": "    balancer.notify_error()\n    if segments_modified:\n    balancer.notify_modified()", "piece": "if segments_modified:"}
{"function_name": "current_asset", "function_define": "    date_pos = 0\n    while cash[date_pos][0] != date:\n    date_pos += 1", "piece": "while cash[date_pos][0] != date:"}
{"function_name": "nearestdate", "function_define": "    dateset = set()\n    for k in range(len(result)):\n    dateset.add(result[k][0])", "piece": "for k in range(len(result)):"}
{"function_name": "mouseMoveEvent", "function_define": "    gloPoint = event.globalPos()\n    rect = self.rect()\n    if not self.isLeftPressDown:", "piece": "rect = self.rect()"}
{"function_name": "buttonDialog1", "function_define": "    self.dialog1 = QDialog()\n    self.dialog1.resize(250, 100)\n    formLayout = QFormLayout()", "piece": "self.dialog1.resize(250, 100)"}
{"function_name": "buttonDialog2", "function_define": "    self.dialog2 = QDialog()\n    self.dialog2.resize(280, 100)\n    formLayout = QFormLayout()", "piece": "self.dialog2.resize(280, 100)"}
{"function_name": "buttonDialog3", "function_define": "    self.dialog3 = QDialog()\n    self.dialog3.resize(280, 100)\n    formLayout = QFormLayout()", "piece": "self.dialog3.resize(280, 100)"}
{"function_name": "buttonDialog4", "function_define": "    self.dialog4 = QDialog()\n    self.dialog4.resize(280, 100)\n    formLayout = QFormLayout()", "piece": "self.dialog4.resize(280, 100)"}
{"function_name": "buttonDialog5", "function_define": "    self.dialog5 = QDialog()\n    self.dialog5.resize(250, 100)\n    formLayout = QFormLayout()", "piece": "self.dialog5.resize(250, 100)"}
{"function_name": "buttonDialog6", "function_define": "    self.dialog6 = QDialog()\n    self.dialog6.resize(280, 100)\n    formLayout = QFormLayout()", "piece": "self.dialog6.resize(280, 100)"}
{"function_name": "buttonDialog7", "function_define": "    self.dialog7 = QDialog()\n    self.dialog7.resize(280, 100)\n    formLayout = QFormLayout()", "piece": "self.dialog7.resize(280, 100)"}
{"function_name": "buttonDialog8", "function_define": "    self.dialog8 = QDialog()\n    self.dialog8.resize(280, 100)\n    layout = QVBoxLayout()", "piece": "self.dialog8.resize(280, 100)"}
{"function_name": "buttonDialog9", "function_define": "    self.dialog9 = QDialog()\n    self.dialog9.resize(250, 100)\n    formlayout = QFormLayout()", "piece": "self.dialog9.resize(250, 100)"}
{"function_name": "buttonDialog10", "function_define": "    self.dialog10 = QDialog()\n    self.dialog10.resize(250, 150)\n    layout = QVBoxLayout()", "piece": "self.dialog10.resize(250, 150)"}
{"function_name": "tryOrRepeat1", "function_define": "    plt.figure()\n    plt.title('Asset-Time')\n    plt.xlabel('Time')", "piece": "plt.title('Asset-Time')"}
{"function_name": "tryOrRepeat2", "function_define": "    plt.figure()\n    plt.title('Long/Short-Time')\n    long_tem = []", "piece": "plt.title('Long/Short-Time')"}
{"function_name": "_test_success", "function_define": "    runner = CliRunner()\n    args = ['123.feature.rst']\n    if content is None:", "piece": "args = ['123.feature.rst']"}
{"function_name": "getSVSentivity", "function_define": "    Run the ordering algorithm\n    B = np.zeros((self.n, self.n))\n    if self.determineCase() == 1:", "piece": "B = np.zeros((self.n, self.n))"}
{"function_name": "getOrderRelative", "function_define": "    B = np.zeros((self.n, self.n))\n    if self.determineCase() == 1:\n    for i in range(self.n):", "piece": "if self.determineCase() == 1:"}
{"function_name": "determineCase", "function_define": "    distinct = False\n    zero = False\n    allPositive = True", "piece": "zero = False"}
{"function_name": "distinctPos", "function_define": "    u, sVals, vh = LA.svd(self.A)\n    uh = u.conjugate().transpose()\n    v = vh.conjugate().transpose()", "piece": "uh = u.conjugate().transpose()"}
{"function_name": "printReport", "function_define": "    sensitivity towards perturbation\n    start_time = time.time()\n    ord = self.getOrder()", "piece": "start_time = time.time()"}
{"function_name": "potion_used", "function_define": "    cauldron.\n    potion: The potion used.\n    if potion_ind == CAULDRON:", "piece": "potion: The potion used."}
{"function_name": "get_stone_ind", "function_define": "    stone: The stone used.\n    Returns:\n    be found.", "piece": "Returns:"}
{"function_name": "get_potion_ind", "function_define": "    potion: The potion used.\n    Returns:\n    if potion_inst is not None:", "piece": "Returns:"}
{"function_name": "get_overall_hist", "function_define": "    bins = np.arange(0, 1, 0.01)\n    ax = plt.subplot(111)\n    plt.show()", "piece": "ax = plt.subplot(111)"}
{"function_name": "show_weapon_hist", "function_define": "    bin_size = 0.1\n    bins = np.arange(0, 2, bin_size)\n    ax = plt.subplot(111)", "piece": "bins = np.arange(0, 2, bin_size)"}
{"function_name": "plot_list_class", "function_define": "    ax = plt.subplot(111)\n    ax.set_xlim([10, 230])\n    plt.xlim([10, 230])", "piece": "ax.set_xlim([10, 230])"}
{"function_name": "plot_hist_punc", "function_define": "    y = freq\n    x = list(range(0, 10))\n    ax = plt.subplot(111)", "piece": "x = list(range(0, 10))"}
{"function_name": "plot_hist_words", "function_define": "    ax = plt.subplot(111)\n    ax.set_ylim(bottom=0, top=0.4)\n    plt.show()", "piece": "ax.set_ylim(bottom=0, top=0.4)"}
{"function_name": "plot_trans_mat", "function_define": "    harvest = np.array(mat_nb_words)\n    fig, ax = plt.subplots()\n    plt.tight_layout()", "piece": "fig, ax = plt.subplots()"}
{"function_name": "run_layout", "function_define": "    if settings is None:\n    if settings.mainline_enabled:\n    already_processed = list()", "piece": "if settings.mainline_enabled:"}
{"function_name": "lineReceived", "function_define": "    log.msg('INPUT (ssh):', line)\n    if len(self.callbacks):\n    self.callbacks.pop(0)(line)", "piece": "if len(self.callbacks):"}
{"function_name": "variance", "function_define": "    index = 0\n    for x in samples:\n    x = samples[index]", "piece": "for x in samples:"}
{"function_name": "connectparms", "function_define": "    for i, p in enumerate(parms):\n    target_parm.lock(True)\n    self.node.parm(p).lock(True)", "piece": "target_parm.lock(True)"}
{"function_name": "test_sample_plot", "function_define": "    N = 10000\n    xs, _ = torch.unique(x).sort()\n    for i in range(self.shape[0]):", "piece": "xs, _ = torch.unique(x).sort()"}
{"function_name": "test_impl_rep", "function_define": "    torch.manual_seed(1239)\n    self.c = torch.tensor([0.5])\n    self.dim = 5", "piece": "self.c = torch.tensor([0.5])"}
{"function_name": "test_logZ", "function_define": "    self.c = torch.tensor([0.7])\n    self.dim = 5\n    self.scale.requires_grad = True", "piece": "self.dim = 5"}
{"function_name": "test_moments", "function_define": "    self.c = torch.tensor([0.7])\n    self.dim = 5\n    means = self.d.mean", "piece": "self.dim = 5"}
{"function_name": "isAnagram", "function_define": "    if len(s) != len(t):\n    s = set(s)\n    t = set(t)", "piece": "s = set(s)"}
{"function_name": "find_product", "function_define": "    first_row = next(csv_reader)\n    for row in csv_reader:\n    if product_name == row[0]:", "piece": "for row in csv_reader:"}
{"function_name": "find_product_qty", "function_define": "    first_row = next(csv_reader)\n    for row in csv_reader:\n    if product_name == row[0]:", "piece": "for row in csv_reader:"}
{"function_name": "read_customer", "function_define": "    first_row = next(csv_reader)\n    for row in csv_reader:\n    name = row[0]", "piece": "for row in csv_reader:"}
{"function_name": "print_customer", "function_define": "    total = 0.0\n    out_of_stock = []\n    active_product_list = []", "piece": "out_of_stock = []"}
{"function_name": "print_shop", "function_define": "    print('---------------')\n    print('SHOP STOCK INFO')\n    print('---------------')", "piece": "print('SHOP STOCK INFO')"}
{"function_name": "sort_values", "function_define": "    if not ascending:\n    sql += ' desc'\n    if limit is not None:", "piece": "sql += ' desc'"}
{"function_name": "distplot", "function_define": "    import seaborn\n    left = np.zeros(n)\n    right = np.zeros(n)", "piece": "left = np.zeros(n)"}
{"function_name": "GetTimes", "function_define": "    now = None\n    if not self.done:\n    self.AddTime(epoch)", "piece": "if not self.done:"}
{"function_name": "scrape_page", "function_define": "    lst2 = super().scrape_page()\n    bom = lst2[1:]\n    bom.pop(1)", "piece": "bom = lst2[1:]"}
{"function_name": "substitute", "function_define": "    if not param in self._params:\n    for flag in flags:\n    if not flag in self._flags:", "piece": "for flag in flags:"}
{"function_name": "set_substitution", "function_define": "    self.sids.append(sid)\n    self.params_subst.append(params)\n    self.flags_subst.append(flags)", "piece": "self.params_subst.append(params)"}
{"function_name": "collector", "function_define": "    if type == 'blog':\n    elif type == 'github':\n    elif type == 'brighttalk':", "piece": "elif type == 'github':"}
{"function_name": "get_github_repo", "function_define": "    if url.startswith(protocol):\n    url = url[len(protocol):]\n    if github_repo[-1] == '/':", "piece": "url = url[len(protocol):]"}
{"function_name": "test_exc_str", "function_define": "    raise Exception('my bad')\n    except Exception as e:\n    estr = exc_str(e)", "piece": "except Exception as e:"}
{"function_name": "__blockTags", "function_define": "    if pos[index][2] == 'learn':\n    withinblock['learn'] = {}\n    index -= 1", "piece": "withinblock['learn'] = {}"}
{"function_name": "__GroupTags", "function_define": "    pairs = []\n    defaults = []\n    while condition(index):", "piece": "defaults = []"}
{"function_name": "__processLearn", "function_define": "    for topic in pairs:\n    if topic not in self._pairs:\n    learn, previous = ({}, None)", "piece": "if topic not in self._pairs:"}
{"function_name": "_restructure", "function_define": "    if index == None:\n    toremove = {}\n    allElem = list(group)", "piece": "toremove = {}"}
{"function_name": "_getWithin", "function_define": "    group[index[i]]['within'] = []\n    orderedGroup = []\n    while i < len(index):", "piece": "orderedGroup = []"}
{"function_name": "_setwithin", "function_define": "    old = group\n    for i in group:\n    if group[i]['child']:", "piece": "for i in group:"}
{"function_name": "_inherit", "function_define": "    group = {}\n    group[i] = []\n    group[i].append(j)", "piece": "group[i] = []"}
{"function_name": "_condition", "function_define": "    start_end_pair = []\n    actions = []\n    while newPos:", "piece": "actions = []"}
{"function_name": "_checkIF", "function_define": "    if not pos:\n    res = prevres = True\n    prevO = None", "piece": "res = prevres = True"}
{"function_name": "__if_handler", "function_define": "    end = condition[i]['end']\n    check = True\n    matchedIndex = None", "piece": "check = True"}
{"function_name": "__map_handler", "function_define": "    start = condition[i]['start']\n    end = condition[i]['end']\n    think = False", "piece": "end = condition[i]['end']"}
{"function_name": "__eval_handler", "function_define": "    start = condition[i]['start']\n    end = condition[i]['end']\n    think = False", "piece": "end = condition[i]['end']"}
{"function_name": "__api_handler", "function_define": "    if 'auth' in self._api[apiName]:\n    api_params[param].update(data)\n    api_params[param] = data", "piece": "api_params[param].update(data)"}
{"function_name": "__correction", "function_define": "    spell correction\n    new_text = []\n    for i in text.split():", "piece": "new_text = []"}
{"function_name": "converse", "function_define": "    if firstQuestion != None:\n    print(firstQuestion)\n    input_reader = raw_input", "piece": "print(firstQuestion)"}
{"function_name": "runOneJob", "function_define": "    distutils.dir_util.mkpath(jobID)\n    os.chdir(jobID)\n    mtfile.write('total 1\\n')", "piece": "os.chdir(jobID)"}
{"function_name": "pmut_scan", "function_define": "    if os.path.isfile('pmut.out'):\n    pmut_start = time.time()\n    print(' ')", "piece": "pmut_start = time.time()"}
{"function_name": "run_one_job", "function_define": "    os.chdir(path_job_id)\n    mtfile.write('total 1\\n')\n    mtfile.write('1\\n')", "piece": "mtfile.write('total 1\\n')"}
{"function_name": "excepthook", "function_define": "    Log exception and exit cleanly.\n    sys.__excepthook__(*exc_args)\n    sys.exit(1)", "piece": "sys.__excepthook__(*exc_args)"}
{"function_name": "setupLogger", "function_define": "    if not os.path.exists(LOG_DIR):\n    os.makedirs(LOG_DIR)\n    handler.setFormatter(formatter)", "piece": "os.makedirs(LOG_DIR)"}
{"function_name": "test_bot_init", "function_define": "    importlib = FakeImportLib()\n    box = Box()\n    assert bot.config == bot_config", "piece": "box = Box()"}
{"function_name": "removed_edge", "function_define": "    restores it upon exiting.\n    EXAMPLES::\n    sage: G = Graph()", "piece": "EXAMPLES::"}
{"function_name": "contracted_edge", "function_define": "    EXAMPLES::\n    sage: G = Graph(multiedges=True)\n    sage: G.edges()", "piece": "sage: G = Graph(multiedges=True)"}
{"function_name": "removed_loops", "function_define": "    exiting.\n    EXAMPLES::\n    sage: G.edges()", "piece": "EXAMPLES::"}
{"function_name": "underlying_graph", "function_define": "    EXAMPLES::\n    sage: G = Graph(multiedges=True)\n    sage: G.edges()", "piece": "sage: G = Graph(multiedges=True)"}
{"function_name": "_cache_key", "function_define": "    EXAMPLES::\n    sage: G = graphs.DiamondGraph()\n    sage: print(_cache_key(G))", "piece": "sage: G = graphs.DiamondGraph()"}
{"function_name": "tutte_polynomial", "function_define": "    contraction recurrence\n    EXAMPLES:\n    sage: P = graphs.PetersenGraph()", "piece": "EXAMPLES:"}
{"function_name": "vertices", "function_define": "    EXAMPLES::\n    sage: G = graphs.PathGraph(4)\n    sage: E.vertices", "piece": "sage: G = graphs.PathGraph(4)"}
{"function_name": "unlabeled_edges", "function_define": "    Returns the edges in this ear.\n    EXAMPLES::\n    sage: G = graphs.PathGraph(4)", "piece": "EXAMPLES::"}
{"function_name": "find_ear", "function_define": "    Finds the first ear in a graph.\n    EXAMPLES::\n    sage: G = graphs.PathGraph(4)", "piece": "EXAMPLES::"}
{"function_name": "removed_from", "function_define": "    EXAMPLES::\n    sage: G = graphs.PathGraph(4)\n    sage: len(G.edges())", "piece": "sage: G = graphs.PathGraph(4)"}
{"function_name": "recursive_tp", "function_define": "    the same arguments everywhere.\n    if graph is None:\n    graph = G", "piece": "if graph is None:"}
{"function_name": "loadData", "function_define": "    df = csvfile\n    df = pd.read_csv('input.csv')\n    queryDF.columns = columnNames", "piece": "df = pd.read_csv('input.csv')"}
{"function_name": "check_format", "function_define": "    if cls.features_extractor_class:\n    if cls.net_arch:\n    for entry in cls.net_arch:", "piece": "if cls.net_arch:"}
{"function_name": "clean_path", "function_define": "    if not path.startswith('/'):\n    path = '/' + path\n    if not path.endswith('/'):", "piece": "path = '/' + path"}
{"function_name": "flatten_tree", "function_define": "    ret = []\n    if root['path']:\n    ret.append(root['path'])", "piece": "if root['path']:"}
{"function_name": "resize_image_as", "function_define": "    height1, weight1 = img.shape[:2]\n    img = cv2.resize(img, dim)\n    img2 = cv2.resize(img2, dim)", "piece": "img = cv2.resize(img, dim)"}
{"function_name": "put_borders", "function_define": "    height1, weight1 = img.shape[:2]\n    if weight1 > weight2:\n    if (weight1 - weight2) % 2 == 0:", "piece": "if weight1 > weight2:"}
{"function_name": "create_gif", "function_define": "    print('creating gif...')\n    for result in generator:\n    writer.append_data(result)", "piece": "for result in generator:"}
{"function_name": "test_getitem", "function_define": "    mock_open.return_value = file\n    mode = 1\n    self.pids.set_mode(mode)", "piece": "mode = 1"}
{"function_name": "eval_by_qid_list", "function_define": "    score_list = topk_score\n    res.update_ranking()\n    res_dict.update({qid: res})", "piece": "res.update_ranking()"}
{"function_name": "hammingDistance", "function_define": "    count = 0\n    z = x ^ y\n    while z:", "piece": "z = x ^ y"}
{"function_name": "_merge_configs", "function_define": "    result = {}\n    cfg_values = {}\n    if section in current_configs:", "piece": "cfg_values = {}"}
{"function_name": "custom_params", "function_define": "    params = {}\n    if self._start is not None:\n    if self._end is not None:", "piece": "if self._start is not None:"}
{"function_name": "do_verify", "function_define": "    start_time = time.time()\n    self.progress_bar(i, len(pages))\n    if devbytes != pagebytes:", "piece": "self.progress_bar(i, len(pages))"}
{"function_name": "cmd_flash", "function_define": "    mem = parse_binary(args.file)\n    start_time = time.time()\n    self.progress_bar(i, len(pages))", "piece": "start_time = time.time()"}
{"function_name": "GetFlagValue", "function_define": "    if flagvalue:\n    if flagvalue[0] == '@':\n    flagvalue = f.read()", "piece": "if flagvalue[0] == '@':"}
{"function_name": "CopyAndRewrite", "function_define": "    input_file: The file to copy.\n    the prefix.\n    if replacements:", "piece": "the prefix."}
{"function_name": "FindRpmbuild", "function_define": "    path = Which('rpmbuild')\n    if path:\n    raise NoRpmbuildFound()", "piece": "if path:"}
{"function_name": "SetupWorkdir", "function_define": "    for name in RpmBuilder.DIRS:\n    if not os.path.exists(name):\n    os.makedirs(name, 511)", "piece": "if not os.path.exists(name):"}
{"function_name": "CallRpmBuild", "function_define": "    output = p.communicate()[0]\n    if p.returncode == 0:\n    print('Error calling rpmbuild:')", "piece": "if p.returncode == 0:"}
{"function_name": "_query_test_case", "function_define": "    for path in paths:\n    version = query_function(path)\n    except ValueError:", "piece": "version = query_function(path)"}
{"function_name": "test_avg_pool2d", "function_define": "    func = relay.nn.avg_pool2d\n    dtype = 'float32'\n    data_shape = (1, 1, 20, 20)", "piece": "dtype = 'float32'"}
{"function_name": "test_max_pool2d", "function_define": "    func = relay.nn.max_pool2d\n    dtype = 'float32'\n    data_shape = (1, 1, 20, 20)", "piece": "dtype = 'float32'"}
{"function_name": "test_softmax", "function_define": "    func = relay.nn.softmax\n    dtype = 'float32'\n    data_shape = (1, 20, 12, 9)", "piece": "dtype = 'float32'"}
{"function_name": "test_relu", "function_define": "    func = relay.nn.relu\n    dtype = 'float32'\n    data_shape = (1, 20, 12, 9)", "piece": "dtype = 'float32'"}
{"function_name": "test_batch_norm", "function_define": "    data_shape = (1, 4)\n    c_shape = (4,)\n    out_shape = (1, 4)", "piece": "c_shape = (4,)"}
{"function_name": "test_conv2d", "function_define": "    data_shape = (1, 256, 64, 64)\n    weight_shape = (256, 256, 3, 3)\n    out_shape = (1, 256, 64, 64)", "piece": "weight_shape = (256, 256, 3, 3)"}
{"function_name": "test_dense", "function_define": "    data_shape = (1, 784)\n    weight_shape = (128, 784)\n    out_shape = (1, 128)", "piece": "weight_shape = (128, 784)"}
{"function_name": "test_dropout", "function_define": "    func = relay.nn.dropout\n    dtype = 'float32'\n    data_shape = (1, 20, 12, 9)", "piece": "dtype = 'float32'"}
{"function_name": "test_qnn_add", "function_define": "    data_dtype = 'uint8'\n    data_shape = (1, 20, 4, 8)\n    out_shape = (1, 20, 4, 8)", "piece": "data_shape = (1, 20, 4, 8)"}
{"function_name": "estimate_d_blind", "function_define": "    D = \\\\frac{r}{\\\\tan 2\\\\theta}\n    the sample to the detector.\n    Parameters", "piece": "the sample to the detector."}
{"function_name": "refine_center", "function_define": "    Parameters\n    image : ndarray\n    The image", "piece": "image : ndarray"}
{"function_name": "auto_encoder", "function_define": "    self.x = self.inputs\n    self.shape = K.int_shape(self.x)\n    self.x = Flatten()(self.x)", "piece": "self.shape = K.int_shape(self.x)"}
{"function_name": "combine_expmaps", "function_define": "    for ACIS-I (i.e., chips 0123).\n    if len(expmaps) > 1:\n    for f in expmaps:", "piece": "if len(expmaps) > 1:"}
{"function_name": "_convert_to_su4", "function_define": "    Returns:\n    det = math.linalg.det(U)\n    if not math.allclose(det, 1.0):", "piece": "det = math.linalg.det(U)"}
{"function_name": "colormaps", "function_define": "    data = json.load(f)\n    cmaps = {}\n    for k, v in data.items():", "piece": "cmaps = {}"}
{"function_name": "sortedArrayToBST", "function_define": "    if l > r:\n    mid = (l + r) // 2\n    root = TreeNode(nums[mid])", "piece": "mid = (l + r) // 2"}
{"function_name": "leftRightHelper", "function_define": "    if l > r:\n    mid = (l + r) // 2\n    root = TreeNode(nums[mid])", "piece": "mid = (l + r) // 2"}
{"function_name": "HideSecrets", "function_define": "    if len(secretos) == 0:\n    Secretos = ClsSecrets('')\n    if not Secretos.ValidaRuta():", "piece": "Secretos = ClsSecrets('')"}
{"function_name": "venv_setup", "function_define": "    args = [str(venvdir)]\n    if prompt:\n    args += ['--prompt', prompt]", "piece": "if prompt:"}
{"function_name": "pip_freeze", "function_define": "    if not include_editable:\n    cmd += ['--exclude-editable']\n    cmd += ['>', str(path)]", "piece": "cmd += ['--exclude-editable']"}
{"function_name": "conda_create", "function_define": "    if quiet:\n    cmd += ['--quiet']\n    check_call(cmd)", "piece": "cmd += ['--quiet']"}
{"function_name": "detect_pip_req", "function_define": "    workdir = Path(workdir)\n    for p in SUPPORTED_PIP_REQ:\n    if (workdir / p).exists():", "piece": "for p in SUPPORTED_PIP_REQ:"}
{"function_name": "fill_info", "function_define": "    for tracks in self._track_soup:\n    self.tracks.append(track)\n    split = track.split(' - ')", "piece": "self.tracks.append(track)"}
{"function_name": "makeSimpleLogger", "function_define": "    logger = logging.getLogger(name)\n    logger.setLevel(level)\n    ch = logging.StreamHandler()", "piece": "logger.setLevel(level)"}
{"function_name": "subclasses", "function_define": "    if done is None:\n    done = set()\n    done.add(sc)", "piece": "done = set()"}
{"function_name": "reset_parameters", "function_define": "    nn.init.uniform_(self.weight)\n    nn.init.zeros_(self.bias)\n    if self.use_TLU:", "piece": "nn.init.zeros_(self.bias)"}
{"function_name": "find_imgs", "function_define": "    print('html\u5185\u5bb9\uff1a', html)\n    imgs_addrs = []\n    a = html.find('img src=')", "piece": "imgs_addrs = []"}
{"function_name": "save_imgs", "function_define": "    for each in imgs_addrs:\n    filename = each.split('/')[-1]\n    with open(filename, 'wb') as f:", "piece": "filename = each.split('/')[-1]"}
{"function_name": "download_img", "function_define": "    os.mkdir(folder)\n    os.chdir(folder)\n    url = 'http://jandan.net/ooxx/'", "piece": "os.chdir(folder)"}
{"function_name": "test_bcdeter", "function_define": "    bcdeter.csv and testing shape of\n    test_path = tempfile.mkdtemp()\n    assert x_train.shape == (95, 3)", "piece": "test_path = tempfile.mkdtemp()"}
{"function_name": "compare_signs", "function_define": "    if user_sign == 'quit':\n    verdict = 'YOU QUITED'\n    GAME_ON = False", "piece": "verdict = 'YOU QUITED'"}
{"function_name": "test_ngt_search", "function_define": "    ctx = context.ctx()\n    self.assertEqual(1, len(lst))\n    self.assertEqual(1, len(lst))", "piece": "self.assertEqual(1, len(lst))"}
{"function_name": "test_ngt_update", "function_define": "    ctx = context.ctx()\n    ngt_id = ngt['id']\n    ngt_id = ngt['id']", "piece": "ngt_id = ngt['id']"}
{"function_name": "test_clt_fields", "function_define": "    ctx = context.ctx()\n    if key == 'node_groups':\n    continue", "piece": "if key == 'node_groups':"}
{"function_name": "test_clt_search", "function_define": "    ctx = context.ctx()\n    self.assertEqual(1, len(lst))\n    self.assertEqual(1, len(lst))", "piece": "self.assertEqual(1, len(lst))"}
{"function_name": "test_clt_update", "function_define": "    ctx = context.ctx()\n    clt_id = clt['id']\n    clt_id = clt['id']", "piece": "clt_id = clt['id']"}
{"function_name": "get_val_csv", "function_define": "    if get_train or rus == False:\n    trainer = pl.Trainer(**kwargs)\n    if discard == False:", "piece": "trainer = pl.Trainer(**kwargs)"}
{"function_name": "meta_learn", "function_define": "    X, y = ({}, {})\n    for split in splits:\n    if train:", "piece": "for split in splits:"}
{"function_name": "retrieve_run", "function_define": "    setting for the first member).\n    Returns:\n    run (pd.Series)", "piece": "Returns:"}
{"function_name": "retrieve_metrics", "function_define": "    response = requests.get(api_url)\n    resp = response.json()\n    if steps is None:", "piece": "resp = response.json()"}
{"function_name": "gen_apidoc", "function_define": "    base = os.path.splitext(path)[0]\n    typ_classes = {}\n    typ_classes[typ] = []", "piece": "typ_classes = {}"}
{"function_name": "_get_key_values", "function_define": "    results = {}\n    if not key.startswith(name):\n    continue", "piece": "if not key.startswith(name):"}
{"function_name": "_simple_filters", "function_define": "    ret = []\n    for key, value in dict_.items():\n    if isinstance(value, list):", "piece": "for key, value in dict_.items():"}
{"function_name": "commit_in_range", "function_define": "    if start_date > end_date:\n    if commit_count_range is None:\n    commit_count_range = [1, 1]", "piece": "if commit_count_range is None:"}
{"function_name": "get_first_date", "function_define": "    Returns:\n    date = Date()\n    weekday = date.get_weekday()", "piece": "date = Date()"}
{"function_name": "bring_new_image", "function_define": "    xlim = self.ax.get_xlim()\n    ylim = self.ax.get_ylim()\n    self.plt_artists.extend(artists)", "piece": "ylim = self.ax.get_ylim()"}
{"function_name": "set_title", "function_define": "    if self.images_in_list:\n    shot = self.current_image\n    self.current_image = None", "piece": "shot = self.current_image"}
{"function_name": "_set_futures", "function_define": "    for fut in futures:\n    if not fut.done():\n    fut.set_result(item)", "piece": "if not fut.done():"}
{"function_name": "get_apotik_list", "function_define": "    default_sort = 'creation desc'\n    apotik_filters = []\n    apotik_or_filters = []", "piece": "apotik_filters = []"}
{"function_name": "get_name_list", "function_define": "    apotik_filters = []\n    apotik_or_filters = []\n    filter_json = False", "piece": "apotik_or_filters = []"}
{"function_name": "delete_apotik", "function_define": "    data_json = json.loads(data)\n    for d in data_json:\n    frappe.db.commit()", "piece": "for d in data_json:"}
{"function_name": "cancel_apotik", "function_define": "    apotik.status = 'Cancel'\n    apotik.save()\n    frappe.db.commit()", "piece": "apotik.save()"}
{"function_name": "get_apotik", "function_define": "    list_product = []\n    if apotik[0].register_number:\n    elif apotik[0].pet:", "piece": "if apotik[0].register_number:"}
{"function_name": "get_apotik_new", "function_define": "    for p in petList:\n    if last_warehouse:\n    except PermissionError as e:", "piece": "if last_warehouse:"}
{"function_name": "new_apotik", "function_define": "    apotik_json = json.loads(data)\n    print(apotik_json)\n    setting.save()", "piece": "print(apotik_json)"}
{"function_name": "submit_apotik", "function_define": "    print(saveOnly)\n    apotik_json = json.loads(data)\n    setting.save()", "piece": "apotik_json = json.loads(data)"}
{"function_name": "update_invoice", "function_define": "    if invoice_check:\n    subtotal = 0\n    for product in products_json:", "piece": "subtotal = 0"}
{"function_name": "get_obat_all", "function_define": "    if racikan == 'true':\n    for o in range(len(obatAll)):\n    except PermissionError as e:", "piece": "for o in range(len(obatAll)):"}
{"function_name": "label_to_mask", "function_define": "    N = len(labels)\n    if max_label is None:\n    max_label = np.amax(labels)", "piece": "if max_label is None:"}
{"function_name": "join_chains", "function_define": "    make_seq.get_sequence(pdb_file)\n    os.makedirs(dir_name)\n    for file in output_files:", "piece": "os.makedirs(dir_name)"}
{"function_name": "get_auth_file", "function_define": "    with open(auth_path) as auth:\n    data = auth.read()\n    json_data = json.loads(data)", "piece": "data = auth.read()"}
{"function_name": "parse_espi_data", "function_define": "    root = ET.fromstring(xml)\n    root.clear()\n    xml = StringIO(xml)", "piece": "root.clear()"}
{"function_name": "gotoDetailGFP", "function_define": "    ax = event.inaxes\n    if ax is None:\n    if event.button is 1:", "piece": "if ax is None:"}
{"function_name": "updateFigure", "function_define": "    if self.Data.Datasets != []:\n    if markerSelection == 0:\n    self.markerValue = []", "piece": "if markerSelection == 0:"}
{"function_name": "zoomInDetailGFP", "function_define": "    ax = event.inaxes\n    if ax is None:\n    if event.dblclick:", "piece": "if ax is None:"}
{"function_name": "updateLayout", "function_define": "    if hasattr(self, 'markerValue'):\n    self.update(self.markerValue)\n    event.Skip()", "piece": "self.update(self.markerValue)"}
{"function_name": "shiftViewLeft", "function_define": "    if self.Data.Datasets != []:\n    if self.shiftView != 0:\n    if viewShift < 0:", "piece": "if self.shiftView != 0:"}
{"function_name": "keySelect", "function_define": "    if figID <= len(subPlots):\n    color = 'black'\n    self.shiftView -= 1", "piece": "color = 'black'"}
{"function_name": "sort_by_metric", "function_define": "    sort_function = fuzz.ratio\n    res = []\n    except Exception as e:", "piece": "res = []"}
{"function_name": "calc_grade", "function_define": "    if score >= 91:\n    elif score >= 81:\n    elif score >= 71:", "piece": "elif score >= 81:"}
{"function_name": "track_metrics", "function_define": "    print('\\n')\n    print('Epoch_{}'.format(epoch))\n    print('loss: {}'.format(loss))", "piece": "print('Epoch_{}'.format(epoch))"}
{"function_name": "classify_record", "function_define": "    if pred_label == gt_label:\n    if iou >= iou_thresh:\n    elif iou >= iou_thresh:", "piece": "if iou >= iou_thresh:"}
{"function_name": "concatenateJSON", "function_define": "    return_file = 'tmpFile.json'\n    return_dict = {}\n    data = json.load(f)", "piece": "return_dict = {}"}
{"function_name": "parse_ev_script", "function_define": "    if 'Scripts' not in tree:\n    compiledScripts = {}\n    strList = tree['StrList']", "piece": "compiledScripts = {}"}
{"function_name": "write_ev_script", "function_define": "    if not compiledScripts:\n    if not os.path.exists(ofdir):\n    os.mkdir(ofdir)", "piece": "if not os.path.exists(ofdir):"}
{"function_name": "parse_ev_scripts", "function_define": "    with open(ifdir, 'rb') as ifobj:\n    bundle = UnityPy.load(ifdir)\n    for obj in bundle.objects:", "piece": "bundle = UnityPy.load(ifdir)"}
{"function_name": "test_new_metric", "function_define": "    Cls = mock.Mock()\n    kwargs = dict(other=mock.Mock())\n    assert_in('test', mm.REGISTRY)", "piece": "kwargs = dict(other=mock.Mock())"}
{"function_name": "test_tag", "function_define": "    m1 = mock.Mock()\n    m2 = mock.Mock()\n    m3 = mock.Mock()", "piece": "m2 = mock.Mock()"}
{"function_name": "isolate_patches", "function_define": "    pic = Image.open(picture)\n    patches = {}\n    if not i in exclude:", "piece": "patches = {}"}
{"function_name": "parse_patch", "function_define": "    if not hierarchy is None:\n    count = len(contours)\n    if return_image:", "piece": "count = len(contours)"}
{"function_name": "userselection", "function_define": "    sessiondict = []\n    if request.method == 'POST':\n    if selecteduser:", "piece": "if request.method == 'POST':"}
{"function_name": "branchselection", "function_define": "    if loguser.is_superuser:\n    branches = Branch.objects.all()\n    branchaccess = branches.first()", "piece": "branches = Branch.objects.all()"}
{"function_name": "np_get_wval", "function_define": "    Returns:\n    if tmp is np.ma.masked:\n    if verbose:", "piece": "if tmp is np.ma.masked:"}
{"function_name": "run_weights", "function_define": "    grid = self.grd[index]\n    tw = weight_id_rows.w.values\n    if np.isnan(tmp):", "piece": "tw = weight_id_rows.w.values"}
{"function_name": "breaking_inputs", "function_define": "    df = pd.DataFrame([1, 2, 3])\n    columns = ['blah']\n    min_similarities = [0.1]", "piece": "columns = ['blah']"}
{"function_name": "singlenode", "function_define": "    n = self.namemap(repo, name)\n    if len(n) > 1:\n    cl = repo.changelog", "piece": "if len(n) > 1:"}
{"function_name": "forward_backward", "function_define": "    feat_x = self.F(input_x)\n    logit_x1 = self.C1(feat_x)\n    logit_x2 = self.C2(feat_x)", "piece": "logit_x1 = self.C1(feat_x)"}
{"function_name": "apply_gradients", "function_define": "    assert len(gs) == len(stubs)\n    push_ops = []\n    for i in range(len(gs)):", "piece": "push_ops = []"}
{"function_name": "create_api_app", "function_define": "    controllers = {}\n    if api_version == 'v2.0':\n    elif api_version == 'v3.0':", "piece": "if api_version == 'v2.0':"}
{"function_name": "sum_of_intervals", "function_define": "    seen = set()\n    for low, high in intervals:\n    for length in range(low, high):", "piece": "for low, high in intervals:"}
{"function_name": "yolo_boxes", "function_define": "    grid_size = tf.shape(pred)[1:3]\n    box_xy = tf.sigmoid(box_xy)\n    box_x1y1 = box_xy - box_wh / 2", "piece": "box_xy = tf.sigmoid(box_xy)"}
{"function_name": "stamp_triggers", "function_define": "    Parameters\n    triggers : list\n    delay : float | None", "piece": "triggers : list"}
{"function_name": "get_team_info", "function_define": "    error = False\n    elif rand_a == '1':\n    team_B_df = pi.team_data(team_B)", "piece": "elif rand_a == '1':"}
{"function_name": "update_lineup", "function_define": "    cursor = con.cursor()\n    for pos in poss:\n    con.commit()", "piece": "for pos in poss:"}
{"function_name": "clear_lineup", "function_define": "    cursor = con.cursor()\n    con.commit()\n    cursor.close()", "piece": "con.commit()"}
{"function_name": "print_figure", "function_define": "    img = BytesIO()\n    sb.despine(left=True)\n    plt.close()", "piece": "sb.despine(left=True)"}
{"function_name": "get_clause", "function_define": "    llen = len(lineup)\n    clause = ''\n    if llen >= 2:", "piece": "clause = ''"}
{"function_name": "get_pick_clause", "function_define": "    llen = len(lineup)\n    clause = ''\n    for i in range(1, rnd):", "piece": "clause = ''"}
{"function_name": "a_pick_first", "function_define": "    lineup = get_lineup(con)\n    team_A_df = load_team(con, 'a')\n    team_B_df = load_team(con, 'b')", "piece": "team_A_df = load_team(con, 'a')"}
{"function_name": "a_pick_second", "function_define": "    lineup = get_lineup(con)\n    team_A_df = load_team(con, 'a')\n    rec = [''] * len(team_A_df)", "piece": "team_A_df = load_team(con, 'a')"}
{"function_name": "create_summary", "function_define": "    pj = agg_scores(con)\n    cj = agg_coefs(con)\n    plot_url = print_figure(pj, cj)", "piece": "cj = agg_coefs(con)"}
{"function_name": "plot_3d_with_hue", "function_define": "    ax = Axes3D(fig)\n    ax.set_title(title)\n    ax.set_xlabel(xlabel)", "piece": "ax.set_title(title)"}
{"function_name": "pre_audit", "function_define": "    if self.should_hard_fail():\n    self.hard_fail()\n    except Exception as e:", "piece": "self.hard_fail()"}
{"function_name": "audit_orderbook", "function_define": "    start_time = Delorean().epoch\n    audit_successful = 'SOFT'\n    change_dict = {}", "piece": "audit_successful = 'SOFT'"}
{"function_name": "get_mesh", "function_define": "    nerf = renderer.get_density\n    side = points_per_side\n    voxels = -nerf(coods)", "piece": "side = points_per_side"}
{"function_name": "run_many", "function_define": "    for change in changes:\n    print(change)\n    cfg.update(change)", "piece": "print(change)"}
{"function_name": "run_planner", "function_define": "    mesh = get_mesh(renderer)\n    if basefolder.exists():\n    shutil.rmtree(basefolder)", "piece": "if basefolder.exists():"}
{"function_name": "add_closest", "function_define": "    normal = target - tree_node\n    if distance == 0:\n    normal = normal / distance", "piece": "if distance == 0:"}
{"function_name": "subdivide_line", "function_define": "    normal = target - tree_node\n    if distance == 0:\n    normal = normal / distance", "piece": "if distance == 0:"}
{"function_name": "get_neighbours", "function_define": "    if i - 1 >= 0:\n    yield (i - 1, j)\n    if j - 1 >= 0:", "piece": "yield (i - 1, j)"}
{"function_name": "pad_collate", "function_define": "    for seqs in batch:\n    src_idxs.append(seqs[0])\n    num_valid_turns.append(seqs[1])", "piece": "src_idxs.append(seqs[0])"}
{"function_name": "dataclass_dict", "function_define": "    if isinstance(thing, type):\n    for field in fields:\n    if field.name in exclude:", "piece": "for field in fields:"}
{"function_name": "pubdev_6339", "function_define": "    cluster = h2o.cluster()\n    cloud_size = cluster.cloud_size\n    for file_path in file_paths:", "piece": "cloud_size = cluster.cloud_size"}
{"function_name": "roll_str", "function_define": "    numDice = rolls.split('d')[0]\n    diceVal = rolls.split('d')[1]\n    if numDice == '':", "piece": "diceVal = rolls.split('d')[1]"}
{"function_name": "init_window", "function_define": "    self.bg_color = 'azure'\n    menubar = Menu(self.master)\n    self.master.config(menu=menubar)", "piece": "menubar = Menu(self.master)"}
{"function_name": "confirm_newini", "function_define": "    if okay:\n    self.ini_new()\n    self.ini_read()", "piece": "self.ini_new()"}
{"function_name": "motor_up", "function_define": "    self.antenna_raising = 1\n    self.motor_running = 1\n    self.motor_stall()", "piece": "self.motor_running = 1"}
{"function_name": "motor_down", "function_define": "    self.motor_running = 1\n    self.antenna_raising = 0\n    self.motor_stall()", "piece": "self.antenna_raising = 0"}
{"function_name": "motor_stall", "function_define": "    if self.motor_running:\n    if not self.stall_active:\n    self.stall_active = 1", "piece": "if not self.stall_active:"}
{"function_name": "motor_move", "function_define": "    if self.motor_stalled == 1:\n    self.motor_stop()\n    Lval = self.ant_preset_val - 5", "piece": "self.motor_stop()"}
{"function_name": "gpioconfig", "function_define": "    GPIO.setwarnings(False)\n    GPIO.cleanup()\n    GPIO.setmode(GPIO.BOARD)", "piece": "GPIO.cleanup()"}
{"function_name": "probability", "function_define": "    res = weights[0]\n    for i in range(1, len(input)):\n    res += input[i - 1] * weights[i]", "piece": "for i in range(1, len(input)):"}
{"function_name": "num_jobs_arg", "function_define": "    if value_str == 'auto':\n    value = int(value_str)\n    if value > 0:", "piece": "value = int(value_str)"}
{"function_name": "haveToDispose", "function_define": "    thecaller = callerObject\n    for entity in activeObjectQueue:\n    if entity.manager:", "piece": "for entity in activeObjectQueue:"}
{"function_name": "signalRouter", "function_define": "    if receiver.isLoadRequested():\n    from .Globals import G\n    G.RouterList[0].invoked = True", "piece": "from .Globals import G"}
{"function_name": "sortEntities", "function_define": "    QueueJobShop.sortEntities(self)\n    for entity in activeObjectQueue:\n    entity.managerAvailable = False", "piece": "for entity in activeObjectQueue:"}
{"function_name": "ATWGetListKeyTxt", "function_define": "    global ATWGetListKeyTxt0\n    global ATWGetListKeyTxt1Nb\n    ATWGetListKeyTxt0 = []", "piece": "global ATWGetListKeyTxt1Nb"}
{"function_name": "load_book", "function_define": "    if not file_exist(filename):\n    wb = load_workbook(filename)\n    sheets = Opt()", "piece": "wb = load_workbook(filename)"}
{"function_name": "scrapClass", "function_define": "    browser.get(url)\n    counter = 0\n    succounter = 0", "piece": "counter = 0"}
{"function_name": "processactions", "function_define": "    from cupid import pilib\n    settings = {'debug': False}\n    settings.update(kwargs)", "piece": "settings = {'debug': False}"}
{"function_name": "determine_status", "function_define": "    if currstatus == None:\n    self.value = 0\n    self.status = int(currstatus)", "piece": "self.value = 0"}
{"function_name": "run_replication", "function_define": "    if repo_path is None:\n    if os.path.exists(repo_path):\n    shutil.rmtree(repo_path)", "piece": "if os.path.exists(repo_path):"}
{"function_name": "test_verify", "function_define": "    assert add(1, 100) == 101\n    assert add(1, 1000) == 1001\n    add(1.0, 100)", "piece": "assert add(1, 1000) == 1001"}
{"function_name": "test_run_failure", "function_define": "    cluster = Mock()\n    test = Mock()\n    post_test = Mock()", "piece": "test = Mock()"}
{"function_name": "choose_action", "function_define": "    self._vm_id_to_idx = {}\n    self.future_vm_req.clear()\n    self.allocated_vm.clear()", "piece": "self.future_vm_req.clear()"}
{"function_name": "test_emptyfilter", "function_define": "    print('###### Empty Filter')\n    filter = DF_Filter()\n    print('', filter.getFilter())", "piece": "filter = DF_Filter()"}
{"function_name": "create_qa", "function_define": "    print(self.qa)\n    row = table.rows[0].cells\n    row[0].text = 'Question'", "piece": "row = table.rows[0].cells"}
{"function_name": "write_results", "function_define": "    p = user_x.add_paragraph()\n    r = p.add_run()\n    r.add_break(WD_BREAK.PAGE)", "piece": "r = p.add_run()"}
{"function_name": "test_load_from", "function_define": "    registry = ConverterRegistry()\n    class Foo(m.Schema):\n    schema = Foo()", "piece": "class Foo(m.Schema):"}
{"function_name": "test_data_key", "function_define": "    registry = ConverterRegistry()\n    class Foo(m.Schema):\n    schema = Foo()", "piece": "class Foo(m.Schema):"}
{"function_name": "test_required", "function_define": "    class Foo(m.Schema):\n    c = m.fields.Integer()\n    schema = Foo()", "piece": "c = m.fields.Integer()"}
{"function_name": "test_partial", "function_define": "    class Foo(m.Schema):\n    c = m.fields.Integer()\n    schema = Foo(partial=['b'])", "piece": "c = m.fields.Integer()"}
{"function_name": "test_partial_all", "function_define": "    class Foo(m.Schema):\n    c = m.fields.Integer()\n    schema = Foo(partial=True)", "piece": "c = m.fields.Integer()"}
{"function_name": "test_many", "function_define": "    class Foo(m.Schema):\n    a = m.fields.Integer()\n    schema = Foo(many=True)", "piece": "a = m.fields.Integer()"}
{"function_name": "test_nested_many", "function_define": "    class Bar(m.Schema):\n    a = m.fields.Integer()\n    class Foo(m.Schema):", "piece": "a = m.fields.Integer()"}
{"function_name": "start_stop", "function_define": "    if self.button.get_active():\n    filepath = self.entry.get_text()\n    if os.path.isfile(filepath):", "piece": "filepath = self.entry.get_text()"}
{"function_name": "construct_ui", "function_define": "    self.iso_menu.set_enabled(False)\n    self.iso_menu.set_value('Auto')\n    iso_label = Label('ISO')", "piece": "self.iso_menu.set_value('Auto')"}
{"function_name": "init_camera", "function_define": "    device = chdkptp.list_devices()\n    self.purge_files()\n    self.iso_menu.set_enabled(True)", "piece": "self.purge_files()"}
{"function_name": "change_shutter", "function_define": "    if time > 32000000:\n    time = 32000000\n    if time < 250:", "piece": "time = 32000000"}
{"function_name": "change_zoom", "function_define": "    if zoom == 1:\n    self.iso_menu.set_enabled(True)\n    if zoom == 5:", "piece": "self.iso_menu.set_enabled(True)"}
{"function_name": "shoot_pic", "function_define": "    record_counter = 0\n    timer = int(time.time())\n    seconds = 0", "piece": "timer = int(time.time())"}
{"function_name": "shoot_video", "function_define": "    record_counter = 0\n    seconds = 0\n    time.sleep(1)", "piece": "seconds = 0"}
{"function_name": "get_live_view", "function_define": "    u[0::2] = vp_raw_img[0::4]\n    u[1::2] = vp_raw_img[0::4]\n    v[0::2] = vp_raw_img[2::4]", "piece": "u[1::2] = vp_raw_img[0::4]"}
{"function_name": "erase_ok", "function_define": "    device = chdkptp.list_devices()\n    self.purge_files()\n    self.iso_menu.set_enabled(True)", "piece": "self.purge_files()"}
{"function_name": "test_only_unread", "function_define": "    self.assert_groups_for_user(0)\n    self.assertEqual(2, len(groups))\n    self.assertEqual(1, len(groups))", "piece": "self.assertEqual(2, len(groups))"}
{"function_name": "get_level", "function_define": "    if name == Levels.DEBUG:\n    if name == Levels.INFO:\n    if name == Levels.WARNING:", "piece": "if name == Levels.INFO:"}
{"function_name": "nuevoCiclo", "function_define": "    cicloNew = []\n    print(' ')\n    a = int(input())", "piece": "print(' ')"}
{"function_name": "plot_roses", "function_define": "    Parameters\n    mag : str\n    drr : str", "piece": "mag : str"}
{"function_name": "BIAS_histogramm", "function_define": "    Parameters\n    measured : str\n    modelled : str", "piece": "measured : str"}
{"function_name": "density_diagramm", "function_define": "    Parameters\n    args: dict\n    Y name: str", "piece": "args: dict"}
{"function_name": "plot_thermocline", "function_define": "    Parameters\n    mag : list\n    args: dict", "piece": "mag : list"}
{"function_name": "get_basic_model", "function_define": "    if nvocab is None:\n    if layers > 1:\n    if dropout != 0.0:", "piece": "if layers > 1:"}
{"function_name": "get_bowv_model", "function_define": "    batch_size = tf.shape(story)[0]\n    if nvocab is None:\n    h = tf.concat(hs, 1)", "piece": "if nvocab is None:"}
{"function_name": "train_one_epoch_", "function_define": "    model.train()\n    lr_scheduler = None\n    if epoch == 0:", "piece": "lr_scheduler = None"}
{"function_name": "remove_query", "function_define": "    position = name.find('?')\n    if position == 0:\n    name = 'image.png'", "piece": "if position == 0:"}
{"function_name": "read_geometries", "function_define": "    from .dotxyz import geometry\n    sids = spc_df['species_id']\n    dxyzs = map(read_file, paths)", "piece": "sids = spc_df['species_id']"}
{"function_name": "chemkin_to_csv", "function_define": "    mech_str = read_file(mech_txt)\n    if thm_txt:\n    thm_str = read_file(thm_txt)", "piece": "if thm_txt:"}
{"function_name": "csv_intersect", "function_define": "    table_dfs = []\n    for table_csv in table_csvs:\n    table_dfs.append(table_df)", "piece": "for table_csv in table_csvs:"}
{"function_name": "csv_merge", "function_define": "    table_dfs = []\n    for table_csv in table_csvs:\n    table_dfs.append(table_df)", "piece": "for table_csv in table_csvs:"}
{"function_name": "reactions_run", "function_define": "    if rxn_rng_strs:\n    tpl_str = read_file(tpl_txt)\n    node = worker_id", "piece": "tpl_str = read_file(tpl_txt)"}
{"function_name": "reactions_runner", "function_define": "    tpl_str = read_file(tpl_txt)\n    node_str = ', '.join(nodes)\n    if rxn_rng_strs:", "piece": "node_str = ', '.join(nodes)"}
{"function_name": "_create_job_dir", "function_define": "    dname = id2path(rid)\n    if not os.path.exists(dpath):\n    os.mkdir(dpath)", "piece": "if not os.path.exists(dpath):"}
{"function_name": "_submit_job", "function_define": "    node = worker_id\n    write_file(inp_fpath, inp_str)\n    cmd_str = ' '.join(job_argv)", "piece": "write_file(inp_fpath, inp_str)"}
{"function_name": "chisquare", "function_define": "    NB, NA = (T - YB, T - YA)\n    YN, NY = (YA - YY, YB - YY)\n    NN = T - NY - YN - YY", "piece": "YN, NY = (YA - YY, YB - YY)"}
{"function_name": "do_index", "function_define": "    code = _code.split(' ')[0]\n    if len(_code.split(' ')) == 2:\n    if _code.split(' ')[1] == 'y':", "piece": "if len(_code.split(' ')) == 2:"}
{"function_name": "test_f_beta1", "function_define": "    precision = 0.6\n    recall = 1.0\n    beta = 1", "piece": "recall = 1.0"}
{"function_name": "test_f_beta3", "function_define": "    precision = 0.6\n    recall = 1.0\n    beta = 3", "piece": "recall = 1.0"}
{"function_name": "test_url_for", "function_define": "    endpoints['adminURL'] = 'admin'\n    self.assertEqual('public', url)\n    self.assertEqual('admin', url)", "piece": "self.assertEqual('public', url)"}
{"function_name": "call_function", "function_define": "    global program_counter\n    rstack.append(program_counter)\n    program_counter = n", "piece": "rstack.append(program_counter)"}
{"function_name": "tbfcompile", "function_define": "    token = get_token()\n    compile_time_dispatch[token]()\n    elif token in run_time_dispatch:", "piece": "compile_time_dispatch[token]()"}
{"function_name": "store_byte", "function_define": "    addr = stack.pop()\n    extend_memory(addr)\n    memory[addr] = stack.pop() & 255", "piece": "extend_memory(addr)"}
{"function_name": "less_than", "function_define": "    b = stack.pop()\n    a = stack.pop()\n    if a < b:", "piece": "a = stack.pop()"}
{"function_name": "read_byte", "function_define": "    byte = sys.stdin.read(1)\n    if byte == '':\n    stack.append(-1)", "piece": "if byte == '':"}
{"function_name": "save_skip_videos", "function_define": "    open(SKIP_VIDEOS_PATH, 'w+')\n    text_file.write(video_info)\n    text_file.close()", "piece": "text_file.write(video_info)"}
{"function_name": "hex_to_bin", "function_define": "    out = ''\n    for ch in h:\n    i = int(ch, 16)", "piece": "for ch in h:"}
{"function_name": "sum_versions", "function_define": "    s = tree.version\n    for op in tree.data.operands:\n    s += sum_versions(op)", "piece": "for op in tree.data.operands:"}
{"function_name": "route_cost", "function_define": "    time = vehicle.gps_update_time\n    v_loc = route[0].id\n    capacity = 0", "piece": "v_loc = route[0].id"}
{"function_name": "load_h5_data", "function_define": "    X_gts = []\n    X_dts = []\n    for s in subjects_list:", "piece": "X_dts = []"}
{"function_name": "load_human36", "function_define": "    root_dir = opt.data_dir\n    print('Training set:')\n    only_depth = opt.only_depth", "piece": "print('Training set:')"}
{"function_name": "masked_loss", "function_define": "    nested functions -> closures\n    multiplied by mask\n    the last channel in y_true", "piece": "multiplied by mask"}
{"function_name": "masked_loss_fn", "function_define": "    total_loss = 0.0\n    for ch_idx in range(n_channels):\n    cur_loss = loss[:, ch_idx]", "piece": "for ch_idx in range(n_channels):"}
{"function_name": "make_decision", "function_define": "    self.game = game\n    self.unit = unit\n    self.expansionList()", "piece": "self.unit = unit"}
{"function_name": "expansionList", "function_define": "    if self.keepSafe():\n    self.label = 'Retreating'\n    if self.checkExpansion():", "piece": "self.label = 'Retreating'"}
{"function_name": "runListExp", "function_define": "    if self.keepSafe():\n    if self.findFriendly():\n    if self.keepDistance():", "piece": "if self.findFriendly():"}
{"function_name": "checkExpansion", "function_define": "    if not self.game.expPos:\n    if self.unit.is_moving:\n    searchPos = self.game.expPos", "piece": "if self.unit.is_moving:"}
{"function_name": "keepSafe", "function_define": "    if detector:\n    self.retreating = True\n    if retreatPoint:", "piece": "self.retreating = True"}
{"function_name": "_reset_ticket", "function_define": "    ticket.name = ''\n    ticket.save()\n    p3c = ticket.p3_conference", "piece": "ticket.save()"}
{"function_name": "_assign_ticket", "function_define": "    email = email.strip()\n    except IndexError:\n    recipient = None", "piece": "except IndexError:"}
{"function_name": "whos_coming", "function_define": "    if conference is None:\n    access = ('p',)\n    access = ('m', 'p')", "piece": "access = ('p',)"}
{"function_name": "der_Diff", "function_define": "    E0 = np.array(E0)\n    sig2 = sigma_diff ** 2.0\n    k1 = np.sqrt(np.pi * sig2 / 2.0)", "piece": "sig2 = sigma_diff ** 2.0"}
{"function_name": "debiasRician", "function_define": "    for ix in range(DWI.shape[0]):\n    for iy in range(DWI.shape[1]):\n    for iz in range(DWI.shape[2]):", "piece": "for iy in range(DWI.shape[1]):"}
{"function_name": "parallelDownload", "function_define": "    childS.sendall('md5'.encode())\n    print(hash)\n    if size == \"file-doesn't-exist\":", "piece": "print(hash)"}
{"function_name": "activate_trait", "function_define": "    val = getattr(self, att)\n    new_val = val + change\n    setattr(self, att, new_val)", "piece": "new_val = val + change"}
{"function_name": "add_accompl", "function_define": "    if label not in self.accompl:\n    self.accompl.append(label)\n    self.pak()", "piece": "self.accompl.append(label)"}
{"function_name": "add_students", "function_define": "    self.students += num_stud\n    new_students = []\n    for i in range(num_stud):", "piece": "new_students = []"}
{"function_name": "check_allies", "function_define": "    if not self.friends:\n    if max_num_allies == -1:\n    allies = []", "piece": "if max_num_allies == -1:"}
{"function_name": "check_help", "function_define": "    p = self\n    p.allies = []\n    hlp = []", "piece": "p.allies = []"}
{"function_name": "check_luck", "function_define": "    if not silent:\n    self.show('BAD LUCK!')\n    self.change_stat('bad_luck', 1)", "piece": "self.show('BAD LUCK!')"}
{"function_name": "check_partners", "function_define": "    if not self.friends:\n    partners = []\n    for a in self.friends:", "piece": "partners = []"}
{"function_name": "deactivate_trait", "function_define": "    val = getattr(self, att)\n    new_val = val - change\n    setattr(self, att, new_val)", "piece": "new_val = val - change"}
{"function_name": "earn_money", "function_define": "    self.money += amount\n    if not silent:\n    self.log(f'Earns {amount} c.')", "piece": "if not silent:"}
{"function_name": "gain_exp", "function_define": "    if not silent:\n    self.log(f'Gains {amount} exp.')\n    self.exp += amount", "piece": "self.log(f'Gains {amount} exp.')"}
{"function_name": "log_new_day", "function_define": "    self.log('\\n\\n*NEW DAY*')\n    self.log(self.game.get_date())\n    self.log(self.get_p_info())", "piece": "self.log(self.game.get_date())"}
{"function_name": "practice_home", "function_define": "    if not suppress_log:\n    self.log('Practices at home.')\n    self.gain_exp(exp, silent=True)", "piece": "self.log('Practices at home.')"}
{"function_name": "practice_master", "function_define": "    min_exp = round(base_exp * 0.8)\n    max_exp = round(base_exp * 1.2)\n    exp = rndint(min_exp, max_exp)", "piece": "max_exp = round(base_exp * 1.2)"}
{"function_name": "practice_school", "function_define": "    self.log('Practices at school.')\n    self.pay(TUITION_FEE)\n    base_exp = SCHOOL_TRAINING_EXP", "piece": "self.pay(TUITION_FEE)"}
{"function_name": "use_item", "function_define": "    self.log(f'Uses {item}.')\n    self.lose_item(item)\n    items.use_item(item, self)", "piece": "self.lose_item(item)"}
{"function_name": "win_tourn", "function_define": "    self.earn_prize(prize)\n    self.change_stat('tourn_won', 1)\n    self.log('Wins the tournament')", "piece": "self.change_stat('tourn_won', 1)"}
{"function_name": "execute_sparse", "function_define": "    xp = array_module(op.gpu)\n    if op.seed:\n    rs = None", "piece": "if op.seed:"}
{"function_name": "from_encoded", "function_define": "    action_type = encoded // 5\n    action_idx = encoded % 5\n    if action_type == HINT_COLOR:", "piece": "action_idx = encoded % 5"}
{"function_name": "test_importer", "function_define": "    importer = self.importer\n    import fake_module\n    importer.register()", "piece": "import fake_module"}
{"function_name": "parse_molecules", "function_define": "    lines = get_lines(filename)\n    mols = []\n    mol = Molecule()", "piece": "mols = []"}
{"function_name": "all_reduce", "function_define": "    buffer = self.buffer\n    nonzero_buffer = False\n    if len(params) > 1:", "piece": "nonzero_buffer = False"}
{"function_name": "reduction_fn", "function_define": "    self.need_reduction = False\n    if self.buffer is None:\n    offset = 0", "piece": "if self.buffer is None:"}
{"function_name": "insert_metar", "function_define": "    cursor = cxn.cursor()\n    cursor.execute(query, data)\n    id = cursor.lastrowid", "piece": "cursor.execute(query, data)"}
{"function_name": "insert_remark", "function_define": "    cursor = cxn.cursor()\n    cursor.execute(query, data)\n    id = cursor.lastrowid", "piece": "cursor.execute(query, data)"}
{"function_name": "query_files", "function_define": "    failed_queries = {}\n    queries = {}\n    for filename in files:", "piece": "queries = {}"}
{"function_name": "olt_create", "function_define": "    dpid = device_info.device_id\n    if dpid is None or dpid == '':\n    except socket.error:", "piece": "if dpid is None or dpid == '':"}
{"function_name": "onu_delete", "function_define": "    self.flow_mgr = flow_mgr\n    except Exception as e:\n    except Exception as e:", "piece": "except Exception as e:"}
{"function_name": "onu_oper_up", "function_define": "    intf_id = onu_indication.intf_id\n    onu_id = onu_indication.onu_id\n    if onu_device is None:", "piece": "onu_id = onu_indication.onu_id"}
{"function_name": "__onu_ports_down", "function_define": "    for onu_port in onu_ports:\n    onu_port_id = onu_port.label\n    except KeyError as e:", "piece": "onu_port_id = onu_port.label"}
{"function_name": "test_lazy_json", "function_define": "    assert not os.path.exists(f)\n    lj = LazyJson(f)\n    with open(f) as ff:", "piece": "lj = LazyJson(f)"}
{"function_name": "add_numbers", "function_define": "    filenames = []\n    for file in uploaded_files:\n    filenames.append(filename)", "piece": "for file in uploaded_files:"}
{"function_name": "_setup_inputs", "function_define": "    the input indices here.\n    sgInIdx = 0\n    sgInIdx += 1", "piece": "sgInIdx = 0"}
{"function_name": "_setup_outputs", "function_define": "    Returns:\n    outnames: List[str] = []\n    outnames.append(top_tensor_id)", "piece": "outnames: List[str] = []"}
{"function_name": "load_depends", "function_define": "    obj = Dependency()\n    dependencies = []\n    obj.type = type_of_dependency", "piece": "dependencies = []"}
{"function_name": "url_response", "function_define": "    response = requests.get(url=url)\n    if response.status_code == 200:\n    json_result = response.json()", "piece": "if response.status_code == 200:"}
{"function_name": "train_offline", "function_define": "    ohe_board = np.zeros((4, 4, 16))\n    for i in range(4):\n    for j in range(4):", "piece": "for i in range(4):"}
{"function_name": "flatten_dict", "function_define": "    for key, value in d.items():\n    if isinstance(value, dict):\n    yield (key, value)", "piece": "if isinstance(value, dict):"}
{"function_name": "date_parser", "function_define": "    for substring in ['(', ')']:\n    s = s.replace(substring, '')\n    s = s.strip()", "piece": "s = s.replace(substring, '')"}
{"function_name": "source_to_seq", "function_define": "    li = list(target_rules)\n    target = list()\n    for item in target_rules:", "piece": "target = list()"}
{"function_name": "source_to_dict", "function_define": "    d = dict(target_rules)\n    target = dict()\n    for key, item in d.items():", "piece": "target = dict()"}
{"function_name": "assert_bgmodel", "function_define": "    t = np.linspace(-5, 5, 500)\n    meta = model.getmetadata()\n    par0 = meta['par0']", "piece": "meta = model.getmetadata()"}
{"function_name": "process_content", "function_define": "    except FeatureNotFound:\n    figlist = []\n    caption = unicode(fig.string)", "piece": "figlist = []"}
{"function_name": "add_figure_refs", "function_define": "    for generator in generators:\n    process_content(article)\n    for page in generator.pages:", "piece": "process_content(article)"}
{"function_name": "Grayscale", "function_define": "    b = img[:, :, 0].copy()\n    g = img[:, :, 1].copy()\n    r = img[:, :, 2].copy()", "piece": "g = img[:, :, 1].copy()"}
{"function_name": "tab2rdf_service", "function_define": "    service.create_tmp_dir()\n    yield service\n    service.delete_tmp_dir()", "piece": "yield service"}
{"function_name": "interpret", "function_define": "    for article in articles:\n    if transitivity == 1:\n    if len(the_rest) > 0:", "piece": "if transitivity == 1:"}
{"function_name": "set_args", "function_define": "    if gpu_ids:\n    self.gpu_ids = gpu_ids\n    self.vis_A = vis_A", "piece": "self.gpu_ids = gpu_ids"}
{"function_name": "save_csv_db", "function_define": "    db = 'ljspeech'\n    md = MetaData(db)\n    md.make_new_db(split_ratio)", "piece": "md = MetaData(db)"}
{"function_name": "add_columns", "function_define": "    if self.db == 'ljspeech':\n    self.df['lang'] = 'en'\n    if self.db == 'emovdb':", "piece": "self.df['lang'] = 'en'"}
{"function_name": "get_split_labels", "function_define": "    df_len = len(self.df)\n    n_train = i_val_start\n    n_test = df_len - i_test_start", "piece": "n_train = i_val_start"}
{"function_name": "make_new_db", "function_define": "    self.load_original_db()\n    self.add_columns(split_ratio)\n    df = self.get_df()", "piece": "self.add_columns(split_ratio)"}
{"function_name": "setup_case", "function_define": "    if keyspace_name in ['global']:\n    continue\n    session.shutdown()", "piece": "continue"}
{"function_name": "test_initial_api", "function_define": "    from corm.models import CORMBase\n    class TestModel(CORMBase):\n    something: str", "piece": "class TestModel(CORMBase):"}
{"function_name": "test_float_api", "function_define": "    from corm.models import CORMBase\n    class TestModelFloat(CORMBase):\n    input_one: float", "piece": "class TestModelFloat(CORMBase):"}
{"function_name": "test_boolean_api", "function_define": "    from corm.models import CORMBase\n    from datetime import datetime\n    item: str", "piece": "from datetime import datetime"}
{"function_name": "test_set_api", "function_define": "    from corm.models import CORMBase\n    from corm.annotations import Set\n    class TestModelSet(CORMBase):", "piece": "from corm.annotations import Set"}
{"function_name": "test_select_api", "function_define": "    import random\n    from corm.models import CORMBase\n    from corm.annotations import Set", "piece": "from corm.models import CORMBase"}
{"function_name": "test_corm_auth", "function_define": "    import os\n    from corm.models import CORMBase\n    class TestCORMAuth(CORMBase):", "piece": "from corm.models import CORMBase"}
{"function_name": "test_corm_enum", "function_define": "    import enum\n    from corm.models import CORMBase\n    class OptionList(enum.Enum):", "piece": "from corm.models import CORMBase"}
{"function_name": "test_corm_where", "function_define": "    import enum\n    from corm.models import CORMBase\n    class OptionList(enum.Enum):", "piece": "from corm.models import CORMBase"}
{"function_name": "test_corm_uuid", "function_define": "    import uuid\n    from corm.models import CORMBase\n    class TestCORMUUID(CORMBase):", "piece": "from corm.models import CORMBase"}
{"function_name": "destroy_case", "function_define": "    if keyspace_name in ['global']:\n    continue\n    session.shutdown()", "piece": "continue"}
{"function_name": "get_table", "function_define": "    if category == 'totals':\n    seasons = []\n    for statRow in stats:", "piece": "seasons = []"}
{"function_name": "_build_read", "function_define": "    if field.is_simple:\n    if field.typ == 'time':\n    if field.typ == 'duration':", "piece": "if field.typ == 'time':"}
{"function_name": "_build_write", "function_define": "    if field.is_simple:\n    if field.typ == 'time':\n    if field.typ == 'duration':", "piece": "if field.typ == 'time':"}
{"function_name": "get_factory", "function_define": "    if field.is_simple:\n    if field.typ == 'time':\n    if field.typ == 'duration':", "piece": "if field.typ == 'time':"}
{"function_name": "get_field_writer", "function_define": "    if field.is_simple:\n    if field.typ == 'time':\n    if field.typ == 'duration':", "piece": "if field.typ == 'time':"}
{"function_name": "vector_2_degrees", "function_define": "    angle = degrees(atan2(y, x))\n    if angle < 0:\n    angle += 360", "piece": "if angle < 0:"}
{"function_name": "http_log", "function_define": "    if request.method == 'GET':\n    if data:\n    elif verify:", "piece": "if data:"}
{"function_name": "get_xss_payload", "function_define": "    if project_item:\n    except Exception as e:\n    logger.warning(msg)", "piece": "except Exception as e:"}
{"function_name": "get_xss_data", "function_define": "    salt = request.args.get('salt')\n    data = request.args.get('data')\n    url = request.args.get('url')", "piece": "data = request.args.get('data')"}
{"function_name": "samples_in_dir", "function_define": "    paths.sort()\n    for file_path in paths:\n    sample = DataSample(file_path)", "piece": "for file_path in paths:"}
{"function_name": "add_rule", "function_define": "    in `project`.\n    if last_priority is None:\n    priority = 0", "piece": "if last_priority is None:"}
{"function_name": "countIterations", "function_define": "    iterations = 0\n    while True:\n    maximum = max(numbers)", "piece": "while True:"}
{"function_name": "sameElements", "function_define": "    even xor would be 0\n    odd xor would be that element\n    dont do this", "piece": "odd xor would be that element"}
{"function_name": "all_equal", "function_define": "    iterator = iter(iterator)\n    first = next(iterator)\n    except StopIteration:", "piece": "first = next(iterator)"}
{"function_name": "time_test", "function_define": "    for cmd in to_benchmark:\n    if cmd != 'G3_SQL':\n    exec(setup)", "piece": "if cmd != 'G3_SQL':"}
{"function_name": "approx_test", "function_define": "    exec(setup)\n    for cmd in to_benchmark:\n    yaxis_name = f'Absolute error'", "piece": "for cmd in to_benchmark:"}
{"function_name": "__calc_hash__", "function_define": "    if not self.path.exists():\n    while True:\n    if not data:", "piece": "while True:"}
{"function_name": "hello_user", "function_define": "    Parameters\n    api_client (UberRidesClient)\n    fail_print(error)", "piece": "api_client (UberRidesClient)"}
{"function_name": "_q_value", "function_define": "    values = s[name]\n    iqr = q3 - q1\n    lower = q1 - 1.5 * iqr", "piece": "iqr = q3 - q1"}
{"function_name": "gen_picture", "function_define": "    self.picture = QtGui.QPicture()\n    self.boxs = []\n    p = QtGui.QPainter(self.picture)", "piece": "self.boxs = []"}
{"function_name": "mouseClickEvent", "function_define": "    if ev.button() == Qt.LeftButton:\n    data, pbox = (None, None)\n    data = (x, qs, mx, es)", "piece": "data, pbox = (None, None)"}
{"function_name": "get_next_path", "function_define": "    path = args.output_dir\n    while os.path.exists(path):\n    get_next_path.last_number += 1", "piece": "while os.path.exists(path):"}
{"function_name": "zero_pad", "function_define": "    s = x.shape\n    m = s[-1]\n    if m == n:", "piece": "m = s[-1]"}
{"function_name": "upsample", "function_define": "    x = np.asarray(x)\n    n = int(n)\n    if phase < 0 or phase >= n:", "piece": "n = int(n)"}
{"function_name": "downsample", "function_define": "    x = np.asarray(x)\n    n = int(n)\n    if phase < 0 or phase >= n:", "piece": "n = int(n)"}
{"function_name": "convslice", "function_define": "    smaller = min(L, M)\n    bigger = max(L, M)\n    if mode == 'valid':", "piece": "bigger = max(L, M)"}
{"function_name": "apply_to_2d", "function_define": "    if len(arr.shape) != 2:\n    res = func1d(arr[0])\n    if not isinstance(res, tuple):", "piece": "res = func1d(arr[0])"}
{"function_name": "test_ExYour", "function_define": "    class Norm(ExYour):\n    n = Norm()\n    n.question()", "piece": "n = Norm()"}
{"function_name": "run_and_verify", "function_define": "    assert num_dnnl_subgraphs >= 1\n    dev = tvm.cpu()\n    result_dict = dict()", "piece": "dev = tvm.cpu()"}
{"function_name": "get_conv2d", "function_define": "    param_lst = ['kernel']\n    if activation == 'relu':\n    elif activation == 'tanh':", "piece": "if activation == 'relu':"}
{"function_name": "get_conv2d_bias", "function_define": "    dic['bias'] = (k_shape[0],)\n    param_lst += ['bias']\n    if activation == 'relu':", "piece": "param_lst += ['bias']"}
{"function_name": "verify_splitting", "function_define": "    if p[1]:\n    assert isprime(n)\n    assert isprime(p[0])", "piece": "assert isprime(n)"}
{"function_name": "test_gprimes", "function_define": "    g = gp.gprimes(10000)\n    verify_splitting(g)\n    g = gp.gprimes(0)", "piece": "verify_splitting(g)"}
{"function_name": "test_moat", "function_define": "    m = gp.moat_component(3)\n    assert m.shape == (2, 380)\n    m = gp.moat_component(3.2)", "piece": "assert m.shape == (2, 380)"}
{"function_name": "initialise", "function_define": "    global arduino_serial\n    global vis\n    vis = parameters[0]", "piece": "global vis"}
{"function_name": "work_function", "function_define": "    global vis\n    global arduino_serial\n    vis = parameters[0]", "piece": "global arduino_serial"}
{"function_name": "test_wIcon_1", "function_define": "    ui = app.mainW.ui.openMessageW\n    suc = app.mainW.wIcon(ui, icon)\n    assert suc", "piece": "suc = app.mainW.wIcon(ui, icon)"}
{"function_name": "publisher", "function_define": "    if data != -8555:\n    meta_data['status'] = 200\n    meta_data['status'] = 404", "piece": "meta_data['status'] = 200"}
{"function_name": "create_gene_list", "function_define": "    if gene_matcher is None:\n    gene_list.save()\n    if gene_names_set:", "piece": "gene_list.save()"}
{"function_name": "process_items", "function_define": "    gene_list_data = f.read()\n    gene_matcher = None\n    uploaded_gene_list.save()", "piece": "gene_matcher = None"}
{"function_name": "_getDebugInfo", "function_define": "    found = False\n    found = req_page is not None\n    if not found:", "piece": "found = req_page is not None"}
{"function_name": "countTriplets", "function_define": "    triplets = 0\n    mult2 = {}\n    mult1 = {}", "piece": "mult2 = {}"}
{"function_name": "construct_tree", "function_define": "    if not values:\n    root = TreeNode(values[0])\n    queue = deque([root])", "piece": "root = TreeNode(values[0])"}
{"function_name": "accumulate_sum", "function_define": "    if len(lst) == 1:\n    accumulated_sum = [lst[0]]\n    for i in range(1, len(lst)):", "piece": "accumulated_sum = [lst[0]]"}
{"function_name": "__make_input_arr", "function_define": "    except ValueError:\n    finally:\n    f.close()", "piece": "finally:"}
{"function_name": "solve_ssp", "function_define": "    if self.answer is not None:\n    self.__configure_solver_lib()\n    self.answer = naive_ans", "piece": "self.__configure_solver_lib()"}
{"function_name": "compute_td_loss", "function_define": "    Calculate loss and optimize\n    if args.prioritized_replay:\n    weights_ = weights.numpy()", "piece": "if args.prioritized_replay:"}
{"function_name": "M1_3D_BC", "function_define": "    if k11 > 0:\n    sqrt2 = math.sqrt(2.0)\n    b11 = math.sqrt(2.0 * k11)", "piece": "sqrt2 = math.sqrt(2.0)"}
{"function_name": "stretching", "function_define": "    Np = N + 1\n    if Vstretching == 1:\n    ds = 1.0 / N", "piece": "if Vstretching == 1:"}
{"function_name": "_RunPytype", "function_define": "    pytype simple.py --output=-\n    pytype_args = [pytype_exe]\n    if value is not self.INCLUDE:", "piece": "pytype_args = [pytype_exe]"}
{"function_name": "testInferToFile", "function_define": "    with open(pyi_file, 'r') as f:\n    pyi = f.read()\n    expected_pyi = f.read()", "piece": "pyi = f.read()"}
{"function_name": "testRunPytype", "function_define": "    infile = self._TmpPath('input')\n    with open(infile, 'w') as f:\n    f.write('def f(x): pass')", "piece": "with open(infile, 'w') as f:"}
{"function_name": "load_esa", "function_define": "    file = open(filename, 'r')\n    for line in file:\n    continue", "piece": "for line in file:"}
{"function_name": "operationalize", "function_define": "    for ltr in robot_dir:\n    if ltr not in 'LRFBS':\n    if robot_dir == 'F':", "piece": "if ltr not in 'LRFBS':"}
{"function_name": "empty_cart", "function_define": "    session.clear()\n    except Exception as e:\n    print(e)", "piece": "except Exception as e:"}
{"function_name": "delete_product", "function_define": "    all_total_price = 0\n    all_total_quantity = 0\n    session.modified = True", "piece": "all_total_quantity = 0"}
{"function_name": "submit_order", "function_define": "    status = 'pending'\n    mysql.connection.commit()\n    cursor.close()", "piece": "mysql.connection.commit()"}
{"function_name": "my_orders", "function_define": "    status1 = 'pending'\n    status2 = 'done'\n    data = cursor.fetchall()", "piece": "status2 = 'done'"}
{"function_name": "my_orders_delete", "function_define": "    status = 'pending'\n    mysql.connection.commit()\n    mysql.connection.commit()", "piece": "mysql.connection.commit()"}
{"function_name": "admin_login", "function_define": "    msg = ''\n    if request.method == 'POST':\n    if data > 0:", "piece": "if request.method == 'POST':"}
{"function_name": "download_report", "function_define": "    result = cursor.fetchall()\n    output = io.BytesIO()\n    workbook = xlwt.Workbook()", "piece": "output = io.BytesIO()"}
{"function_name": "admin_orders", "function_define": "    status = 'pending'\n    data = cursor.fetchall()\n    info = cursor.fetchall()", "piece": "data = cursor.fetchall()"}
{"function_name": "inbox_reply", "function_define": "    msg = ''\n    if request.method == 'POST':\n    message.body = _message", "piece": "if request.method == 'POST':"}
{"function_name": "compute_exposure", "function_define": "    Examples:\n    array([1., 1., 2., 3., 4.])\n    array([ 1.,  1.,  4.,  8., 13.])", "piece": "array([1., 1., 2., 3., 4.])"}
{"function_name": "test_cats", "function_define": "    min_value = 10\n    max_value = 20\n    vw.learn(vw_example)", "piece": "max_value = 20"}
{"function_name": "maxEnvelopes", "function_define": "    if not envelopes:\n    result = []\n    for pair in pairs:", "piece": "result = []"}
{"function_name": "_get_well_known", "function_define": "    Returns:\n    except KeyError:\n    if cache_period > 0:", "piece": "except KeyError:"}
{"function_name": "get_stream_name", "function_define": "    Returns:\n    str: name of a stream\n    Examples:", "piece": "str: name of a stream"}
{"function_name": "gen_random_pass", "function_define": "    Generate a random password\n    Returns:\n    str: random password", "piece": "Returns:"}
{"function_name": "makeTestWorkload", "function_define": "    a few tests\n    procTask.applyTemplates()\n    primaryDataset = 'bogusPrimary'", "piece": "procTask.applyTemplates()"}
{"function_name": "testTruncate", "function_define": "    procTask.applyTemplates()\n    procTask.applyTemplates()\n    mergeTask.setTaskType('Merge')", "piece": "procTask.applyTemplates()"}
{"function_name": "_design_stage2", "function_define": "    seg_tail1 = seg_dict['tail1']\n    seg_diode1 = seg_dict['diode1']\n    seg_ngm1 = seg_dict['ngm1']", "piece": "seg_diode1 = seg_dict['diode1']"}
{"function_name": "_find_rz_cf", "function_define": "    for this op amp.\n    gz_worst = float(min(gm2_list))\n    cf_min = cap_min", "piece": "gz_worst = float(min(gm2_list))"}
{"function_name": "_find_min_cfb", "function_define": "    axis_names = ['corner', 'cfb']\n    corner_list = results['corner']\n    cfb_vec = results['cfb']", "piece": "corner_list = results['corner']"}
{"function_name": "funity_fun", "function_define": "    fu_list = ac_results_tmp[0]\n    if fu_list is None:\n    ans = min(fu_list)", "piece": "if fu_list is None:"}
{"function_name": "squareNum", "function_define": "    uList = []\n    for item in list:\n    uList.append(item * item)", "piece": "for item in list:"}
{"function_name": "print_collection", "function_define": "    print('/' * 75)\n    for x in db[collection].find():\n    print(x)", "piece": "for x in db[collection].find():"}
{"function_name": "one_hot_it", "function_define": "    semantic_map = []\n    for info in label_info:\n    color = label_info[info]", "piece": "for info in label_info:"}
{"function_name": "compute_score", "function_define": "    score = 0\n    count = 0\n    target[target != forground] = 0", "piece": "count = 0"}
{"function_name": "eval_seg", "function_define": "    Dice = []\n    Precsion = []\n    Jaccard = []", "piece": "Precsion = []"}
{"function_name": "reverse_one_hot", "function_define": "    the classified class key.\n    image: The one-hot format image\n    class key.", "piece": "image: The one-hot format image"}
{"function_name": "check_update", "function_define": "    Returns:\n    if message.text:\n    text_list = message.text.split()", "piece": "if message.text:"}
{"function_name": "get_palette", "function_define": "    vector = get_vector(a, b)\n    t = get_t(n)\n    palette = []", "piece": "t = get_t(n)"}
{"function_name": "test_valid", "function_define": "    helper = ClientAuthHelper()\n    request = mock.Mock()\n    request.GET = {}", "piece": "request = mock.Mock()"}
{"function_name": "ensure_anvil_dir", "function_define": "    if not sh.isdir(ANVIL_DIR):\n    with sh.Rooted(True):\n    os.makedirs(ANVIL_DIR)", "piece": "with sh.Rooted(True):"}
{"function_name": "traceback_fn", "function_define": "    traceback = None\n    if log_level < logging.INFO:\n    traceback = sys.exc_traceback", "piece": "if log_level < logging.INFO:"}
{"function_name": "test_parse_model", "function_define": "    class TestModel:\n    model_id: int\n    model_name: str", "piece": "model_id: int"}
{"function_name": "browse_image", "function_define": "    global test_image\n    image = Image.open(fin)\n    test_image = image", "piece": "image = Image.open(fin)"}
{"function_name": "use_ocr_default", "function_define": "    global test_image\n    messge = None\n    label.place(x=850, y=320)", "piece": "messge = None"}
{"function_name": "login_user", "function_define": "    logout(request)\n    email = password = ''\n    if request.POST:", "piece": "email = password = ''"}
{"function_name": "calibrate", "function_define": "    time_started = t.time()\n    for x in range(10000000):\n    hashlib.sha512('hash'.encode())", "piece": "for x in range(10000000):"}
{"function_name": "remove_spaces", "function_define": "    new_string = ''\n    for element in self.__string:\n    if element is not ' ':", "piece": "for element in self.__string:"}
{"function_name": "set_wavel_slice", "function_define": "    if type(from_index) == float:\n    elif type(from_index) == int:\n    elif type(from_index) == str:", "piece": "elif type(from_index) == int:"}
{"function_name": "_read_file", "function_define": "    dict_args = {}\n    col1 = []\n    col2 = []", "piece": "col1 = []"}
{"function_name": "load_images", "function_define": "    for image in self.images_R:\n    image.set_colorkey(BLACK)\n    for image in self.images_L:", "piece": "image.set_colorkey(BLACK)"}
{"function_name": "colorize", "function_define": "    assert isinstance(num, int)\n    attr = []\n    if highlight:", "piece": "attr = []"}
{"function_name": "mapValues", "function_define": "    global MEAN\n    global STD\n    if save:", "piece": "global STD"}
{"function_name": "nextMove", "function_define": "    if playerColor is None:\n    playerColor = self.color\n    if len(results) == 0:", "piece": "playerColor = self.color"}
{"function_name": "getScore", "function_define": "    blackScore -= 900\n    whiteScore -= 900\n    if self.color == 'White':", "piece": "whiteScore -= 900"}
{"function_name": "getScoreSimple", "function_define": "    w = self.getWhiteScore()\n    b = self.getBlackScore()\n    if self.color == 'White':", "piece": "b = self.getBlackScore()"}
{"function_name": "getWhiteScore", "function_define": "    score = 0\n    if piece.color == 'White':\n    score += self.points[piece.name]", "piece": "if piece.color == 'White':"}
{"function_name": "getBlackScore", "function_define": "    score = 0\n    if piece.color == 'Black':\n    score += self.points[piece.name]", "piece": "if piece.color == 'Black':"}
{"function_name": "get_room_list", "function_define": "    url_args = request.args\n    filters = {}\n    sort = []", "piece": "filters = {}"}
{"function_name": "set_zero_flow_x0", "function_define": "    for i, j in G.edges():\n    G[i][j]['flow'] = 0\n    G[i][j]['x'] = 0", "piece": "G[i][j]['flow'] = 0"}
{"function_name": "set_zero_x0", "function_define": "    for i, j in G.edges():\n    G[i][j]['x'] = 0\n    G[i][j]['t_k'] = G[i][j]['t_0']", "piece": "G[i][j]['x'] = 0"}
{"function_name": "all_or_nothing", "function_define": "    for i, j in G.edges():\n    if G_exo:\n    exo = G_exo[i][j]['flow']", "piece": "if G_exo:"}
{"function_name": "derivative_FW", "function_define": "    sum_derivative = 0\n    for i, j in G.edges():\n    if G_exo:", "piece": "for i, j in G.edges():"}
{"function_name": "assignment", "function_define": "    if flow == True:\n    set_zero_x0(G)\n    set_zero_flow_x0(G)", "piece": "set_zero_x0(G)"}
{"function_name": "_decoder", "function_define": "    boxes = []\n    cls_indexs = []\n    probs = []", "piece": "cls_indexs = []"}
{"function_name": "RunData2", "function_define": "    correct = 0\n    total = 0\n    with torch.no_grad():", "piece": "total = 0"}
{"function_name": "prune_filter", "function_define": "    sort_prune = np.sort(prune)\n    mask = np.ones(layer.shape)\n    for i in range(len(prune)):", "piece": "mask = np.ones(layer.shape)"}
{"function_name": "prune_weight", "function_define": "    mask = np.ones(layer.shape)\n    for i in range(layer.shape[0]):\n    for j in range(layer.shape[1]):", "piece": "for i in range(layer.shape[0]):"}
{"function_name": "Calculate_flop", "function_define": "    FLOP = 0\n    shape = input_shape[1]\n    padding = layer.padding", "piece": "shape = input_shape[1]"}
{"function_name": "play_my_sound", "function_define": "    file = f'sounds/{type}.wav'\n    pygame.mixer.init()\n    pygame.mixer.music.load(file)", "piece": "pygame.mixer.init()"}
{"function_name": "useOffset", "function_define": "    import numpy as np\n    if method == 0:\n    a = 0.6583", "piece": "if method == 0:"}
{"function_name": "BPT_sim_data", "function_define": "    import numpy as np\n    import pandas as pd\n    T_fit_list = []", "piece": "import pandas as pd"}
{"function_name": "rotation3D", "function_define": "    axis = np.asarray(axis)\n    theta = degrees * math.pi / 180\n    a = math.cos(theta / 2.0)", "piece": "theta = degrees * math.pi / 180"}
{"function_name": "describe", "function_define": "    if len(self.axis_groups) == 2:\n    elif len(self.axis_groups) == 3:\n    if len(self.axis_groups) == 3:", "piece": "elif len(self.axis_groups) == 3:"}
{"function_name": "neighbors_find", "function_define": "    boxsize (int): Box size value.\n    Returns:\n    height, width = obj_edges.shape", "piece": "Returns:"}
{"function_name": "feret_diameter", "function_define": "    boxsize (int): Box size value.\n    Returns:\n    counts_scalar_copy = None", "piece": "Returns:"}
{"function_name": "users_detail", "function_define": "    if list_slug == 'editors':\n    users = Editor.objects.all()\n    elif list_slug == 'designers':", "piece": "users = Editor.objects.all()"}
{"function_name": "read_pivots", "function_define": "    pivots = {}\n    f = open(pivot_file, 'r')\n    for line in f:", "piece": "f = open(pivot_file, 'r')"}
{"function_name": "find_best_c", "function_define": "    best_score = 0\n    best_c = 0\n    for C in C_list:", "piece": "best_c = 0"}
{"function_name": "flow_to_image", "function_define": "    u = flow[0, :, :]\n    v = flow[1, :, :]\n    rad = np.sqrt(u ** 2 + v ** 2)", "piece": "v = flow[1, :, :]"}
{"function_name": "_normalise", "function_define": "    lower = np.min(image)\n    delta = np.max(image) - lower\n    if delta == 0:", "piece": "delta = np.max(image) - lower"}
{"function_name": "apply_colour_map", "function_define": "    Returns a HxWx3 numpy image\n    if image.ndim == 3:\n    image = image[0]", "piece": "if image.ndim == 3:"}
{"function_name": "compute_color", "function_define": "    assert u.shape == v.shape\n    img = np.zeros([h, w, 3])\n    u[nan_mask] = 0", "piece": "img = np.zeros([h, w, 3])"}
{"function_name": "make_color_wheel", "function_define": "    Create colour wheel.\n    red_yellow = 15\n    yellow_green = 6", "piece": "red_yellow = 15"}
{"function_name": "make_contour", "function_define": "    h, w = img.shape[:2]\n    out = img.copy()\n    if double_line:", "piece": "out = img.copy()"}
{"function_name": "visualise_output", "function_define": "    video = []\n    for t in range(sequence_length):\n    out_t = []", "piece": "for t in range(sequence_length):"}
{"function_name": "truncate", "function_define": "    limit = max(limit, 0)\n    s_init_len = len(s)\n    s = s[:limit]", "piece": "s_init_len = len(s)"}
{"function_name": "check_json", "function_define": "    if not path_to_json.exists():\n    if items_to_check is None:\n    storage = {}", "piece": "if items_to_check is None:"}
{"function_name": "get_recon_method", "function_define": "    reconstruction.\n    subsets = None\n    iterations = None", "piece": "subsets = None"}
{"function_name": "get_radionuclide", "function_define": "    extraction_good = True\n    except AttributeError:\n    radionuclide = ''", "piece": "except AttributeError:"}
{"function_name": "run_dcm2niix", "function_define": "    dcm2niix output.\n    if self.file_format:\n    file_format_args = ''", "piece": "if self.file_format:"}
{"function_name": "post_dcm2niix", "function_define": "    tempdir_path = Path(temp_dir)\n    elif self.dicom_headers:\n    for blood_file in blood_files:", "piece": "elif self.dicom_headers:"}
{"function_name": "open_meta_data", "function_define": "    file's extension.\n    if 'xls' in extension:\n    proper_method = 'excel'", "piece": "if 'xls' in extension:"}
{"function_name": "fetch_priority", "function_define": "    Arguments:\n    err_msg = 'Error Message'\n    mail = kwargs.get('mail', None)", "piece": "err_msg = 'Error Message'"}
{"function_name": "prt_rep_stat", "function_define": "    Arguments:\n    mail = kwargs.get('mail', None)\n    status = (True, None)", "piece": "mail = kwargs.get('mail', None)"}
{"function_name": "royal_flush", "function_define": "    if len(suits) == 1:\n    for value in royal_values:\n    if value in hand:", "piece": "for value in royal_values:"}
{"function_name": "straight_flush", "function_define": "    if len(suits) == 1:\n    hand.sort()\n    for card in hand[0:4]:", "piece": "hand.sort()"}
{"function_name": "full_house", "function_define": "    hand_check = hand.copy()\n    high_cards = []\n    for card in hand_check:", "piece": "high_cards = []"}
{"function_name": "straight", "function_define": "    for value in low_values:\n    if value in hand:\n    hand.sort()", "piece": "if value in hand:"}
{"function_name": "two_pair", "function_define": "    hand_check = hand.copy()\n    counter = 0\n    high_cards = []", "piece": "counter = 0"}
{"function_name": "high_card", "function_define": "    highest = 2\n    for card in hand:\n    high_card = card_values[card]", "piece": "for card in hand:"}
{"function_name": "winning_hand", "function_define": "    check_1 = royal_flush(h1, s1)\n    check_2 = royal_flush(h2, s2)\n    if len(check_1) > 0:", "piece": "check_2 = royal_flush(h2, s2)"}
{"function_name": "detect_face_haar", "function_define": "    img = cv.imread(img)\n    for x, y, w, h in faces:\n    for ex, ey, ew, eh in eyes:", "piece": "for x, y, w, h in faces:"}
{"function_name": "Cookie_get", "function_define": "    global cache_Cookie\n    if cache_Cookie == '':\n    tmp_Cookie = r.read()", "piece": "if cache_Cookie == '':"}
{"function_name": "elementDict", "function_define": "    except KeyError:\n    elementProperty = '\u8349'\n    if isOculus:", "piece": "elementProperty = '\u8349'"}
{"function_name": "JsonAnalysis", "function_define": "    data = json.loads(JsonText)\n    if data['retcode'] != 0:\n    if data['retcode'] == 10001:", "piece": "if data['retcode'] != 0:"}
{"function_name": "infoQuery", "function_define": "    uid = str(int(uid))\n    if uid == 'exit' or uid == 'q':\n    sys.exit(0)", "piece": "if uid == 'exit' or uid == 'q':"}
{"function_name": "wrap_exception", "function_define": "    it to the notification system.\n    except Exception as e:\n    if notifier:", "piece": "except Exception as e:"}
{"function_name": "genImage", "function_define": "    if datatype == 'train':\n    gen_number = 0\n    os.makedirs(gpath + 'delete')", "piece": "gen_number = 0"}
{"function_name": "get_feature_idx", "function_define": "    last_score = 0.0\n    selected = tuple(start)\n    while True:", "piece": "selected = tuple(start)"}
{"function_name": "add_features", "function_define": "    noise (scale=0.1*std)\n    Returns:\n    dropout = np.copy(dataset_x)", "piece": "Returns:"}
{"function_name": "get_details", "function_define": "    Returns:\n    if outputpanel is None:\n    data = {}", "piece": "if outputpanel is None:"}
{"function_name": "ConnectAD", "function_define": "    AD.Init()\n    if AD._ldap_enabled is not True:\n    AD.Close()", "piece": "if AD._ldap_enabled is not True:"}
{"function_name": "ConnectWinRM", "function_define": "    ret = False\n    AD.Init()\n    if r.std_err.decode() != '':", "piece": "AD.Init()"}
{"function_name": "VerifyADSettings", "function_define": "    ret = True\n    AD._errors = []\n    AD.Close()", "piece": "AD._errors = []"}
{"function_name": "CreateGroup", "function_define": "    ret = False\n    if AD.Connect() is not True:\n    if group_dn == '':", "piece": "if AD.Connect() is not True:"}
{"function_name": "AddUserToGroup", "function_define": "    ret = False\n    if AD.Connect() is not True:\n    ret = True", "piece": "if AD.Connect() is not True:"}
{"function_name": "CreateOU", "function_define": "    ret = False\n    if AD.Connect() is not True:\n    if ou_dn == '':", "piece": "if AD.Connect() is not True:"}
{"function_name": "MakePathCN", "function_define": "    ret = False\n    log = ''\n    parts = cn.split(',')", "piece": "log = ''"}
{"function_name": "CreateUser", "function_define": "    ret = False\n    if AD.ConnectAD() is not True:\n    if user is not None:", "piece": "if AD.ConnectAD() is not True:"}
{"function_name": "UpdateUserInfo", "function_define": "    ret = True\n    if AD.ConnectAD() is not True:\n    u_attrs = dict()", "piece": "if AD.ConnectAD() is not True:"}
{"function_name": "SetPassword", "function_define": "    ret = False\n    AD._errors = []\n    if AD.ConnectAD() is not True:", "piece": "AD._errors = []"}
{"function_name": "EnableUser", "function_define": "    ret = False\n    if AD.ConnectAD() is not True:\n    uac = 66048", "piece": "if AD.ConnectAD() is not True:"}
{"function_name": "GetLastLoginTime", "function_define": "    ret = None\n    if user_dn is None:\n    if AD.ConnectAD() is not True:", "piece": "if user_dn is None:"}
{"function_name": "GetLDAPObject", "function_define": "    ret = None\n    if AD.ConnectAD() is not True:\n    if ret_arr is None:", "piece": "if AD.ConnectAD() is not True:"}
{"function_name": "SetDriveQuota", "function_define": "    ret = False\n    out = ''\n    if AD.Connect() is not True:", "piece": "out = ''"}
{"function_name": "SetQuotaEnabled", "function_define": "    ret = True\n    if AD.Connect() is not True:\n    if r.std_err.decode() != '':", "piece": "if AD.Connect() is not True:"}
{"function_name": "test_subscribe", "function_define": "    self.server.api(int, 'foo')\n    self.server_runner.start()\n    self.client_runner.start()", "piece": "self.server_runner.start()"}
{"function_name": "test_reconnect", "function_define": "    self.server_runner.start()\n    self.client_runner.start()\n    bar_target._write.reset_mock()", "piece": "self.client_runner.start()"}
{"function_name": "_get_signals", "function_define": "    returns:\n    signal_buy = line < lowerbound\n    signal_sell = line > upperbound", "piece": "signal_buy = line < lowerbound"}
{"function_name": "connect_usb", "function_define": "    while True:\n    if platform == 'android':\n    self.get_usb_devices()", "piece": "if platform == 'android':"}
{"function_name": "EveField", "function_define": "    if not isinstance(klass, type):\n    if self.owner is None:\n    if self.name is None:", "piece": "if self.owner is None:"}
{"function_name": "_validate", "function_define": "    if self.owner is None:\n    if self.name is None:\n    sep = '\\n'", "piece": "if self.name is None:"}
{"function_name": "greedy_action", "function_define": "    x = self.forward(x)\n    if valid_actions is not None:\n    val, idx = torch.max(x)", "piece": "if valid_actions is not None:"}
{"function_name": "merge_partitions", "function_define": "    left_part = items[lo:mid + 1]\n    left_ptr = 0\n    right_ptr = 0", "piece": "left_ptr = 0"}
{"function_name": "clear_input_box", "function_define": "    box.type(Keys.CONTROL + 'e')\n    for i in xrange(100):\n    box.type(Keys.BACKSPACE)", "piece": "for i in xrange(100):"}
{"function_name": "view_ads", "function_define": "    logging.warn('Visiting viewads')\n    self.browser_visit('view_ads')\n    while True:", "piece": "self.browser_visit('view_ads')"}
{"function_name": "optimize_balance", "function_define": "    print('Optimizing balance...')\n    if self._balance['main'] < 1:\n    self.browser_visit('dashboard')", "piece": "if self._balance['main'] < 1:"}
{"function_name": "buy_pack", "function_define": "    pack_value_to_option[k] = str(v)\n    pp.pprint(pack_value_to_option)\n    continue", "piece": "pp.pprint(pack_value_to_option)"}
{"function_name": "solve_captcha", "function_define": "    time.sleep(3)\n    time.sleep(6)\n    button.click()", "piece": "time.sleep(6)"}
{"function_name": "config_logger", "function_define": "    logger.addHandler(debug_logger)\n    logger.addHandler(info_logger)\n    logger.addHandler(error_logger)", "piece": "logger.addHandler(info_logger)"}
{"function_name": "split_lines", "function_define": "    for num in line_num:\n    with open(file, 'w') as f:\n    f.writelines(file_obj)", "piece": "with open(file, 'w') as f:"}
{"function_name": "get_clients", "function_define": "    clients = []\n    with MistImporter._lock:\n    clients = self._clients", "piece": "with MistImporter._lock:"}
{"function_name": "_collect_clients", "function_define": "    clients = []\n    now = datetime.now()\n    for mc in mist_clients:", "piece": "now = datetime.now()"}
{"function_name": "_compare_clients", "function_define": "    ip4_networks = []\n    for client in clients:\n    for ip4_network in ip4_networks:", "piece": "for client in clients:"}
{"function_name": "_free_by_client", "function_define": "    except PortalException as e:\n    ipaddress.delete()\n    except PortalException as e:", "piece": "ipaddress.delete()"}
{"function_name": "collect_clients", "function_define": "    succeed = False\n    self.set_clients(clients)\n    except Exception as e:", "piece": "self.set_clients(clients)"}
{"function_name": "import_clients", "function_define": "    if 'UNKNOWN' == client['state']:\n    elif 'MATCH' == client['state']:\n    self.clear_clients()", "piece": "elif 'MATCH' == client['state']:"}
{"function_name": "_test_query", "function_define": "    if isinstance(arg, list):\n    args = test_data.get('args', [])\n    args = parse_arg(args)", "piece": "args = test_data.get('args', [])"}
{"function_name": "test_invalid_arg", "function_define": "    Query.bool(must=set())\n    Query.bool(must=[None])\n    Query.bool(must=[])", "piece": "Query.bool(must=[None])"}
{"function_name": "smallestDivisor", "function_define": "    left = 1\n    right = 1000000 + 1\n    while left < right:", "piece": "right = 1000000 + 1"}
{"function_name": "histogram_eq", "function_define": "    image: float array for the image\n    if len(image.shape) == 2:\n    img_bw = cv2.equalizeHist(image)", "piece": "if len(image.shape) == 2:"}
{"function_name": "log_compression", "function_define": "    image: float array for the image\n    if len(image.shape) == 2:\n    image = color.gray2rgb(image)", "piece": "if len(image.shape) == 2:"}
{"function_name": "reverse_video", "function_define": "    image: float array for the image\n    if len(image.shape) == 2:\n    image = color.gray2rgb(image)", "piece": "if len(image.shape) == 2:"}
{"function_name": "encode_position", "function_define": "    x = x.transpose(1, 2)\n    length = x.size()[1]\n    channels = x.size()[2]", "piece": "length = x.size()[1]"}
{"function_name": "split_last_dim", "function_define": "    x: a Tensor with shape [..., m]\n    n: an integer.\n    Returns:", "piece": "n: an integer."}
{"function_name": "run_case", "function_define": "    expected_uuids = {}\n    for rank_list in rank_lists:\n    for uuid in expected_uuids:", "piece": "for rank_list in rank_lists:"}
{"function_name": "test_list_pools", "function_define": "    Test Description:\n    created.\n    errors = []", "piece": "created."}
{"function_name": "make_lines", "function_define": "    for i, row in df.iterrows():\n    df.at[i, 'geometry'] = line\n    gdf.crs = {'init': 'epsg:4326'}", "piece": "df.at[i, 'geometry'] = line"}
{"function_name": "connection_test", "function_define": "    host = host\n    port = port\n    s = socket.socket()", "piece": "port = port"}
{"function_name": "basic_server", "function_define": "    s = socket.socket()\n    SERVER_HOST = '0.0.0.0'\n    SERVER_PORT = port", "piece": "SERVER_HOST = '0.0.0.0'"}
{"function_name": "test_members", "function_define": "    global sort, q\n    test_username = 'testsysadmin'\n    sort = 'title desc'", "piece": "test_username = 'testsysadmin'"}
{"function_name": "correct0drift", "function_define": "    pre_time_end = 0\n    for i in range(len(dep) - 1):\n    pre_time_end = i + 1", "piece": "for i in range(len(dep) - 1):"}
{"function_name": "detect_brand", "function_define": "    rslt = []\n    for i, val in enumerate(obs):\n    rslt.append(val.split('-')[-1])", "piece": "for i, val in enumerate(obs):"}
{"function_name": "modify_nc", "function_define": "    for grpname in src.groups:\n    dst.createGroup(grpname)\n    for name in src.ncattrs():", "piece": "dst.createGroup(grpname)"}
{"function_name": "_build_model", "function_define": "    self._build_placeholders()\n    self._build_perception()\n    self._build_manager()", "piece": "self._build_perception()"}
{"function_name": "_build_worker", "function_define": "    num_acts = self.act_space\n    cut_g = tf.stop_gradient(self.g)\n    self.last_c_g = gstack[:, 1:]", "piece": "cut_g = tf.stop_gradient(self.g)"}
{"function_name": "_build_loss", "function_define": "    gcut = tf.stop_gradient(self.g)\n    dcos = dot / mag\n    Am = self.r - self.manager_vf", "piece": "dcos = dot / mag"}
{"function_name": "_get_landmarks", "function_define": "    h, w, c = img.shape\n    if draw:\n    if id == 4 or id == 8:", "piece": "if draw:"}
{"function_name": "count_fingers", "function_define": "    fingers = []\n    fingers.append(1)\n    fingers.append(0)", "piece": "fingers.append(1)"}
{"function_name": "read_text", "function_define": "    path = str(path)\n    with open(path, 'rt') as file:\n    data = file.read()", "piece": "with open(path, 'rt') as file:"}
{"function_name": "test_check", "function_define": "    with pytest.raises(ValueError):\n    record = Record(0, None, b'')\n    record.data = None", "piece": "record = Record(0, None, b'')"}
{"function_name": "test_split", "function_define": "    with pytest.raises(ValueError):\n    list(Record.split(b'', -1))\n    with pytest.raises(ValueError):", "piece": "list(Record.split(b'', -1))"}
{"function_name": "name_colour", "function_define": "    h, s, v = colour\n    min_dist = 1000000000.0\n    name = 'na'", "piece": "min_dist = 1000000000.0"}
{"function_name": "searchSpotify", "function_define": "    names = []\n    ids = []\n    if rType == 'track':", "piece": "ids = []"}
{"function_name": "findSpotifyID", "function_define": "    if firstLookup:\n    if ignoreNF:\n    interactions.clear()", "piece": "if ignoreNF:"}
{"function_name": "scGetTracks", "function_define": "    tracks = []\n    if lType == 'Sondages':\n    pageNumber = 0", "piece": "if lType == 'Sondages':"}
{"function_name": "setMetadata", "function_define": "    self.save()\n    self.save()\n    except KeyError as coverError:", "piece": "self.save()"}
{"function_name": "create_csv_files", "function_define": "    except IOError:\n    except IOError:\n    except IOError:", "piece": "except IOError:"}
{"function_name": "add_novo_admin", "function_define": "    cur = self.conn.cursor()\n    self.conn.commit()\n    except Error as e:", "piece": "self.conn.commit()"}
{"function_name": "add_variavel", "function_define": "    cur = self.conn.cursor()\n    self.conn.commit()\n    except Error as e:", "piece": "self.conn.commit()"}
{"function_name": "add_novo_usuario", "function_define": "    cur = self.conn.cursor()\n    self.conn.commit()\n    except Error as e:", "piece": "self.conn.commit()"}
{"function_name": "check_variavel", "function_define": "    cur = self.conn.cursor()\n    row = cur.fetchall()\n    if row == []:", "piece": "row = cur.fetchall()"}
{"function_name": "check_admin", "function_define": "    cur = self.conn.cursor()\n    row = cur.fetchall()\n    if row == []:", "piece": "row = cur.fetchall()"}
{"function_name": "check_usuario", "function_define": "    cur = self.conn.cursor()\n    row = cur.fetchall()\n    if row == []:", "piece": "row = cur.fetchall()"}
{"function_name": "check_senha", "function_define": "    cur = self.conn.cursor()\n    rows = cur.fetchall()\n    if rows:", "piece": "rows = cur.fetchall()"}
{"function_name": "set_senha", "function_define": "    cur = self.conn.cursor()\n    cur.execute(sql, (senha, login))\n    self.conn.commit()", "piece": "cur.execute(sql, (senha, login))"}
{"function_name": "remove_tag", "function_define": "    cur = self.conn.cursor()\n    cur.execute(sql, (None, login))\n    self.conn.commit()", "piece": "cur.execute(sql, (None, login))"}
{"function_name": "check_permissao", "function_define": "    cur = self.conn.cursor()\n    rows = cur.fetchall()\n    if rows:", "piece": "rows = cur.fetchall()"}
{"function_name": "set_permissao", "function_define": "    cur = self.conn.cursor()\n    cur.execute(sql, (login,))\n    self.conn.commit()", "piece": "cur.execute(sql, (login,))"}
{"function_name": "set_superusuario", "function_define": "    cur = self.conn.cursor()\n    self.conn.commit()\n    except Error as e:", "piece": "self.conn.commit()"}
{"function_name": "set_hora_inicio", "function_define": "    if em_uso:\n    login_em_uso = em_uso[0][1]\n    if self.rpi_online():", "piece": "login_em_uso = em_uso[0][1]"}
{"function_name": "check_comentario", "function_define": "    cur = self.conn.cursor()\n    row = cur.fetchall()\n    if row[0][0] == None:", "piece": "row = cur.fetchall()"}
{"function_name": "set_comentario", "function_define": "    cur = self.conn.cursor()\n    self.conn.commit()\n    except Error as e:", "piece": "self.conn.commit()"}
{"function_name": "check_id_inicio", "function_define": "    cur = self.conn.cursor()\n    rows = cur.fetchall()\n    if rows:", "piece": "rows = cur.fetchall()"}
{"function_name": "set_hora_fim", "function_define": "    if linha_id == []:\n    if self.rpi_online():\n    cur = self.conn.cursor()", "piece": "if self.rpi_online():"}
{"function_name": "force_hora_fim", "function_define": "    inicio = em_uso[0][2][-8:]\n    except Error as e:\n    print(e)", "piece": "except Error as e:"}
{"function_name": "subtrair_tempo", "function_define": "    t1_seg = int(tempo1[-2:])\n    t1_min = int(tempo1[-5:-3])\n    t1_hora = int(tempo1[-8:-6])", "piece": "t1_min = int(tempo1[-5:-3])"}
{"function_name": "check_uso_equip", "function_define": "    cur = self.conn.cursor()\n    dados = cur.fetchall()\n    if dados == []:", "piece": "dados = cur.fetchall()"}
{"function_name": "get_nome_from_id", "function_define": "    cur = self.conn.cursor()\n    rows = cur.fetchall()\n    if rows:", "piece": "rows = cur.fetchall()"}
{"function_name": "compute_delta", "function_define": "    result_with_bump = {}\n    item = raw_material['Item']\n    if item not in shocks:", "piece": "item = raw_material['Item']"}
{"function_name": "transmitter", "function_define": "    print('I am the transmitter')\n    DEFAULT_MSGSIZE = 100\n    DEFAULT_FREQUENCY = 50", "piece": "DEFAULT_MSGSIZE = 100"}
{"function_name": "receiver", "function_define": "    print('I am the receiver')\n    DEFAULT_PORTNR = 10350\n    DEFAULT_MESSAGESIZE = 100", "piece": "DEFAULT_PORTNR = 10350"}
{"function_name": "get_schema", "function_define": "    config = get_config()\n    except KeyError:\n    cursor.execute(query)", "piece": "except KeyError:"}
{"function_name": "test_add_one", "function_define": "    a = AVLTree()\n    a.update({1: 'a'})\n    self.assertEqual(len(a), 1)", "piece": "a.update({1: 'a'})"}
{"function_name": "drawTree", "function_define": "    forward(75)\n    left(20)\n    forward(60)", "piece": "left(20)"}
{"function_name": "addWakeUpPin", "function_define": "    if isinstance(pin, list):\n    self.__wakeUpPins.extend(pin)\n    self.__wakeUpPins.append(pin)", "piece": "self.__wakeUpPins.extend(pin)"}
{"function_name": "test_softclip", "function_define": "    CSTAG = 'cs:Z:=ACGT*ac+gg-cc=T'\n    CIGAR = '2S5M2I2D1M'\n    QUAL = 'AAAA!!!!AA'", "piece": "CIGAR = '2S5M2I2D1M'"}
{"function_name": "test_splicing", "function_define": "    CSTAG = 'cs:Z:=ACGT~gt10~ca=T'\n    CIGAR = '5M10N1M'\n    QUAL = 'AA!!A'", "piece": "CIGAR = '5M10N1M'"}
{"function_name": "test_threshold_2", "function_define": "    CSTAG = 'cs:Z:=ACGT*ac+gg-cc=T'\n    CIGAR = '5M2I2D1M'\n    QUAL = '01!\"#$23'", "piece": "CIGAR = '5M2I2D1M'"}
{"function_name": "new_artist", "function_define": "    artist.save()\n    for genre in genres:\n    artist.genres.add(genre)", "piece": "for genre in genres:"}
{"function_name": "test_syncing", "function_define": "    Test node syncing:\n    root_dir = tempfile.mkdtemp()\n    print('Bob is mining')", "piece": "root_dir = tempfile.mkdtemp()"}
{"function_name": "test_persistence", "function_define": "    Test persistence:\n    root_dir = tempfile.mkdtemp()\n    common.stop_node(bob_node)", "piece": "root_dir = tempfile.mkdtemp()"}
{"function_name": "unregister", "function_define": "    action.uninitialize()\n    edit.uninitialize()\n    fkik.uninitialize()", "piece": "edit.uninitialize()"}
{"function_name": "get_comment", "function_define": "    if self.get_option() == '3':\n    elif self.get_option() == '6':\n    elif self.get_option() == '42':", "piece": "elif self.get_option() == '6':"}
{"function_name": "_make_key_pb", "function_define": "    pb = entity_pb2.Key()\n    if project is not None:\n    if namespace is not None:", "piece": "if project is not None:"}
{"function_name": "download_gsrm", "function_define": "    swfile = download_sw([direc])\n    Outputs:\n    swfile -> [str] Path of sw file", "piece": "Outputs:"}
{"function_name": "download_gia", "function_define": "    swfile = download_sw([direc])\n    Outputs:\n    swfile -> [str] Path of sw file", "piece": "Outputs:"}
{"function_name": "_prep_request", "function_define": "    if comment:\n    url = self._comment_path + path\n    if data:", "piece": "url = self._comment_path + path"}
{"function_name": "log_test", "function_define": "    outputnum = argv[1]\n    f.write('-----\\n')\n    f.write('Time To Get Tiles:\\n')", "piece": "f.write('-----\\n')"}
{"function_name": "main_parallel", "function_define": "    open('output.log', 'w').close()\n    open('average.log', 'w').close()\n    b_total = run_parallel()", "piece": "open('average.log', 'w').close()"}
{"function_name": "testDate", "function_define": "    d = datetime.date(2010, 4, 9)\n    self.assertEqual(d.year, 2010)\n    self.assertEqual(d.month, 4)", "piece": "self.assertEqual(d.year, 2010)"}
{"function_name": "testTime", "function_define": "    self.assertEqual(t.hour, 9)\n    self.assertEqual(t.minute, 45)\n    self.assertEqual(t.second, 11)", "piece": "self.assertEqual(t.minute, 45)"}
{"function_name": "testTimetuple", "function_define": "    self.assertEqual(tm.tm_mon, 4)\n    self.assertEqual(tm.tm_mday, 9)\n    self.assertEqual(tm.tm_hour, 0)", "piece": "self.assertEqual(tm.tm_mday, 9)"}
{"function_name": "testComparision", "function_define": "    d1 = datetime.date(2010, 6, 8)\n    d2 = datetime.date(2010, 6, 8)\n    d3 = datetime.date(2010, 4, 9)", "piece": "d2 = datetime.date(2010, 6, 8)"}
{"function_name": "testOperations", "function_define": "    d1 = datetime.date(2010, 4, 9)\n    d2 = datetime.date(2010, 6, 13)\n    diff = d2 - d1", "piece": "d2 = datetime.date(2010, 6, 13)"}
{"function_name": "contarecuo", "function_define": "    if type(p) != str:\n    for c in p:\n    r += valores[c]", "piece": "for c in p:"}
{"function_name": "embaralhar", "function_define": "    embaralhado = []\n    while len(programas) > 0:\n    s = programas.pop(s)", "piece": "while len(programas) > 0:"}
{"function_name": "seguinte", "function_define": "    if next == None:\n    next.anterior(self, False)\n    except AttributeError:", "piece": "next.anterior(self, False)"}
{"function_name": "permutationIndex", "function_define": "    permutation = 1\n    result = 0\n    smaller = 0", "piece": "result = 0"}
{"function_name": "_init_dataset", "function_define": "    seq_paths = proj_paths\n    raise NotImplementedError\n    base_path = config['data_root']", "piece": "raise NotImplementedError"}
{"function_name": "_format_data", "function_define": "    feat = data['dump_data'][0]\n    kpt = data['dump_data'][1]\n    score = data['dump_data'][2]", "piece": "kpt = data['dump_data'][1]"}
{"function_name": "init_indicators", "function_define": "    if os.path.exists(self.fpath):\n    symbols = self.market.symbols\n    df = pd.DataFrame()", "piece": "symbols = self.market.symbols"}
{"function_name": "lowpass_filter", "function_define": "    nyq = sample_rate / 2.0\n    filtered_s = filtfilt(b, a, s)\n    if rescale:", "piece": "filtered_s = filtfilt(b, a, s)"}
{"function_name": "highpass_filter", "function_define": "    nyq = sample_rate / 2.0\n    filtered_s = filtfilt(b, a, s)\n    if rescale:", "piece": "filtered_s = filtfilt(b, a, s)"}
{"function_name": "set_rparm", "function_define": "    if datatype == 'int':\n    datatype = 'integer'\n    sys.exit()", "piece": "datatype = 'integer'"}
{"function_name": "write_rparm", "function_define": "    if name not in RPARMS:\n    sys.exit()\n    datatype = RPARMS[name].datatype", "piece": "sys.exit()"}
{"function_name": "set_dirs", "function_define": "    MOVEEXEC = True\n    PATHS['BUILD'] = 'SRC'\n    PATHS['PROB'] = os.getcwd()", "piece": "PATHS['BUILD'] = 'SRC'"}
{"function_name": "get_host", "function_define": "    for n in range(len(machines)):\n    except ImportError:\n    continue", "piece": "except ImportError:"}
{"function_name": "setPaused", "function_define": "    pygame.mixer.music.pause()\n    pygame.mixer.music.unpause()\n    self._paused = bool(v)", "piece": "pygame.mixer.music.unpause()"}
{"function_name": "dashboard", "function_define": "    if 'user' in session:\n    if request.method == 'POST':\n    if 'joinRoom' in request.form:", "piece": "if request.method == 'POST':"}
{"function_name": "settings", "function_define": "    if 'user' in session:\n    if request.method == 'POST':\n    email = request.form['email']", "piece": "if request.method == 'POST':"}
{"function_name": "chat_settings", "function_define": "    if 'user' in session:\n    if request.method == 'POST':\n    if 'removeUser' in request.form:", "piece": "if request.method == 'POST':"}
{"function_name": "bit_driver", "function_define": "    This Hamiltonian is defined as:\n    Returns:\n    if b == 0:", "piece": "Returns:"}
{"function_name": "edge_driver", "function_define": "    supplied in ``reward``.\n    Returns:\n    complement is always :math:`1`.", "piece": "Returns:"}
{"function_name": "min_vertex_cover", "function_define": "    for a given graph.\n    Returns:\n    in arXiv:1709.03489.", "piece": "Returns:"}
{"function_name": "max_clique", "function_define": "    for a given graph.\n    Returns:\n    in arXiv:1709.03489.", "piece": "Returns:"}
{"function_name": "max_weight_cycle", "function_define": "    Returns:\n    for more details).\n    from each node in :math:`V`.", "piece": "for more details)."}
{"function_name": "validate_ssh_key", "function_define": "    content = string_or_file\n    content = f.read()\n    if namespace.generate_ssh_keys:", "piece": "content = f.read()"}
{"function_name": "validate_taints", "function_define": "    if taint == '':\n    continue\n    found = regex.findall(taint)", "piece": "continue"}
{"function_name": "validate_label", "function_define": "    if label == '':\n    kv = label.split('=')\n    if len(kv) != 2:", "piece": "kv = label.split('=')"}
{"function_name": "check_risk", "function_define": "    if risk == 'None':\n    elif risk == 'Low':\n    elif risk == 'Medium':", "piece": "elif risk == 'Low':"}
{"function_name": "writeData", "function_define": "    globalTime = self.sim.globalTime\n    timeStep = self.sim.timeStep\n    maxDef = deformation.min(axis=0)", "piece": "timeStep = self.sim.timeStep"}
{"function_name": "saveFluidVTK", "function_define": "    geomFields = self.sim.geomFields\n    elecFields = self.sim.elecFields\n    if self.sim.enableFlowModel:", "piece": "elecFields = self.sim.elecFields"}
{"function_name": "saveBeamVTK", "function_define": "    geomFields = self.sim.geomFields\n    writer.init()\n    writer.finish()", "piece": "writer.init()"}
{"function_name": "autoinit", "function_define": "    if obj is None:\n    if params:\n    elif hasattr(obj, '__slots__'):", "piece": "if params:"}
{"function_name": "autorepr", "function_define": "    inspects __init__\n    if obj is None:\n    discard_first = False", "piece": "if obj is None:"}
{"function_name": "dawaPartition", "function_define": "    epsilon (float): privacy budget\n    ratio (float): budget ratio\n    seed (int): random seed", "piece": "ratio (float): budget ratio"}
{"function_name": "logger_init_main", "function_define": "    if filename is not None:\n    if multiprocessing:\n    logger = logging.getLogger()", "piece": "if multiprocessing:"}
{"function_name": "create_layout", "function_define": "    title_layout.setSpacing(0)\n    button_layout.setSpacing(2)\n    button_layout.addStretch()", "piece": "button_layout.setSpacing(2)"}
{"function_name": "get_path_items", "function_define": "    Parameters:\n    Returns:\n    if cmds.objExists(obj):", "piece": "Returns:"}
{"function_name": "refresh_table", "function_define": "    Main Refresh Function\n    Parameters:\n    common_locations = []", "piece": "Parameters:"}
{"function_name": "insert_item", "function_define": "    self.set_item_value(item, value)\n    self.set_item_attr(item, attr)\n    if icon_path != '':", "piece": "self.set_item_attr(item, attr)"}
{"function_name": "insert_icon", "function_define": "    item = QtWidgets.QWidget()\n    label = QtWidgets.QLabel()\n    label.setScaledContents(True)", "piece": "label = QtWidgets.QLabel()"}
{"function_name": "on_cell_changed", "function_define": "    if column == 1:\n    self.rename(item)\n    if column == 3:", "piece": "self.rename(item)"}
{"function_name": "get_clobber_list", "function_define": "    res = []\n    for regset in v:\n    reg = regset['repr']", "piece": "for regset in v:"}
{"function_name": "fileDialog", "function_define": "    delete = 'del 1.png'\n    os.system(delete)\n    filedir = '%s' % file", "piece": "os.system(delete)"}
{"function_name": "set_statistics", "function_define": "    binding it to the object.\n    for language in languages:\n    if language.name != common.name:", "piece": "for language in languages:"}
{"function_name": "get_pgconn", "function_define": "    psycopg2 database connection\n    conn = pg.connect(**CRED)\n    create(conn)", "piece": "conn = pg.connect(**CRED)"}
{"function_name": "test_sag", "function_define": "    import random\n    random.seed(57)\n    for i in range(100):", "piece": "random.seed(57)"}
{"function_name": "test_intersect", "function_define": "    import random\n    random.seed(577)\n    for i in range(100):", "piece": "random.seed(577)"}
{"function_name": "test_fail", "function_define": "    plane = batoid.Plane()\n    ray = plane.intersect(ray)\n    assert ray.failed", "piece": "ray = plane.intersect(ray)"}
{"function_name": "checkParameters", "function_define": "    p = self.parameters\n    assert p.get('initialized')\n    assert p.has('camera1')", "piece": "assert p.get('initialized')"}
{"function_name": "finalizer", "function_define": "    if not self.message.hasErrors():\n    print('>>', m_error.message)\n    self.message.m_errors = []", "piece": "print('>>', m_error.message)"}
{"function_name": "test_new_bite", "function_define": "    assert promo.new_bite() == 7\n    assert promo.new_bite() == 9\n    assert promo.new_bite() == 11", "piece": "assert promo.new_bite() == 9"}
{"function_name": "add_surface", "function_define": "    attributes as key\n    key_string = ''\n    for attribute in attributes:", "piece": "key_string = ''"}
{"function_name": "get_surface", "function_define": "    attributes as key\n    key_string = ''\n    for attribute in attributes:", "piece": "key_string = ''"}
{"function_name": "filter_qwests", "function_define": "    filteredQwests = []\n    for qwest in qwests:\n    filteredQwests.append(qwest)", "piece": "for qwest in qwests:"}
{"function_name": "download_rename", "function_define": "    Parameters\n    filename : str\n    name of file to download", "piece": "filename : str"}
{"function_name": "compare_tables", "function_define": "    Parameters\n    table_cache : astropy table\n    table_new : astropy table", "piece": "table_cache : astropy table"}
{"function_name": "compare_fits", "function_define": "    Compare two FITS files.\n    Parameters\n    fname_cache : str", "piece": "Parameters"}
{"function_name": "compare_hdf5", "function_define": "    Compare two hdf files.\n    Parameters\n    fname_cache : str", "piece": "Parameters"}
{"function_name": "_drawReciboCaixa", "function_define": "    tpl_data = {}\n    tpl_data['logo_img'] = ''\n    if boletoDados.logo_image:", "piece": "tpl_data['logo_img'] = ''"}
{"function_name": "drawBoleto", "function_define": "    v\u00e1rias p\u00e1ginas, uma por boleto.\n    self._drawHorizontalCorteLine()\n    self._drawHorizontalCorteLine()", "piece": "self._drawHorizontalCorteLine()"}
{"function_name": "_codigoBarraI25", "function_define": "    if len(code) % 2 != 0:\n    code = '0' + code\n    digt1_repr = DIGITS[int(digt1)]", "piece": "code = '0' + code"}
{"function_name": "order_points", "function_define": "    s = pts.sum(axis=1)\n    rect[0] = pts[np.argmin(s)]\n    rect[2] = pts[np.argmax(s)]", "piece": "rect[0] = pts[np.argmin(s)]"}
{"function_name": "draw_circle", "function_define": "    global pts\n    global num\n    global frame", "piece": "global num"}
{"function_name": "points_inverse", "function_define": "    global pts\n    global num\n    global frame", "piece": "global num"}
{"function_name": "ring_level", "function_define": "    max_value = 1\n    level = 0\n    side_len = 1", "piece": "level = 0"}
{"function_name": "twoCitySchedCost", "function_define": "    N = len(costs) // 2\n    for i, c in enumerate(costs):\n    s += c[0] if i < N else c[1]", "piece": "for i, c in enumerate(costs):"}
{"function_name": "Call_myLRmodel", "function_define": "    data.insert(0, 'Ones', 1)\n    cols = data.shape[1]\n    X = data.iloc[:, 0:cols - 1]", "piece": "cols = data.shape[1]"}
{"function_name": "Call_SklearnLR", "function_define": "    from sklearn import linear_model\n    cols = data.shape[1]\n    X_sk = data.iloc[:, 0:cols - 1]", "piece": "cols = data.shape[1]"}
{"function_name": "auth_ext", "function_define": "    r_token = request.args['tk']\n    r = request.form\n    domain = r.get('domain')", "piece": "r = request.form"}
{"function_name": "comix_neo_list", "function_define": "    if active_account is None:\n    if not comics_list:\n    neo_session.close()", "piece": "if not comics_list:"}
{"function_name": "comix_neo_dlall", "function_define": "    if active_account is None:\n    if not comics_list:\n    for comic_raw in comics_list:", "piece": "if not comics_list:"}
{"function_name": "comix_neo_info", "function_define": "    if not comic_id.isdigit():\n    logger.error('Invalid comic id')\n    if active_account is None:", "piece": "logger.error('Invalid comic id')"}
{"function_name": "pso_step", "function_define": "    for particle in self.swarm:\n    self.assess_fitness(particle)\n    self.best = particle", "piece": "self.assess_fitness(particle)"}
{"function_name": "assess_fitness", "function_define": "    graph = []\n    n = len(self.test_set)\n    if self.input_size == 1:", "piece": "n = len(self.test_set)"}
{"function_name": "plot_result", "function_define": "    axes[0].clear()\n    axes[1].clear()\n    axes[2].clear()", "piece": "axes[1].clear()"}
{"function_name": "_user_info", "function_define": "    value = None\n    if dt is not None:\n    self.data[key] = value", "piece": "if dt is not None:"}
{"function_name": "do_image_demo", "function_define": "    init_result = pygame.init()\n    if init_result[1] != 0:\n    width = 800", "piece": "if init_result[1] != 0:"}
{"function_name": "tradeAnalytics", "function_define": "    for trade in self.trades:\n    TradesAnalisys.count += 1\n    closeP = float(trade['bar'][4])", "piece": "TradesAnalisys.count += 1"}
{"function_name": "iterateTrades", "function_define": "    for trade in self.trades:\n    TradesAnalisys.count += 1\n    closeP = float(trade['bar'][4])", "piece": "TradesAnalisys.count += 1"}
{"function_name": "test_exceptions", "function_define": "    remove_output_dirs()\n    runner = CliRunner()\n    assert result.exit_code == 1", "piece": "runner = CliRunner()"}
{"function_name": "log_message", "function_define": "    if s.log_to_file is None:\n    s.log_to_file = ''\n    if header:", "piece": "s.log_to_file = ''"}
{"function_name": "create_file_logs", "function_define": "    combined_list = []\n    for line in log.split('\\r\\n'):\n    if line == '':", "piece": "for line in log.split('\\r\\n'):"}
{"function_name": "get_connections", "function_define": "    conn_list = []\n    for conn in setting:\n    if binding == True:", "piece": "for conn in setting:"}
{"function_name": "_transform", "function_define": "    data = result['data']\n    for index in range(len(data)):\n    if snaking[1] and pos[0] % 2:", "piece": "for index in range(len(data)):"}
{"function_name": "_add_lines", "function_define": "    if self._control_y_label:\n    if self._control_title:\n    run = event.run", "piece": "if self._control_title:"}
{"function_name": "_remove_ys", "function_define": "    if self._control_y_label:\n    if self._control_title:\n    y = event.item", "piece": "if self._control_title:"}
{"function_name": "x_positive", "function_define": "    self._x_positive = value\n    xmin, xmax = self.axes.x_limits\n    self._x_positive = value", "piece": "xmin, xmax = self.axes.x_limits"}
{"function_name": "y_positive", "function_define": "    if value not in ['up', 'down']:\n    self._y_positive = value\n    ymin, ymax = self.axes.y_limits", "piece": "self._y_positive = value"}
{"function_name": "_add_image", "function_define": "    run = event.run\n    md = run.metadata['start']\n    self.axes.artists.append(image)", "piece": "md = run.metadata['start']"}
{"function_name": "tensor2im", "function_define": "    Parameters:\n    image_tensor = input_image.data\n    if image_numpy.shape[0] == 1:", "piece": "image_tensor = input_image.data"}
{"function_name": "diagnose_network", "function_define": "    Parameters:\n    mean = 0.0\n    count = 0", "piece": "mean = 0.0"}
{"function_name": "print_numpy", "function_define": "    Parameters:\n    x = x.astype(np.float64)\n    print('shape,', x.shape)", "piece": "x = x.astype(np.float64)"}
{"function_name": "open_dicom", "function_define": "    path: dicom file path\n    Returns: dicom HU pixel array\n    hu_image[hu_image > 3071] = 3071", "piece": "Returns: dicom HU pixel array"}
{"function_name": "get_RandomCrop", "function_define": "    Returns:\n    w, h = F._get_image_size(img)\n    th, tw = output_size", "piece": "w, h = F._get_image_size(img)"}
{"function_name": "scatter_chunked", "function_define": "    if isinstance(obj, Chunkable):\n    finally:\n    scatter_map = None", "piece": "finally:"}
{"function_name": "createPredTable", "function_define": "    train_coords = train[['X', 'Y']]\n    test_coords = test[['X', 'Y']]\n    for model in dic_\u0177_test.keys():", "piece": "test_coords = test[['X', 'Y']]"}
{"function_name": "build_drop_down", "function_define": "    options = []\n    selected_values = []\n    value = json.dumps(value_dict)", "piece": "selected_values = []"}
{"function_name": "rebuild_graphs", "function_define": "    list_layout = []\n    divs = layouts[2]\n    for coluna in colunas:", "piece": "divs = layouts[2]"}
{"function_name": "get_all_models", "function_define": "    import inspect\n    import sys\n    if names:", "piece": "import sys"}
{"function_name": "outputdata", "function_define": "    label = list(label)\n    with open(outFile, 'w') as f:\n    if ark_format:", "piece": "with open(outFile, 'w') as f:"}
{"function_name": "trainMat", "function_define": "    print('Load train data...')\n    trf = ZCA().fit(trainData)\n    trf.write_matrix(matrixPath)", "piece": "trf = ZCA().fit(trainData)"}
{"function_name": "write_matrix", "function_define": "    with open(filePath, 'w') as f:\n    f.write(' [')\n    for row in self.whiten_:", "piece": "f.write(' [')"}
{"function_name": "countAll", "function_define": "    file = open(_path, 'rb')\n    text = str(file.read())\n    for char in text:", "piece": "text = str(file.read())"}
{"function_name": "create_dir", "function_define": "    if not os.path.exists(dir_path):\n    os.mkdir(dir_path)\n    except OSError:", "piece": "os.mkdir(dir_path)"}
{"function_name": "eig_trajectories", "function_define": "    matrix function A(t)\n    Parameters\n    A : callable", "piece": "Parameters"}
{"function_name": "eig_loops", "function_define": "    Parameters\n    A : callable\n    U : 1d array", "piece": "A : callable"}
{"function_name": "drow_the_lines", "function_define": "    img = np.copy(img)\n    for line in lines:\n    for x1, y1, x2, y2 in line:", "piece": "for line in lines:"}
{"function_name": "insert_multiple", "function_define": "    doc_ids = []\n    for document in documents:\n    doc_id = self._get_next_id()", "piece": "for document in documents:"}
{"function_name": "update_multiple", "function_define": "    if callable(fields):\n    fields(table[doc_id])\n    table[doc_id].update(fields)", "piece": "fields(table[doc_id])"}
{"function_name": "_get_next_id", "function_define": "    if self._next_id is not None:\n    next_id = self._next_id\n    self._next_id = next_id + 1", "piece": "next_id = self._next_id"}
{"function_name": "_read_table", "function_define": "    tables = self._storage.read()\n    if tables is None:\n    table = tables[self.name]", "piece": "if tables is None:"}
{"function_name": "_update_table", "function_define": "    tables = self._storage.read()\n    if tables is None:\n    tables = {}", "piece": "if tables is None:"}
{"function_name": "ms08_067", "function_define": "    starttime = time.time()\n    endtime = time.time() + n\n    delay = n / 10 - 1", "piece": "endtime = time.time() + n"}
{"function_name": "resume_net_param", "function_define": "    new_state_dict = OrderedDict()\n    for k, v in state_dict.items():\n    head = k[:7]", "piece": "for k, v in state_dict.items():"}
{"function_name": "test_str", "function_define": "    survey = Survey()\n    survey.survey_id = '001'\n    survey.title = 'Test Title'", "piece": "survey.survey_id = '001'"}
{"function_name": "test_normal_grad", "function_define": "    x = ti.var(ti.f32)\n    loss = ti.var(ti.f32)\n    ti.root.dense(ti.i, n).place(x)", "piece": "loss = ti.var(ti.f32)"}
{"function_name": "test_stop_grad", "function_define": "    x = ti.var(ti.f32)\n    loss = ti.var(ti.f32)\n    ti.root.dense(ti.i, n).place(x)", "piece": "loss = ti.var(ti.f32)"}
{"function_name": "test_stop_grad2", "function_define": "    x = ti.var(ti.f32)\n    loss = ti.var(ti.f32)\n    ti.root.dense(ti.i, n).place(x)", "piece": "loss = ti.var(ti.f32)"}
{"function_name": "countNodes", "function_define": "    counter = 0\n    current = head\n    while current != None:", "piece": "current = head"}
{"function_name": "pandas_eval", "function_define": "    code = program.code[0]\n    fn = eval(code)\n    df1 = copy.deepcopy(df)", "piece": "fn = eval(code)"}
{"function_name": "load_params", "function_define": "    if thread == 1:\n    elif thread == 8:\n    tidx(r0, sig=ldunifrf(rf0))", "piece": "elif thread == 8:"}
{"function_name": "sgemm_rnn_naive", "function_define": "    thread = 8\n    P = 1024\n    Q = 1024", "piece": "P = 1024"}
{"function_name": "qpu_summation", "function_define": "    g = globals()\n    g[f'reg_{v}'] = rf[i]\n    nop(sig=ldunifrf(reg_length))", "piece": "g[f'reg_{v}'] = rf[i]"}
{"function_name": "summation", "function_define": "    assert length > 0\n    Y.fill(0)\n    assert sum(Y) == 0", "piece": "Y.fill(0)"}
{"function_name": "qpu_scopy", "function_define": "    g = globals()\n    g[f'reg_{v}'] = rf[i]\n    nop(sig=ldunifrf(reg_length))", "piece": "g[f'reg_{v}'] = rf[i]"}
{"function_name": "qpu_memset", "function_define": "    g = globals()\n    g[f'reg_{v}'] = rf[i]\n    nop(sig=ldunifrf(reg_dst))", "piece": "g[f'reg_{v}'] = rf[i]"}
{"function_name": "qpu_clock", "function_define": "    nop(sig=ldunif)\n    nop(sig=ldunifrf(rf0))\n    with loop as l:", "piece": "nop(sig=ldunifrf(rf0))"}
{"function_name": "test_clock", "function_define": "    with Driver() as drv:\n    f = pow(2, 25)\n    code = drv.program(qpu_clock)", "piece": "f = pow(2, 25)"}
{"function_name": "qpu_write_N", "function_define": "    eidx(r0, sig=ldunif)\n    nop(sig=ldunifrf(rf0))\n    shl(r0, r0, 2)", "piece": "nop(sig=ldunifrf(rf0))"}
{"function_name": "test_fore", "function_define": "    bed = ResidueBEDMaker('chrY.gb')\n    print('loaded')\n    be = bed.convert(data)", "piece": "print('loaded')"}
{"function_name": "test_rev", "function_define": "    bed = ResidueBEDMaker('chrY.gb')\n    print('loaded')\n    be = bed.convert(data)", "piece": "print('loaded')"}
{"function_name": "resi_to_chr", "function_define": "    if loc.strand == +1:\n    elif loc.strand == -1:\n    location = feat.location", "piece": "elif loc.strand == -1:"}
{"function_name": "compute_entropy", "function_define": "    motif_matrix = normalized_motif\n    r, c = motif_matrix.shape\n    assert c == 4", "piece": "r, c = motif_matrix.shape"}
{"function_name": "choose_template", "function_define": "    abort(403)\n    except HTTPError as e:\n    flash(e.message)", "piece": "except HTTPError as e:"}
{"function_name": "create_template", "function_define": "    form = CreateTemplateForm()\n    except HTTPError as e:\n    flash(e.message)", "piece": "except HTTPError as e:"}
{"function_name": "audio_samples", "function_define": "    global graph\n    db = dbFS(rms)\n    predictions = []", "piece": "db = dbFS(rms)"}
{"function_name": "read_from_url", "function_define": "    for row in reader:\n    if c > 1:\n    print(row)", "piece": "if c > 1:"}
{"function_name": "early_stop", "function_define": "    stop = False\n    dR, dt = T_delta.magnitude()\n    stop = True", "piece": "dR, dt = T_delta.magnitude()"}
{"function_name": "build_system", "function_define": "    grad = weights[..., None] * grad\n    grad = grad.sum(-2)\n    Hess = Hess.sum(-3)", "piece": "grad = grad.sum(-2)"}
{"function_name": "user_list", "function_define": "    if isinstance(value, list):\n    self._user_list = list()\n    for i in value:", "piece": "self._user_list = list()"}
{"function_name": "send_source_data", "function_define": "    Returns:\n    bool: send data success or not\n    array_bytes = tensor.tobytes()", "piece": "bool: send data success or not"}
{"function_name": "_get_city_pairs", "function_define": "    img_paths = []\n    mask_paths = []\n    for filename in files:", "piece": "mask_paths = []"}
{"function_name": "_class_to_index", "function_define": "    values = np.unique(mask)\n    for value in values:\n    assert value in _mapping", "piece": "for value in values:"}
{"function_name": "get_path_pairs", "function_define": "    img_paths = []\n    mask_paths = []\n    for filename in files:", "piece": "mask_paths = []"}
{"function_name": "evaluate_worker", "function_define": "    self.total_correct += correct\n    self.total_label += labeled\n    self.total_inter += inter", "piece": "self.total_label += labeled"}
{"function_name": "standize", "function_define": "    Parameters\n    Molecule\n    RemoveMap: bool (default: True)", "piece": "Molecule"}
{"function_name": "AtomListToSubMol", "function_define": "    Parameters\n    mol: rdkit.Chem.rdchem.Mol\n    Molecule", "piece": "mol: rdkit.Chem.rdchem.Mol"}
{"function_name": "extractAromatic", "function_define": "    raise WordNotFoundError\n    if not bond:\n    m = mol.__copy__()", "piece": "if not bond:"}
{"function_name": "breakBond", "function_define": "    mol = m.__copy__()\n    idx2map = {}\n    for atom in mol.GetAtoms():", "piece": "idx2map = {}"}
{"function_name": "mol2frag", "function_define": "    and CHs (if returnidx=True)\n    mol = raw_mol.__copy__()\n    CHs = []", "piece": "mol = raw_mol.__copy__()"}
{"function_name": "smiles2mol", "function_define": "    mol = Chem.MolFromSmiles(smiles)\n    if not mol:\n    mol.UpdatePropertyCache()", "piece": "if not mol:"}
{"function_name": "_cleavage1", "function_define": "    for smi in rare:\n    continue\n    num = dictionary[smi]", "piece": "continue"}
{"function_name": "_cleavage2", "function_define": "    for smi in rare:\n    continue\n    num = dictionary[smi]", "piece": "continue"}
{"function_name": "cleavage", "function_define": "    old_size = len(dictionary)\n    white_list = []\n    new_size = len(dictionary)", "piece": "white_list = []"}
{"function_name": "create_label_map", "function_define": "    csv file of volume measurements.\n    import SimpleITK as sitk\n    import os", "piece": "import SimpleITK as sitk"}
{"function_name": "update_model", "function_define": "    index = 0\n    params.data.copy_(new_param)\n    index += params_length", "piece": "params.data.copy_(new_param)"}
{"function_name": "mount_root", "function_define": "    source = os.path.join(root, p)\n    continue\n    os.mkdir(target)", "piece": "continue"}
{"function_name": "mount_var", "function_define": "    os.mkdir(target)\n    self.unmount()\n    self.mounts.append(target)", "piece": "self.unmount()"}
{"function_name": "group_features", "function_define": "    reverse_map = {}\n    for name in feature_map:\n    found = {}", "piece": "for name in feature_map:"}
{"function_name": "_compute_shape", "function_define": "    if isinstance(x, dict):\n    if len(x) == 0:\n    elif len(x) == 1:", "piece": "if len(x) == 0:"}
{"function_name": "_auto_cohorts", "function_define": "    path_names = []\n    name = ''\n    for j in range(len(paths[i])):", "piece": "name = ''"}
{"function_name": "_numpy_func", "function_define": "    new_self = copy.copy(self)\n    axis = kwargs.get('axis', None)\n    if axis == 0:", "piece": "axis = kwargs.get('axis', None)"}
{"function_name": "image_callback", "function_define": "    global cv2_img\n    cv2_img = cv2.flip(cv2_img, 1)\n    for c in contours:", "piece": "cv2_img = cv2.flip(cv2_img, 1)"}
{"function_name": "getLogToUpload", "function_define": "    log = None\n    if self.first:\n    self.first = False", "piece": "if self.first:"}
{"function_name": "handleServerCall", "function_define": "    if 'ack' in payloadDict:\n    mid = payloadDict['ack']\n    os.remove(uploadfiletmp)", "piece": "mid = payloadDict['ack']"}
{"function_name": "context_win", "function_define": "    assert win % 2 == 1\n    assert win >= 1\n    l = list(l)", "piece": "assert win >= 1"}
{"function_name": "read_patch", "function_define": "    patches_lines = []\n    with open(file_path) as f:\n    patch = []", "piece": "with open(file_path) as f:"}
{"function_name": "search_index", "function_define": "    index = int(1000000000)\n    for row in self.index_dict:\n    index = int(row[1])", "piece": "for row in self.index_dict:"}
{"function_name": "float_to_array", "function_define": "    num_upper = 0.0\n    num_lower = 0.0\n    tmp_deg = float(int(num_deg))", "piece": "num_lower = 0.0"}
{"function_name": "_fit_tokenizer", "function_define": "    doc_count = 0\n    wordcount = Counter()\n    ind2word = {}", "piece": "wordcount = Counter()"}
{"function_name": "_max_word_vocab", "function_define": "    if max_words is None:\n    if len(word2ind) < max_words:\n    w2i = defaultdict(dd_def)", "piece": "if len(word2ind) < max_words:"}
{"function_name": "_texts_to_seqs", "function_define": "    if n_texts is None:\n    n_texts = len(texts)\n    toks = tokfunc(txt, max_len)", "piece": "n_texts = len(texts)"}
{"function_name": "fit_tokenizer", "function_define": "    wcs = list(wordcount.items())\n    wcs.sort(key=skey, reverse=True)\n    self.wordcount = wcs", "piece": "wcs.sort(key=skey, reverse=True)"}
{"function_name": "load_tokenizer", "function_define": "    indict = pickle.load(ff)\n    tok = initClass(indict)\n    for k, v in indict.items():", "piece": "tok = initClass(indict)"}
{"function_name": "get_follower_ids", "function_define": "    self.follower_ids = []\n    follower_ids = []\n    while True:", "piece": "follower_ids = []"}
{"function_name": "test_vrt", "function_define": "    zoom = 8\n    mp.batch_process(zoom=zoom)\n    assert vrt.driver == 'VRT'", "piece": "mp.batch_process(zoom=zoom)"}
{"function_name": "cnn_weights_init", "function_define": "    if 'reset_parameters' in dir(m):\n    m.reset_parameters()\n    elif isinstance(m, nn.Linear):", "piece": "m.reset_parameters()"}
{"function_name": "smiles_to_atoms", "function_define": "    ETKDGv2 algorithm\n    which will be added to a core\n    from rdkit import Chem", "piece": "which will be added to a core"}
{"function_name": "array2pb", "function_define": "    Remarks on quantization:\n    blob = jina_pb2.NdArray()\n    x = x.astype(np.float16)", "piece": "blob = jina_pb2.NdArray()"}
{"function_name": "extract_chunks", "function_define": "    chunk_pts = []\n    no_chunk_docs = []\n    bad_chunk_ids = []", "piece": "no_chunk_docs = []"}
{"function_name": "routes2str", "function_define": "    if flag_current:\n    route_str.append('\u2690')\n    from ..helper import colored", "piece": "route_str.append('\u2690')"}
{"function_name": "add_route", "function_define": "    r = evlp.routes.add()\n    r.pod = name\n    r.start_time.GetCurrentTime()", "piece": "r.pod = name"}
{"function_name": "create_te_inst", "function_define": "    te_inst = {}\n    packet.set_output(te_inst)\n    packet.get_bits('format', 2)", "piece": "packet.set_output(te_inst)"}
{"function_name": "get_width", "function_define": "    param = '%s_width_p' % field\n    assert param in self.settings\n    if is_conditional:", "piece": "assert param in self.settings"}
{"function_name": "create_sync", "function_define": "    packet.get_bits('subformat', 2)\n    packet.get_bits('branch', 1)\n    packet.get_bits('branch', 1)", "piece": "packet.get_bits('branch', 1)"}
{"function_name": "create_addr", "function_define": "    packet.get_bits('notify', 1)\n    packet.get_bits('updiscon', 1)\n    packet.get_bits('irreport', 1)", "piece": "packet.get_bits('updiscon', 1)"}
{"function_name": "create_branch", "function_define": "    if branches == 0:\n    if branches == 1:\n    if branches <= 3:", "piece": "if branches == 1:"}
{"function_name": "process_te_inst", "function_define": "    self.process_support(te_inst)\n    self.report_trap(te_inst)\n    if not te_inst.interrupt:", "piece": "self.report_trap(te_inst)"}
{"function_name": "process_support", "function_define": "    and is implementation specific.\n    options = te_inst.ioptions\n    self.start_of_trace = True", "piece": "options = te_inst.ioptions"}
{"function_name": "branch_map_bits", "function_define": "    if branches == 0:\n    if branches == 1:\n    if branches <= 3:", "piece": "if branches == 1:"}
{"function_name": "arrangeStuetz", "function_define": "    for i in range(0, N):\n    x.append(a + i * h)\n    x.append(a + N * h)", "piece": "x.append(a + i * h)"}
{"function_name": "trapezsumme", "function_define": "    result = 0\n    for i in range(1, N):\n    result += math.cos(x[i])", "piece": "for i in range(1, N):"}
{"function_name": "create_new_drone", "function_define": "    global instance_count\n    instance_count += 1\n    home = kwargs.get('home', None)", "piece": "instance_count += 1"}
{"function_name": "remove_drone", "function_define": "    if drone_id not in drone_pool:\n    drone = drone_pool[drone_id]\n    del drone_pool[drone_id]", "piece": "drone = drone_pool[drone_id]"}
{"function_name": "run_mission", "function_define": "    while True:\n    print('target alt reached')\n    print('mission acquired')", "piece": "print('target alt reached')"}
{"function_name": "attach_listener", "function_define": "    attr = kwargs.get('attr', None)\n    fn = kwargs.get('fn', None)\n    attach_fn(attr, fn)", "piece": "fn = kwargs.get('fn', None)"}
{"function_name": "takeoff_drone", "function_define": "    global q\n    drone = drone_pool[drone_id]\n    drone.initialize()", "piece": "drone = drone_pool[drone_id]"}
{"function_name": "land_drone", "function_define": "    drone = drone_pool[drone_id]\n    if not drone.armed:\n    cmds = drone.commands", "piece": "if not drone.armed:"}
{"function_name": "update_location", "function_define": "    wp_len = len(waypoints)\n    if command_len >= wp_len:\n    diff = command_len - wp_len", "piece": "if command_len >= wp_len:"}
{"function_name": "cli_progress_bar", "function_define": "    any other output to stdout.\n    if len(fill_char) != 1:\n    if len(padding_char) != 1:", "piece": "if len(fill_char) != 1:"}
{"function_name": "create_product", "function_define": "    payload = json.loads(data)\n    except TypeError as e:\n    except KeyError as e:", "piece": "except TypeError as e:"}
{"function_name": "update_product", "function_define": "    payload = json.loads(data)\n    if product:\n    if 'name' in payload.keys():", "piece": "if product:"}
{"function_name": "generate_mesh", "function_define": "    of valid value\n    if params.usetolerance == '1':\n    ret = log_file.read()", "piece": "if params.usetolerance == '1':"}
{"function_name": "wrapper_io", "function_define": "    func: A python function to run\n    fd: a file descriptor\n    return_dict['output'] = ''", "piece": "fd: a file descriptor"}
{"function_name": "run_thread", "function_define": "    Redirect its output to fd\n    func: A python function to run\n    fd: a file descriptor", "piece": "func: A python function to run"}
{"function_name": "handle_command", "function_define": "    if command.startswith('namaz'):\n    now = dt.now()\n    for k, v in prayers.items():", "piece": "now = dt.now()"}
{"function_name": "validate_input", "function_define": "    dbkeys = set()\n    data_param_names = set()\n    data_params = 0", "piece": "data_param_names = set()"}
{"function_name": "get_list", "function_define": "    apps = list()\n    size = float()\n    continue", "piece": "size = float()"}
{"function_name": "receive_app", "function_define": "    if not modify:\n    if os.path.isdir(directory):\n    files = os.listdir(directory)", "piece": "if os.path.isdir(directory):"}
{"function_name": "modify_app", "function_define": "    except KeyError:\n    app['publisher'] = user.name\n    print(f'before: {app}')", "piece": "app['publisher'] = user.name"}
{"function_name": "send_receive", "function_define": "    if thread:\n    if mode in ('r', 'receive'):\n    server.bind(('0.0.0.0', 15151))", "piece": "if mode in ('r', 'receive'):"}
{"function_name": "requestdb", "function_define": "    data = []\n    articles = News.query.all()\n    if request.json['id'] != '':", "piece": "articles = News.query.all()"}
{"function_name": "add_record", "function_define": "    if not session:\n    session = db.Session\n    image_record = {}", "piece": "session = db.Session"}
{"function_name": "update_record", "function_define": "    if not session:\n    session = db.Session\n    image_record = {}", "piece": "session = db.Session"}
{"function_name": "get_image_status", "function_define": "    if not session:\n    session = db.Session\n    if result:", "piece": "session = db.Session"}
{"function_name": "get_all_byuserId", "function_define": "    if not session:\n    session = db.Session\n    ret = []", "piece": "session = db.Session"}
{"function_name": "get_all_iter", "function_define": "    if not session:\n    session = db.Session\n    userId = dbobj['userId']", "piece": "session = db.Session"}
{"function_name": "get_byfilter", "function_define": "    if not session:\n    session = db.Session\n    ret = []", "piece": "session = db.Session"}
{"function_name": "test__Color", "function_define": "    col = Color()\n    assert col.r == 0\n    assert col.g == 0", "piece": "assert col.r == 0"}
{"function_name": "test__Canvas", "function_define": "    canv = Canvas(2, 3)\n    assert canv.w == 2\n    assert canv.h == 3", "piece": "assert canv.w == 2"}
{"function_name": "do_chpasswd", "function_define": "    if request.method == 'POST':\n    if password != password_again:\n    flash('Password changed')", "piece": "if password != password_again:"}
{"function_name": "test_uid_model", "function_define": "    my_id = str(uuid.uuid4())\n    mock_uuid.UUID = uuid.UUID\n    mock_uuid.uuid4 = lambda: my_id", "piece": "mock_uuid.UUID = uuid.UUID"}
{"function_name": "test_deserialize", "function_define": "    uid_a = str(uuid.uuid4())\n    uid_b = str(uuid.uuid4())\n    assert str(model_a.uid) == uid_a", "piece": "uid_b = str(uuid.uuid4())"}
{"function_name": "system_message", "function_define": "    if msg.payload == b'ON':\n    WHO.turn_on()\n    WHO.turn_off()", "piece": "WHO.turn_on()"}
{"function_name": "train_classifier", "function_define": "    if mode == 0:\n    elif mode == 1:\n    classifier.fit(X_train, y_train)", "piece": "elif mode == 1:"}
{"function_name": "cleanmanifestos", "function_define": "    manifestos = {}\n    for row in range(len(input)):\n    if row != 0:", "piece": "for row in range(len(input)):"}
{"function_name": "partylist", "function_define": "    parties = []\n    for category in list(input):\n    if category not in DEFAULT_CAT:", "piece": "for category in list(input):"}
{"function_name": "percentage", "function_define": "    for row in range(len(input)):\n    if row != 0:\n    results = {}", "piece": "if row != 0:"}
{"function_name": "eval_hit_rate", "function_define": "    Returns:\n    recall_list = []\n    avg_num_list = []", "piece": "recall_list = []"}
{"function_name": "search_all", "function_define": "    imdbid (str): imdb id #\n    title (str): movie title\n    results = []", "piece": "title (str): movie title"}
{"function_name": "_get_caps", "function_define": "    Returns list of caps\n    xml = Url.open(url).text\n    except Exception as e:", "piece": "xml = Url.open(url).text"}
{"function_name": "do_fetch", "function_define": "    if not mod_info.key:\n    if not mod_info.file:\n    proceed = False", "piece": "if not mod_info.file:"}
{"function_name": "do_install", "function_define": "    if not current_mod:\n    carrot.mods.append(new_mod)\n    new_mod.dependency = False", "piece": "carrot.mods.append(new_mod)"}
{"function_name": "test_hashing", "function_define": "    pk2.transform_compound(l_ala)\n    len_rxns = len(pk2.reactions)\n    assert len_rxns", "piece": "len_rxns = len(pk2.reactions)"}
{"function_name": "test_cli", "function_define": "    os.chdir(data_dir + '/../..')\n    assert not rc\n    purge('tests/', '.*\\\\.tsv$')", "piece": "assert not rc"}
{"function_name": "test_pruning", "function_define": "    pk3.prune_network(ids)\n    pk3.assign_ids()\n    finally:", "piece": "pk3.assign_ids()"}
{"function_name": "html_parser", "function_define": "    quotes = []\n    for data in my_data:\n    span_author.extract()", "piece": "for data in my_data:"}
{"function_name": "myfilter", "function_define": "    if pos < 25:\n    last_25.sort()\n    while len(last_25) > 0:", "piece": "last_25.sort()"}
{"function_name": "aleatorio", "function_define": "    for i in range(N):\n    for j in range(N):\n    k = np.random.random()", "piece": "for j in range(N):"}
{"function_name": "DeltaEAleatorio", "function_define": "    MatRet = Mat.copy()\n    MatPrueba = Mat.copy()\n    ir = int(np.random.random() * N)", "piece": "MatPrueba = Mat.copy()"}
{"function_name": "magnetizacion", "function_define": "    for i in range(N):\n    for j in range(N):\n    M = M + MAT[i, j]", "piece": "for j in range(N):"}
{"function_name": "EMpromedio", "function_define": "    Entot = 0\n    Mtot = 0\n    for h in range(n):", "piece": "Mtot = 0"}
{"function_name": "forGists", "function_define": "    print(gists_url)\n    if gists == 'all':\n    all_gists = []", "piece": "if gists == 'all':"}
{"function_name": "return_bookmarks", "function_define": "    tags = context.args\n    reply = 'Bookmarks:\\n'\n    for bookmark in bookmarks:", "piece": "reply = 'Bookmarks:\\n'"}
{"function_name": "parse_json_body", "function_define": "    body = req.stream.read()\n    if body:\n    except (TypeError, ValueError):", "piece": "if body:"}
{"function_name": "create_scene", "function_define": "    scene = Scene()\n    scene.model = SFModel(0.004)\n    self.scenePool.append(scene)", "piece": "scene.model = SFModel(0.004)"}
{"function_name": "record_event", "function_define": "    conn = self.get_connection()\n    conn.commit()\n    conn.close()", "piece": "conn.commit()"}
{"function_name": "read_history", "function_define": "    conn = self.get_connection()\n    records = cur.fetchmany(500)\n    conn.close()", "piece": "records = cur.fetchmany(500)"}
{"function_name": "_get_py3_cls", "function_define": "    cmodname = '_elementtree'\n    sys.modules[cmodname] = None\n    if cmod is not None:", "piece": "sys.modules[cmodname] = None"}
{"function_name": "_cache_name", "function_define": "    if not isinstance(task, str):\n    if not isinstance(dataset, str):\n    dataset = dataset.__name__", "piece": "if not isinstance(dataset, str):"}
{"function_name": "test_mab_model", "function_define": "    r = initial_rest_request()\n    res = r.json()\n    print(res)", "piece": "res = r.json()"}
{"function_name": "delete_last_node", "function_define": "    if self.last_node is not None:\n    self.start_node = None\n    self.length -= 1", "piece": "self.start_node = None"}
{"function_name": "checking", "function_define": "    if 'username' in session:\n    err = db.login()\n    tabs = db.showaccount(False)", "piece": "err = db.login()"}
{"function_name": "createTree", "function_define": "    tree = tree.split(',')\n    root = constructOne(tree[0])\n    q.append(root)", "piece": "root = constructOne(tree[0])"}
{"function_name": "printNode", "function_define": "    for i in range(indent):\n    sb += '\\t'\n    sb += str(tn.val)", "piece": "sb += '\\t'"}
{"function_name": "printTree", "function_define": "    if not root:\n    printNode(root, indent)\n    printTree(root.left, indent + 1)", "piece": "printNode(root, indent)"}
{"function_name": "create_files", "function_define": "    file_id = generate_uuid()\n    uploaded_at = dt.datetime.now()\n    mkdirs(filepath)", "piece": "uploaded_at = dt.datetime.now()"}
{"function_name": "workspaces", "function_define": "    session = Session()\n    session.close()\n    if file.has_image:", "piece": "session.close()"}
{"function_name": "unignore", "function_define": "    session = Session()\n    file.is_ignored = False\n    session.commit()", "piece": "file.is_ignored = False"}
{"function_name": "find_best", "function_define": "    cur_d = np.inf\n    cur_pos = 0\n    for i in range(n):", "piece": "cur_pos = 0"}
{"function_name": "test_task1", "function_define": "    G, n = build_graph(pairs)\n    res = list(solve(G, n, 0))\n    self.assertListEqual(ans, res)", "piece": "res = list(solve(G, n, 0))"}
{"function_name": "test_task2", "function_define": "    G, n = build_graph(pairs)\n    res = list(solve(G, n, 0))\n    self.assertListEqual(ans, res)", "piece": "res = list(solve(G, n, 0))"}
{"function_name": "decrement_count", "function_define": "    domain.REVIEW_STATES.\n    self.assigned_count -= 1\n    self.completed_count -= 1", "piece": "self.assigned_count -= 1"}
{"function_name": "increment_count", "function_define": "    domain.REVIEW_STATES.\n    self._check_count()\n    self.assigned_count += 1", "piece": "self._check_count()"}
{"function_name": "fieldname_values", "function_define": "    if request.method == 'GET':\n    query = request.GET.get('q')\n    if query:", "piece": "query = request.GET.get('q')"}
{"function_name": "game_update", "function_define": "    ret_value = False\n    self.change_image()\n    if self.moves == 18:", "piece": "self.change_image()"}
{"function_name": "change_image", "function_define": "    if self.type == 1:\n    if self.image == 1:\n    self.image = 2", "piece": "if self.image == 1:"}
{"function_name": "test_get_rooms", "function_define": "    rss.connect()\n    ret = room_utils.get_rooms()\n    rss.disconnect()", "piece": "ret = room_utils.get_rooms()"}
{"function_name": "is_post_request", "function_define": "    if request.method == 'POST':\n    data = request.get_json()\n    self.handle_post_action(data)", "piece": "data = request.get_json()"}
{"function_name": "enable_series", "function_define": "    for s in self.series:\n    if s.name == series_name:\n    s.active = True", "piece": "if s.name == series_name:"}
{"function_name": "disable_series", "function_define": "    for s in self.series:\n    if s.name == series_name:\n    s.active = False", "piece": "if s.name == series_name:"}
{"function_name": "get_range_limits", "function_define": "    if self._range_limits is None:\n    d1 = None\n    d2 = None", "piece": "d1 = None"}
{"function_name": "calculate_range", "function_define": "    limits = self.get_range_limits()\n    d2 = limits['max'].end_of('day')\n    if r_d1:", "piece": "d2 = limits['max'].end_of('day')"}
{"function_name": "validated_input", "function_define": "    while True:\n    if __debug__:\n    if __debug__:", "piece": "if __debug__:"}
{"function_name": "get_fake_treq", "function_define": "    the correct request made.\n    test_case.assertEqual(_url, url)\n    class FakeTreq(object):", "piece": "test_case.assertEqual(_url, url)"}
{"function_name": "which_delimiter", "function_define": "    space = ' '\n    tab = '\\t'\n    comma = ','", "piece": "tab = '\\t'"}
{"function_name": "stage_one", "function_define": "    count = 0\n    row = row.replace('/', '-')\n    row = row.replace('.', '-')", "piece": "row = row.replace('/', '-')"}
{"function_name": "stage_two", "function_define": "    many rows are written.\n    count = 0\n    split_row = row.split('\\t')", "piece": "count = 0"}
{"function_name": "parse_midis", "function_define": "    notes = []\n    print('Parsing %s' % file)\n    midi = None", "piece": "print('Parsing %s' % file)"}
{"function_name": "create_error", "function_define": "    msg = None\n    err_json = r.json()\n    msg = err_json['error']", "piece": "err_json = r.json()"}
{"function_name": "memoryWithTimer", "function_define": "    lenSeq = len(sequence)\n    ev3.Sound.speak('Ready!')\n    score = 0", "piece": "ev3.Sound.speak('Ready!')"}
{"function_name": "getYoungsModulus", "function_define": "    dummyData.dropna(inplace=True)\n    numPts = len(x)\n    minFitLength = 8", "piece": "numPts = len(x)"}
{"function_name": "getFailure", "function_define": "    maxJump = 0\n    indexVal = 0\n    for i in range(2, len(stress)):", "piece": "indexVal = 0"}
{"function_name": "getYieldStress", "function_define": "    x = strain\n    y = stress\n    x_n = x[x > 0]", "piece": "y = stress"}
{"function_name": "remove_viol_seqs", "function_define": "    df: dataframe\n    seq_df = df.copy()\n    seqlen = self.seqconfig.seq_len", "piece": "seq_df = df.copy()"}
{"function_name": "preprocess_df", "function_define": "    df: dataframe\n    prg_counter = 0\n    pbar = tqdm(total=dfg.ngroups)", "piece": "prg_counter = 0"}
{"function_name": "_process_df", "function_define": "    df: pandas.DataFrame\n    tcol: string,\n    target_base: string,", "piece": "tcol: string,"}
{"function_name": "get_customed", "function_define": "    token = ''\n    if request.GET or request.POST:\n    if request.GET:", "piece": "if request.GET or request.POST:"}
{"function_name": "_dict_rec_get", "function_define": "    Simple get:\n    Get recursive:\n    assert isinstance(path, list)", "piece": "Get recursive:"}
{"function_name": "setup_suite", "function_define": "    self.passphrase = '<PASSWORD>'\n    self.time = '0xffff'\n    self.value = '0xffff'", "piece": "self.time = '0xffff'"}
{"function_name": "query_lod", "function_define": "    if filter is not None:\n    if sort_keys is not None:\n    lod = list(lod)", "piece": "if sort_keys is not None:"}
{"function_name": "lookup_lod", "function_define": "    pprint(lookup_lod(lod, Row=1))\n    for row in lod:\n    for k, v in kw.items():", "piece": "for row in lod:"}
{"function_name": "draw_outline", "function_define": "    contours = self.find_contours()\n    output = self.image.copy()\n    for c in contours:", "piece": "output = self.image.copy()"}
{"function_name": "no_of_contours", "function_define": "    contours = self.find_contours()\n    output = self.image.copy()\n    cv2.imshow('Contours', output)", "piece": "output = self.image.copy()"}
{"function_name": "bitwise_and", "function_define": "    thresh = self.threshold()\n    mask = thresh.copy()\n    cv2.imshow('bitwise', output)", "piece": "mask = thresh.copy()"}
{"function_name": "load_meta_data", "function_define": "    json_dict = json.load(json_file)\n    column_list = []\n    column_list.append(column)", "piece": "column_list = []"}
{"function_name": "load_csv_data", "function_define": "    nan_fraction_accepted = 0.1\n    drop_col_indices = []\n    if num_nans > num_nans_accepted:", "piece": "drop_col_indices = []"}
{"function_name": "create_data", "function_define": "    num_features = 3\n    num_targets = 1\n    features = []", "piece": "num_targets = 1"}
{"function_name": "plot_dataframe", "function_define": "    num_features = features.shape[1]\n    num_targets = targets.shape[1]\n    plot_height = 2.5", "piece": "num_targets = targets.shape[1]"}
{"function_name": "or_count", "function_define": "    groupName = ''\n    groupName = textSelection[0]\n    textSelection = textSelection[1]", "piece": "groupName = textSelection[0]"}
{"function_name": "lookup_or", "function_define": "    pair1 = (group, group2)\n    pair = str(pair1)\n    pair2 = (group2, group)", "piece": "pair = str(pair1)"}
{"function_name": "write_to_file_or", "function_define": "    if self.IDsOrNot == 'y':\n    output.write(str(group) + ',')\n    output.write(str(group) + '\\n')", "piece": "output.write(str(group) + ',')"}
{"function_name": "get_output_dir", "function_define": "    if component == 'ffmpeg':\n    output_dir = 'out'\n    output_dir += '_component'", "piece": "output_dir = 'out'"}
{"function_name": "prep_input", "function_define": "    bag_list = {}\n    for entry_data in input_data:\n    bag = Bag()", "piece": "for entry_data in input_data:"}
{"function_name": "test_bags", "function_define": "    a = Bag()\n    a.color = 'a'\n    b = Bag()", "piece": "a.color = 'a'"}
{"function_name": "total_bags", "function_define": "    bags = {}\n    for bag in self.connected_bags:\n    total_bags = bag.total_bags", "piece": "for bag in self.connected_bags:"}
{"function_name": "format_media", "function_define": "    substitutions = dict(medium)\n    substitutions['index'] = index\n    except KeyError:", "piece": "substitutions['index'] = index"}
{"function_name": "open_custom", "function_define": "    csvreader = csv.reader(data_csv)\n    rows = []\n    for row in csvreader:", "piece": "rows = []"}
{"function_name": "make_plots", "function_define": "    if block == 'split':\n    period = 0.05\n    period = 0.05", "piece": "period = 0.05"}
{"function_name": "instatv1", "function_define": "    if json_data:\n    json_data_ = json_data\n    if True:", "piece": "json_data_ = json_data"}
{"function_name": "should_not_see", "function_define": "    if '$url' in text:\n    old_url = 'URL'\n    temp = Template(text)", "piece": "old_url = 'URL'"}
{"function_name": "apply_rules", "function_define": "    link = self.first\n    while link.next is not None:\n    future_link = link.next", "piece": "while link.next is not None:"}
{"function_name": "fetch_chain", "function_define": "    chain = ''\n    if self.first is not None:\n    link: Link = self.first", "piece": "if self.first is not None:"}
{"function_name": "loadSheet", "function_define": "    url = api + params\n    response = requests.get(url)\n    response.encoding = 'utf-8'", "piece": "response = requests.get(url)"}
{"function_name": "tap_uos_net", "function_define": "    board_name = names['board_name']\n    if not mount_flag:\n    continue", "piece": "if not mount_flag:"}
{"function_name": "off_line_cpus", "function_define": "    if not pcpu_id_list:\n    if not pcpu_id_list:\n    key = 'scenario config error'", "piece": "if not pcpu_id_list:"}
{"function_name": "run_container", "function_define": "    if 'nuc' in board_name:\n    board_name = 'nuc'\n    print('{', file=config)", "piece": "board_name = 'nuc'"}
{"function_name": "boot_image_type", "function_define": "    print('else', file=config)\n    print('fi', file=config)\n    print('', file=config)", "piece": "print('fi', file=config)"}
{"function_name": "gvt_arg_set", "function_define": "    gvt_args = dm['gvt_args'][vmid]\n    bus = int(gpu_bdf[0:2], 16)\n    dev = int(gpu_bdf[3:5], 16)", "piece": "bus = int(gpu_bdf[0:2], 16)"}
{"function_name": "tap_network", "function_define": "    none_i = 0\n    for net in tap_net_list:\n    if net == None:", "piece": "for net in tap_net_list:"}
{"function_name": "uos_launch", "function_define": "    board_name = names['board_name']\n    if 'nuc' in board_name:\n    board_name = 'nuc'", "piece": "if 'nuc' in board_name:"}
{"function_name": "launch_end", "function_define": "    board_name = names['board_name']\n    print('debug=0', file=config)\n    print('', file=config)", "piece": "print('debug=0', file=config)"}
{"function_name": "set_dm_pt", "function_define": "    sub_attr = ''\n    if uos_type == 'WINDOWS':\n    sub_attr = ',d3hot_reset'", "piece": "if uos_type == 'WINDOWS':"}
{"function_name": "virtio_args_set", "function_define": "    if input_val:\n    blk = virt_io['block'][vmid][i]\n    if not mount_flag:", "piece": "blk = virt_io['block'][vmid][i]"}
{"function_name": "dm_arg_set", "function_define": "    board_name = names['board_name']\n    if virt_io:\n    if uos_type == 'WINDOWS':", "piece": "if virt_io:"}
{"function_name": "pseudocolor", "function_define": "    mask        = binary mask\n    cmap        = colormap\n    Returns:", "piece": "cmap        = colormap"}
{"function_name": "_copy_files", "function_define": "    if recursive:\n    shutil.copytree(source, target)\n    source_files = listdir(source)", "piece": "shutil.copytree(source, target)"}
{"function_name": "_clean_value", "function_define": "    if isinstance(v, str):\n    elif isinstance(v, list):\n    if isinstance(v[0], str):", "piece": "elif isinstance(v, list):"}
{"function_name": "create_copy", "function_define": "    configuration files and binary.\n    user's current copy.\n    if self.strict:", "piece": "user's current copy."}
{"function_name": "_check_failed", "function_define": "    if self.strict:\n    raise ValueError(msg)\n    warnings.warn(msg)", "piece": "raise ValueError(msg)"}
{"function_name": "read_parameters", "function_define": "    Read a parameters.out file\n    if not exists(param_fname):\n    self.config = parameters", "piece": "if not exists(param_fname):"}
{"function_name": "_fix_legacy_keys", "function_define": "    match the new names.\n    Parameters\n    conf :obj:`f90nml.Namelist`", "piece": "Parameters"}
{"function_name": "set_zero_config", "function_define": "    may behave unepexctedly.\n    no_timesteps = len(time)\n    co2_conc_pi = 722", "piece": "no_timesteps = len(time)"}
{"function_name": "set_years", "function_define": "    Parameters\n    startyear : int\n    Start year of the simulation", "piece": "startyear : int"}
{"function_name": "_deep_update", "function_define": "    for k, v in o.items():\n    if isinstance(v, dict):\n    b.update(o)", "piece": "if isinstance(v, dict):"}
{"function_name": "plot_all_points", "function_define": "    if len(clustered) > 0:\n    plt.style.use(u'ggplot')\n    ax1.set_xlabel('Longitud')", "piece": "plt.style.use(u'ggplot')"}
{"function_name": "getByPath", "function_define": "    paths = path.split('.')\n    for path in paths:\n    obj = obj.get(path, None)", "piece": "for path in paths:"}
{"function_name": "dic2String", "function_define": "    rs = ['{']\n    for kv in obj.items():\n    rs.append(',')", "piece": "for kv in obj.items():"}
{"function_name": "parseBody", "function_define": "    if refPath == None:\n    if refPath != None:\n    if refData != None:", "piece": "if refPath != None:"}
{"function_name": "writeRow", "function_define": "    i = str(i)\n    ws['A' + i] = func['case_id']\n    ws['B' + i] = func['title']", "piece": "ws['A' + i] = func['case_id']"}
{"function_name": "writeCaseClass", "function_define": "    if isExist:\n    f.write('import os\\n')\n    f.write('import allure\\n')", "piece": "f.write('import os\\n')"}
{"function_name": "writeCase", "function_define": "    if isExist:\n    wb = openpyxl.Workbook()\n    ws = wb.active", "piece": "wb = openpyxl.Workbook()"}
{"function_name": "_init_subclass", "function_define": "    sub-classed.\n    if outer_cls_name is not None:\n    if cls.json_key_to_field:", "piece": "if outer_cls_name is not None:"}
{"function_name": "_as_enum_safe", "function_define": "    a :type:`base_type`.\n    except ParseError as e:\n    e.field_name = name", "piece": "except ParseError as e:"}
{"function_name": "calc_ratio", "function_define": "    c, d = (1, 1)\n    while True:\n    phi = d / c", "piece": "while True:"}
{"function_name": "drop_image", "function_define": "    if form.is_valid():\n    filename = pretty_name(filename)\n    image = form.save(commit=False)", "piece": "filename = pretty_name(filename)"}
{"function_name": "preOrder_1", "function_define": "    if root is not None:\n    stackNode = []\n    node = self.root", "piece": "stackNode = []"}
{"function_name": "preOrder_2", "function_define": "    if self.root is not None:\n    stackNode = []\n    node = self.root", "piece": "stackNode = []"}
{"function_name": "midOrder", "function_define": "    if self.root is not None:\n    stack_node = []\n    second = []", "piece": "stack_node = []"}
{"function_name": "aftOrder", "function_define": "    if not self.root:\n    stackNode = []\n    flag = []", "piece": "stackNode = []"}
{"function_name": "BFSOrder", "function_define": "    if not self.root:\n    stack = []\n    stack.append(self.root)", "piece": "stack = []"}
{"function_name": "make2Dcolormap", "function_define": "    colormap[1, 1] = colors[0]\n    colormap[0, 1] = colors[1]\n    colormap[0, 0] = colors[2]", "piece": "colormap[0, 1] = colors[1]"}
{"function_name": "forward_trace", "function_define": "    P (np.array 4xN): Ray origins\n    V (np.array 4xN): Ray directions\n    Returns:", "piece": "V (np.array 4xN): Ray directions"}
{"function_name": "check_url", "function_define": "    url = str(url)\n    p = re.compile(regex)\n    if url == None:", "piece": "p = re.compile(regex)"}
{"function_name": "choose_subaction", "function_define": "    options and return False\n    Available options to execute.\n    option (key) -> function (value)", "piece": "Available options to execute."}
{"function_name": "string_to_dict", "function_define": "    Parse a string into a dictionary\n    if params_string == '':\n    import json", "piece": "if params_string == '':"}
{"function_name": "edit_file", "function_define": "    Open a file for editing.\n    import os\n    from subprocess import call", "piece": "import os"}
{"function_name": "print_options", "function_define": "    if options is None:\n    options = {}\n    for o in options:", "piece": "options = {}"}
{"function_name": "round_time", "function_define": "    Function found from:\n    import datetime\n    if date_delta is None:", "piece": "import datetime"}
{"function_name": "timed_input", "function_define": "    import signal\n    class TimeoutExpired(Exception):\n    raise TimeoutExpired", "piece": "class TimeoutExpired(Exception):"}
{"function_name": "retry_connect", "function_define": "    from functools import partial\n    import time\n    if connector is None:", "piece": "import time"}
{"function_name": "df_from_literal", "function_define": "    val = literal\n    if isinstance(literal, str):\n    if debug:", "piece": "if isinstance(literal, str):"}
{"function_name": "filter_unseen_df", "function_define": "    if old_df is None:\n    old_cols = list(old_df.columns)\n    new_df = new_df[old_cols]", "piece": "old_cols = list(old_df.columns)"}
{"function_name": "change_dict", "function_define": "    for k, v in d.items():\n    if isinstance(v, dict):\n    change_dict(v, func)", "piece": "if isinstance(v, dict):"}
{"function_name": "string_width", "function_define": "    found_newline = False\n    width = 0\n    for c in reversed(string):", "piece": "width = 0"}
{"function_name": "filter_keywords", "function_define": "    Filter out unsupported keywords.\n    The function to inspect.\n    import inspect", "piece": "The function to inspect."}
{"function_name": "async_wrap", "function_define": "    Found at\n    import asyncio\n    if loop is None:", "piece": "import asyncio"}
{"function_name": "items_str", "function_define": "    If `True`, wrap items in quotes.\n    Defaults to `True`.\n    Defaults to \"'\" (single quote).", "piece": "Defaults to `True`."}
{"function_name": "run_submission", "function_define": "    if data['enable_auth']:\n    username = data['username']\n    password = data['password']", "piece": "username = data['username']"}
{"function_name": "stop_submission", "function_define": "    raise ex.BadRequestException()\n    username = data['username']\n    password = data['password']", "piece": "username = data['username']"}
{"function_name": "list_submissions", "function_define": "    submissions_status = {}\n    for id in submissions.keys():\n    this_status = {}", "piece": "for id in submissions.keys():"}
{"function_name": "submission_log", "function_define": "    API_LOG.log('Wrong request')\n    raise ex.BadRequestException()\n    exec_log.close()", "piece": "raise ex.BadRequestException()"}
{"function_name": "validate_guid", "function_define": "    uuid.UUID(str(guid), version=4)\n    except ValueError:\n    raise AssertionError(msg)", "piece": "except ValueError:"}
{"function_name": "batch_to_vectors", "function_define": "    x: stack of RDMs\n    Returns:\n    if x.ndim == 2:", "piece": "Returns:"}
{"function_name": "load_library", "function_define": "    if '1.6' in numpy.__version__:\n    so_ext = '.so'\n    so_ext = '.dylib'", "piece": "so_ext = '.so'"}
{"function_name": "remove_dup", "function_define": "    if test is None:\n    if from_end:\n    lst = list(reversed(lst))", "piece": "if from_end:"}
{"function_name": "overwrite_mro", "function_define": "    class HackMRO(type):\n    HackMRO.mro = lambda self: mro\n    if sys.version_info < (3,):", "piece": "HackMRO.mro = lambda self: mro"}
{"function_name": "def_async_fn", "function_define": "    if self.handler is not None:\n    self.handler.join()\n    self.handler.start()", "piece": "self.handler.join()"}
{"function_name": "async_fn", "function_define": "    if self.handler is not None:\n    self.handler.join()\n    self.handler.start()", "piece": "self.handler.join()"}
{"function_name": "guess_mime_type", "function_define": "    guess = _guess_mime_type(url)\n    if guess == (None, None):\n    if url.endswith('.mobi'):", "piece": "if guess == (None, None):"}
{"function_name": "parsePathways", "function_define": "    entities = set()\n    url = config['linkout_url']\n    organism = 9606", "piece": "url = config['linkout_url']"}
{"function_name": "_build_graph", "function_define": "    hid3_size = 5\n    self.out = tf.squeeze(out)\n    scope.reuse_variables()", "piece": "self.out = tf.squeeze(out)"}
{"function_name": "fit_for_global", "function_define": "    x: features\n    y: target\n    y_hat = self.predict(sess, x)", "piece": "y: target"}
{"function_name": "sync_from", "function_define": "    if shared_nn != None:\n    src_vars = shared_nn.get_vars()\n    dst_vars = self.get_vars()", "piece": "src_vars = shared_nn.get_vars()"}
{"function_name": "run_calibrator", "function_define": "    model_path = Path(model_dir)\n    raise ValueError(err_msg)\n    if utils.is_distributed():", "piece": "raise ValueError(err_msg)"}
{"function_name": "dumpLogCat", "function_define": "    adbID = '192.168.58.101:5555'\n    adbPath = getADBPath()\n    prettyPrint('Dumping logcat')", "piece": "adbPath = getADBPath()"}
{"function_name": "get_report_info", "function_define": "    r = requests.get(report_url)\n    if r.status_code != 200:\n    if now_date != last_update_date:", "piece": "if r.status_code != 200:"}
{"function_name": "search_page", "function_define": "    msg_list = []\n    msg_list_len = len(msg_list)\n    r = requests.get(page_url)", "piece": "msg_list_len = len(msg_list)"}
{"function_name": "AddEntry", "function_define": "    header()\n    PassGen(user_name, acc, uN, pre)\n    print('Done!')", "piece": "PassGen(user_name, acc, uN, pre)"}
{"function_name": "PasswordSearch", "function_define": "    header()\n    with open(location) as csv_file:\n    next(csv_reader)", "piece": "with open(location) as csv_file:"}
{"function_name": "Clipboard", "function_define": "    os.system(command)\n    time.sleep(1)\n    time.sleep(1)", "piece": "time.sleep(1)"}
{"function_name": "MainMenu", "function_define": "    header()\n    if menu == '1':\n    AddEntry(user_name, pre)", "piece": "if menu == '1':"}
{"function_name": "Register", "function_define": "    header()\n    if user_name == '':\n    Register(pre)", "piece": "if user_name == '':"}
{"function_name": "get_dataset_list", "function_define": "    if self.dataset_list is None:\n    request_dict = {}\n    self.dataset_list = result", "piece": "request_dict = {}"}
{"function_name": "get_vms_look_for", "function_define": "    if servername and serverid:\n    if prefix and hostls:\n    if hostls:", "piece": "if prefix and hostls:"}
{"function_name": "defangIPaddr", "function_define": "    strlist = list(address)\n    defang = []\n    while i < len(strlist):", "piece": "defang = []"}
{"function_name": "find_update_col", "function_define": "    if 'log_date' in cols:\n    if 'last_update' in cols:\n    if 'log_time' in cols:", "piece": "if 'last_update' in cols:"}
{"function_name": "make_src", "function_define": "    cols = self.pre_process(cols)\n    print('cols')\n    print(cols)", "piece": "print('cols')"}
{"function_name": "make_init_src", "function_define": "    to_file = ''\n    fp.write(to_file)\n    fp.close()", "piece": "fp.write(to_file)"}
{"function_name": "make_include_src", "function_define": "    rep_str = ''\n    fp.write(to_file)\n    fp.close()", "piece": "fp.write(to_file)"}
{"function_name": "make_class_name", "function_define": "    strs = str.split('_')\n    print('make_class_name:' + str)\n    print(strs)", "piece": "print('make_class_name:' + str)"}
{"function_name": "readDSParameters", "function_define": "    if self.confdict.has_key(drv):\n    elif self.userconfig:\n    if drv == 'Misc':", "piece": "elif self.userconfig:"}
{"function_name": "test_coins", "function_define": "    capturedOutput = io.StringIO()\n    sys.stdout = capturedOutput\n    coinpaprika_view.coins([])", "piece": "sys.stdout = capturedOutput"}
{"function_name": "test_contracts", "function_define": "    capturedOutput = io.StringIO()\n    sys.stdout = capturedOutput\n    coinpaprika_view.contracts([])", "piece": "sys.stdout = capturedOutput"}
{"function_name": "test_twitter", "function_define": "    capturedOutput = io.StringIO()\n    sys.stdout = capturedOutput\n    sys.stdout = sys.__stdout__", "piece": "sys.stdout = capturedOutput"}
{"function_name": "test_exchanges", "function_define": "    capturedOutput = io.StringIO()\n    sys.stdout = capturedOutput\n    sys.stdout = sys.__stdout__", "piece": "sys.stdout = capturedOutput"}
{"function_name": "test_markets", "function_define": "    capturedOutput = io.StringIO()\n    sys.stdout = capturedOutput\n    sys.stdout = sys.__stdout__", "piece": "sys.stdout = capturedOutput"}
{"function_name": "test_chart", "function_define": "    capturedOutput = io.StringIO()\n    sys.stdout = capturedOutput\n    sys.stdout = sys.__stdout__", "piece": "sys.stdout = capturedOutput"}
{"function_name": "price_supply", "function_define": "    capturedOutput = io.StringIO()\n    sys.stdout = capturedOutput\n    sys.stdout = sys.__stdout__", "piece": "sys.stdout = capturedOutput"}
{"function_name": "create_transform", "function_define": "    translation.vector = vector\n    translation.ui_value = ui_value\n    translation.units = units", "piece": "translation.ui_value = ui_value"}
{"function_name": "AllQuestionAI", "function_define": "    cursor = conn.cursor()\n    rows = cursor.fetchall()\n    if rows:", "piece": "rows = cursor.fetchall()"}
{"function_name": "questionAI", "function_define": "    cursor = conn.cursor()\n    rows = cursor.fetchall()\n    if rows:", "piece": "rows = cursor.fetchall()"}
{"function_name": "tell_question", "function_define": "    synthetize_voice(question[0])\n    for i in range(1, 5):\n    num_prop = ''.join(num_prop)", "piece": "for i in range(1, 5):"}
{"function_name": "_readMoreXML", "function_define": "    Legacy passthrough.\n    if subType == 'GeneralPlot':\n    self._plotter.handleInput(xml)", "piece": "if subType == 'GeneralPlot':"}
{"function_name": "fill_holes", "function_define": "    self.map_attributes_to_num()\n    attr_name = attribute[0]\n    attr_values = attribute[1]", "piece": "attr_name = attribute[0]"}
{"function_name": "get_splits", "function_define": "    should_split = results[0]\n    lower_range = results[1]\n    upper_range = results[2]", "piece": "lower_range = results[1]"}
{"function_name": "find_best_split", "function_define": "    if lower_index == upper_index:\n    ideal_split = split\n    ideal_entropy = split_entropy", "piece": "ideal_split = split"}
{"function_name": "group_rows", "function_define": "    if taxon_id != 'other':\n    imported_rows.append(row)\n    row_rank = None", "piece": "imported_rows.append(row)"}
{"function_name": "index_file", "function_define": "    header = next(rows)\n    header = None\n    with_ids = defaultdict(list)", "piece": "header = None"}
{"function_name": "AddWidget", "function_define": "    Returns:\n    label = QLabel(name)\n    self._config[name] = control", "piece": "label = QLabel(name)"}
{"function_name": "GetConfig", "function_define": "    Returns:\n    config = {}\n    for key in self._config:", "piece": "config = {}"}
{"function_name": "SetConfig", "function_define": "    be respected.\n    Returns:\n    for key in config:", "piece": "Returns:"}
{"function_name": "SelectCoarse", "function_define": "    month = algorithm.Time.month\n    if month == self.lastMonth:\n    self.lastMonth = month", "piece": "if month == self.lastMonth:"}
{"function_name": "SelectFine", "function_define": "    count = len(filteredFine)\n    if count == 0:\n    myDict = dict()", "piece": "if count == 0:"}
{"function_name": "update_rot", "function_define": "    if USE_ROTOZOOM:\n    if update_rect:\n    self.update_rect()", "piece": "if update_rect:"}
{"function_name": "update_event", "function_define": "    self.firing = True\n    self.firing = False\n    if event.type == pygame.KEYDOWN:", "piece": "self.firing = False"}
{"function_name": "check_bounds", "function_define": "    self.update_rect()\n    self.is_climbing = True\n    self.rect.left = 0", "piece": "self.is_climbing = True"}
{"function_name": "question_2", "function_define": "    years_ = set(df['Year'])\n    data_ = []\n    for yr in years_:", "piece": "data_ = []"}
{"function_name": "question_3", "function_define": "    countries_ = set(df['Country'])\n    months_ = list(range(1, 13))\n    data_ = []", "piece": "months_ = list(range(1, 13))"}
{"function_name": "question_4", "function_define": "    loss_ = []\n    for k in range(1, 11):\n    pf = PolynomialFitting(k)", "piece": "for k in range(1, 11):"}
{"function_name": "question_5", "function_define": "    pf = PolynomialFitting(5)\n    pf.fit(train_X, train_y)\n    loss_ = []", "piece": "pf.fit(train_X, train_y)"}
{"function_name": "find_packages", "function_define": "    ret = []\n    if '__init__.py' in files:\n    pkg_name = root[6:]", "piece": "if '__init__.py' in files:"}
{"function_name": "test_posts_atom", "function_define": "    assert 200 == rv.status_code\n    assert 200 == rv.status_code\n    assert 200 == rv.status_code", "piece": "assert 200 == rv.status_code"}
{"function_name": "test_tag_cloud", "function_define": "    rv = client.get('/tags')\n    assert 200 == rv.status_code\n    print(content)", "piece": "assert 200 == rv.status_code"}
{"function_name": "conStats", "function_define": "    con = psutil.net_connections()\n    stable = 0\n    listen = 0", "piece": "stable = 0"}
{"function_name": "test_update_user", "function_define": "    user = user.item[0]\n    assert user.ANRED == 'Herr'\n    assert user.NAME1 == 'Klinger1'", "piece": "assert user.ANRED == 'Herr'"}
{"function_name": "loopAppend", "function_define": "    for _elm in elm:\n    for e in _elm:\n    ename = e.attrib['n']", "piece": "for e in _elm:"}
{"function_name": "generateHeaders", "function_define": "    actlst = [[] for x in range(10)]\n    for i in range(10):\n    prilst = []", "piece": "for i in range(10):"}
{"function_name": "compute_partials", "function_define": "    Parameters\n    inputs : Vector\n    partials : Jacobian", "piece": "inputs : Vector"}
{"function_name": "create_character", "function_define": "    if form.is_valid():\n    char = form.save(commit=False)\n    char.adventure = adventure", "piece": "char = form.save(commit=False)"}
{"function_name": "test_dict_simple", "function_define": "    original = dict(x=1, y=2)\n    self.assertEqual(1, config['x'])\n    self.assertEqual(2, config['y'])", "piece": "self.assertEqual(1, config['x'])"}
{"function_name": "process_df", "function_define": "    df: pd.DataFrame\n    df.loc[lat_flip, 'lat'] *= -1\n    df.loc[lon_flip, 'lon'] *= -1", "piece": "df.loc[lat_flip, 'lat'] *= -1"}
{"function_name": "isNumber", "function_define": "    for c in s:\n    if '0' <= c <= '9':\n    elif c in '+-':", "piece": "if '0' <= c <= '9':"}
{"function_name": "list_feeds", "function_define": "    Returns:\n    if response.status_code >= 400:\n    print(response.text)", "piece": "if response.status_code >= 400:"}
{"function_name": "_in_graph_apply", "function_define": "    Returns:\n    GraphItem\n    new_graph_item = graph_item", "piece": "GraphItem"}
{"function_name": "download_aws", "function_define": "    manifest = None\n    with open(temp.name, 'rb') as f:\n    manifest = json.load(f)", "piece": "with open(temp.name, 'rb') as f:"}
{"function_name": "_render_language", "function_define": "    index = util.get_index()\n    if language == 'random':\n    records = index.get(language)", "piece": "if language == 'random':"}
{"function_name": "book_results", "function_define": "    if not comment_id:\n    books = Book.query.all()\n    table = Comments(books)", "piece": "books = Book.query.all()"}
{"function_name": "mwem_step", "function_define": "    global total_epsilon\n    query, real_answer = e\n    lower, upper = query", "piece": "query, real_answer = e"}
{"function_name": "check_forward", "function_define": "    theta = cuda.to_cpu(theta)\n    B = theta.shape[0]\n    H, W = output_shape", "piece": "B = theta.shape[0]"}
{"function_name": "test_epoch_BBO", "function_define": "    pop_size = 50\n    p_m = 0.01\n    elites = 2", "piece": "p_m = 0.01"}
{"function_name": "test_p_m_BBO", "function_define": "    epoch = 10\n    pop_size = 50\n    elites = 2", "piece": "pop_size = 50"}
{"function_name": "test_elites_BBO", "function_define": "    epoch = 10\n    pop_size = 50\n    p_m = 0.01", "piece": "pop_size = 50"}
{"function_name": "random_flip_2d", "function_define": "    if random.random() <= p:\n    if 0 in list_axis:\n    if random.random() <= 0.5:", "piece": "if 0 in list_axis:"}
{"function_name": "eval_pred", "function_define": "    if row[col] == row['y']:\n    if row['y'] == 1:\n    if row['y'] == 1:", "piece": "if row['y'] == 1:"}
{"function_name": "eval_mpc_raw", "function_define": "    if row['y'] == 1:\n    if row['mpc'] >= float(2):\n    if row['mpc'] >= float(2):", "piece": "if row['mpc'] >= float(2):"}
{"function_name": "lang_init", "function_define": "    region = None\n    if system() == 'Darwin':\n    if loc.count('_') is 2:", "piece": "if system() == 'Darwin':"}
{"function_name": "lgettext", "function_define": "    missing = object()\n    if tmsg is missing:\n    if self._fallback:", "piece": "if tmsg is missing:"}
{"function_name": "lngettext", "function_define": "    except KeyError:\n    if self._fallback:\n    if n == 1:", "piece": "if self._fallback:"}
{"function_name": "ngettext", "function_define": "    except KeyError:\n    if self._fallback:\n    if n == 1:", "piece": "if self._fallback:"}
{"function_name": "run_expr", "function_define": "    start = time.time()\n    clt_time = time.time() - start\n    f_edgeworth = []", "piece": "clt_time = time.time() - start"}
{"function_name": "run_expr_dual", "function_define": "    start = time.time()\n    for ii in range(len(alpha)):\n    aa = alpha[ii]", "piece": "for ii in range(len(alpha)):"}
{"function_name": "laplace_mu3_dual", "function_define": "    plt.subplots_adjust(left=0.15)\n    plt.show()\n    if save_fig:", "piece": "plt.show()"}
{"function_name": "handleFail", "function_define": "    log_files = output.split('\\n')\n    for log_file in log_files:\n    print(log_file_text)", "piece": "for log_file in log_files:"}
{"function_name": "remoteReboot", "function_define": "    ps = PowerShell(pool)\n    ps.invoke()\n    output_powershell_streams(ps)", "piece": "ps.invoke()"}
{"function_name": "remoteSysprep", "function_define": "    command += ' /oobe'\n    command += ' /mode:vm'\n    print(command)", "piece": "command += ' /mode:vm'"}
{"function_name": "find_files", "function_define": "    assert type(substrings) == list\n    for filename in filenames:\n    for substring in substrings:", "piece": "for filename in filenames:"}
{"function_name": "unzip_files", "function_define": "    for zip_file in zip_list:\n    z.extractall(directory)\n    os.remove(zip_file)", "piece": "z.extractall(directory)"}
{"function_name": "process_entity", "function_define": "    if not os.path.exists(root):\n    os.makedirs(root)\n    identifier = obj['identifier']", "piece": "os.makedirs(root)"}
{"function_name": "initialize_map", "function_define": "    evaluation_map = {}\n    evaluation_map[symbol] = {}\n    evaluation_map[symbol]['TP'] = 0", "piece": "evaluation_map[symbol] = {}"}
{"function_name": "clean_symbols", "function_define": "    cleaned_symbols = []\n    cleaned_symbols.append('BII')\n    continue", "piece": "cleaned_symbols.append('BII')"}
{"function_name": "take_action", "function_define": "    row_headers = rows\n    if data.request_body:\n    req_body = data.request_body", "piece": "if data.request_body:"}
{"function_name": "is_detected", "function_define": "    if self.serial_number:\n    for part in self.partitions:\n    elif self.system_path:", "piece": "for part in self.partitions:"}
{"function_name": "_function", "function_define": "    for i, stmt in enumerate(body):\n    except TypeError as err:\n    except AttributeError as err:", "piece": "except TypeError as err:"}
{"function_name": "_subroutine", "function_define": "    if arguments_node is None:\n    if members_node is not None:\n    assert members", "piece": "if members_node is not None:"}
{"function_name": "_argument", "function_define": "    if 'name' not in node.attrib:\n    if values:\n    assert len(values) == 1", "piece": "if values:"}
{"function_name": "_loop_do_while", "function_define": "    assert len(header) == 1\n    assert condition is None\n    condition = header[0]", "piece": "assert condition is None"}
{"function_name": "_loop_forall", "function_define": "    outer_loop = None\n    inner_loop = None\n    if not index_variable:", "piece": "inner_loop = None"}
{"function_name": "_index_variable", "function_define": "    step = node.find('./step')\n    range_args = []\n    if lower_bound is not None:", "piece": "range_args = []"}
{"function_name": "_allocate", "function_define": "    assignments = []\n    for expression in expressions:\n    var = expression.value", "piece": "for expression in expressions:"}
{"function_name": "_deallocate", "function_define": "    targets = []\n    for expression in expressions:\n    targets.append(expression)", "piece": "for expression in expressions:"}
{"function_name": "_io_control", "function_define": "    if not io_control:\n    assert arg_name == ''\n    if len(io_control) != 1:", "piece": "assert arg_name == ''"}
{"function_name": "_assignment", "function_define": "    if len(target) != 1:\n    target = target[0]\n    if len(value) != 1:", "piece": "target = target[0]"}
{"function_name": "_dimension", "function_define": "    dim_type = node.attrib['type']\n    if dim_type == 'simple':\n    if len(values) != 1:", "piece": "if dim_type == 'simple':"}
{"function_name": "_variable", "function_define": "    value = None\n    if value_node is not None:\n    assert len(values) == 1, values", "piece": "if value_node is not None:"}
{"function_name": "_convgen", "function_define": "    if value is None:\n    if case == value:\n    if isinstance(value, str):", "piece": "if case == value:"}
{"function_name": "_subscripts", "function_define": "    if not postprocess:\n    if len(subscripts) == 1:\n    if len(subscripts) == 1:", "piece": "if len(subscripts) == 1:"}
{"function_name": "_subscript", "function_define": "    if not subscripts:\n    if len(subscripts) != 1:\n    self.no_transform(node)", "piece": "if len(subscripts) != 1:"}
{"function_name": "_literal", "function_define": "    if literal_type == 'bool':\n    if literal_type == 'int':\n    if literal_type == 'real':", "piece": "if literal_type == 'int':"}
{"function_name": "romanToInt", "function_define": "    if s_index == len(s):\n    for sp in list(c2num_sp.keys()):\n    if s.startswith(sp, s_index):", "piece": "for sp in list(c2num_sp.keys()):"}
{"function_name": "sub_roman2int", "function_define": "    if s_index == len(s):\n    for sp in list(c2num_sp.keys()):\n    if s.startswith(sp, s_index):", "piece": "for sp in list(c2num_sp.keys()):"}
{"function_name": "group_funcs", "function_define": "    if self._group_funcs is None:\n    ret = {}\n    if isinstance(value, str):", "piece": "ret = {}"}
{"function_name": "test_initial", "function_define": "    from fibonacci import fibonacci\n    assert fibonacci(0) == 0\n    assert fibonacci(1) == 1", "piece": "assert fibonacci(0) == 0"}
{"function_name": "partial_response", "function_define": "    if end is None:\n    end = start + BUFF_SIZE - 1\n    end = min(end, file_size - 1)", "piece": "end = start + BUFF_SIZE - 1"}
{"function_name": "saveHTML", "function_define": "    html = '<html><body><code>'\n    for key in self.header.keys():\n    if key.startswith('###'):", "piece": "for key in self.header.keys():"}
{"function_name": "saveMarkdown", "function_define": "    out = '# ABF Header Contents\\n'\n    for key in self.header.keys():\n    if key.startswith('###'):", "piece": "for key in self.header.keys():"}
{"function_name": "get_random_modes", "function_define": "    output = []\n    note_obj = Note()\n    for c in range(count):", "piece": "note_obj = Note()"}
{"function_name": "make_neg_windows", "function_define": "    neg_windows = []\n    for _ in range(max_attempts):\n    for _ in range(max_attempts):", "piece": "for _ in range(max_attempts):"}
{"function_name": "check_go_source", "function_define": "    if not go_files:\n    check_gofmt(go_files)\n    check_golint('./...')", "piece": "check_gofmt(go_files)"}
{"function_name": "check_golint", "function_define": "    warnings = golint(go_files)\n    if re.search(p, w):\n    if warnings:", "piece": "if re.search(p, w):"}
{"function_name": "check_govet", "function_define": "    warnings = govet(package)\n    if warnings:\n    for warning in warnings:", "piece": "if warnings:"}
{"function_name": "encrypt_ui", "function_define": "    message = input()\n    buffer = ''\n    for i in message:", "piece": "buffer = ''"}
{"function_name": "decrypt_ui", "function_define": "    message = input()\n    buffer = ''\n    for i in message:", "piece": "buffer = ''"}
{"function_name": "handle_texture", "function_define": "    from PIL import ImageOps\n    except ImportError:\n    image = d.image", "piece": "except ImportError:"}
{"function_name": "handle_object", "function_define": "    d = obj.read()\n    if obj.type == 'GameObject':\n    elif obj.type == 'Material':", "piece": "if obj.type == 'GameObject':"}
{"function_name": "admin_edit", "function_define": "    test = False\n    for link in config['links']:\n    if menu == link['name']:", "piece": "for link in config['links']:"}
{"function_name": "_handle_noargs", "function_define": "    out = sys.stdout\n    self.csvwriter = csv.writer(out)\n    if fromdate != '':", "piece": "self.csvwriter = csv.writer(out)"}
{"function_name": "photo_problem", "function_define": "    print('z_val:', z_val)\n    n = len(persons)\n    if z_val == 0:", "piece": "n = len(persons)"}
{"function_name": "parseGithubURL", "function_define": "    splitURL = url.split('/')\n    owner = splitURL[3]\n    repo = splitURL[4]", "piece": "owner = splitURL[3]"}
{"function_name": "fetchRepoFiles", "function_define": "    files = []\n    contents = repo.get_contents('')\n    while contents:", "piece": "contents = repo.get_contents('')"}
{"function_name": "log_query", "function_define": "    db = context['connection']\n    start = get_time()\n    error = None", "piece": "start = get_time()"}
{"function_name": "linear_velocity", "function_define": "    both lateral boundaries.\n    Parameters\n    z_start : float", "piece": "Parameters"}
{"function_name": "_check_velocity", "function_define": "    if dimension == 3:\n    expected_dims = ('x', 'y', 'z')\n    elif dimension == 2:", "piece": "expected_dims = ('x', 'y', 'z')"}
{"function_name": "getDataF", "function_define": "    if os.path.exists(fName):\n    graphInfo = []\n    for line in open(fName):", "piece": "graphInfo = []"}
{"function_name": "save_prediction", "function_define": "    if dirpath is not dataset_path:\n    for f in filenames:\n    kss = Keyword_Spotting_Service()", "piece": "for f in filenames:"}
{"function_name": "log_results", "function_define": "    Examples:\n    Run skopt training::\n    Initialize Neptune::", "piece": "Run skopt training::"}
{"function_name": "_log_plot_regret", "function_define": "    expect_not_a_run(experiment)\n    fig, ax = plt.subplots()\n    experiment.log_image(name, fig)", "piece": "fig, ax = plt.subplots()"}
{"function_name": "CreateHostConfig", "function_define": "    lab_name: lab name.\n    cluster_name: cluster name.\n    hostname: hostname.", "piece": "cluster_name: cluster name."}
{"function_name": "ParseGroupVar", "function_define": "    Returns:\n    the parsed yml mapping.\n    except syaml.YAMLError as e:", "piece": "the parsed yml mapping."}
{"function_name": "tmpfs_configs", "function_define": "    the host config.\n    Returns:\n    a list of tmpfs configs.", "piece": "Returns:"}
{"function_name": "LoadConfigs", "function_define": "    if not self.file_enumerator:\n    has_config = False\n    has_config = True", "piece": "has_config = False"}
{"function_name": "GetHostConfigs", "function_define": "    cluster_name: cluster name\n    Returns:\n    a list of host configs.", "piece": "Returns:"}
{"function_name": "GetHostConfig", "function_define": "    hostname: the host's name\n    Returns:\n    a HostConfig", "piece": "Returns:"}
{"function_name": "BuildHostConfig", "function_define": "    hostname: the host's name\n    lab_name: host's lab name\n    Returns:", "piece": "lab_name: host's lab name"}
{"function_name": "plot_dist_mat", "function_define": "    Plot distance matrix as heatmap\n    fig, ax = plt.subplots(1)\n    plt.xlabel('Trajectory number')", "piece": "fig, ax = plt.subplots(1)"}
{"function_name": "palindromeIndex", "function_define": "    i, j = (0, len(s) - 1)\n    removedLeft = -1\n    while True:", "piece": "removedLeft = -1"}
{"function_name": "kernel_regular", "function_define": "    for i in range(0, self.N):\n    for j in range(0, self.N):\n    for i in range(0, self.N):", "piece": "for j in range(0, self.N):"}
{"function_name": "kernel_le", "function_define": "    for i in range(0, self.N):\n    tmp = x1[i]\n    for j in range(0, self.N):", "piece": "tmp = x1[i]"}
{"function_name": "kernel_pluto", "function_define": "    if self.N - 1 >= 0:\n    for c1 in range(self.N - 1 + 1):\n    for c2 in range(self.N - 1 + 1):", "piece": "for c1 in range(self.N - 1 + 1):"}
{"function_name": "kernel_maxfuse", "function_define": "    if self.N - 1 >= 0:\n    for c0 in range(self.N - 1 + 1):\n    for c1 in range(self.N - 1 + 1):", "piece": "for c0 in range(self.N - 1 + 1):"}
{"function_name": "user_delete", "function_define": "    user = User.query.get(id)\n    db.session.delete(user)\n    db.session.commit()", "piece": "db.session.delete(user)"}
{"function_name": "user_update", "function_define": "    form = UpdateUserForm()\n    if form.validate_on_submit():\n    user.updated_at = datetime.now()", "piece": "if form.validate_on_submit():"}
{"function_name": "xsb_test1", "function_define": "    pl = XSBProlog(path)\n    p = c_pred('p', 2)\n    f = c_functor('t', 3)", "piece": "p = c_pred('p', 2)"}
{"function_name": "xsb_test2", "function_define": "    pl = XSBProlog(path)\n    person = c_pred('person', 1)\n    friends = c_pred('friends', 2)", "piece": "person = c_pred('person', 1)"}
{"function_name": "xsb_test3", "function_define": "    pl = XSBProlog(path)\n    bongard = c_pred('bongard', 2)\n    circle = c_pred('circle', 2)", "piece": "bongard = c_pred('bongard', 2)"}
{"function_name": "xsb_test5", "function_define": "    solver = XSBProlog(path)\n    edge = c_pred('edge', 2)\n    path = c_pred('path', 2)", "piece": "edge = c_pred('edge', 2)"}
{"function_name": "all_xsb_tests", "function_define": "    xsb_test1(path)\n    xsb_test2(path)\n    xsb_test3(path)", "piece": "xsb_test2(path)"}
{"function_name": "normalized", "function_define": "    car, codelength = codelengths[0]\n    value = 0\n    codes = {car: '0' * codelength}", "piece": "value = 0"}
{"function_name": "reduce_tree", "function_define": "    Uses the algorithm described in\n    currentlen = self.length()\n    parent = rightmost_leaf.parent", "piece": "currentlen = self.length()"}
{"function_name": "nodes_at", "function_define": "    res = []\n    if top is None:\n    top = self.root", "piece": "if top is None:"}
{"function_name": "compressed_bytes", "function_define": "    out = bytearray()\n    while pos < len(compressed):\n    bits = compressed[pos:pos + 8]", "piece": "while pos < len(compressed):"}
{"function_name": "make_tree", "function_define": "    if node is self.root:\n    node.code = ''\n    children = []", "piece": "node.code = ''"}
{"function_name": "decompress_bytes", "function_define": "    source = self.compressed\n    node = self.root\n    res = bytearray()", "piece": "node = self.root"}
{"function_name": "retry_loop", "function_define": "    retry_count = 0\n    while retry_count < retries:\n    if fail_count > 0:", "piece": "while retry_count < retries:"}
{"function_name": "set_torch_seed", "function_define": "    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)", "piece": "np.random.seed(seed)"}
{"function_name": "compute_metrics", "function_define": "    results: Dict[Any, Any] = {}\n    results.update(intent_result)\n    results.update(slot_result)", "piece": "results.update(intent_result)"}
{"function_name": "simplify_tokens", "function_define": "    simple_preds = []\n    for p in preds:\n    if p.endswith('TERM'):", "piece": "for p in preds:"}
{"function_name": "add_prefix", "function_define": "    Add prefix to the filename.\n    fname = os.path.basename(path)\n    dname = os.path.dirname(path)", "piece": "fname = os.path.basename(path)"}
{"function_name": "add_directory", "function_define": "    then new directory will be made.\n    fname = os.path.basename(path)\n    dname = os.path.dirname(path)", "piece": "fname = os.path.basename(path)"}
{"function_name": "change_ext", "function_define": "    Change extension.\n    if not new_ext.startswith('.'):\n    new_ext = '.' + new_ext", "piece": "if not new_ext.startswith('.'):"}
{"function_name": "test_paragraph", "function_define": "    document = test_document\n    docbody = document.body\n    docbody.delete()", "piece": "docbody = document.body"}
{"function_name": "get_login_info", "function_define": "    if packet.haslayer(scapy.Raw):\n    load = packet[scapy.Raw].load\n    for keyword in keywords:", "piece": "load = packet[scapy.Raw].load"}
{"function_name": "read_packets", "function_define": "    response.insert(END, data)\n    if login_info:\n    window.update()", "piece": "if login_info:"}
{"function_name": "show_gui", "function_define": "    window = Tk()\n    window.title('Packet Sniffer')\n    window.geometry('3000x1000')", "piece": "window.title('Packet Sniffer')"}
{"function_name": "process_packet", "function_define": "    response.insert(END, data)\n    if login_info:\n    window.update()", "piece": "if login_info:"}
{"function_name": "lr_nat_add", "function_define": "    the logical_ip resides\n    sent using `external_mac`.\n    specified, they will be updated", "piece": "sent using `external_mac`."}
{"function_name": "pg_add_ports", "function_define": "    instance result or UUID\n    or string or uuid.UUID\n    or uuid.UUID", "piece": "or string or uuid.UUID"}
{"function_name": "_conv_layer", "function_define": "    filt = self.w[name + 'w']\n    conv_biases = self.b[name + 'b']\n    relu = tf.nn.relu(bias)", "piece": "conv_biases = self.b[name + 'b']"}
{"function_name": "_fc_layer", "function_define": "    for d in shape[1:]:\n    dim *= d\n    weights = self.w[name + 'w']", "piece": "dim *= d"}
{"function_name": "load_imgs", "function_define": "    for path in paths:\n    Y.append([1, 0])\n    Y.append([0, 1])", "piece": "Y.append([1, 0])"}
{"function_name": "_next_sample", "function_define": "    context = self._context\n    for item in reader:\n    context['item_index'] += 1", "piece": "for item in reader:"}
{"function_name": "removeDuplicates", "function_define": "    stack = []\n    for i in s:\n    if not stack:", "piece": "for i in s:"}
{"function_name": "copy_pose", "function_define": "    pt = pose.pose.position\n    quat = pose.pose.orientation\n    copied_pose = PoseStamped()", "piece": "quat = pose.pose.orientation"}
{"function_name": "state_cb", "function_define": "    print(msg.mode)\n    if msg.mode == 'OFFBOARD':\n    self.isReadyToFly = True", "piece": "if msg.mode == 'OFFBOARD':"}
{"function_name": "get_filter_class", "function_define": "    if filter_class:\n    if filter_fields:\n    class Meta:", "piece": "if filter_fields:"}
{"function_name": "construct_search", "function_define": "    if field_name.startswith('^'):\n    elif field_name.startswith('='):\n    elif field_name.startswith('@'):", "piece": "elif field_name.startswith('='):"}
{"function_name": "updateTeachPlan", "function_define": "    tpno:\u8ba1\u5212\u7f16\u53f7\n    credit:\u5b66\u5206\n    teach_date:\u5f00\u8bfe\u65e5\u671f", "piece": "credit:\u5b66\u5206"}
{"function_name": "transitland_dl", "function_define": "    Datastore API\n    feeds will be saved to.\n    Returns:", "piece": "feeds will be saved to."}
{"function_name": "overpass_dl", "function_define": "    will be written to.\n    than this many bytes in size.\n    Returns:", "piece": "than this many bytes in size."}
{"function_name": "summoners", "function_define": "    summoners = []\n    for _ in range(3):\n    yield summoners", "piece": "for _ in range(3):"}
{"function_name": "summoners2", "function_define": "    summoners = []\n    for _ in range(3):\n    for _ in range(4):", "piece": "for _ in range(3):"}
{"function_name": "find_all_tags", "function_define": "    root = None\n    while True:\n    chunk = fp.read(1024 * 1024)", "piece": "while True:"}
{"function_name": "workout_to_db", "function_define": "    record = dict(workout.attrib)\n    if len(points) == 0:\n    for path in gpx_files:", "piece": "if len(points) == 0:"}
{"function_name": "decode_alb_jwt", "function_define": "    kid = decoded_json['kid']\n    req = requests.get(url)\n    pub_key = req.text", "piece": "req = requests.get(url)"}
{"function_name": "generateRom", "function_define": "    guiargs = Namespace\n    guiargs.mode = modeVar.get()\n    guiargs.logic = logicVar.get()", "piece": "guiargs.mode = modeVar.get()"}
{"function_name": "commit_reserved", "function_define": "    if index in self.reserved:\n    self.keytable[key] = index\n    self.indextable[index] = obj", "piece": "self.keytable[key] = index"}
{"function_name": "retrieve_by_key", "function_define": "    result = []\n    for key in self.keytable:\n    if f(key):", "piece": "for key in self.keytable:"}
{"function_name": "write_xml", "function_define": "    snode = ET.Element(tag)\n    f(snode, self.indextable[key])\n    node.append(snode)", "piece": "f(snode, self.indextable[key])"}
{"function_name": "read_xml", "function_define": "    if node is None:\n    for snode in node.findall(tag):\n    obj = get_value(snode)", "piece": "for snode in node.findall(tag):"}
{"function_name": "authorizations", "function_define": "    res = []\n    dbsession = request.dbsession\n    if not name:", "piece": "dbsession = request.dbsession"}
{"function_name": "get_passengers", "function_define": "    if len(passengers) < 2:\n    for passanger in passengers:\n    self.get_passenger(passanger)", "piece": "for passanger in passengers:"}
{"function_name": "mergesort", "function_define": "    if left < right:\n    mid = (left + right) // 2\n    mergesort(array, left, mid)", "piece": "mid = (left + right) // 2"}
{"function_name": "jbcorrelation", "function_define": "    flag, defalt false\n    distances = sites_or_distances\n    if imt.period < 1:", "piece": "distances = sites_or_distances"}
{"function_name": "getDatetime", "function_define": "    date = entry['year']\n    timeFormat = '%Y'\n    date = date + ',' + 'December'", "piece": "timeFormat = '%Y'"}
{"function_name": "printBibDB", "function_define": "    bookEntries = []\n    journalEntries = []\n    conferenceEntries = []", "piece": "journalEntries = []"}
{"function_name": "printJemdoc", "function_define": "    prefix = ''\n    if publishType == 'book':\n    print('=== Book Chapters\\n')", "piece": "if publishType == 'book':"}
{"function_name": "printJekyll", "function_define": "    prefix = ''\n    if publishType == 'book':\n    print('Book Chapters\\n======\\n')", "piece": "if publishType == 'book':"}
{"function_name": "printCVJekyll", "function_define": "    prefix = ''\n    if publishType == 'book':\n    print('**Book Chapters**\\n\\n')", "piece": "if publishType == 'book':"}
{"function_name": "printCVCN", "function_define": "    prefix = ''\n    if publishType == 'book':\n    prefix = 'B'", "piece": "if publishType == 'book':"}
{"function_name": "printShortRef", "function_define": "    prefix = ''\n    if publishType == 'book':\n    prefix = 'B'", "piece": "if publishType == 'book':"}
{"function_name": "generateRoutines", "function_define": "    routine_id = 0\n    json_routines = []\n    for r in routines:", "piece": "json_routines = []"}
{"function_name": "_write_file", "function_define": "    if append is True:\n    f.write('\\n')\n    f.write(content)", "piece": "f.write('\\n')"}
{"function_name": "_codegen_dot", "function_define": "    json = {}\n    jw.add_commons(json, routine)\n    jw.add_incx(json, routine)", "piece": "jw.add_commons(json, routine)"}
{"function_name": "_codegen_axpy", "function_define": "    json = {}\n    jw.add_commons(json, routine)\n    jw.add_incx(json, routine)", "piece": "jw.add_commons(json, routine)"}
{"function_name": "get_proxy_list", "function_define": "    url = self.url\n    r = requests.get(url)\n    content = r.content", "piece": "r = requests.get(url)"}
{"function_name": "save_API_data", "function_define": "    delay = False\n    file.close()\n    if delay:", "piece": "file.close()"}
{"function_name": "kvartal_windows", "function_define": "    except ValueError:\n    self.top_start.destroy()\n    if self.kvartal == 1:", "piece": "self.top_start.destroy()"}
{"function_name": "start_window", "function_define": "    self.top_start = Toplevel()\n    self.top_start.minsize(150, 100)\n    self.top_start.maxsize(150, 100)", "piece": "self.top_start.minsize(150, 100)"}
{"function_name": "dequoteV", "function_define": "    res = []\n    for x in v:\n    res.append(dequote(x))", "piece": "for x in v:"}
{"function_name": "_gen_random_wind", "function_define": "    rng = self.wind_rng\n    wd = np.arange(0.0, 360.0, 5.0)\n    freq = freq / freq.sum()", "piece": "wd = np.arange(0.0, 360.0, 5.0)"}
{"function_name": "get_gauss_3d", "function_define": "    x = np.r_[0:100]\n    y = np.r_[0:100]\n    z = np.r_[0:100]", "piece": "y = np.r_[0:100]"}
{"function_name": "process_jobs", "function_define": "    while True:\n    logging.debug(currentFileName)\n    logging.debug(currentFilePath)", "piece": "logging.debug(currentFileName)"}
{"function_name": "fix_queue", "function_define": "    if file.endswith('.avi'):\n    except Exception as err:\n    logging.error(err)", "piece": "except Exception as err:"}
{"function_name": "test_FileIndex", "function_define": "    assert len(res) == 1\n    assert list(res) == ['paramId']\n    assert res.first()", "piece": "assert list(res) == ['paramId']"}
{"function_name": "test_FileStream", "function_define": "    leader = res.first()\n    assert len(leader) > 100\n    with pytest.raises(EOFError):", "piece": "assert len(leader) > 100"}
{"function_name": "before_run", "function_define": "    for hook in trainer.hooks[::-1]:\n    if isinstance(hook, LoggerHook):\n    hook.reset_flag = True", "piece": "if isinstance(hook, LoggerHook):"}
{"function_name": "after_train_iter", "function_define": "    if trainer.log_buffer.ready:\n    self.log(trainer)\n    if self.reset_flag:", "piece": "self.log(trainer)"}
{"function_name": "after_val_epoch", "function_define": "    trainer.log_buffer.average()\n    self.log(trainer)\n    if self.reset_flag:", "piece": "self.log(trainer)"}
{"function_name": "matchCatalogs", "function_define": "    cat1Index = {}\n    cat2Index = {}\n    trie = buildKDTrie(cat2)", "piece": "cat2Index = {}"}
{"function_name": "calculate_dt", "function_define": "    Returns:\n    float: the delta time\n    now = time.time()", "piece": "float: the delta time"}
{"function_name": "update_events", "function_define": "    event (pygame.event): the event\n    Returns:\n    if event.type == pygame.QUIT:", "piece": "Returns:"}
{"function_name": "is_finished", "function_define": "    Returns:\n    players_list = list(players)\n    if len(players_list) == 1:", "piece": "players_list = list(players)"}
{"function_name": "update_bullets", "function_define": "    dt (float): the delta time\n    for bullet in bullets:\n    if remove:", "piece": "for bullet in bullets:"}
{"function_name": "update_misc", "function_define": "    dt (float): the delta time\n    particles.update()\n    for particle in particles:", "piece": "particles.update()"}
{"function_name": "update_exit", "function_define": "    dt (float): the delta time\n    Returns:\n    if should_exit:", "piece": "Returns:"}
{"function_name": "hits_by_type", "function_define": "    for hit in self.hits:\n    if type_from_hit(hit) == type:\n    yield hit", "piece": "if type_from_hit(hit) == type:"}
{"function_name": "test_is_song", "function_define": "    assert result.is_song\n    assert not result.is_artist\n    assert not result.is_composer", "piece": "assert not result.is_artist"}
{"function_name": "test_is_artist", "function_define": "    assert not result.is_song\n    assert result.is_artist\n    assert not result.is_composer", "piece": "assert result.is_artist"}
{"function_name": "test_is_composer", "function_define": "    assert not result.is_song\n    assert not result.is_artist\n    assert result.is_composer", "piece": "assert not result.is_artist"}
{"function_name": "reachable_nodes", "function_define": "    visited = set()\n    while queue:\n    curr = queue.popleft()", "piece": "while queue:"}
{"function_name": "parse_rule", "function_define": "    contents = {}\n    color = matchobj.group('color')\n    if color == 'no other':", "piece": "color = matchobj.group('color')"}
{"function_name": "Browse_To_File", "function_define": "    AVAILABLE PARAMS:\n    EXAMPLE CODE:\n    if not path.endswith(os.sep):", "piece": "EXAMPLE CODE:"}
{"function_name": "Countdown", "function_define": "    AVAILABLE PARAMS:\n    run for. The default is 10.\n    they will be unable to cancel.", "piece": "run for. The default is 10."}
{"function_name": "Custom_Dialog", "function_define": "    sizing and positioning.\n    AVAILABLE PARAMS:\n    use 1280x720 (fullscreen).", "piece": "AVAILABLE PARAMS:"}
{"function_name": "Keyboard", "function_define": "    AVAILABLE PARAMS:\n    EXAMPLE CODE:\n    if hidden:", "piece": "EXAMPLE CODE:"}
{"function_name": "OK_Dialog", "function_define": "    CODE: OK_Dialog(title,message)\n    AVAILABLE PARAMS:\n    EXAMPLE CODE:", "piece": "AVAILABLE PARAMS:"}
{"function_name": "Show_Busy", "function_define": "    CODE: Show_Busy([status, sleep])\n    AVAILABLE PARAMS:\n    milliseconds and then disappear.", "piece": "AVAILABLE PARAMS:"}
{"function_name": "Text_Box", "function_define": "    AVAILABLE PARAMS:\n    EXAMPLE CODE:\n    xbmc.sleep(500)", "piece": "EXAMPLE CODE:"}
{"function_name": "Reset_Percent", "function_define": "    AVAILABLE PARAMS:\n    to update_percent_100.\n    counter = 0", "piece": "to update_percent_100."}
{"function_name": "Update_Progress", "function_define": "    AVAILABLE PARAMS:\n    Reset_Percent()\n    for item in kwargs:", "piece": "Reset_Percent()"}
{"function_name": "Update_Screen", "function_define": "    AVAILABLE PARAMS:\n    EXAMPLE CODE:\n    mykwargs = {", "piece": "EXAMPLE CODE:"}
{"function_name": "YesNo_Dialog", "function_define": "    AVAILABLE PARAMS:\n    EXAMPLE CODE:\n    if mychoice:", "piece": "EXAMPLE CODE:"}
{"function_name": "onAction", "function_define": "    if action in [10, 7]:\n    if self.disable_quit:\n    self.close()", "piece": "if self.disable_quit:"}
{"function_name": "key_exists", "function_define": "    foo = {'foo': 0}\n    foo = a.addset(foo, 'foo', 1)\n    self.assertEqual(foo['foo'], 1)", "piece": "foo = a.addset(foo, 'foo', 1)"}
{"function_name": "key_absent", "function_define": "    foo = {}\n    foo = a.addset(foo, 'foo', 1)\n    self.assertEqual(foo['foo'], 1)", "piece": "foo = a.addset(foo, 'foo', 1)"}
{"function_name": "process_video", "function_define": "    train_json = json.load(f)\n    train_pred_json = json.load(f)\n    fps = cap.get(cv2.CAP_PROP_FPS)", "piece": "train_pred_json = json.load(f)"}
{"function_name": "_parse_array", "function_define": "    array = []\n    for child in node.getchildren():\n    array.append(xml_to_json(child))", "piece": "for child in node.getchildren():"}
{"function_name": "controler", "function_define": "    target = None\n    inp = ''\n    while True:", "piece": "inp = ''"}
{"function_name": "gaussian", "function_define": "    gau_pyr = [img]\n    for i in range(levels - 1):\n    if save:", "piece": "for i in range(levels - 1):"}
{"function_name": "get_item_name", "function_define": "    item_slot_x = 952\n    item_slot_y_start = 235\n    item_slot_height = 80", "piece": "item_slot_y_start = 235"}
{"function_name": "find_pointer", "function_define": "    pointer_min_y = 235\n    pointer_max_y = 235 + 8 * 80\n    pointer_min_x = 775", "piece": "pointer_max_y = 235 + 8 * 80"}
{"function_name": "has_image", "function_define": "    im = np.atleast_3d(im)\n    tpl = np.atleast_3d(tpl)\n    H, W, D = im.shape[:3]", "piece": "tpl = np.atleast_3d(tpl)"}
{"function_name": "process_frame", "function_define": "    if not only_get_variant:\n    name = None\n    has_variants = True", "piece": "name = None"}
{"function_name": "citation", "function_define": "    chain is derived from this work.\n    volume={17},\n    number={1},", "piece": "volume={17},"}
{"function_name": "userauthenticate", "function_define": "    if user is not None:\n    login(request, user)\n    if user is None:", "piece": "login(request, user)"}
{"function_name": "plot_gat_bars", "function_define": "    y = data\n    if not y:\n    x = np.arange(1, len(y) + 1)", "piece": "if not y:"}
{"function_name": "get_sanitized", "function_define": "    if value is None:\n    if self.typecode == 's':\n    if self.typecode == 'b':", "piece": "if self.typecode == 's':"}
{"function_name": "form_control", "function_define": "    if self.typecode == 'd':\n    elif self.typecode == 'b':\n    if self.default_value:", "piece": "elif self.typecode == 'b':"}
{"function_name": "_generateName", "function_define": "    if self.name == '':\n    filename = self.name\n    self.name = filename", "piece": "filename = self.name"}
{"function_name": "reinit_masterdir", "function_define": "    global _mdir\n    if stage == 2:\n    oname = masterdir.name", "piece": "if stage == 2:"}
{"function_name": "kaiming_init", "function_define": "    init.kaiming_normal(m.weight)\n    if m.bias is not None:\n    m.bias.data.fill_(0)", "piece": "if m.bias is not None:"}
{"function_name": "weight_init", "function_define": "    for block in self._modules:\n    for m in self._modules[block]:\n    kaiming_init(m)", "piece": "for m in self._modules[block]:"}
{"function_name": "create_videos", "function_define": "    print('-Create videos')\n    folder = self.path\n    except Exception:", "piece": "folder = self.path"}
{"function_name": "create_plots", "function_define": "    Parameters\n    trajectory_list\n    trajectories from the stack", "piece": "trajectory_list"}
{"function_name": "findRepeatNumber", "function_define": "    s = set()\n    for _ in nums:\n    if _ not in s:", "piece": "for _ in nums:"}
{"function_name": "noisy_image", "function_define": "    if type(image) == torch.Tensor:\n    image = self.to_pil(image)\n    image = np.array(image)", "piece": "image = self.to_pil(image)"}
{"function_name": "post_ajax", "function_define": "    except TemplateSyntaxError as e:\n    subject = str(e)\n    except TemplateSyntaxError as e:", "piece": "subject = str(e)"}
{"function_name": "trigger_run", "function_define": "    if job_id in range(1, 31):\n    except Exception:\n    if job_id in range(1, 11):", "piece": "except Exception:"}
{"function_name": "augment_hsv", "function_define": "    im = im.copy()\n    if hgain or sgain or vgain:\n    dtype = im.dtype", "piece": "if hgain or sgain or vgain:"}
{"function_name": "posterize", "function_define": "    bits = level\n    shift = 8 - bits\n    img = np.left_shift(img, shift)", "piece": "shift = 8 - bits"}
{"function_name": "cut_25_under", "function_define": "    ratio = level\n    height, width, _ = img.shape\n    img_ = img[:new_height, :, :]", "piece": "height, width, _ = img.shape"}
{"function_name": "cut_25_above", "function_define": "    ratio = level\n    height, width, _ = img.shape\n    new_height = int(ratio * height)", "piece": "height, width, _ = img.shape"}
{"function_name": "cut_25_right", "function_define": "    ratio = level\n    height, width, _ = img.shape\n    img_ = img[:, :new_width, :]", "piece": "height, width, _ = img.shape"}
{"function_name": "cut_25_left", "function_define": "    ratio = level\n    height, width, _ = img.shape\n    new_width = int(ratio * width)", "piece": "height, width, _ = img.shape"}
{"function_name": "detect_3d_blobs", "function_define": "    if len(orig_img.shape) != 3:\n    img = normalize_image(orig_img)\n    if not dark_blobs:", "piece": "img = normalize_image(orig_img)"}
{"function_name": "_save_answers", "function_define": "    written = False\n    if not a:\n    if q in answers:", "piece": "if not a:"}
{"function_name": "perform_checkin", "function_define": "    not valid at this time.\n    questions are not filled out.\n    dt = datetime or now()", "piece": "questions are not filled out."}
{"function_name": "order_placed", "function_define": "    order = kwargs['order']\n    event = sender\n    if not cls:", "piece": "event = sender"}
{"function_name": "build_time", "function_define": "    if t == 'custom':\n    elif t == 'date_from':\n    elif t == 'date_to':", "piece": "elif t == 'date_from':"}
{"function_name": "_get_scores", "function_define": "    gts = {}\n    res = {}\n    key = instance.get_gpv_id()", "piece": "res = {}"}
{"function_name": "_create_r_matrix", "function_define": "    np.array\n    R-Matrix\n    Rtable = []", "piece": "R-Matrix"}
{"function_name": "rotate_r_matrix", "function_define": "    Rotate R-Matrix by angle rad\n    angle: float\n    Angle to rotate matrix in rad", "piece": "angle: float"}
{"function_name": "_table_to_matrix", "function_define": "    table: list\n    table to convert to numpy array\n    np.array", "piece": "table to convert to numpy array"}
{"function_name": "v1_0to1_1", "function_define": "    doc = copy.deepcopy(doc)\n    if 'requirements' in t:\n    for r in t['requirements']:", "piece": "if 'requirements' in t:"}
{"function_name": "checkversion", "function_define": "    cdoc = None\n    lc = metadata.lc\n    metadata[u'$graph'] = doc", "piece": "lc = metadata.lc"}
{"function_name": "fix_inputBinding", "function_define": "    for i in t['inputs']:\n    if 'inputBinding' in i:\n    ib = i['inputBinding']", "piece": "if 'inputBinding' in i:"}
{"function_name": "unobjectify", "function_define": "    Example:\n    cls = obj.__class__\n    data = {}", "piece": "cls = obj.__class__"}
{"function_name": "objectify", "function_define": "    JSON data.\n    obj = concrete_cls()\n    for p in sprops:", "piece": "obj = concrete_cls()"}
{"function_name": "_calc_indent", "function_define": "    indent = 0\n    for c in line:\n    if c == ' ':", "piece": "for c in line:"}
{"function_name": "_extend_region", "function_define": "    region_cls = type(region)\n    while node:\n    if node.region is None:", "piece": "while node:"}
{"function_name": "push_context", "function_define": "    curlen = len(self._stack)\n    self._context_stack.pop()\n    if len(self._stack) > curlen:", "piece": "self._context_stack.pop()"}
{"function_name": "test_simple_list", "function_define": "    parser = OrgListParser(view)\n    self.assertTrue(result)\n    result = parser.finish()", "piece": "self.assertTrue(result)"}
{"function_name": "update_system", "function_define": "    if IS_MACOS:\n    print(user_distribution)\n    os.system('sudo pacman -Syu')", "piece": "print(user_distribution)"}
{"function_name": "for_batch", "function_define": "    if start_datetimes is not None:\n    if start_datetimes is None:\n    if self._dt_helper.dt_unit:", "piece": "if start_datetimes is None:"}
{"function_name": "gen_config_impl", "function_define": "    if not task_class_set:\n    elif len(task_class_set) > 1:\n    for opt in options:", "piece": "elif len(task_class_set) > 1:"}
{"function_name": "help_config", "function_define": "    if found_classes:\n    for obj in found_classes:\n    pretty_print_config_class(obj)", "piece": "for obj in found_classes:"}
{"function_name": "predict_py", "function_define": "    in model training config\n    while True:\n    if line:", "piece": "while True:"}
{"function_name": "score_model", "function_define": "    if cols is None:\n    cols = data.columns\n    maskedData.generate()", "piece": "cols = data.columns"}
{"function_name": "setter_wrapper", "function_define": "    if np.array(value).size == 1:\n    setattr(self, name, int(value))\n    setattr(self, name, value)", "piece": "setattr(self, name, int(value))"}
{"function_name": "cent_per_value", "function_define": "    Parameters\n    f_min : float\n    Minimum frequency.", "piece": "f_min : float"}
{"function_name": "get_f_min", "function_define": "    Parameters\n    f_max : float\n    Maximum frequency.", "piece": "f_max : float"}
{"function_name": "get_f_max", "function_define": "    Parameters\n    f_min : float\n    Minimum frequency.", "piece": "f_min : float"}
{"function_name": "queryset", "function_define": "    if self.value() == 'po':\n    elif self.value() == 'nu':\n    elif self.value() == 'ne':", "piece": "elif self.value() == 'nu':"}
{"function_name": "countDistinct", "function_define": "    trie, res = (dict(), 0)\n    for i in range(len(s)):\n    cur = trie", "piece": "for i in range(len(s)):"}
{"function_name": "get_atoms_4", "function_define": "    natoms = natoms\n    adj = np.asarray([ii, jj])\n    adj2 = adj.copy()", "piece": "adj = np.asarray([ii, jj])"}
{"function_name": "column_chart", "function_define": "    slowest = results.max(0)\n    fastest = results.min(0)\n    default = results[0]", "piece": "fastest = results.min(0)"}
{"function_name": "get_open_count", "function_define": "    meta = frappe.get_meta(doctype)\n    items = []\n    for group in links.transactions:", "piece": "items = []"}
{"function_name": "start_sprint", "function_define": "    print(request.form)\n    print(request.form)\n    sprint = Sprint()", "piece": "print(request.form)"}
{"function_name": "end_sprint", "function_define": "    if request.form['sprint']:\n    if sprint:\n    sprint.save()", "piece": "if sprint:"}
{"function_name": "get_json", "function_define": "    j['id'] = self.id\n    if self.end:\n    j['startLat'] = self.startLat", "piece": "if self.end:"}
{"function_name": "gen_struct_image", "function_define": "    Generate RNA Structre image.\n    Parameters\n    rna_sequence: str", "piece": "Parameters"}
{"function_name": "__gen_cmd_str", "function_define": "    Parameters\n    params: dict\n    The parameter object.", "piece": "params: dict"}
{"function_name": "__gen_param_str", "function_define": "    Generate parameter string.\n    Parameters\n    params: dict", "piece": "Parameters"}
{"function_name": "server_bind", "function_define": "    s = self.socket\n    s.bind(self.server_address)\n    except OSError as err:", "piece": "s.bind(self.server_address)"}
{"function_name": "parse_photo", "function_define": "    from_url = single.from_url\n    if from_url is None:\n    item = dict(single.item)", "piece": "if from_url is None:"}
{"function_name": "get_cpu_metrics", "function_define": "    vm = self._lookup_vm(vm_name)\n    cpu_used = 0\n    if cpu_metric_aggr:", "piece": "cpu_used = 0"}
{"function_name": "get_disk_metrics", "function_define": "    vm = self._lookup_vm(vm_name)\n    for disk in disks:\n    if disk.HostResource:", "piece": "for disk in disks:"}
{"function_name": "_lookup_vm", "function_define": "    n = len(vms)\n    if n == 0:\n    elif n > 1:", "piece": "if n == 0:"}
{"function_name": "compute_G_h", "function_define": "    nb_spl = len(label)\n    h = np.zeros((nb_spl * 2,))\n    for i in range(nb_spl):", "piece": "h = np.zeros((nb_spl * 2,))"}
{"function_name": "get_max_profit", "function_define": "    a = arr + [-1]\n    current_min = a[0]\n    current_max = a[0]", "piece": "current_min = a[0]"}
{"function_name": "prep_rhf", "function_define": "    if self.ovlp == 1:\n    if self.oei is not None:\n    if self.tei is not None:", "piece": "if self.oei is not None:"}
{"function_name": "get_veff", "function_define": "    if mol is None:\n    mol = ks.mol\n    if dm is None:", "piece": "mol = ks.mol"}
{"function_name": "get_run_id", "function_define": "    with open(filename, 'w') as f:\n    f.write('')\n    with open(filename, 'r') as f:", "piece": "f.write('')"}
{"function_name": "builder_inited", "function_define": "    if not module_dir:\n    if not path.isabs(module_dir):\n    if not path.exists(module_dir):", "piece": "if not path.isabs(module_dir):"}
{"function_name": "cmd_opts", "function_define": "    if _ignore_first_arg:\n    yield 'sphinxcontrib-apidoc'\n    yield '--force'", "piece": "yield 'sphinxcontrib-apidoc'"}
{"function_name": "_init_params", "function_define": "    self.__comm = MPI.COMM_WORLD\n    self.__root = 0\n    max_events = 1000000", "piece": "self.__root = 0"}
{"function_name": "test_tpv", "function_define": "    wcs2 = galsim.FitsWCS(fits_name)\n    for coord in coords:\n    print('coord = ', coord)", "piece": "for coord in coords:"}
{"function_name": "test_complex", "function_define": "    for row in ref:\n    print(row)\n    x = row['xpix']", "piece": "print(row)"}
{"function_name": "test_cache", "function_define": "    cache = dict()\n    assert len(wcs.cache) == 1\n    assert len(wcs2.cache) == 1", "piece": "assert len(wcs.cache) == 1"}
{"function_name": "test_sky", "function_define": "    import time\n    import cProfile, pstats\n    pr = cProfile.Profile()", "piece": "import cProfile, pstats"}
{"function_name": "test_repr", "function_define": "    import cPickle as pickle\n    except ImportError:\n    import pickle", "piece": "except ImportError:"}
{"function_name": "getFirstSeed", "function_define": "    Parameters:\n    Length of prime q in bits\n    seedlen: int", "piece": "Length of prime q in bits"}
{"function_name": "generateParams", "function_define": "    Parameters:\n    bit length of q - smaller prime\n    bit length of p - bigger prime", "piece": "bit length of q - smaller prime"}
{"function_name": "generateKeys", "function_define": "    Parameters:\n    Bigger prime\n    Smaller prime", "piece": "Bigger prime"}
{"function_name": "generateSecret", "function_define": "    Parameters:\n    Bigger prime\n    Smaller prime", "piece": "Bigger prime"}
{"function_name": "prepareMessage", "function_define": "    The procedure works as follows:\n    Parameters:\n    message: bytes", "piece": "Parameters:"}
{"function_name": "includes2scripts", "function_define": "    for i in range(len(f)):\n    l = f[i]\n    f[i + 1] = l + f[i + 1][2:]", "piece": "l = f[i]"}
{"function_name": "_ApplyGraphNet", "function_define": "    edge features.\n    Returns:\n    Updated `GraphsTuple`.", "piece": "Returns:"}
{"function_name": "init_quantities", "function_define": "    unit = None\n    if 'charge' in val_in:\n    unit = ureg.elementary_charge", "piece": "if 'charge' in val_in:"}
{"function_name": "init_parameters", "function_define": "    self._ndos = None\n    self._natoms = None\n    self._nspin = None", "piece": "self._natoms = None"}
{"function_name": "band_energies", "function_define": "    if self._band_energies is None:\n    data = np.transpose(self.data)\n    bands = data[1:]", "piece": "data = np.transpose(self.data)"}
{"function_name": "band_k_points", "function_define": "    if self._band_k_points is None:\n    data = np.transpose(self.data)\n    self._band_k_points = []", "piece": "data = np.transpose(self.data)"}
{"function_name": "energy_unit", "function_define": "    if self._energy_unit is None:\n    axis = self.root.find('./axis')\n    if axis is None:", "piece": "axis = self.root.find('./axis')"}
{"function_name": "number_of_lm", "function_define": "    if self._nlm is None:\n    if self.partial_dos is None:\n    self._nlm = 0", "piece": "if self.partial_dos is None:"}
{"function_name": "energies", "function_define": "    if self._energies is None:\n    if self.total_dos is None:\n    if self.energy_unit is not None:", "piece": "if self.total_dos is None:"}
{"function_name": "get_atom_labels", "function_define": "    labels = section.get('symbols')\n    if labels is None:\n    labels = []", "piece": "if labels is None:"}
{"function_name": "_parse_dos", "function_define": "    if energy_fermi is None:\n    sec_dos_values.spin = spin\n    if partialdos is None:", "piece": "sec_dos_values.spin = spin"}
{"function_name": "_parse_evalqp", "function_define": "    if data is None:\n    if key == 'k_points':\n    elif key == 'Znk':", "piece": "if key == 'k_points':"}
{"function_name": "_parse_dos_out", "function_define": "    data = self.dos_out_parser.data\n    if data is None:\n    if energy_fermi is None:", "piece": "if data is None:"}
{"function_name": "_parse_input_xs", "function_define": "    if xstype is not None:\n    if rgkmax is None:\n    if rgkmax is None:", "piece": "if rgkmax is None:"}
{"function_name": "_parse_xs_bse", "function_define": "    sec_run = self.archive.run[-1]\n    bse_files = []\n    for bse_type in bse_types:", "piece": "bse_files = []"}
{"function_name": "_parse_xs_tddft", "function_define": "    sec_run = self.archive.run[-1]\n    data = [[], [], []]\n    for i in range(len(qpoints)):", "piece": "data = [[], [], []]"}
{"function_name": "parse_xs", "function_define": "    sec_run = self.archive.run[-1]\n    if not xs_info_files:\n    self._calculation_type = 'xs'", "piece": "if not xs_info_files:"}
{"function_name": "parse_gw", "function_define": "    sec_run = self.archive.run[-1]\n    for f in gw_info_files:\n    if self.get_exciting_files(f):", "piece": "for f in gw_info_files:"}
{"function_name": "parse_method", "function_define": "    sec_run = self.archive.run[-1]\n    sec_electronic.method = 'DFT'\n    if smearing_kind is not None:", "piece": "sec_electronic.method = 'DFT'"}
{"function_name": "parse_scc", "function_define": "    sec_run = self.archive.run[-1]\n    if final is None:\n    if final is None:", "piece": "if final is None:"}
{"function_name": "parse_system", "function_define": "    sec_run = self.archive.run[-1]\n    if positions is None:\n    for f in input_file:", "piece": "if positions is None:"}
{"function_name": "parse_scf", "function_define": "    if energy_total is not None:\n    val = None\n    for name in names:", "piece": "val = None"}
{"function_name": "loadChangesets", "function_define": "    cursor = db.cursor()\n    if filtered_file_ids is None:\n    if load_chunks:", "piece": "if filtered_file_ids is None:"}
{"function_name": "set_kind_options", "function_define": "    if kind == None:\n    elif kind == 'mortgage':\n    self.options[key] = val", "piece": "elif kind == 'mortgage':"}
{"function_name": "find_pivot", "function_define": "    start = 0\n    end = len(input_list) - 1\n    while start <= end:", "piece": "end = len(input_list) - 1"}
{"function_name": "test_function", "function_define": "    if test_case == None:\n    print('None')\n    input_list = test_case[0]", "piece": "print('None')"}
{"function_name": "collections", "function_define": "    response = None\n    results = get_collections()\n    if 'message' in results:", "piece": "results = get_collections()"}
{"function_name": "analysis_results", "function_define": "    response = None\n    results = get_analysis_results()\n    if 'message' in results:", "piece": "results = get_analysis_results()"}
{"function_name": "build_new_static", "function_define": "    if env == 'prod':\n    print(output.stdout.decode())\n    print(output.stderr.decode())", "piece": "print(output.stdout.decode())"}
{"function_name": "deploy_static", "function_define": "    del os.environ['PYCHARM_HOSTED']\n    print(output.stdout.decode())\n    print(output.stderr.decode())", "piece": "print(output.stdout.decode())"}
{"function_name": "recognize", "function_define": "    n_tiles = 0\n    char = None\n    while pos < len(tiling):", "piece": "char = None"}
{"function_name": "send_mail", "function_define": "    fromaddr = fromaddr\n    toaddr = toaddr\n    msg = MIMEMultipart()", "piece": "toaddr = toaddr"}
{"function_name": "_print_welcome", "function_define": "    print('BUSCAMINAS')\n    print('*' * 50)\n    print('Elije una dificultad:')", "piece": "print('*' * 50)"}
{"function_name": "locate_mines", "function_define": "    located_mines = 0\n    while located_mines < mines:\n    located_mines += 1", "piece": "while located_mines < mines:"}
{"function_name": "set_mines", "function_define": "    global board\n    setting_mine = 0\n    while setting_mine < mines:", "piece": "setting_mine = 0"}
{"function_name": "set_guess", "function_define": "    for row in range(board_height):\n    if board[row][column] != 'X':\n    if row == 0:", "piece": "if board[row][column] != 'X':"}
{"function_name": "get_mines", "function_define": "    guess = 0\n    row = starts_row_in\n    while row <= ends_row_in:", "piece": "row = starts_row_in"}
{"function_name": "set_board", "function_define": "    global board\n    global second_board\n    set_mines()", "piece": "global second_board"}
{"function_name": "_print_action", "function_define": "    print('Seleccione la fila: ')\n    row = int(input())\n    print('Seleccione la columna: ')", "piece": "row = int(input())"}
{"function_name": "_list_insert", "function_define": "    pos = int(path[0][1:])\n    if len(path) == 1:\n    list_[pos] = value", "piece": "if len(path) == 1:"}
{"function_name": "_convert_list", "function_define": "    new_list = []\n    for item in list_:\n    new_list.append(item.as_dict())", "piece": "for item in list_:"}
{"function_name": "do_in_tempdir", "function_define": "    tempdir = tempfile.mkdtemp()\n    yield tempdir\n    shutil.rmtree(tempdir)", "piece": "yield tempdir"}
{"function_name": "testVocabulary", "function_define": "    for word in text.split(' '):\n    f.write('%s\\n' % word)\n    f.write('TEST')", "piece": "f.write('%s\\n' % word)"}
{"function_name": "runConversation", "function_define": "    Arguments:\n    Returns:\n    mic = test_mic.Mic(inputs)", "piece": "Returns:"}
{"function_name": "testGmail", "function_define": "    key = 'gmail_password'\n    from modules import Gmail\n    query = 'Check my email'", "piece": "from modules import Gmail"}
{"function_name": "testNews", "function_define": "    from modules import News\n    if self.send:\n    inputs = ['the first']", "piece": "if self.send:"}
{"function_name": "override", "function_define": "    if overrides is None:\n    ret = self.clone()\n    v = getattr(overrides, attrName)", "piece": "ret = self.clone()"}
{"function_name": "test_vm_reboot", "function_define": "    for i in range(3):\n    for vm_ref in vm_ref_list:\n    for vm_ref in vm_ref_list:", "piece": "for vm_ref in vm_ref_list:"}
{"function_name": "test_vm_suspend", "function_define": "    for i in range(3):\n    for vm_ref in vm_ref_list:\n    start = time.time()", "piece": "for vm_ref in vm_ref_list:"}
{"function_name": "test_crashdump", "function_define": "    ret = {}\n    if not self.control:\n    test_class.update([ret])", "piece": "if not self.control:"}
{"function_name": "rbf_kernel", "function_define": "    if x2 is None:\n    if x1.dim() == 1:\n    x1 = x1.unsqueeze(-1)", "piece": "if x1.dim() == 1:"}
{"function_name": "test_solve_qr", "function_define": "    size = 50\n    F = linear_op._piv_chol_self\n    x_exact = torch.solve(y, M)[0]", "piece": "F = linear_op._piv_chol_self"}
{"function_name": "make_handler", "function_define": "    if prs['order by']:\n    if prs['distinct']:\n    if prs['distinct']:", "piece": "if prs['distinct']:"}
{"function_name": "notifyIterate", "function_define": "    for item in iterator:\n    func(item)\n    yield item", "piece": "func(item)"}
{"function_name": "reset_cache", "function_define": "    del self.cumulativeIndexMap\n    del self.pts\n    del self.pts_time", "piece": "del self.pts"}
{"function_name": "_processFrames", "function_define": "    through = self[through]\n    for filter in self:\n    if filter is through:", "piece": "for filter in self:"}
{"function_name": "keyframes", "function_define": "    if len(self):\n    prev = self.prev\n    if isinstance(prev, BaseFilter):", "piece": "prev = self.prev"}
{"function_name": "get_parse_args", "function_define": "    args = parser.parse_args()\n    torch.manual_seed(args.seed)\n    np.random.seed(args.seed)", "piece": "torch.manual_seed(args.seed)"}
{"function_name": "augment_samples", "function_define": "    aug_samples = []\n    for sample in samples:\n    for i in range(4):", "piece": "for sample in samples:"}
{"function_name": "add_task", "function_define": "    if new_task_id == 0:\n    new_task.id = new_task_id\n    self.task_pool.append(new_task)", "piece": "new_task.id = new_task_id"}
{"function_name": "load_task", "function_define": "    samples = []\n    save_paths = []\n    for split in splits:", "piece": "save_paths = []"}
{"function_name": "get_similarities", "function_define": "    if component is None:\n    component = 'xyz'\n    sim = torch.tensor(sim)", "piece": "component = 'xyz'"}
{"function_name": "read_as_string", "function_define": "    result = ''\n    with open(filename) as file:\n    result += line", "piece": "with open(filename) as file:"}
{"function_name": "_ngram_terms", "function_define": "    split_terms = {}\n    if not isinstance(terms, dict):\n    terms = {terms: 1}", "piece": "if not isinstance(terms, dict):"}
{"function_name": "build_schema", "function_define": "    Build the schema from fields.\n    Required arguments:\n    an indexed meta-data.", "piece": "Required arguments:"}
{"function_name": "build_params", "function_define": "    if self.terms:\n    kwargs['terms'] = self.terms\n    if self.partials:", "piece": "kwargs['terms'] = self.terms"}
{"function_name": "build_query", "function_define": "    self.partials = []\n    self.queries = set()\n    self.terms = set()", "piece": "self.queries = set()"}
{"function_name": "check_connecting", "function_define": "    check_periods = 0\n    connecting = False\n    connecting = True", "piece": "connecting = False"}
{"function_name": "join_meeting", "function_define": "    logging.info('Join a meeting..')\n    found_join_meeting = False\n    pyautogui.click(x, y)", "piece": "found_join_meeting = False"}
{"function_name": "join_audio", "function_define": "    audio_joined = False\n    pyautogui.click(x, y)\n    audio_joined = True", "piece": "pyautogui.click(x, y)"}
{"function_name": "setup_schedule", "function_define": "    line_count = 0\n    for row in csv_reader:\n    if str(row['record']) == 'true':", "piece": "for row in csv_reader:"}
{"function_name": "find_color", "function_define": "    bags = []\n    for k in data:\n    if color in data[k]:", "piece": "for k in data:"}
{"function_name": "test_set_expire", "function_define": "    cache.set('key-A', 1234, 2)\n    time.sleep(2)\n    value = cache.get('key-A')", "piece": "time.sleep(2)"}
{"function_name": "get_images_path", "function_define": "    npy_names.append(ins[0])\n    capacity.append(ins[1])\n    file_names.extend(ins[2])", "piece": "capacity.append(ins[1])"}
{"function_name": "writer_worker", "function_define": "    video_idx = 0\n    local_feature = []\n    local_filename = []", "piece": "local_feature = []"}
{"function_name": "input_pipeline", "function_define": "    dataset = dataset.repeat(1)\n    if args.num_gpu > 1:\n    for i in range(args.num_gpu):", "piece": "if args.num_gpu > 1:"}
{"function_name": "box_intersection", "function_define": "    w = overlap(a.x, a.w, b.x, b.w)\n    h = overlap(a.y, a.h, b.y, b.h)\n    if w < 0 or h < 0:", "piece": "h = overlap(a.y, a.h, b.y, b.h)"}
{"function_name": "conta_letras", "function_define": "    count = 0\n    if contar == 'vogais':\n    for letra in frase:", "piece": "if contar == 'vogais':"}
{"function_name": "find_common", "function_define": "    for i in list1:\n    for j in list2:\n    if i == j:", "piece": "for j in list2:"}
{"function_name": "ok_select", "function_define": "    global _ser_name\n    global _debug\n    global _tracking_interval", "piece": "global _debug"}
{"function_name": "check_auth_info", "function_define": "    if project is None:\n    source_party = None\n    source_party = party", "piece": "source_party = None"}
{"function_name": "_filter_workflow", "function_define": "    if workflow is None:\n    workflow.ClearField('variables')\n    for i in var_list:", "piece": "workflow.ClearField('variables')"}
{"function_name": "get_workflow", "function_define": "    with self._app.app_context():\n    assert workflow is not None\n    config = workflow.get_config()", "piece": "assert workflow is not None"}
{"function_name": "recommend", "function_define": "    recommended = None\n    recommended = field\n    field += ' (recommended)'", "piece": "recommended = field"}
{"function_name": "csv_save", "function_define": "    headwriter.writeheader()\n    for f in files:\n    row = [str(r), f, size]", "piece": "for f in files:"}
{"function_name": "select_window_id", "function_define": "    if current_workspace_only:\n    for v in windows.ws.values():\n    if reverse_mode:", "piece": "for v in windows.ws.values():"}
{"function_name": "_get_aux_fg", "function_define": "    calls to scipy.special.sici().\n    lam = abs(lam)\n    aux_sine, aux_cosine = sici(lam)", "piece": "lam = abs(lam)"}
{"function_name": "_get_gamma2", "function_define": "    lam : float\n    Non-dimensional x-position.\n    aux_f : float", "piece": "Non-dimensional x-position."}
{"function_name": "_get_gamma3", "function_define": "    lam : float\n    Non-dimensional x-position.\n    aux_f : float", "piece": "Non-dimensional x-position."}
{"function_name": "cal_similarity", "function_define": "    B, C, h, w = input.size()\n    Cova_Sim = []\n    for i in range(B):", "piece": "Cova_Sim = []"}
{"function_name": "_button_click", "function_define": "    except SpaceOccupiedError:\n    if winner != Board.EMPTY:\n    self._paint_board()", "piece": "if winner != Board.EMPTY:"}
{"function_name": "_paint_board", "function_define": "    for row in range(Board.SIZE):\n    for col in range(Board.SIZE):\n    if player == Board.EMPTY:", "piece": "for col in range(Board.SIZE):"}
{"function_name": "photos_iter", "function_define": "    tools = VkTools(session)\n    for photo in photos:\n    src = extract_photos(photo)", "piece": "for photo in photos:"}
{"function_name": "extract_photos", "function_define": "    for s in photo['sizes']:\n    d[s['type']] = s\n    if small is None or big is None:", "piece": "d[s['type']] = s"}
{"function_name": "handle_user", "function_define": "    find_user = False\n    count_enter = x['count'] + 1\n    find_user = True", "piece": "count_enter = x['count'] + 1"}
{"function_name": "tuple2dict", "function_define": "    Parameters\n    k = t[0]\n    v = t[1]", "piece": "k = t[0]"}
{"function_name": "dict2arg", "function_define": "    Parameters\n    arg_out :\n    for k, v in d.items():", "piece": "arg_out :"}
{"function_name": "arg2dict", "function_define": "    Parameters\n    dict_out :\n    elif arg[0][:5] == 'NAME:':", "piece": "dict_out :"}
{"function_name": "format_decimals", "function_define": "    Parameters\n    if float(el) > 1000:\n    elif float(el) > 1:", "piece": "if float(el) > 1000:"}
{"function_name": "random_string", "function_define": "    Parameters\n    length :\n    random string", "piece": "length :"}
{"function_name": "clean_html_basic", "function_define": "    text = text.strip()\n    text = text.replace(',', '')\n    text = text.replace('\\n', '')", "piece": "text = text.replace(',', '')"}
{"function_name": "clean_html", "function_define": "    output = ''\n    for t in text_only:\n    output += f'{t} '", "piece": "for t in text_only:"}
{"function_name": "clean_html_full", "function_define": "    output = ''\n    for t in text_only:\n    output += t", "piece": "for t in text_only:"}
{"function_name": "test_containers", "function_define": "    c_name = 'redis'\n    c_image = 'redis:latest'\n    c_image_2 = 'redis:3.2.3'", "piece": "c_image = 'redis:latest'"}
{"function_name": "test_pod", "function_define": "    cj.model = model\n    cj.concurrency_policy = 'Forbid'\n    cj.create()", "piece": "cj.concurrency_policy = 'Forbid'"}
{"function_name": "change_ndim", "function_define": "    if state == Qt.Checked:\n    self.layer.n_dimensional = True\n    self.layer.n_dimensional = False", "piece": "self.layer.n_dimensional = True"}
{"function_name": "find_sets", "function_define": "    sets = []\n    for t in triplets:\n    if check_set(t):", "piece": "for t in triplets:"}
{"function_name": "_cu_kernel", "function_define": "    i, j = cuda.grid(2)\n    if i >= traj.shape[0]:\n    if j >= traj.shape[0] - i:", "piece": "if i >= traj.shape[0]:"}
{"function_name": "_generate_q_vecs", "function_define": "    ret = []\n    for _qq in np.ndindex(_shape):\n    q_tmp = 0", "piece": "for _qq in np.ndindex(_shape):"}
{"function_name": "_runSimulation", "function_define": "    totalThreads = blocks * threads\n    experiments = len(parameters)\n    timer = time.time()", "piece": "experiments = len(parameters)"}
{"function_name": "text_processor", "function_define": "    rows = data.split('\\n')\n    adict = dict()\n    for row in rows:", "piece": "adict = dict()"}
{"function_name": "get_tau_fn", "function_define": "    if func == fn_dict['abs']:\n    elif func == fn_dict['2dpoly']:\n    elif func == fn_dict['sigmoid']:", "piece": "elif func == fn_dict['2dpoly']:"}
{"function_name": "standardize", "function_define": "    ym = y.mean()\n    ystd = y.std()\n    y = (y - ym) / ystd", "piece": "ystd = y.std()"}
{"function_name": "fetch_one", "function_define": "    if 'records' in response:\n    if len(response['records']) > 0:\n    elif len(response) > 0:", "piece": "if len(response['records']) > 0:"}
{"function_name": "test_padding", "function_define": "    self.args.label_smoothing = 0.1\n    args1 = copy.copy(self.args)\n    loss1 = get_one_no_padding(0)", "piece": "args1 = copy.copy(self.args)"}
{"function_name": "adjust_hsv", "function_define": "    DEFAULT_HUE = 0.5\n    DEFAULT_SATURATION = 0.5\n    DEFAULT_VALUE = 0.5", "piece": "DEFAULT_SATURATION = 0.5"}
{"function_name": "get_crop", "function_define": "    crop = 513\n    if imageshape[0] > crop:\n    crop_y = [0, imageshape[0]]", "piece": "if imageshape[0] > crop:"}
{"function_name": "constrain_bbox", "function_define": "    ins = pred_instances[idx]\n    imgH, imgW = ins.image_size\n    x1, y1, x2, y2 = bbox_xyxy[i]", "piece": "imgH, imgW = ins.image_size"}
{"function_name": "dice_coefficient", "function_define": "    eps = 1e-05\n    n_inst = x.size(0)\n    x = x.reshape(n_inst, -1)", "piece": "n_inst = x.size(0)"}
{"function_name": "run_simulation", "function_define": "    nets = []\n    cars = []\n    pygame.init()", "piece": "cars = []"}
{"function_name": "check_collision", "function_define": "    self.alive = True\n    for point in self.corners:\n    self.alive = False", "piece": "for point in self.corners:"}
{"function_name": "print_data", "function_define": "    runners = parsers.parse(year)\n    if runners:\n    mode_age = mode(ages)", "piece": "if runners:"}
{"function_name": "export_data", "function_define": "    for year in years:\n    runners = parsers.parse(year)\n    row = []", "piece": "runners = parsers.parse(year)"}
{"function_name": "_ParseLine", "function_define": "    a line of a text file.\n    year += 2000\n    except ValueError:", "piece": "year += 2000"}
{"function_name": "VerifyStructure", "function_define": "    Returns:\n    except pyparsing.ParseException:\n    except ValueError:", "piece": "except pyparsing.ParseException:"}
{"function_name": "_ParseLogline", "function_define": "    a line of a text file.\n    except ValueError:\n    event_data.offset = self.offset", "piece": "except ValueError:"}
{"function_name": "countTestCases", "function_define": "    cases = self._removed_tests\n    for test in self:\n    if test:", "piece": "for test in self:"}
{"function_name": "_server_request", "function_define": "    if body is not None and as_json:\n    body = json.dumps(body)\n    content = response.read()", "piece": "body = json.dumps(body)"}
{"function_name": "embed_sent", "function_define": "    if not batched:\n    if not batched:\n    embeddings = []", "piece": "if not batched:"}
{"function_name": "choose_vocab", "function_define": "    Returns:\n    xnmt.vocab.Vocab: chosen vocab\n    if vocab is not None:", "piece": "xnmt.vocab.Vocab: chosen vocab"}
{"function_name": "create_manifest", "function_define": "    if len(manifest_urls) == 0:\n    url = None\n    if is_debug():", "piece": "url = None"}
{"function_name": "cp_request", "function_define": "    load_config()\n    headers_copy = dict(headers)\n    repeat = True", "piece": "headers_copy = dict(headers)"}
{"function_name": "combine_files", "function_define": "    output = PdfFileWriter()\n    for filename in files:\n    page = existing_pdf.getPage(0)", "piece": "for filename in files:"}
{"function_name": "add_writing", "function_define": "    output = PdfFileWriter()\n    for filename, lines in files:\n    packet = io.BytesIO()", "piece": "for filename, lines in files:"}
{"function_name": "_clean_and_fix", "function_define": "    value = value.strip()\n    if not _end_punc(value):\n    value += '.'", "piece": "if not _end_punc(value):"}
{"function_name": "get_columns_meta", "function_define": "    if x not in _idx_map:\n    for j, c in enumerate(col_map):\n    if c.idx == x:", "piece": "for j, c in enumerate(col_map):"}
{"function_name": "check_uniqueness", "function_define": "    key_counter = {}\n    next(data)\n    for line, row in data:", "piece": "next(data)"}
{"function_name": "show_rows", "function_define": "    if args.hide_linenum:\n    table = [headers]\n    for line, row in data:", "piece": "table = [headers]"}
{"function_name": "print_table", "function_define": "    if args.format == 'csv':\n    for r in table:\n    writer.writerow(r)", "piece": "for r in table:"}
{"function_name": "__build_int_list", "function_define": "    if _ints:\n    list_ = []\n    for _int in _ints.split(','):", "piece": "list_ = []"}
{"function_name": "__build_filters", "function_define": "    if flts_:\n    match = filter_re.match(f)\n    if not match:", "piece": "match = filter_re.match(f)"}
{"function_name": "_next_row", "function_define": "    self.__local_progress += 1\n    row = next(self.data)\n    for _ in range(0, _steps):", "piece": "row = next(self.data)"}
{"function_name": "push_value", "function_define": "    if value is None or value == '':\n    self.none_values_count += 1\n    if self.first_value is None:", "piece": "self.none_values_count += 1"}
{"function_name": "colnum_letter", "function_define": "    string = ''\n    n = self.idx + 1\n    while n > 0:", "piece": "n = self.idx + 1"}
{"function_name": "__guess_type", "function_define": "    for g_type, g_func in guessers:\n    if g_func():\n    continue", "piece": "if g_func():"}
{"function_name": "get_col_map", "function_define": "    if x not in _idx_map:\n    for j, c in enumerate(col_map):\n    if c.idx == x:", "piece": "for j, c in enumerate(col_map):"}
{"function_name": "generate_filter", "function_define": "    match = filter_re.match(f)\n    if not match:\n    col = match.group(1)", "piece": "if not match:"}
{"function_name": "restore_cwd", "function_define": "    d = os.getcwd()\n    finally:\n    os.chdir(d)", "piece": "finally:"}
{"function_name": "visualize_mf", "function_define": "    ax0.set_title('Error')\n    ax1.set_title('Del_Error')\n    ax2.set_title('Output')", "piece": "ax1.set_title('Del_Error')"}
{"function_name": "visualize_output", "function_define": "    for ax in (ax3, ax4):\n    ax.get_xaxis().tick_bottom()\n    ax.get_yaxis().tick_left()", "piece": "ax.get_xaxis().tick_bottom()"}
{"function_name": "MessagePump", "function_define": "    waitables = [StopEvent]\n    while 1:\n    print('stop event')", "piece": "while 1:"}
{"function_name": "OnReceived", "function_define": "    if self.name == 'stockmst':\n    print('recieved')\n    win32event.SetEvent(StopEvent)", "piece": "print('recieved')"}
{"function_name": "fun_fitness", "function_define": "    fitness = 0\n    sum_weights = 0\n    for item in chromosome:", "piece": "sum_weights = 0"}
{"function_name": "_sanitize_path", "function_define": "    except TypeError:\n    filepath_obj = Path(filepath)\n    except ValueError:", "piece": "filepath_obj = Path(filepath)"}
{"function_name": "sendfile", "function_define": "    if not filepath_obj.exists():\n    if mimetype is None:\n    if guessed_mimetype:", "piece": "if mimetype is None:"}
{"function_name": "genErrorMap", "function_define": "    thr_maps (dict): Threshold map\n    bpc (int): Bits per cell\n    Returns:", "piece": "bpc (int): Bits per cell"}
{"function_name": "load_json_file", "function_define": "    json_arr = []\n    for i in range(num_file):\n    d = json.load(f)", "piece": "for i in range(num_file):"}
{"function_name": "sort_json_file", "function_define": "    lst = []\n    lst.append(data_file)\n    json_file = natsorted(lst)", "piece": "lst.append(data_file)"}
{"function_name": "map_json_to_pose", "function_define": "    mapped = zip(json_file, peeps)\n    mapped = set(mapped)\n    json_to_peeps = list(mapped)", "piece": "mapped = set(mapped)"}
{"function_name": "get_pose_list", "function_define": "    arr = []\n    print(j)\n    except KeyError as e:", "piece": "print(j)"}
{"function_name": "remove_zero", "function_define": "    if boolean == True:\n    for j in range(n):\n    for i in range(36):", "piece": "for j in range(n):"}
{"function_name": "select_json", "function_define": "    global x_data\n    x_data = []\n    y_data = []", "piece": "x_data = []"}
{"function_name": "get_pin_value", "function_define": "    if legacy:\n    r = redis.Redis()\n    except KeyError:", "piece": "r = redis.Redis()"}
{"function_name": "build_inputs", "function_define": "    Outputs:\n    self.images\n    self.input_seqs", "piece": "self.images"}
{"function_name": "get_image_output", "function_define": "    if self.mode == 'inference':\n    trainable = False\n    if self.mode == 'train':", "piece": "trainable = False"}
{"function_name": "username_test", "function_define": "    Username('userwith-hypens')\n    Username('A' * 30)\n    Username('A1')", "piece": "Username('A' * 30)"}
{"function_name": "mini_topsim", "function_define": "    from the advance module.\n    both surfaces is called.\n    print('Running miniTopSim ...')", "piece": "both surfaces is called."}
{"function_name": "getLogger", "function_define": "    addHandler method.\n    setLoggerClass(MozLogger)\n    if handler:", "piece": "setLoggerClass(MozLogger)"}
{"function_name": "log_structured", "function_define": "    if params is None:\n    params = {}\n    if isinstance(level, int):", "piece": "params = {}"}
{"function_name": "get_games_db", "function_define": "    games = []\n    paths = self._get_rom_paths()\n    for p in paths:", "piece": "paths = self._get_rom_paths()"}
{"function_name": "_parse_dbf", "function_define": "    games_xml = file.getroot()\n    records = []\n    for game in games:", "piece": "records = []"}
{"function_name": "parsePrimerName", "function_define": "    if x[0:2] in [\"3'\", \"5'\"]:\n    if x.startswith('5'):\n    elif x.startswith('3'):", "piece": "if x.startswith('5'):"}
{"function_name": "createPrimers", "function_define": "    mapfile = self.file + '.sam'\n    if not os.path.exists(mapfile):\n    primers = {}", "piece": "if not os.path.exists(mapfile):"}
{"function_name": "amplicons", "function_define": "    amplicons = []\n    for m in self[0].loci:\n    for n in self[1].loci:", "piece": "for m in self[0].loci:"}
{"function_name": "primerSuffixes", "function_define": "    suffixes = []\n    for p in self:\n    suffixes.append('NA')", "piece": "for p in self:"}
{"function_name": "snpCheckPrimer", "function_define": "    accept = True\n    snpccs = []\n    snpccs_all = None", "piece": "snpccs = []"}
{"function_name": "checkTarget", "function_define": "    for locus in self.loci:\n    tichrom = tichrom[3:]\n    if locus.chrom == tichrom:", "piece": "tichrom = tichrom[3:]"}
{"function_name": "snpCheck", "function_define": "    db = pysam.TabixFile(database)\n    except ValueError:\n    snps = []", "piece": "except ValueError:"}
{"function_name": "load_imdb_df", "function_define": "    Returns:\n    index0 index1 index2\n    dfs = {}", "piece": "index0 index1 index2"}
{"function_name": "load_glove", "function_define": "    the .12 .22 .32 .42 ... .42\n    num_dim = isglove(filepath)\n    wv = KeyedVectors(num_dim)", "piece": "num_dim = isglove(filepath)"}
{"function_name": "load_anki_df", "function_define": "    if os.path.isfile(language):\n    filepath = language\n    columns = list(df.columns)", "piece": "filepath = language"}
{"function_name": "rename_file", "function_define": "    if not isinstance(source, str):\n    if source == dest:\n    os.rename(source, dest)", "piece": "if source == dest:"}
{"function_name": "series_strip", "function_define": "    if ignorecase:\n    mask = series.str.lower()\n    endswith = endswith.lower()", "piece": "mask = series.str.lower()"}
{"function_name": "get_leet_map", "function_define": "    df.columns = ['eng', 'l33t']\n    table = []\n    for i, row in df.iterrows():", "piece": "table = []"}
{"function_name": "create_big_url", "function_define": "    global BIG_URLS\n    if not filemeta:\n    filename = filemeta['filename']", "piece": "if not filemeta:"}
{"function_name": "get_ftp_filemeta", "function_define": "    ftp.login(username, password)\n    ftp.cwd(parsed_url.path)\n    ftp.quit()", "piece": "ftp.cwd(parsed_url.path)"}
{"function_name": "download_unzip", "function_define": "    Also looks\n    file_paths = {}\n    for name in names:", "piece": "file_paths = {}"}
{"function_name": "download_name", "function_define": "    meta = BIG_URLS[name]\n    size = meta[1] or -1\n    url = meta[0]", "piece": "size = meta[1] or -1"}
{"function_name": "read_named_csv", "function_define": "    if os.path.isfile(name):\n    ipdb.set_trace()\n    except IOError:", "piece": "ipdb.set_trace()"}
{"function_name": "load_geonames", "function_define": "    Reference:\n    srtm processed by cgiar/ciat.\n    df.columns = columns", "piece": "srtm processed by cgiar/ciat."}
{"function_name": "clean_win_tsv", "function_define": "    index_col = df.columns[0]\n    original_len = len(df)\n    df.iloc[-1, 0] = np.nan", "piece": "original_len = len(df)"}
{"function_name": "add_body", "function_define": "    if name is None:\n    if color is None:\n    self.init_com()", "piece": "if color is None:"}
{"function_name": "init_com", "function_define": "    r_numerator = 0\n    v_numerator = 0\n    denominator = 0", "piece": "v_numerator = 0"}
{"function_name": "tweet_id2time", "function_define": "    id_bin = bin(tweet_id >> 22)\n    tweet_time = int(id_bin, 2)\n    tweet_time += 1288834974657", "piece": "tweet_time = int(id_bin, 2)"}
{"function_name": "get_tweet", "function_define": "    res_text = json.loads(res.text)\n    max_tweet = start_time\n    tweets = list()", "piece": "max_tweet = start_time"}
{"function_name": "screening", "function_define": "    s = text\n    if s[0:3] == 'RT ':\n    s = s.replace(s[0:3], '')", "piece": "if s[0:3] == 'RT ':"}
{"function_name": "check_limit", "function_define": "    unavailable_cnt = 0\n    while True:\n    res = session.get(url)", "piece": "while True:"}
{"function_name": "wait_until_reset", "function_define": "    seconds = max(seconds, 0)\n    sys.stdout.flush()\n    time.sleep(seconds + 10)", "piece": "sys.stdout.flush()"}
{"function_name": "_extract_urls", "function_define": "    if not entries:\n    if peertube_url:\n    entries = [peertube_url]", "piece": "if peertube_url:"}
{"function_name": "_get_subtitles", "function_define": "    data = captions.get('data')\n    if not isinstance(data, list):\n    subtitles = {}", "piece": "if not isinstance(data, list):"}
{"function_name": "draw_window", "function_define": "    if gen == 0:\n    win.blit(bg_img, (0, 0))\n    for pipe in pipes:", "piece": "win.blit(bg_img, (0, 0))"}
{"function_name": "validate_job", "function_define": "    error_msgs = []\n    val = parsed_job.get(name)\n    if val is None:", "piece": "val = parsed_job.get(name)"}
{"function_name": "gotChange", "function_define": "    except Exception as e:\n    import traceback\n    traceback.print_exc()", "piece": "import traceback"}
{"function_name": "_gotChangeImpl", "function_define": "    for poller in self.pollers:\n    continue\n    parsed = {}", "piece": "continue"}
{"function_name": "index_number", "function_define": "    index = 0\n    for i in range(1, len(li) - 1):\n    if abs(select) > abs(select2):", "piece": "for i in range(1, len(li) - 1):"}
{"function_name": "find_cmax_cmin", "function_define": "    cpr = cplus\n    cmr = cminus\n    cpl = cplus", "piece": "cmr = cminus"}
{"function_name": "user_create", "function_define": "    context['ignore_auth'] = True\n    for group in groups:\n    if not context['auth_user_obj']:", "piece": "for group in groups:"}
{"function_name": "before_search", "function_define": "    except ValueError:\n    query = query.format(begin, end)\n    search_params['q'] = new_q", "piece": "query = query.format(begin, end)"}
{"function_name": "before_index", "function_define": "    except ValueError:\n    if data_dict.get('start_time'):\n    if data_dict.get('end_time'):", "piece": "if data_dict.get('start_time'):"}
{"function_name": "after_search", "function_define": "    if not facets or not results:\n    for facet in facets.values():\n    for item in facet['items']:", "piece": "for facet in facets.values():"}
{"function_name": "create_alien", "function_define": "    alien = Alien(setting, screen)\n    alien_width = alien.rect.width\n    alien_height = alien.rect.height", "piece": "alien_width = alien.rect.width"}
{"function_name": "set_start_time", "function_define": "    f = open('time.txt', 'w+')\n    f.write(time)\n    f.close()", "piece": "f.write(time)"}
{"function_name": "set_end_time", "function_define": "    f = open('time.txt', 'a+')\n    f.write('\\n' + time)\n    f.close()", "piece": "f.write('\\n' + time)"}
{"function_name": "login_admin", "function_define": "    admin = []\n    query = 'select * from admin'\n    cursor.execute(query)", "piece": "query = 'select * from admin'"}
{"function_name": "upload_soal", "function_define": "    isi = data.split(',')\n    print(isi)\n    print(query)", "piece": "print(isi)"}
{"function_name": "lihat_soal", "function_define": "    soal = []\n    cursor.execute(query)\n    soal = cursor.fetchall()", "piece": "cursor.execute(query)"}
{"function_name": "get_soal", "function_define": "    cursor.execute(query)\n    soal = cursor.fetchall()\n    soal_peserta = []", "piece": "soal = cursor.fetchall()"}
{"function_name": "upload_nilai", "function_define": "    print(query)\n    cursor.execute(query)\n    db.commit()", "piece": "cursor.execute(query)"}
{"function_name": "lihat_jawaban", "function_define": "    jawaban = []\n    cursor.execute(query)\n    jawaban = cursor.fetchall()", "piece": "cursor.execute(query)"}
{"function_name": "from_database", "function_define": "    region_model = cls()\n    region_model.id = region.id\n    region_model.name = region.name", "piece": "region_model.id = region.id"}
{"function_name": "_lazy_load_hook", "function_define": "    are properly initialized.\n    key = prefix + name\n    key = prefix + name", "piece": "key = prefix + name"}
{"function_name": "materialize", "function_define": "    the arguments.\n    parameters\n    Optional.", "piece": "parameters"}
{"function_name": "add_logic", "function_define": "    response = None\n    cancel_url = '../'\n    logic_form = LogicForm(question)", "piece": "cancel_url = '../'"}
{"function_name": "manage_loop", "function_define": "    cancel_url = '../'\n    if request.method == 'POST':\n    if looping_form.is_valid():", "piece": "if request.method == 'POST':"}
{"function_name": "update_orders", "function_define": "    if len(new_orders) > 0:\n    if inlines:\n    start_question = inlines[0]", "piece": "if inlines:"}
{"function_name": "getAcceleration", "function_define": "    except RuntimeError:\n    if result > 0:\n    raise PhidgetException(result)", "piece": "if result > 0:"}
{"function_name": "getAxisCount", "function_define": "    except RuntimeError:\n    if result > 0:\n    raise PhidgetException(result)", "piece": "if result > 0:"}
{"function_name": "getDataInterval", "function_define": "    except RuntimeError:\n    if result > 0:\n    raise PhidgetException(result)", "piece": "if result > 0:"}
{"function_name": "setDataInterval", "function_define": "    except RuntimeError:\n    if result > 0:\n    raise PhidgetException(result)", "piece": "if result > 0:"}
{"function_name": "sensor_arg", "function_define": "    if not match:\n    if 0 != len(keys):\n    sensor, version = match.groups()", "piece": "if 0 != len(keys):"}
{"function_name": "on_shutdown", "function_define": "    self._extension_path = None\n    if self._ros2bridge is not None:\n    self._ros2bridge = None", "piece": "if self._ros2bridge is not None:"}
{"function_name": "get_objects", "function_define": "    if model in excluded_models:\n    continue\n    if use_base_manager:", "piece": "continue"}
{"function_name": "_get_params", "function_define": "    image = query_image(sample)\n    r_x = torch.randint(W, ())\n    r_y = torch.randint(H, ())", "piece": "r_x = torch.randint(W, ())"}
{"function_name": "print_pins", "function_define": "    rpi_pins = RPi3Pins()\n    print(' Power light ^^ ')\n    pin_id = str(pin.id)", "piece": "print(' Power light ^^ ')"}
{"function_name": "get_pins_by_type", "function_define": "    query_results = []\n    if entry.pin_type == pin_type:\n    query_results.append(entry)", "piece": "if entry.pin_type == pin_type:"}
{"function_name": "pin_as_string", "function_define": "    pin_id = str(pin.id)\n    special_func = ']\\t\\t\\t'\n    if pin.special_func is not None:", "piece": "special_func = ']\\t\\t\\t'"}
{"function_name": "moduleRun", "function_define": "    zones = os.listdir(data_dir)\n    for zone in zones:\n    fpaths = os.listdir(dpath)", "piece": "for zone in zones:"}
{"function_name": "set_brightness", "function_define": "    if int(brightness) > 15:\n    elif int(brightness) < 0:\n    bright.write(str(brightness))", "piece": "elif int(brightness) < 0:"}
{"function_name": "_get_stat", "function_define": "    stat = []\n    with open(self.stat, 'r') as f:\n    for line in f:", "piece": "with open(self.stat, 'r') as f:"}
{"function_name": "_filter_stat", "function_define": "    fields = stat[0].split()\n    new_stat = []\n    for line in stat:", "piece": "new_stat = []"}
{"function_name": "test_binary_auto", "function_define": "    np.random.seed(42)\n    N = 1000000\n    m_list = [1.0, 0.1, 0.01, 0.001]", "piece": "N = 1000000"}
{"function_name": "plot_stats", "function_define": "    if axes is None:\n    axes[0, index].set_ylabel(value)\n    if goals is not None:", "piece": "axes[0, index].set_ylabel(value)"}
{"function_name": "plot_models_1D", "function_define": "    plt.xlabel('Sample')\n    plt.ylabel('Density')\n    plt.title('Distplot for Models')", "piece": "plt.ylabel('Density')"}
{"function_name": "plot_models_2D", "function_define": "    plt.colorbar(c2)\n    plt.xlabel('X')\n    plt.ylabel('Y')", "piece": "plt.xlabel('X')"}
{"function_name": "plot_contour_1d", "function_define": "    probs = np.nan_to_num(probs)\n    plt.xlabel('X')\n    plt.ylabel('Prob')", "piece": "plt.xlabel('X')"}
{"function_name": "plot_contour_2d", "function_define": "    plt.colorbar(c2)\n    plt.xlabel('X')\n    plt.ylabel('Y')", "piece": "plt.xlabel('X')"}
{"function_name": "plot_model_1D", "function_define": "    plt.xlabel('Sample')\n    plt.ylabel('Density')\n    plt.title('Distplot for Model')", "piece": "plt.ylabel('Density')"}
{"function_name": "plot_hists_1D", "function_define": "    plt.xlabel('Sample')\n    plt.ylabel('Density')\n    plt.title('Distplot for Model')", "piece": "plt.ylabel('Density')"}
{"function_name": "plot_hists_2D", "function_define": "    plt.xlabel('X')\n    plt.ylabel('Y')\n    plt.xlim(x_min, x_max)", "piece": "plt.ylabel('Y')"}
{"function_name": "plot_hist_1D", "function_define": "    plt.xlabel('Sample')\n    plt.ylabel('Density')\n    plt.title('Distplot for Model')", "piece": "plt.ylabel('Density')"}
{"function_name": "plot_mcmc_1D", "function_define": "    y = samples.squeeze(1)\n    sns.lineplot(x, y)\n    plt.xlabel('Sample #')", "piece": "sns.lineplot(x, y)"}
{"function_name": "plot_mcmc_2D", "function_define": "    y_0 = samples[:, 0]\n    y_1 = samples[:, 1]\n    ax.set_ylabel('X')", "piece": "y_1 = samples[:, 1]"}
{"function_name": "plot_emd_hist", "function_define": "    if colorMap is None:\n    for i in range(len(hist)):\n    plt.axis('off')", "piece": "for i in range(len(hist)):"}
{"function_name": "plot_emd_gamma", "function_define": "    fig, ax = plt.subplots(1, 2)\n    fig.set_figheight(15)\n    fig.set_figwidth(15)", "piece": "fig.set_figheight(15)"}
{"function_name": "get_minutebar", "function_define": "    output = []\n    a = C_PERIODIC_BAR()\n    output.append(elem)", "piece": "a = C_PERIODIC_BAR()"}
{"function_name": "sin_for_time", "function_define": "    samplePerNano = SAMPLES * 1e-08\n    index0 = 0\n    for i in range(0, len(x)):", "piece": "index0 = 0"}
{"function_name": "gaussianEnvelope", "function_define": "    x0 = 10000\n    sigma = 100000\n    f = 2000000", "piece": "sigma = 100000"}
{"function_name": "sechEnvelope", "function_define": "    T = 1000\n    f = 2000000\n    x0 = 100000", "piece": "f = 2000000"}
{"function_name": "prepare_mcp_dist", "function_define": "    if self.world_size > 1:\n    model = self.set_up_dist(rank)\n    model = self.model", "piece": "model = self.set_up_dist(rank)"}
{"function_name": "prepare_mcp", "function_define": "    if os.path.exists(loader_file):\n    os.makedirs(self.temp_dir)\n    gather_res = []", "piece": "os.makedirs(self.temp_dir)"}
{"function_name": "mcp_dist", "function_define": "    if self.world_size > 1:\n    model = self.set_up_dist(rank)\n    model = self.model", "piece": "model = self.set_up_dist(rank)"}
{"function_name": "self_train_dist", "function_define": "    model = self.set_up_dist(rank)\n    if self.early_stop:\n    agree_count = 0", "piece": "if self.early_stop:"}
{"function_name": "self_train", "function_define": "    if os.path.exists(loader_file):\n    print(f'\\nStart self-training.')\n    if self.world_size > 1:", "piece": "print(f'\\nStart self-training.')"}
{"function_name": "cuda_mem_error", "function_define": "    if rank == 0:\n    print(err)\n    if mode == 'eval':", "piece": "print(err)"}
{"function_name": "volatility", "function_define": "    Parameters:\n    Returns:\n    Return type: void", "piece": "Returns:"}
{"function_name": "h3_transfer", "function_define": "    quic_sender.stream_queue.clear()\n    http_events = []\n    while event is not None:", "piece": "http_events = []"}
{"function_name": "detect_exit_ats", "function_define": "    exit_locs = []\n    if add_noret_functions:\n    for segea in Segments():", "piece": "if add_noret_functions:"}
{"function_name": "dump_exit_ats", "function_define": "    exit_locs = detect_exit_ats()\n    with open(filename, 'w') as f:\n    f.write('exit_at:\\n')", "piece": "with open(filename, 'w') as f:"}
{"function_name": "from_uuid16", "function_define": "    Returns:\n    BTUUID: The resulting UUID.\n    hex = '0000'", "piece": "BTUUID: The resulting UUID."}
{"function_name": "from_uuid16_128", "function_define": "    Returns:\n    BTUUID: The resulting UUID.\n    if len(id) == 4:", "piece": "BTUUID: The resulting UUID."}
{"function_name": "ssl_required", "function_define": "    SSL decorator\n    if app.config.get('SSL'):\n    if request.is_secure:", "piece": "if app.config.get('SSL'):"}
{"function_name": "require_appkey", "function_define": "    if request.headers.get('Token'):\n    abort(401)\n    abort(401)", "piece": "abort(401)"}
{"function_name": "get_col_mins", "function_define": "    for i in range(len(m[0])):\n    for row in m:\n    columns[i].append(row[i])", "piece": "for row in m:"}
{"function_name": "saddle_points", "function_define": "    if not matrix:\n    col_mins = get_col_mins(matrix)\n    points: List[SaddlePoint] = []", "piece": "col_mins = get_col_mins(matrix)"}
{"function_name": "iterate_file", "function_define": "    greatest = []\n    smallest = []\n    a_positive = None", "piece": "smallest = []"}
{"function_name": "greatest_product", "function_define": "    answer = []\n    if sum(mask) >= 3:\n    answer = greatest[:3]", "piece": "if sum(mask) >= 3:"}
{"function_name": "testPolyModel", "function_define": "    a = ndb.StringProperty()\n    class B(A):\n    inst = B(a='abc')", "piece": "class B(A):"}
{"function_name": "testNewId", "function_define": "    inst.put()\n    new.put()\n    self.assertEqual('abc', new.a)", "piece": "new.put()"}
{"function_name": "testSameSchema", "function_define": "    class A(ndb.Model):\n    a = ndb.StringProperty()\n    b = ndb.StringProperty()", "piece": "a = ndb.StringProperty()"}
{"function_name": "testChangeSchema", "function_define": "    class A(ndb.Model):\n    a = ndb.StringProperty()\n    b = ndb.StringProperty()", "piece": "a = ndb.StringProperty()"}
{"function_name": "testDeleteValue", "function_define": "    class A(ndb.Model):\n    a = ndb.StringProperty()\n    b = ndb.StringProperty()", "piece": "a = ndb.StringProperty()"}
{"function_name": "testHasValue", "function_define": "    class Foo(ndb.Model):\n    b = ndb.StringProperty()\n    foo = Foo()", "piece": "b = ndb.StringProperty()"}
{"function_name": "testNormal", "function_define": "    self.inst.put()\n    self.inst.a = 'cdg'\n    self.inst.put()", "piece": "self.inst.a = 'cdg'"}
{"function_name": "testInTxn", "function_define": "    fut.add_callback(AssertInTxn)\n    fut.get_result()\n    ndb.transaction(RunAssert)", "piece": "fut.get_result()"}
{"function_name": "testSingleFuture", "function_define": "    f = ndb.Future()\n    self.assertFalse(f.done())\n    self.assertFalse(mf.done())", "piece": "self.assertFalse(f.done())"}
{"function_name": "testManyFutures", "function_define": "    self.assertFalse(mf.done())\n    for f in futures:\n    f.set_result(None)", "piece": "for f in futures:"}
{"function_name": "parseConfig", "function_define": "    global config\n    lines = config_raw.splitlines()\n    for line in lines:", "piece": "lines = config_raw.splitlines()"}
{"function_name": "nisa_projection", "function_define": "    Parameters:\n    years: integer\n    annual_depoist: integer", "piece": "years: integer"}
{"function_name": "bron_kerbosch", "function_define": "    if not any((p, x)):\n    print(r)\n    for v in p[:]:", "piece": "print(r)"}
{"function_name": "coefficient", "function_define": "    local_coefficient = {}\n    medium_coefficient = 0.0\n    for v in p:", "piece": "medium_coefficient = 0.0"}
{"function_name": "run_rmsynth", "function_define": "    phiNoise_radm2 (float): ????\n    showPlots (bool): Show plots?\n    verbose (bool): Verbosity.", "piece": "showPlots (bool): Show plots?"}
{"function_name": "saveOutput", "function_define": "    if verbose:\n    if verbose:\n    print('> %s' % outFile)", "piece": "if verbose:"}
{"function_name": "update_attribs", "function_define": "    self.resolution = resolution\n    self.framerate = framerate\n    time.sleep(0.1)", "piece": "self.framerate = framerate"}
{"function_name": "test_jtype_only", "function_define": "    for jtype in VALID_JTYPES:\n    d = DaemonID(jtype)\n    assert d.jtype == jtype", "piece": "d = DaemonID(jtype)"}
{"function_name": "test_jtype_jid", "function_define": "    an_id = uuid.uuid4()\n    for jtype in VALID_JTYPES:\n    d = DaemonID(f'{jtype}-{an_id}')", "piece": "for jtype in VALID_JTYPES:"}
{"function_name": "test_id_raise", "function_define": "    an_id = uuid.uuid4()\n    with pytest.raises(TypeError):\n    DaemonID(an_id)", "piece": "with pytest.raises(TypeError):"}
{"function_name": "getdnsinfo", "function_define": "    print('\\nA Record:')\n    for x in arec:\n    print(x)", "piece": "for x in arec:"}
{"function_name": "getsubdomain", "function_define": "    protocol = seprateProtocol(url)\n    if len(url.split('.')) > 3:\n    except IndexError:", "piece": "if len(url.split('.')) > 3:"}
{"function_name": "test_bn_split", "function_define": "    fns = FnDict()\n    fused_bn1_output = fused_bn1(x)\n    item0 = tuple_getitem(output, 0)", "piece": "fused_bn1_output = fused_bn1(x)"}
